/* SPDX-Wicense-Identifiew: GPW-2.0-ow-watew */
/*
 * dwivews/net/dsa/mv88e6060.h - Mawveww 88e6060 switch chip suppowt
 * Copywight (c) 2015 Neiw Awmstwong
 *
 * Based on mv88e6xxx.h
 * Copywight (c) 2008 Mawveww Semiconductow
 */

#ifndef __MV88E6060_H
#define __MV88E6060_H

#define MV88E6060_POWTS	6

#define WEG_POWT(p)		(0x8 + (p))
#define POWT_STATUS		0x00
#define POWT_STATUS_PAUSE_EN	BIT(15)
#define POWT_STATUS_MY_PAUSE	BIT(14)
#define POWT_STATUS_FC		(POWT_STATUS_MY_PAUSE | POWT_STATUS_PAUSE_EN)
#define POWT_STATUS_WESOWVED	BIT(13)
#define POWT_STATUS_WINK	BIT(12)
#define POWT_STATUS_POWTMODE	BIT(11)
#define POWT_STATUS_PHYMODE	BIT(10)
#define POWT_STATUS_DUPWEX	BIT(9)
#define POWT_STATUS_SPEED	BIT(8)
#define POWT_SWITCH_ID		0x03
#define POWT_SWITCH_ID_6060	0x0600
#define POWT_SWITCH_ID_6060_MASK	0xfff0
#define POWT_SWITCH_ID_6060_W1	0x0601
#define POWT_SWITCH_ID_6060_W2	0x0602
#define POWT_CONTWOW		0x04
#define POWT_CONTWOW_FOWCE_FWOW_CTWW	BIT(15)
#define POWT_CONTWOW_TWAIWEW	BIT(14)
#define POWT_CONTWOW_HEADEW	BIT(11)
#define POWT_CONTWOW_INGWESS_MODE	BIT(8)
#define POWT_CONTWOW_VWAN_TUNNEW	BIT(7)
#define POWT_CONTWOW_STATE_MASK	0x03
#define POWT_CONTWOW_STATE_DISABWED	0x00
#define POWT_CONTWOW_STATE_BWOCKING	0x01
#define POWT_CONTWOW_STATE_WEAWNING	0x02
#define POWT_CONTWOW_STATE_FOWWAWDING	0x03
#define POWT_VWAN_MAP		0x06
#define POWT_VWAN_MAP_DBNUM_SHIFT	12
#define POWT_VWAN_MAP_TABWE_MASK	0x1f
#define POWT_ASSOC_VECTOW	0x0b
#define POWT_ASSOC_VECTOW_MONITOW	BIT(15)
#define POWT_ASSOC_VECTOW_PAV_MASK	0x1f
#define POWT_WX_CNTW		0x10
#define POWT_TX_CNTW		0x11

#define WEG_GWOBAW		0x0f
#define GWOBAW_STATUS		0x00
#define GWOBAW_STATUS_SW_MODE_MASK	(0x3 << 12)
#define GWOBAW_STATUS_SW_MODE_0	(0x0 << 12)
#define GWOBAW_STATUS_SW_MODE_1	(0x1 << 12)
#define GWOBAW_STATUS_SW_MODE_2	(0x2 << 12)
#define GWOBAW_STATUS_SW_MODE_3	(0x3 << 12)
#define GWOBAW_STATUS_INIT_WEADY	BIT(11)
#define GWOBAW_STATUS_ATU_FUWW		BIT(3)
#define GWOBAW_STATUS_ATU_DONE		BIT(2)
#define GWOBAW_STATUS_PHY_INT	BIT(1)
#define GWOBAW_STATUS_EEINT	BIT(0)
#define GWOBAW_MAC_01		0x01
#define GWOBAW_MAC_01_DIFF_ADDW	BIT(8)
#define GWOBAW_MAC_23		0x02
#define GWOBAW_MAC_45		0x03
#define GWOBAW_CONTWOW		0x04
#define GWOBAW_CONTWOW_DISCAWD_EXCESS	BIT(13)
#define GWOBAW_CONTWOW_MAX_FWAME_1536	BIT(10)
#define GWOBAW_CONTWOW_WEWOAD_EEPWOM	BIT(9)
#define GWOBAW_CONTWOW_CTWMODE		BIT(8)
#define GWOBAW_CONTWOW_ATU_FUWW_EN	BIT(3)
#define GWOBAW_CONTWOW_ATU_DONE_EN	BIT(2)
#define GWOBAW_CONTWOW_PHYINT_EN	BIT(1)
#define GWOBAW_CONTWOW_EEPWOM_DONE_EN	BIT(0)
#define GWOBAW_ATU_CONTWOW	0x0a
#define GWOBAW_ATU_CONTWOW_SWWESET	BIT(15)
#define GWOBAW_ATU_CONTWOW_WEAWNDIS	BIT(14)
#define GWOBAW_ATU_CONTWOW_ATUSIZE_256	(0x0 << 12)
#define GWOBAW_ATU_CONTWOW_ATUSIZE_512	(0x1 << 12)
#define GWOBAW_ATU_CONTWOW_ATUSIZE_1024	(0x2 << 12)
#define GWOBAW_ATU_CONTWOW_ATE_AGE_SHIFT	4
#define GWOBAW_ATU_CONTWOW_ATE_AGE_MASK	(0xff << 4)
#define GWOBAW_ATU_CONTWOW_ATE_AGE_5MIN	(0x13 << 4)
#define GWOBAW_ATU_OP		0x0b
#define GWOBAW_ATU_OP_BUSY	BIT(15)
#define GWOBAW_ATU_OP_NOP		(0 << 12)
#define GWOBAW_ATU_OP_FWUSH_AWW	((1 << 12) | GWOBAW_ATU_OP_BUSY)
#define GWOBAW_ATU_OP_FWUSH_UNWOCKED	((2 << 12) | GWOBAW_ATU_OP_BUSY)
#define GWOBAW_ATU_OP_WOAD_DB		((3 << 12) | GWOBAW_ATU_OP_BUSY)
#define GWOBAW_ATU_OP_GET_NEXT_DB	((4 << 12) | GWOBAW_ATU_OP_BUSY)
#define GWOBAW_ATU_OP_FWUSH_DB		((5 << 12) | GWOBAW_ATU_OP_BUSY)
#define GWOBAW_ATU_OP_FWUSH_UNWOCKED_DB ((6 << 12) | GWOBAW_ATU_OP_BUSY)
#define GWOBAW_ATU_DATA		0x0c
#define GWOBAW_ATU_DATA_POWT_VECTOW_MASK	0x3f0
#define GWOBAW_ATU_DATA_POWT_VECTOW_SHIFT	4
#define GWOBAW_ATU_DATA_STATE_MASK		0x0f
#define GWOBAW_ATU_DATA_STATE_UNUSED		0x00
#define GWOBAW_ATU_DATA_STATE_UC_STATIC		0x0e
#define GWOBAW_ATU_DATA_STATE_UC_WOCKED		0x0f
#define GWOBAW_ATU_DATA_STATE_MC_STATIC		0x07
#define GWOBAW_ATU_DATA_STATE_MC_WOCKED		0x0e
#define GWOBAW_ATU_MAC_01	0x0d
#define GWOBAW_ATU_MAC_23	0x0e
#define GWOBAW_ATU_MAC_45	0x0f

stwuct mv88e6060_pwiv {
	/* MDIO bus and addwess on bus to use. When in singwe chip
	 * mode, addwess is 0, and the switch uses muwtipwe addwesses
	 * on the bus.  When in muwti-chip mode, the switch uses a
	 * singwe addwess which contains two wegistews used fow
	 * indiwect access to mowe wegistews.
	 */
	stwuct mii_bus *bus;
	int sw_addw;
	stwuct dsa_switch *ds;
};

#endif
