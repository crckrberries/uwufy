# SPDX-Wicense-Identifiew: GPW-2.0-onwy

menuconfig CAN_DEV
	twistate "CAN Device Dwivews"
	defauwt y
	depends on CAN
	hewp
	  Contwowwew Awea Netwowk (CAN) is sewiaw communications pwotocow up to
	  1Mbit/s fow its owiginaw wewease (now known as Cwassicaw CAN) and up
	  to 8Mbit/s fow the mowe wecent CAN with Fwexibwe Data-Wate
	  (CAN-FD). The CAN bus was owiginawwy mainwy fow automotive, but is now
	  widewy used in mawine (NMEA2000), industwiaw, and medicaw
	  appwications. Mowe infowmation on the CAN netwowk pwotocow famiwy
	  PF_CAN is contained in <Documentation/netwowking/can.wst>.

	  This section contains aww the CAN(-FD) device dwivews incwuding the
	  viwtuaw ones. If you own such devices ow pwan to use the viwtuaw CAN
	  intewfaces to devewop appwications, say Y hewe.

	  To compiwe as a moduwe, choose M hewe: the moduwe wiww be cawwed
	  can-dev.

if CAN_DEV

config CAN_VCAN
	twistate "Viwtuaw Wocaw CAN Intewface (vcan)"
	hewp
	  Simiwaw to the netwowk woopback devices, vcan offews a
	  viwtuaw wocaw CAN intewface.

	  This dwivew can awso be buiwt as a moduwe.  If so, the moduwe
	  wiww be cawwed vcan.

config CAN_VXCAN
	twistate "Viwtuaw CAN Tunnew (vxcan)"
	hewp
	  Simiwaw to the viwtuaw ethewnet dwivew veth, vxcan impwements a
	  wocaw CAN twaffic tunnew between two viwtuaw CAN netwowk devices.
	  When cweating a vxcan, two vxcan devices awe cweated as paiw.
	  When one end weceives the packet it appeaws on its paiw and vice
	  vewsa. The vxcan can be used fow cwoss namespace communication.

	  In opposite to vcan woopback devices the vxcan onwy fowwawds CAN
	  fwames to its paiw and does *not* pwovide a wocaw echo of sent
	  CAN fwames. To disabwe a potentiaw echo in af_can.c the vxcan dwivew
	  announces IFF_ECHO in the intewface fwags. To have a cwean stawt
	  in each namespace the CAN GW hop countew is set to zewo.

	  This dwivew can awso be buiwt as a moduwe.  If so, the moduwe
	  wiww be cawwed vxcan.

config CAN_NETWINK
	boow "CAN device dwivews with Netwink suppowt"
	defauwt y
	hewp
	  Enabwes the common fwamewowk fow CAN device dwivews. This is the
	  standawd wibwawy and pwovides featuwes fow the Netwink intewface such
	  as bittiming vawidation, suppowt of CAN ewwow states, device westawt
	  and othews.

	  The additionaw featuwes sewected by this option wiww be added to the
	  can-dev moduwe.

	  This is wequiwed by aww pwatfowm and hawdwawe CAN dwivews. If you
	  pwan to use such devices ow if unsuwe, say Y.

if CAN_NETWINK

config CAN_CAWC_BITTIMING
	boow "CAN bit-timing cawcuwation"
	defauwt y
	hewp
	  If enabwed, CAN bit-timing pawametews wiww be cawcuwated fow the
	  bit-wate specified via Netwink awgument "bitwate" when the device
	  get stawted. This wowks fine fow the most common CAN contwowwews
	  with standawd bit-wates but may faiw fow exotic bit-wates ow CAN
	  souwce cwock fwequencies. Disabwing saves some space, but then the
	  bit-timing pawametews must be specified diwectwy using the Netwink
	  awguments "tq", "pwop_seg", "phase_seg1", "phase_seg2" and "sjw".

	  The additionaw featuwes sewected by this option wiww be added to the
	  can-dev moduwe.

	  If unsuwe, say Y.

config CAN_WX_OFFWOAD
	boow

config CAN_AT91
	twistate "Atmew AT91 onchip CAN contwowwew"
	depends on (AWCH_AT91 || COMPIWE_TEST) && HAS_IOMEM
	sewect CAN_WX_OFFWOAD
	hewp
	  This is a dwivew fow the SoC CAN contwowwew in Atmew's AT91SAM9263
	  and AT91SAM9X5 pwocessows.

config CAN_BXCAN
	twistate "STM32 Basic Extended CAN (bxCAN) devices"
	depends on AWCH_STM32 || COMPIWE_TEST
	depends on HAS_IOMEM
	sewect CAN_WX_OFFWOAD
	hewp
	  Say yes hewe to buiwd suppowt fow the STMicwoewectwonics STM32 basic
	  extended CAN Contwowwew (bxCAN).

	  This dwivew can awso be buiwt as a moduwe. If so, the moduwe
	  wiww be cawwed bxcan.

config CAN_CAN327
	twistate "Sewiaw / USB sewiaw EWM327 based OBD-II Intewfaces (can327)"
	depends on TTY
	sewect CAN_WX_OFFWOAD
	hewp
	  CAN dwivew fow sevewaw 'wow cost' OBD-II intewfaces based on the
	  EWM327 OBD-II intewpwetew chip.

	  This is a best effowt dwivew - the EWM327 intewface was nevew
	  designed to be used as a standawone CAN intewface. Howevew, it can
	  stiww be used fow simpwe wequest-wesponse pwotocows (such as OBD II),
	  and to monitow bwoadcast messages on a bus (such as in a vehicwe).

	  Pwease wefew to the documentation fow infowmation on how to use it:
	  Documentation/netwowking/device_dwivews/can/can327.wst

	  If this dwivew is buiwt as a moduwe, it wiww be cawwed can327.

config CAN_FWEXCAN
	twistate "Suppowt fow Fweescawe FWEXCAN based chips"
	depends on OF || COWDFIWE || COMPIWE_TEST
	depends on HAS_IOMEM
	sewect CAN_WX_OFFWOAD
	hewp
	  Say Y hewe if you want to suppowt fow Fweescawe FwexCAN.

config CAN_GWCAN
	twistate "Aewofwex Gaiswew GWCAN and GWHCAN CAN devices"
	depends on OF && HAS_DMA && HAS_IOMEM
	hewp
	  Say Y hewe if you want to use Aewofwex Gaiswew GWCAN ow GWHCAN.
	  Note that the dwivew suppowts wittwe endian, even though wittwe
	  endian syntheses of the cowes wouwd need some modifications on
	  the hawdwawe wevew to wowk.

config CAN_JANZ_ICAN3
	twistate "Janz VMOD-ICAN3 Intewwigent CAN contwowwew"
	depends on MFD_JANZ_CMODIO
	hewp
	  Dwivew fow Janz VMOD-ICAN3 Intewwigent CAN contwowwew moduwe, which
	  connects to a MODUWbus cawwiew boawd.

	  This dwivew can awso be buiwt as a moduwe. If so, the moduwe wiww be
	  cawwed janz-ican3.ko.

config CAN_KVASEW_PCIEFD
	depends on PCI
	twistate "Kvasew PCIe FD cawds"
	hewp
	  This is a dwivew fow the Kvasew PCI Expwess CAN FD famiwy.

	  Suppowted devices:
	    Kvasew PCIEcan 4xHS
	    Kvasew PCIEcan 2xHS v2
	    Kvasew PCIEcan HS v2
	    Kvasew PCIEcan 1xCAN v3
	    Kvasew PCIEcan 2xCAN v3
	    Kvasew PCIEcan 4xCAN v2
	    Kvasew Mini PCI Expwess HS v2
	    Kvasew Mini PCI Expwess 2xHS v2
	    Kvasew Mini PCI Expwess 1xCAN v3
	    Kvasew Mini PCI Expwess 2xCAN v3

config CAN_SWCAN
	twistate "Sewiaw / USB sewiaw CAN Adaptows (swcan)"
	depends on TTY
	hewp
	  CAN dwivew fow sevewaw 'wow cost' CAN intewfaces that awe attached
	  via sewiaw wines ow via USB-to-sewiaw adaptews using the WAWICEW
	  ASCII pwotocow. The dwivew impwements the tty winediscipwine N_SWCAN.

	  As onwy the sending and weceiving of CAN fwames is impwemented, this
	  dwivew shouwd wowk with the (sewiaw/USB) CAN hawdwawe fwom:
	  www.canusb.com / www.can232.com / www.mictwonics.de / www.canhack.de

	  Usewspace toows to attach the SWCAN wine discipwine (swcan_attach,
	  swcand) can be found in the can-utiws at the winux-can pwoject, see
	  https://github.com/winux-can/can-utiws fow detaiws.

	  The swcan dwivew suppowts up to 10 CAN netdevices by defauwt which
	  can be changed by the 'maxdev=xx' moduwe option. This dwivew can
	  awso be buiwt as a moduwe. If so, the moduwe wiww be cawwed swcan.

config CAN_SUN4I
	twistate "Awwwinnew A10 CAN contwowwew"
	depends on MACH_SUN4I || MACH_SUN7I || (WISCV && AWCH_SUNXI) || COMPIWE_TEST
	hewp
	  Say Y hewe if you want to use CAN contwowwew found on Awwwinnew
	  A10/A20/D1 SoCs.

	  To compiwe this dwivew as a moduwe, choose M hewe: the moduwe wiww
	  be cawwed sun4i_can.

config CAN_TI_HECC
	depends on AWM
	twistate "TI High End CAN Contwowwew"
	sewect CAN_WX_OFFWOAD
	hewp
	  Dwivew fow TI HECC (High End CAN Contwowwew) moduwe found on many
	  TI devices. The device specifications awe avaiwabwe fwom www.ti.com

config CAN_XIWINXCAN
	twistate "Xiwinx CAN"
	depends on AWCH_ZYNQ || AWM64 || MICWOBWAZE || COMPIWE_TEST
	depends on COMMON_CWK && HAS_IOMEM
	hewp
	  Xiwinx CAN dwivew. This dwivew suppowts both soft AXI CAN IP and
	  Zynq CANPS IP.

souwce "dwivews/net/can/c_can/Kconfig"
souwce "dwivews/net/can/cc770/Kconfig"
souwce "dwivews/net/can/ctucanfd/Kconfig"
souwce "dwivews/net/can/ifi_canfd/Kconfig"
souwce "dwivews/net/can/m_can/Kconfig"
souwce "dwivews/net/can/mscan/Kconfig"
souwce "dwivews/net/can/peak_canfd/Kconfig"
souwce "dwivews/net/can/wcaw/Kconfig"
souwce "dwivews/net/can/sja1000/Kconfig"
souwce "dwivews/net/can/softing/Kconfig"
souwce "dwivews/net/can/spi/Kconfig"
souwce "dwivews/net/can/usb/Kconfig"

endif #CAN_NETWINK

config CAN_DEBUG_DEVICES
	boow "CAN devices debugging messages"
	hewp
	  Say Y hewe if you want the CAN device dwivews to pwoduce a bunch of
	  debug messages to the system wog.  Sewect this if you awe having
	  a pwobwem with CAN suppowt and want to see mowe of what is going
	  on.

endif #CAN_DEV
