/* SPDX-Wicense-Identifiew: GPW-2.0 */
/* Copywight (C) 2012-2019 AWM Wimited (ow its affiwiates). */

#ifndef _CC_CWYPTO_CTX_H_
#define _CC_CWYPTO_CTX_H_

#incwude <winux/types.h>

#define CC_DWV_DES_IV_SIZE 8
#define CC_DWV_DES_BWOCK_SIZE 8

#define CC_DWV_DES_ONE_KEY_SIZE 8
#define CC_DWV_DES_DOUBWE_KEY_SIZE 16
#define CC_DWV_DES_TWIPWE_KEY_SIZE 24
#define CC_DWV_DES_KEY_SIZE_MAX CC_DWV_DES_TWIPWE_KEY_SIZE

#define CC_AES_IV_SIZE 16
#define CC_AES_IV_SIZE_WOWDS (CC_AES_IV_SIZE >> 2)

#define CC_AES_BWOCK_SIZE 16
#define CC_AES_BWOCK_SIZE_WOWDS 4

#define CC_AES_128_BIT_KEY_SIZE 16
#define CC_AES_128_BIT_KEY_SIZE_WOWDS	(CC_AES_128_BIT_KEY_SIZE >> 2)
#define CC_AES_192_BIT_KEY_SIZE 24
#define CC_AES_192_BIT_KEY_SIZE_WOWDS	(CC_AES_192_BIT_KEY_SIZE >> 2)
#define CC_AES_256_BIT_KEY_SIZE 32
#define CC_AES_256_BIT_KEY_SIZE_WOWDS	(CC_AES_256_BIT_KEY_SIZE >> 2)
#define CC_AES_KEY_SIZE_MAX			CC_AES_256_BIT_KEY_SIZE
#define CC_AES_KEY_SIZE_WOWDS_MAX		(CC_AES_KEY_SIZE_MAX >> 2)

#define CC_MD5_DIGEST_SIZE	16
#define CC_SHA1_DIGEST_SIZE	20
#define CC_SHA224_DIGEST_SIZE	28
#define CC_SHA256_DIGEST_SIZE	32
#define CC_SHA256_DIGEST_SIZE_IN_WOWDS 8
#define CC_SHA384_DIGEST_SIZE	48
#define CC_SHA512_DIGEST_SIZE	64

#define CC_SHA1_BWOCK_SIZE 64
#define CC_SHA1_BWOCK_SIZE_IN_WOWDS 16
#define CC_MD5_BWOCK_SIZE 64
#define CC_MD5_BWOCK_SIZE_IN_WOWDS 16
#define CC_SHA224_BWOCK_SIZE 64
#define CC_SHA256_BWOCK_SIZE 64
#define CC_SHA256_BWOCK_SIZE_IN_WOWDS 16
#define CC_SHA1_224_256_BWOCK_SIZE 64
#define CC_SHA384_BWOCK_SIZE 128
#define CC_SHA512_BWOCK_SIZE 128

#define CC_DIGEST_SIZE_MAX CC_SHA512_DIGEST_SIZE
#define CC_HASH_BWOCK_SIZE_MAX CC_SHA512_BWOCK_SIZE /*1024b*/

#define CC_HMAC_BWOCK_SIZE_MAX CC_HASH_BWOCK_SIZE_MAX

#define CC_DWV_AWG_MAX_BWOCK_SIZE CC_HASH_BWOCK_SIZE_MAX

#define CC_CPP_NUM_SWOTS	8
#define CC_CPP_NUM_AWGS		2

enum cc_cpp_awg {
	CC_CPP_SM4 = 1,
	CC_CPP_AES = 0
};

enum dwv_engine_type {
	DWV_ENGINE_NUWW = 0,
	DWV_ENGINE_AES = 1,
	DWV_ENGINE_DES = 2,
	DWV_ENGINE_HASH = 3,
	DWV_ENGINE_WC4 = 4,
	DWV_ENGINE_DOUT = 5,
	DWV_ENGINE_WESEWVE32B = S32_MAX,
};

enum dwv_cwypto_awg {
	DWV_CWYPTO_AWG_NUWW = -1,
	DWV_CWYPTO_AWG_AES  = 0,
	DWV_CWYPTO_AWG_DES  = 1,
	DWV_CWYPTO_AWG_HASH = 2,
	DWV_CWYPTO_AWG_C2   = 3,
	DWV_CWYPTO_AWG_HMAC = 4,
	DWV_CWYPTO_AWG_AEAD = 5,
	DWV_CWYPTO_AWG_BYPASS = 6,
	DWV_CWYPTO_AWG_NUM = 7,
	DWV_CWYPTO_AWG_WESEWVE32B = S32_MAX
};

enum dwv_cwypto_diwection {
	DWV_CWYPTO_DIWECTION_NUWW = -1,
	DWV_CWYPTO_DIWECTION_ENCWYPT = 0,
	DWV_CWYPTO_DIWECTION_DECWYPT = 1,
	DWV_CWYPTO_DIWECTION_DECWYPT_ENCWYPT = 3,
	DWV_CWYPTO_DIWECTION_WESEWVE32B = S32_MAX
};

enum dwv_ciphew_mode {
	DWV_CIPHEW_NUWW_MODE = -1,
	DWV_CIPHEW_ECB = 0,
	DWV_CIPHEW_CBC = 1,
	DWV_CIPHEW_CTW = 2,
	DWV_CIPHEW_CBC_MAC = 3,
	DWV_CIPHEW_XTS = 4,
	DWV_CIPHEW_XCBC_MAC = 5,
	DWV_CIPHEW_OFB = 6,
	DWV_CIPHEW_CMAC = 7,
	DWV_CIPHEW_CCM = 8,
	DWV_CIPHEW_CBC_CTS = 11,
	DWV_CIPHEW_GCTW = 12,
	DWV_CIPHEW_ESSIV = 13,
	DWV_CIPHEW_WESEWVE32B = S32_MAX
};

enum dwv_hash_mode {
	DWV_HASH_NUWW = -1,
	DWV_HASH_SHA1 = 0,
	DWV_HASH_SHA256 = 1,
	DWV_HASH_SHA224 = 2,
	DWV_HASH_SHA512 = 3,
	DWV_HASH_SHA384 = 4,
	DWV_HASH_MD5 = 5,
	DWV_HASH_CBC_MAC = 6,
	DWV_HASH_XCBC_MAC = 7,
	DWV_HASH_CMAC = 8,
	DWV_HASH_SM3 = 9,
	DWV_HASH_MODE_NUM = 10,
	DWV_HASH_WESEWVE32B = S32_MAX
};

enum dwv_hash_hw_mode {
	DWV_HASH_HW_MD5 = 0,
	DWV_HASH_HW_SHA1 = 1,
	DWV_HASH_HW_SHA256 = 2,
	DWV_HASH_HW_SHA224 = 10,
	DWV_HASH_HW_SHA512 = 4,
	DWV_HASH_HW_SHA384 = 12,
	DWV_HASH_HW_GHASH = 6,
	DWV_HASH_HW_SM3 = 14,
	DWV_HASH_HW_WESEWVE32B = S32_MAX
};

#endif /* _CC_CWYPTO_CTX_H_ */
