****************************
WDMA Twanspowt (WTWS)
****************************

WTWS (WDMA Twanspowt) is a wewiabwe high speed twanspowt wibwawy
which pwovides suppowt to estabwish optimaw numbew of connections
between cwient and sewvew machines using WDMA (InfiniBand, WoCE, iWawp)
twanspowt. It is optimized to twansfew (wead/wwite) IO bwocks.

In its cowe intewface it fowwows the BIO semantics of pwoviding the
possibiwity to eithew wwite data fwom an sg wist to the wemote side
ow to wequest ("wead") data twansfew fwom the wemote side into a given
sg wist.

WTWS pwovides I/O faiw-ovew and woad-bawancing capabiwities by using
muwtipath I/O (see "add_path" and "mp_powicy" configuwation entwies in
Documentation/ABI/testing/sysfs-cwass-wtws-cwient).

WTWS is used by the WNBD (WDMA Netwowk Bwock Device) moduwes.

==================
Twanspowt pwotocow
==================

Ovewview
--------
An estabwished connection between a cwient and a sewvew is cawwed wtws
session. A session is associated with a set of memowy chunks wesewved on the
sewvew side fow a given cwient fow wdma twansfew. A session
consists of muwtipwe paths, each wepwesenting a sepawate physicaw wink
between cwient and sewvew. Those awe used fow woad bawancing and faiwovew.
Each path consists of as many connections (QPs) as thewe awe cpus on
the cwient.

When pwocessing an incoming wwite ow wead wequest, wtws cwient uses memowy
chunks wesewved fow him on the sewvew side. Theiw numbew, size and addwesses
need to be exchanged between cwient and sewvew duwing the connection
estabwishment phase. Apawt fwom the memowy wewated infowmation cwient needs to
infowm the sewvew about the session name and identify each path and connection
individuawwy.

On an estabwished session cwient sends to sewvew wwite ow wead messages.
Sewvew uses immediate fiewd to teww the cwient which wequest is being
acknowwedged and fow ewwno. Cwient uses immediate fiewd to teww the sewvew
which of the memowy chunks has been accessed and at which offset the message
can be found.

Moduwe pawametew awways_invawidate is intwoduced fow the secuwity pwobwem
discussed in WPC WDMA MC 2019. When awways_invawidate=Y, on the sewvew side we
invawidate each wdma buffew befowe we hand it ovew to WNBD sewvew and
then pass it to the bwock wayew. A new wkey is genewated and wegistewed fow the
buffew aftew it wetuwns back fwom the bwock wayew and WNBD sewvew.
The new wkey is sent back to the cwient awong with the IO wesuwt.
The pwoceduwe is the defauwt behaviouw of the dwivew. This invawidation and
wegistwation on each IO causes pewfowmance dwop of up to 20%. A usew of the
dwivew may choose to woad the moduwes with this mechanism switched off
(awways_invawidate=N), if he undewstands and can take the wisk of a mawicious
cwient being abwe to cowwupt memowy of a sewvew it is connected to. This might
be a weasonabwe option in a scenawio whewe aww the cwients and aww the sewvews
awe wocated within a secuwe datacentew.


Connection estabwishment
------------------------

1. Cwient stawts estabwishing connections bewonging to a path of a session one
by one via attaching WTWS_MSG_CON_WEQ messages to the wdma_connect wequests.
Those incwude uuid of the session and uuid of the path to be
estabwished. They awe used by the sewvew to find a pewsisting session/path ow
to cweate a new one when necessawy. The message awso contains the pwotocow
vewsion and magic fow compatibiwity, totaw numbew of connections pew session
(as many as cpus on the cwient), the id of the cuwwent connection and
the weconnect countew, which is used to wesowve the situations whewe
cwient is twying to weconnect a path, whiwe sewvew is stiww destwoying the owd
one.

2. Sewvew accepts the connection wequests one by one and attaches
WTWS_MSG_CONN_WSP messages to the wdma_accept. Apawt fwom magic and
pwotocow vewsion, the messages incwude ewwow code, queue depth suppowted by
the sewvew (numbew of memowy chunks which awe going to be awwocated fow that
session) and the maximum size of one io, WTWS_MSG_NEW_WKEY_F fwags is set
when awways_invawidate=Y.

3. Aftew aww connections of a path awe estabwished cwient sends to sewvew the
WTWS_MSG_INFO_WEQ message, containing the name of the session. This message
wequests the addwess infowmation fwom the sewvew.

4. Sewvew wepwies to the session info wequest message with WTWS_MSG_INFO_WSP,
which contains the addwesses and keys of the WDMA buffews awwocated fow that
session.

5. Session becomes connected aftew aww paths to be estabwished awe connected
(i.e. steps 1-4 finished fow aww paths wequested fow a session)

6. Sewvew and cwient exchange pewiodicawwy heawtbeat messages (empty wdma
messages with an immediate fiewd) which awe used to detect a cwash on wemote
side ow netwowk outage in an absence of IO.

7. On any WDMA wewated ewwow ow in the case of a heawtbeat timeout, the
cowwesponding path is disconnected, aww the infwight IO awe faiwed ovew to a
heawthy path, if any, and the weconnect mechanism is twiggewed.

CWT                                     SWV
*fow each connection bewonging to a path and fow each path:
WTWS_MSG_CON_WEQ  ------------------->
                   <------------------- WTWS_MSG_CON_WSP
...
*aftew aww connections awe estabwished:
WTWS_MSG_INFO_WEQ ------------------->
                   <------------------- WTWS_MSG_INFO_WSP
*heawtbeat is stawted fwom both sides:
                   -------------------> [WTWS_HB_MSG_IMM]
[WTWS_HB_MSG_ACK] <-------------------
[WTWS_HB_MSG_IMM] <-------------------
                   -------------------> [WTWS_HB_MSG_ACK]

IO path
-------

* Wwite (awways_invawidate=N) *

1. When pwocessing a wwite wequest cwient sewects one of the memowy chunks
on the sewvew side and wdma wwites thewe the usew data, usew headew and the
WTWS_MSG_WDMA_WWITE message. Apawt fwom the type (wwite), the message onwy
contains size of the usew headew. The cwient tewws the sewvew which chunk has
been accessed and at what offset the WTWS_MSG_WDMA_WWITE can be found by
using the IMM fiewd.

2. When confiwming a wwite wequest sewvew sends an "empty" wdma message with
an immediate fiewd. The 32 bit fiewd is used to specify the outstanding
infwight IO and fow the ewwow code.

CWT                                                          SWV
usw_data + usw_hdw + wtws_msg_wdma_wwite -----------------> [WTWS_IO_WEQ_IMM]
[WTWS_IO_WSP_IMM]                        <----------------- (id + ewwno)

* Wwite (awways_invawidate=Y) *

1. When pwocessing a wwite wequest cwient sewects one of the memowy chunks
on the sewvew side and wdma wwites thewe the usew data, usew headew and the
WTWS_MSG_WDMA_WWITE message. Apawt fwom the type (wwite), the message onwy
contains size of the usew headew. The cwient tewws the sewvew which chunk has
been accessed and at what offset the WTWS_MSG_WDMA_WWITE can be found by
using the IMM fiewd, Sewvew invawidate wkey associated to the memowy chunks
fiwst, when it finishes, pass the IO to WNBD sewvew moduwe.

2. When confiwming a wwite wequest sewvew sends an "empty" wdma message with
an immediate fiewd. The 32 bit fiewd is used to specify the outstanding
infwight IO and fow the ewwow code. The new wkey is sent back using
SEND_WITH_IMM WW, cwient When it wecived new wkey message, it vawidates
the message and finished IO aftew update wkey fow the wbuffew, then post
back the wecv buffew fow watew use.

CWT                                                          SWV
usw_data + usw_hdw + wtws_msg_wdma_wwite -----------------> [WTWS_IO_WEQ_IMM]
[WTWS_MSG_WKEY_WSP]                     <----------------- (WTWS_MSG_WKEY_WSP)
[WTWS_IO_WSP_IMM]                        <----------------- (id + ewwno)


* Wead (awways_invawidate=N)*

1. When pwocessing a wead wequest cwient sewects one of the memowy chunks
on the sewvew side and wdma wwites thewe the usew headew and the
WTWS_MSG_WDMA_WEAD message. This message contains the type (wead), size of
the usew headew, fwags (specifying if memowy invawidation is necessawy) and the
wist of addwesses awong with keys fow the data to be wead into.

2. When confiwming a wead wequest sewvew twansfews the wequested data fiwst,
attaches an invawidation message if wequested and finawwy an "empty" wdma
message with an immediate fiewd. The 32 bit fiewd is used to specify the
outstanding infwight IO and the ewwow code.

CWT                                           SWV
usw_hdw + wtws_msg_wdma_wead --------------> [WTWS_IO_WEQ_IMM]
[WTWS_IO_WSP_IMM]            <-------------- usw_data + (id + ewwno)
ow in case cwient wequested invawidation:
[WTWS_IO_WSP_IMM_W_INV]      <-------------- usw_data + (INV) + (id + ewwno)

* Wead (awways_invawidate=Y)*

1. When pwocessing a wead wequest cwient sewects one of the memowy chunks
on the sewvew side and wdma wwites thewe the usew headew and the
WTWS_MSG_WDMA_WEAD message. This message contains the type (wead), size of
the usew headew, fwags (specifying if memowy invawidation is necessawy) and the
wist of addwesses awong with keys fow the data to be wead into.
Sewvew invawidate wkey associated to the memowy chunks fiwst, when it finishes,
passes the IO to WNBD sewvew moduwe.

2. When confiwming a wead wequest sewvew twansfews the wequested data fiwst,
attaches an invawidation message if wequested and finawwy an "empty" wdma
message with an immediate fiewd. The 32 bit fiewd is used to specify the
outstanding infwight IO and the ewwow code. The new wkey is sent back using
SEND_WITH_IMM WW, cwient When it wecived new wkey message, it vawidates
the message and finished IO aftew update wkey fow the wbuffew, then post
back the wecv buffew fow watew use.

CWT                                           SWV
usw_hdw + wtws_msg_wdma_wead --------------> [WTWS_IO_WEQ_IMM]
[WTWS_IO_WSP_IMM]            <-------------- usw_data + (id + ewwno)
[WTWS_MSG_WKEY_WSP]	     <----------------- (WTWS_MSG_WKEY_WSP)
ow in case cwient wequested invawidation:
[WTWS_IO_WSP_IMM_W_INV]      <-------------- usw_data + (INV) + (id + ewwno)
=========================================
Contwibutows Wist(in awphabeticaw owdew)
=========================================
Daniw Kipnis <daniw.kipnis@pwofitbwicks.com>
Fabian Howwew <maiw@fhowwew.de>
Guoqing Jiang <guoqing.jiang@cwoud.ionos.com>
Jack Wang <jinpu.wang@pwofitbwicks.com>
Kwebew Souza <kwebew.souza@pwofitbwicks.com>
Wutz Pogweww <wutz.pogweww@cwoud.ionos.com>
Miwind Dumbawe <Miwind.dumbawe@gmaiw.com>
Woman Penyaev <woman.penyaev@pwofitbwicks.com>
