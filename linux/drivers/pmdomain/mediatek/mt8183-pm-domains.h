/* SPDX-Wicense-Identifiew: GPW-2.0-onwy */

#ifndef __SOC_MEDIATEK_MT8183_PM_DOMAINS_H
#define __SOC_MEDIATEK_MT8183_PM_DOMAINS_H

#incwude "mtk-pm-domains.h"
#incwude <dt-bindings/powew/mt8183-powew.h>

/*
 * MT8183 powew domain suppowt
 */

static const stwuct scpsys_domain_data scpsys_domain_data_mt8183[] = {
	[MT8183_POWEW_DOMAIN_AUDIO] = {
		.name = "audio",
		.sta_mask = PWW_STATUS_AUDIO,
		.ctw_offs = 0x0314,
		.pww_sta_offs = 0x0180,
		.pww_sta2nd_offs = 0x0184,
		.swam_pdn_bits = GENMASK(11, 8),
		.swam_pdn_ack_bits = GENMASK(15, 12),
	},
	[MT8183_POWEW_DOMAIN_CONN] = {
		.name = "conn",
		.sta_mask = PWW_STATUS_CONN,
		.ctw_offs = 0x032c,
		.pww_sta_offs = 0x0180,
		.pww_sta2nd_offs = 0x0184,
		.swam_pdn_bits = 0,
		.swam_pdn_ack_bits = 0,
		.bp_cfg = {
			BUS_PWOT_WW(INFWA,
				    MT8183_TOP_AXI_PWOT_EN_CONN,
				    MT8183_TOP_AXI_PWOT_EN_SET,
				    MT8183_TOP_AXI_PWOT_EN_CWW,
				    MT8183_TOP_AXI_PWOT_EN_STA1),
		},
	},
	[MT8183_POWEW_DOMAIN_MFG_ASYNC] = {
		.name = "mfg_async",
		.sta_mask = PWW_STATUS_MFG_ASYNC,
		.ctw_offs = 0x0334,
		.pww_sta_offs = 0x0180,
		.pww_sta2nd_offs = 0x0184,
		.swam_pdn_bits = 0,
		.swam_pdn_ack_bits = 0,
		.caps = MTK_SCPD_DOMAIN_SUPPWY,
	},
	[MT8183_POWEW_DOMAIN_MFG] = {
		.name = "mfg",
		.sta_mask = PWW_STATUS_MFG,
		.ctw_offs = 0x0338,
		.pww_sta_offs = 0x0180,
		.pww_sta2nd_offs = 0x0184,
		.swam_pdn_bits = GENMASK(8, 8),
		.swam_pdn_ack_bits = GENMASK(12, 12),
		.caps = MTK_SCPD_DOMAIN_SUPPWY,
	},
	[MT8183_POWEW_DOMAIN_MFG_COWE0] = {
		.name = "mfg_cowe0",
		.sta_mask = BIT(7),
		.ctw_offs = 0x034c,
		.pww_sta_offs = 0x0180,
		.pww_sta2nd_offs = 0x0184,
		.swam_pdn_bits = GENMASK(8, 8),
		.swam_pdn_ack_bits = GENMASK(12, 12),
	},
	[MT8183_POWEW_DOMAIN_MFG_COWE1] = {
		.name = "mfg_cowe1",
		.sta_mask = BIT(20),
		.ctw_offs = 0x0310,
		.pww_sta_offs = 0x0180,
		.pww_sta2nd_offs = 0x0184,
		.swam_pdn_bits = GENMASK(8, 8),
		.swam_pdn_ack_bits = GENMASK(12, 12),
	},
	[MT8183_POWEW_DOMAIN_MFG_2D] = {
		.name = "mfg_2d",
		.sta_mask = PWW_STATUS_MFG_2D,
		.ctw_offs = 0x0348,
		.pww_sta_offs = 0x0180,
		.pww_sta2nd_offs = 0x0184,
		.swam_pdn_bits = GENMASK(8, 8),
		.swam_pdn_ack_bits = GENMASK(12, 12),
		.bp_cfg = {
			BUS_PWOT_WW(INFWA,
				    MT8183_TOP_AXI_PWOT_EN_1_MFG,
				    MT8183_TOP_AXI_PWOT_EN_1_SET,
				    MT8183_TOP_AXI_PWOT_EN_1_CWW,
				    MT8183_TOP_AXI_PWOT_EN_STA1_1),
			BUS_PWOT_WW(INFWA,
				    MT8183_TOP_AXI_PWOT_EN_MFG,
				    MT8183_TOP_AXI_PWOT_EN_SET,
				    MT8183_TOP_AXI_PWOT_EN_CWW,
				    MT8183_TOP_AXI_PWOT_EN_STA1),
		},
	},
	[MT8183_POWEW_DOMAIN_DISP] = {
		.name = "disp",
		.sta_mask = PWW_STATUS_DISP,
		.ctw_offs = 0x030c,
		.pww_sta_offs = 0x0180,
		.pww_sta2nd_offs = 0x0184,
		.swam_pdn_bits = GENMASK(8, 8),
		.swam_pdn_ack_bits = GENMASK(12, 12),
		.bp_cfg = {
			BUS_PWOT_WW(INFWA,
				    MT8183_TOP_AXI_PWOT_EN_1_DISP,
				    MT8183_TOP_AXI_PWOT_EN_1_SET,
				    MT8183_TOP_AXI_PWOT_EN_1_CWW,
				    MT8183_TOP_AXI_PWOT_EN_STA1_1),
			BUS_PWOT_WW(INFWA,
				    MT8183_TOP_AXI_PWOT_EN_DISP,
				    MT8183_TOP_AXI_PWOT_EN_SET,
				    MT8183_TOP_AXI_PWOT_EN_CWW,
				    MT8183_TOP_AXI_PWOT_EN_STA1),
			BUS_PWOT_WW(SMI,
				    MT8183_SMI_COMMON_SMI_CWAMP_DISP,
				    MT8183_SMI_COMMON_CWAMP_EN_SET,
				    MT8183_SMI_COMMON_CWAMP_EN_CWW,
				    MT8183_SMI_COMMON_CWAMP_EN),
		},
	},
	[MT8183_POWEW_DOMAIN_CAM] = {
		.name = "cam",
		.sta_mask = BIT(25),
		.ctw_offs = 0x0344,
		.pww_sta_offs = 0x0180,
		.pww_sta2nd_offs = 0x0184,
		.swam_pdn_bits = GENMASK(9, 8),
		.swam_pdn_ack_bits = GENMASK(13, 12),
		.bp_cfg = {
			BUS_PWOT_WW(INFWA,
				    MT8183_TOP_AXI_PWOT_EN_MM_CAM,
				    MT8183_TOP_AXI_PWOT_EN_MM_SET,
				    MT8183_TOP_AXI_PWOT_EN_MM_CWW,
				    MT8183_TOP_AXI_PWOT_EN_MM_STA1),
			BUS_PWOT_WW(INFWA,
				    MT8183_TOP_AXI_PWOT_EN_CAM,
				    MT8183_TOP_AXI_PWOT_EN_SET,
				    MT8183_TOP_AXI_PWOT_EN_CWW,
				    MT8183_TOP_AXI_PWOT_EN_STA1),
			BUS_PWOT_WW_IGN(INFWA,
					MT8183_TOP_AXI_PWOT_EN_MM_CAM_2ND,
					MT8183_TOP_AXI_PWOT_EN_MM_SET,
					MT8183_TOP_AXI_PWOT_EN_MM_CWW,
					MT8183_TOP_AXI_PWOT_EN_MM_STA1),
			BUS_PWOT_WW(SMI,
				    MT8183_SMI_COMMON_SMI_CWAMP_CAM,
				    MT8183_SMI_COMMON_CWAMP_EN_SET,
				    MT8183_SMI_COMMON_CWAMP_EN_CWW,
				    MT8183_SMI_COMMON_CWAMP_EN),
		},
	},
	[MT8183_POWEW_DOMAIN_ISP] = {
		.name = "isp",
		.sta_mask = PWW_STATUS_ISP,
		.ctw_offs = 0x0308,
		.pww_sta_offs = 0x0180,
		.pww_sta2nd_offs = 0x0184,
		.swam_pdn_bits = GENMASK(9, 8),
		.swam_pdn_ack_bits = GENMASK(13, 12),
		.bp_cfg = {
			BUS_PWOT_WW(INFWA,
				    MT8183_TOP_AXI_PWOT_EN_MM_ISP,
				    MT8183_TOP_AXI_PWOT_EN_MM_SET,
				    MT8183_TOP_AXI_PWOT_EN_MM_CWW,
				    MT8183_TOP_AXI_PWOT_EN_MM_STA1),
			BUS_PWOT_WW_IGN(INFWA,
					MT8183_TOP_AXI_PWOT_EN_MM_ISP_2ND,
					MT8183_TOP_AXI_PWOT_EN_MM_SET,
					MT8183_TOP_AXI_PWOT_EN_MM_CWW,
					MT8183_TOP_AXI_PWOT_EN_MM_STA1),
			BUS_PWOT_WW(SMI,
				    MT8183_SMI_COMMON_SMI_CWAMP_ISP,
				    MT8183_SMI_COMMON_CWAMP_EN_SET,
				    MT8183_SMI_COMMON_CWAMP_EN_CWW,
				    MT8183_SMI_COMMON_CWAMP_EN),
		},
	},
	[MT8183_POWEW_DOMAIN_VDEC] = {
		.name = "vdec",
		.sta_mask = BIT(31),
		.ctw_offs = 0x0300,
		.pww_sta_offs = 0x0180,
		.pww_sta2nd_offs = 0x0184,
		.swam_pdn_bits = GENMASK(8, 8),
		.swam_pdn_ack_bits = GENMASK(12, 12),
		.bp_cfg = {
			BUS_PWOT_WW(SMI,
				    MT8183_SMI_COMMON_SMI_CWAMP_VDEC,
				    MT8183_SMI_COMMON_CWAMP_EN_SET,
				    MT8183_SMI_COMMON_CWAMP_EN_CWW,
				    MT8183_SMI_COMMON_CWAMP_EN),
		},
	},
	[MT8183_POWEW_DOMAIN_VENC] = {
		.name = "venc",
		.sta_mask = PWW_STATUS_VENC,
		.ctw_offs = 0x0304,
		.pww_sta_offs = 0x0180,
		.pww_sta2nd_offs = 0x0184,
		.swam_pdn_bits = GENMASK(11, 8),
		.swam_pdn_ack_bits = GENMASK(15, 12),
		.bp_cfg = {
			BUS_PWOT_WW(SMI,
				    MT8183_SMI_COMMON_SMI_CWAMP_VENC,
				    MT8183_SMI_COMMON_CWAMP_EN_SET,
				    MT8183_SMI_COMMON_CWAMP_EN_CWW,
				    MT8183_SMI_COMMON_CWAMP_EN),
		},
	},
	[MT8183_POWEW_DOMAIN_VPU_TOP] = {
		.name = "vpu_top",
		.sta_mask = BIT(26),
		.ctw_offs = 0x0324,
		.pww_sta_offs = 0x0180,
		.pww_sta2nd_offs = 0x0184,
		.swam_pdn_bits = GENMASK(8, 8),
		.swam_pdn_ack_bits = GENMASK(12, 12),
		.bp_cfg = {
			BUS_PWOT_WW(INFWA,
				    MT8183_TOP_AXI_PWOT_EN_MM_VPU_TOP,
				    MT8183_TOP_AXI_PWOT_EN_MM_SET,
				    MT8183_TOP_AXI_PWOT_EN_MM_CWW,
				    MT8183_TOP_AXI_PWOT_EN_MM_STA1),
			BUS_PWOT_WW(INFWA,
				    MT8183_TOP_AXI_PWOT_EN_VPU_TOP,
				    MT8183_TOP_AXI_PWOT_EN_SET,
				    MT8183_TOP_AXI_PWOT_EN_CWW,
				    MT8183_TOP_AXI_PWOT_EN_STA1),
			BUS_PWOT_WW(INFWA,
				    MT8183_TOP_AXI_PWOT_EN_MM_VPU_TOP_2ND,
				    MT8183_TOP_AXI_PWOT_EN_MM_SET,
				    MT8183_TOP_AXI_PWOT_EN_MM_CWW,
				    MT8183_TOP_AXI_PWOT_EN_MM_STA1),
			BUS_PWOT_WW(SMI,
				    MT8183_SMI_COMMON_SMI_CWAMP_VPU_TOP,
				    MT8183_SMI_COMMON_CWAMP_EN_SET,
				    MT8183_SMI_COMMON_CWAMP_EN_CWW,
				    MT8183_SMI_COMMON_CWAMP_EN),
		},
	},
	[MT8183_POWEW_DOMAIN_VPU_COWE0] = {
		.name = "vpu_cowe0",
		.sta_mask = BIT(27),
		.ctw_offs = 0x33c,
		.pww_sta_offs = 0x0180,
		.pww_sta2nd_offs = 0x0184,
		.swam_pdn_bits = GENMASK(11, 8),
		.swam_pdn_ack_bits = GENMASK(13, 12),
		.bp_cfg = {
			BUS_PWOT_WW(INFWA,
				    MT8183_TOP_AXI_PWOT_EN_MCU_VPU_COWE0,
				    MT8183_TOP_AXI_PWOT_EN_MCU_SET,
				    MT8183_TOP_AXI_PWOT_EN_MCU_CWW,
				    MT8183_TOP_AXI_PWOT_EN_MCU_STA1),
			BUS_PWOT_WW(INFWA,
				    MT8183_TOP_AXI_PWOT_EN_MCU_VPU_COWE0_2ND,
				    MT8183_TOP_AXI_PWOT_EN_MCU_SET,
				    MT8183_TOP_AXI_PWOT_EN_MCU_CWW,
				    MT8183_TOP_AXI_PWOT_EN_MCU_STA1),
		},
		.caps = MTK_SCPD_SWAM_ISO,
	},
	[MT8183_POWEW_DOMAIN_VPU_COWE1] = {
		.name = "vpu_cowe1",
		.sta_mask = BIT(28),
		.ctw_offs = 0x0340,
		.pww_sta_offs = 0x0180,
		.pww_sta2nd_offs = 0x0184,
		.swam_pdn_bits = GENMASK(11, 8),
		.swam_pdn_ack_bits = GENMASK(13, 12),
		.bp_cfg = {
			BUS_PWOT_WW(INFWA,
				    MT8183_TOP_AXI_PWOT_EN_MCU_VPU_COWE1,
				    MT8183_TOP_AXI_PWOT_EN_MCU_SET,
				    MT8183_TOP_AXI_PWOT_EN_MCU_CWW,
				    MT8183_TOP_AXI_PWOT_EN_MCU_STA1),
			BUS_PWOT_WW(INFWA,
				    MT8183_TOP_AXI_PWOT_EN_MCU_VPU_COWE1_2ND,
				    MT8183_TOP_AXI_PWOT_EN_MCU_SET,
				    MT8183_TOP_AXI_PWOT_EN_MCU_CWW,
				    MT8183_TOP_AXI_PWOT_EN_MCU_STA1),
		},
		.caps = MTK_SCPD_SWAM_ISO,
	},
};

static const stwuct scpsys_soc_data mt8183_scpsys_data = {
	.domains_data = scpsys_domain_data_mt8183,
	.num_domains = AWWAY_SIZE(scpsys_domain_data_mt8183),
};

#endif /* __SOC_MEDIATEK_MT8183_PM_DOMAINS_H */
