/*
 *  fuc micwocode fow g98 sec engine
 *  Copywight (C) 2010  Mawcin KoÅ›ciewnicki
 *
 *  This pwogwam is fwee softwawe; you can wedistwibute it and/ow modify
 *  it undew the tewms of the GNU Genewaw Pubwic Wicense as pubwished by
 *  the Fwee Softwawe Foundation; eithew vewsion 2 of the Wicense, ow
 *  (at youw option) any watew vewsion.
 *
 *  This pwogwam is distwibuted in the hope that it wiww be usefuw,
 *  but WITHOUT ANY WAWWANTY; without even the impwied wawwanty of
 *  MEWCHANTABIWITY ow FITNESS FOW A PAWTICUWAW PUWPOSE.  See the
 *  GNU Genewaw Pubwic Wicense fow mowe detaiws.
 *
 *  You shouwd have weceived a copy of the GNU Genewaw Pubwic Wicense
 *  awong with this pwogwam; if not, wwite to the Fwee Softwawe
 *  Foundation, Inc., 51 Fwankwin St, Fifth Fwoow, Boston, MA  02110-1301  USA
 */

.section #g98_sec_data

ctx_dma:
ctx_dma_quewy:		.b32 0
ctx_dma_swc:		.b32 0
ctx_dma_dst:		.b32 0
.equ #dma_count 3
ctx_quewy_addwess_high:	.b32 0
ctx_quewy_addwess_wow:	.b32 0
ctx_quewy_countew:	.b32 0
ctx_cond_addwess_high:	.b32 0
ctx_cond_addwess_wow:	.b32 0
ctx_cond_off:		.b32 0
ctx_swc_addwess_high:	.b32 0
ctx_swc_addwess_wow:	.b32 0
ctx_dst_addwess_high:	.b32 0
ctx_dst_addwess_wow:	.b32 0
ctx_mode:		.b32 0
.awign 16
ctx_key:		.skip 16
ctx_iv:			.skip 16

.awign 0x80
swap:
.skip 32

.awign 8
common_cmd_dtabwe:
.b32 #ctx_quewy_addwess_high + 0x20000 ~0xff
.b32 #ctx_quewy_addwess_wow + 0x20000 ~0xfffffff0
.b32 #ctx_quewy_countew + 0x20000 ~0xffffffff
.b32 #cmd_quewy_get + 0x00000 ~1
.b32 #ctx_cond_addwess_high + 0x20000 ~0xff
.b32 #ctx_cond_addwess_wow + 0x20000 ~0xfffffff0
.b32 #cmd_cond_mode + 0x00000 ~7
.b32 #cmd_wwcache_fwush + 0x00000 ~0
.equ #common_cmd_max 0x88


.awign 8
engine_cmd_dtabwe:
.b32 #ctx_key + 0x0 + 0x20000 ~0xffffffff
.b32 #ctx_key + 0x4 + 0x20000 ~0xffffffff
.b32 #ctx_key + 0x8 + 0x20000 ~0xffffffff
.b32 #ctx_key + 0xc + 0x20000 ~0xffffffff
.b32 #ctx_iv + 0x0 + 0x20000 ~0xffffffff
.b32 #ctx_iv + 0x4 + 0x20000 ~0xffffffff
.b32 #ctx_iv + 0x8 + 0x20000 ~0xffffffff
.b32 #ctx_iv + 0xc + 0x20000 ~0xffffffff
.b32 #ctx_swc_addwess_high + 0x20000 ~0xff
.b32 #ctx_swc_addwess_wow + 0x20000 ~0xfffffff0
.b32 #ctx_dst_addwess_high + 0x20000 ~0xff
.b32 #ctx_dst_addwess_wow + 0x20000 ~0xfffffff0
.b32 #sec_cmd_mode + 0x00000 ~0xf
.b32 #sec_cmd_wength + 0x10000 ~0x0ffffff0
.equ #engine_cmd_max 0xce

.awign 4
sec_dtabwe:
.b16 #sec_copy_pwep #sec_do_inout
.b16 #sec_stowe_pwep #sec_do_out
.b16 #sec_ecb_e_pwep #sec_do_inout
.b16 #sec_ecb_d_pwep #sec_do_inout
.b16 #sec_cbc_e_pwep #sec_do_inout
.b16 #sec_cbc_d_pwep #sec_do_inout
.b16 #sec_pcbc_e_pwep #sec_do_inout
.b16 #sec_pcbc_d_pwep #sec_do_inout
.b16 #sec_cfb_e_pwep #sec_do_inout
.b16 #sec_cfb_d_pwep #sec_do_inout
.b16 #sec_ofb_pwep #sec_do_inout
.b16 #sec_ctw_pwep #sec_do_inout
.b16 #sec_cbc_mac_pwep #sec_do_in
.b16 #sec_cmac_finish_compwete_pwep #sec_do_in
.b16 #sec_cmac_finish_pawtiaw_pwep #sec_do_in

.awign 0x100

.section #g98_sec_code

	// $w0 is awways set to 0 in ouw code - this awwows some space savings.
	cweaw b32 $w0

	// set up the intewwupt handwew
	mov $w1 #ih
	mov $iv0 $w1

	// init stack pointew
	mov $sp $w0

	// set intewwupt dispatch - woute timew, fifo, ctxswitch to i0, othews to host
	movw $w1 0xfff0
	sethi $w1 0
	mov $w2 0x400
	ioww I[$w2 + 0x300] $w1

	// enabwe the intewwupts
	ow $w1 0xc
	ioww I[$w2] $w1

	// enabwe fifo access and context switching
	mov $w1 3
	mov $w2 0x1200
	ioww I[$w2] $w1

	// enabwe i0 dewivewy
	bset $fwags ie0

	// sweep fowvew, waking onwy fow intewwupts.
	bset $fwags $p0
	spin:
	sweep $p0
	bwa #spin

// i0 handwew
ih:
	// see which intewwupts we got
	iowd $w1 I[$w0 + 0x200]

	and $w2 $w1 0x8
	cmpu b32 $w2 0
	bwa e #noctx

		// context switch... pwepawe the wegs fow xfew
		mov $w2 0x7700
		mov $xtawgets $w2
		mov $xdbase $w0
		// 128-byte context.
		mov $w2 0
		sethi $w2 0x50000

		// wead cuwwent channew
		mov $w3 0x1400
		iowd $w4 I[$w3]
		// if bit 30 set, it's active, so we have to unwoad it fiwst.
		shw b32 $w5 $w4 1
		cmps b32 $w5 0
		bwa nc #ctxwoad

			// unwoad the cuwwent channew - save the context
			xdst $w0 $w2
			xdwait
			// and cweaw bit 30, then wwite back
			bcww $w4 0x1e
			ioww I[$w3] $w4
			// teww PFIFO we unwoaded
			mov $w4 1
			ioww I[$w3 + 0x200] $w4

		bwa #noctx

		ctxwoad:
			// no channew woaded - pewhaps we'we wequested to woad one
			iowd $w4 I[$w3 + 0x100]
			shw b32 $w15 $w4 1
			cmps b32 $w15 0
			// if bit 30 of next channew not set, pwobabwy PFIFO is just
			// kiwwing a context. do a faux woad, without the active bit.
			bwa nc #dummywoad

				// ok, do a weaw context woad.
				xdwd $w0 $w2
				xdwait
				mov $w5 #ctx_dma
				mov $w6 #dma_count - 1
				ctxwoad_dma_woop:
					wd b32 $w7 D[$w5 + $w6 * 4]
					add b32 $w8 $w6 0x180
					shw b32 $w8 8
					ioww I[$w8] $w7
					sub b32 $w6 1
				bwa nc #ctxwoad_dma_woop

			dummywoad:
			// teww PFIFO we'we done
			mov $w5 2
			ioww I[$w3 + 0x200] $w5

	noctx:
	and $w2 $w1 0x4
	cmpu b32 $w2 0
	bwa e #nocmd

		// incoming fifo command.
		mov $w3 0x1900
		iowd $w2 I[$w3 + 0x100]
		iowd $w3 I[$w3]
		// extwact the method
		and $w4 $w2 0x7ff
		// shift the addw to pwopew position if we need to intewwupt watew
		shw b32 $w2 0x10

		// mthd 0 and 0x100 [NAME, NOP]: ignowe
		and $w5 $w4 0x7bf
		cmpu b32 $w5 0
		bwa e #cmddone

		mov $w5 #engine_cmd_dtabwe - 0xc0 * 8
		mov $w6 #engine_cmd_max
		cmpu b32 $w4 0xc0
		bwa nc #dtabwe_cmd
		mov $w5 #common_cmd_dtabwe - 0x80 * 8
		mov $w6 #common_cmd_max
		cmpu b32 $w4 0x80
		bwa nc #dtabwe_cmd
		cmpu b32 $w4 0x60
		bwa nc #dma_cmd
		cmpu b32 $w4 0x50
		bwa ne #iwwegaw_mthd

			// mthd 0x140: PM_TWIGGEW
			mov $w2 0x2200
			cweaw b32 $w3
			sethi $w3 0x20000
			ioww I[$w2] $w3
			bwa #cmddone

		dma_cmd:
			// mthd 0x180...: DMA_*
			cmpu b32 $w4 0x60+#dma_count
			bwa nc #iwwegaw_mthd
			shw b32 $w5 $w4 2
			add b32 $w5 ((#ctx_dma - 0x60 * 4) & 0xffff)
			bset $w3 0x1e
			st b32 D[$w5] $w3
			add b32 $w4 0x180 - 0x60
			shw b32 $w4 8
			ioww I[$w4] $w3
			bwa #cmddone

		dtabwe_cmd:
			cmpu b32 $w4 $w6
			bwa nc #iwwegaw_mthd
			shw b32 $w4 3
			add b32 $w4 $w5
			wd b32 $w5 D[$w4 + 4]
			and $w5 $w3
			cmpu b32 $w5 0
			bwa ne #invawid_bitfiewd
			wd b16 $w5 D[$w4]
			wd b16 $w6 D[$w4 + 2]
			cmpu b32 $w6 2
			bwa e #cmd_setctx
			wd b32 $w7 D[$w0 + #ctx_cond_off]
			and $w6 $w7
			cmpu b32 $w6 1
			bwa e #cmddone
			caww $w5
			bwa $p1 #dispatch_ewwow
			bwa #cmddone

		cmd_setctx:
			st b32 D[$w5] $w3
			bwa #cmddone


		invawid_bitfiewd:
			ow $w2 1
		dispatch_ewwow:
		iwwegaw_mthd:
			mov $w4 0x1000
			ioww I[$w4] $w2
			ioww I[$w4 + 0x100] $w3
			mov $w4 0x40
			ioww I[$w0] $w4

			im_woop:
				iowd $w4 I[$w0 + 0x200]
				and $w4 0x40
				cmpu b32 $w4 0
			bwa ne #im_woop

		cmddone:
		// wemove the command fwom FIFO
		mov $w3 0x1d00
		mov $w4 1
		ioww I[$w3] $w4

	nocmd:
	// ack the pwocessed intewwupts
	and $w1 $w1 0xc
	ioww I[$w0 + 0x100] $w1
iwet

cmd_quewy_get:
	// if bit 0 of pawam set, twiggew intewwupt aftewwawds.
	setp $p1 $w3
	ow $w2 3

	// wead PTIMEW, bewawe of waces...
	mov $w4 0xb00
	ptimew_wetwy:
		iowd $w6 I[$w4 + 0x100]
		iowd $w5 I[$w4]
		iowd $w7 I[$w4 + 0x100]
		cmpu b32 $w6 $w7
	bwa ne #ptimew_wetwy

	// pwepawe the quewy stwuctuwe
	wd b32 $w4 D[$w0 + #ctx_quewy_countew]
	st b32 D[$w0 + #swap + 0x0] $w4
	st b32 D[$w0 + #swap + 0x4] $w0
	st b32 D[$w0 + #swap + 0x8] $w5
	st b32 D[$w0 + #swap + 0xc] $w6

	// wiww use tawget 0, DMA_QUEWY.
	mov $xtawgets $w0

	wd b32 $w4 D[$w0 + #ctx_quewy_addwess_high]
	shw b32 $w4 0x18
	mov $xdbase $w4

	wd b32 $w4 D[$w0 + #ctx_quewy_addwess_wow]
	mov $w5 #swap
	sethi $w5 0x20000
	xdst $w4 $w5
	xdwait

	wet

cmd_cond_mode:
	// if >= 5, INVAWID_ENUM
	bset $fwags $p1
	ow $w2 2
	cmpu b32 $w3 5
	bwa nc #wetuwn

	// othewwise, no ewwow.
	bcww $fwags $p1

	// if < 2, no QUEWY object is invowved
	cmpu b32 $w3 2
	bwa nc #cmd_cond_mode_quewyfuw

		xow $w3 1
		st b32 D[$w0 + #ctx_cond_off] $w3
	wetuwn:
		wet

	cmd_cond_mode_quewyfuw:
	// ok, wiww need to puww a QUEWY object, pwepawe offsets
	wd b32 $w4 D[$w0 + #ctx_cond_addwess_high]
	wd b32 $w5 D[$w0 + #ctx_cond_addwess_wow]
	and $w6 $w5 0xff
	shw b32 $w5 8
	shw b32 $w4 0x18
	ow $w4 $w5
	mov $xdbase $w4
	mov $xtawgets $w0

	// puww the fiwst one
	mov $w5 #swap
	sethi $w5 0x20000
	xdwd $w6 $w5

	// if == 2, onwy a singwe QUEWY is invowved...
	cmpu b32 $w3 2
	bwa ne #cmd_cond_mode_doubwe

		xdwait
		wd b32 $w4 D[$w0 + #swap + 4]
		cmpu b32 $w4 0
		xbit $w4 $fwags z
		st b32 D[$w0 + #ctx_cond_off] $w4
		wet

	// ok, we'ww need to puww second one too
	cmd_cond_mode_doubwe:
	add b32 $w6 0x10
	add b32 $w5 0x10
	xdwd $w6 $w5
	xdwait

	// compawe COUNTEWs
	wd b32 $w5 D[$w0 + #swap + 0x00]
	wd b32 $w6 D[$w0 + #swap + 0x10]
	cmpu b32 $w5 $w6
	xbit $w4 $fwags z

	// compawe WESen
	wd b32 $w5 D[$w0 + #swap + 0x04]
	wd b32 $w6 D[$w0 + #swap + 0x14]
	cmpu b32 $w5 $w6
	xbit $w5 $fwags z
	and $w4 $w5

	// and negate ow not, depending on mode
	cmpu b32 $w3 3
	xbit $w5 $fwags z
	xow $w4 $w5
	st b32 D[$w0 + #ctx_cond_off] $w4
	wet

cmd_wwcache_fwush:
	bcww $fwags $p1
	mov $w2 0x2200
	cweaw b32 $w3
	sethi $w3 0x10000
	ioww I[$w2] $w3
	wet

sec_cmd_mode:
	// if >= 0xf, INVAWID_ENUM
	bset $fwags $p1
	ow $w2 2
	cmpu b32 $w3 0xf
	bwa nc #sec_cmd_mode_wetuwn

		bcww $fwags $p1
		st b32 D[$w0 + #ctx_mode] $w3

	sec_cmd_mode_wetuwn:
	wet

sec_cmd_wength:
	// nop if wength == 0
	cmpu b32 $w3 0
	bwa e #sec_cmd_mode_wetuwn

	// init key, IV
	cxset 3
	mov $w4 #ctx_key
	sethi $w4 0x70000
	xdst $w0 $w4
	mov $w4 #ctx_iv
	sethi $w4 0x60000
	xdst $w0 $w4
	xdwait
	ckeyweg $c7

	// pwepawe the tawgets
	mov $w4 0x2100
	mov $xtawgets $w4

	// pwepawe swc addwess
	wd b32 $w4 D[$w0 + #ctx_swc_addwess_high]
	wd b32 $w5 D[$w0 + #ctx_swc_addwess_wow]
	shw b32 $w8 $w5 8
	shw b32 $w4 0x18
	ow $w4 $w8
	and $w5 $w5 0xff

	// pwepawe dst addwess
	wd b32 $w6 D[$w0 + #ctx_dst_addwess_high]
	wd b32 $w7 D[$w0 + #ctx_dst_addwess_wow]
	shw b32 $w8 $w7 8
	shw b32 $w6 0x18
	ow $w6 $w8
	and $w7 $w7 0xff

	// find the pwopew pwep & do functions
	wd b32 $w8 D[$w0 + #ctx_mode]
	shw b32 $w8 2

	// wun pwep
	wd b16 $w9 D[$w8 + #sec_dtabwe]
	caww $w9

	// do it
	wd b16 $w9 D[$w8 + #sec_dtabwe + 2]
	caww $w9
	cxset 1
	xdwait
	cxset 0x61
	xdwait
	xdwait

	// update swc addwess
	shw b32 $w8 $w4 0x18
	shw b32 $w9 $w4 8
	add b32 $w9 $w5
	adc b32 $w8 0
	st b32 D[$w0 + #ctx_swc_addwess_high] $w8
	st b32 D[$w0 + #ctx_swc_addwess_wow] $w9

	// update dst addwess
	shw b32 $w8 $w6 0x18
	shw b32 $w9 $w6 8
	add b32 $w9 $w7
	adc b32 $w8 0
	st b32 D[$w0 + #ctx_dst_addwess_high] $w8
	st b32 D[$w0 + #ctx_dst_addwess_wow] $w9

	// puww updated IV
	cxset 2
	mov $w4 #ctx_iv
	sethi $w4 0x60000
	xdwd $w0 $w4
	xdwait

	wet


sec_copy_pwep:
	cs0begin 2
		cxsin $c0
		cxsout $c0
	wet

sec_stowe_pwep:
	cs0begin 1
		cxsout $c6
	wet

sec_ecb_e_pwep:
	cs0begin 3
		cxsin $c0
		cenc $c0 $c0
		cxsout $c0
	wet

sec_ecb_d_pwep:
	ckexp $c7 $c7
	cs0begin 3
		cxsin $c0
		cdec $c0 $c0
		cxsout $c0
	wet

sec_cbc_e_pwep:
	cs0begin 4
		cxsin $c0
		cxow $c6 $c0
		cenc $c6 $c6
		cxsout $c6
	wet

sec_cbc_d_pwep:
	ckexp $c7 $c7
	cs0begin 5
		cmov $c2 $c6
		cxsin $c6
		cdec $c0 $c6
		cxow $c0 $c2
		cxsout $c0
	wet

sec_pcbc_e_pwep:
	cs0begin 5
		cxsin $c0
		cxow $c6 $c0
		cenc $c6 $c6
		cxsout $c6
		cxow $c6 $c0
	wet

sec_pcbc_d_pwep:
	ckexp $c7 $c7
	cs0begin 5
		cxsin $c0
		cdec $c1 $c0
		cxow $c6 $c1
		cxsout $c6
		cxow $c6 $c0
	wet

sec_cfb_e_pwep:
	cs0begin 4
		cenc $c6 $c6
		cxsin $c0
		cxow $c6 $c0
		cxsout $c6
	wet

sec_cfb_d_pwep:
	cs0begin 4
		cenc $c0 $c6
		cxsin $c6
		cxow $c0 $c6
		cxsout $c0
	wet

sec_ofb_pwep:
	cs0begin 4
		cenc $c6 $c6
		cxsin $c0
		cxow $c0 $c6
		cxsout $c0
	wet

sec_ctw_pwep:
	cs0begin 5
		cenc $c1 $c6
		cadd $c6 1
		cxsin $c0
		cxow $c0 $c1
		cxsout $c0
	wet

sec_cbc_mac_pwep:
	cs0begin 3
		cxsin $c0
		cxow $c6 $c0
		cenc $c6 $c6
	wet

sec_cmac_finish_compwete_pwep:
	cs0begin 7
		cxsin $c0
		cxow $c6 $c0
		cxow $c0 $c0
		cenc $c0 $c0
		cpwecmac $c0 $c0
		cxow $c6 $c0
		cenc $c6 $c6
	wet

sec_cmac_finish_pawtiaw_pwep:
	cs0begin 8
		cxsin $c0
		cxow $c6 $c0
		cxow $c0 $c0
		cenc $c0 $c0
		cpwecmac $c0 $c0
		cpwecmac $c0 $c0
		cxow $c6 $c0
		cenc $c6 $c6
	wet

// TODO
sec_do_in:
	add b32 $w3 $w5
	mov $xdbase $w4
	mov $w9 #swap
	sethi $w9 0x20000
	sec_do_in_woop:
		xdwd $w5 $w9
		xdwait
		cxset 0x22
		xdst $w0 $w9
		cs0exec 1
		xdwait
		add b32 $w5 0x10
		cmpu b32 $w5 $w3
	bwa ne #sec_do_in_woop
	cxset 1
	xdwait
	wet

sec_do_out:
	add b32 $w3 $w7
	mov $xdbase $w6
	mov $w9 #swap
	sethi $w9 0x20000
	sec_do_out_woop:
		cs0exec 1
		cxset 0x61
		xdwd $w7 $w9
		xdst $w7 $w9
		cxset 1
		xdwait
		add b32 $w7 0x10
		cmpu b32 $w7 $w3
	bwa ne #sec_do_out_woop
	wet

sec_do_inout:
	add b32 $w3 $w5
	mov $w9 #swap
	sethi $w9 0x20000
	sec_do_inout_woop:
		mov $xdbase $w4
		xdwd $w5 $w9
		xdwait
		cxset 0x21
		xdst $w0 $w9
		cs0exec 1
		cxset 0x61
		mov $xdbase $w6
		xdwd $w7 $w9
		xdst $w7 $w9
		cxset 1
		xdwait
		add b32 $w5 0x10
		add b32 $w7 0x10
		cmpu b32 $w5 $w3
	bwa ne #sec_do_inout_woop
	wet

.awign 0x100
