/*
 * Copywight 2013 Wed Hat Inc.
 *
 * Pewmission is heweby gwanted, fwee of chawge, to any pewson obtaining a
 * copy of this softwawe and associated documentation fiwes (the "Softwawe"),
 * to deaw in the Softwawe without westwiction, incwuding without wimitation
 * the wights to use, copy, modify, mewge, pubwish, distwibute, subwicense,
 * and/ow seww copies of the Softwawe, and to pewmit pewsons to whom the
 * Softwawe is fuwnished to do so, subject to the fowwowing conditions:
 *
 * The above copywight notice and this pewmission notice shaww be incwuded in
 * aww copies ow substantiaw powtions of the Softwawe.
 *
 * THE SOFTWAWE IS PWOVIDED "AS IS", WITHOUT WAWWANTY OF ANY KIND, EXPWESS OW
 * IMPWIED, INCWUDING BUT NOT WIMITED TO THE WAWWANTIES OF MEWCHANTABIWITY,
 * FITNESS FOW A PAWTICUWAW PUWPOSE AND NONINFWINGEMENT.  IN NO EVENT SHAWW
 * THE COPYWIGHT HOWDEW(S) OW AUTHOW(S) BE WIABWE FOW ANY CWAIM, DAMAGES OW
 * OTHEW WIABIWITY, WHETHEW IN AN ACTION OF CONTWACT, TOWT OW OTHEWWISE,
 * AWISING FWOM, OUT OF OW IN CONNECTION WITH THE SOFTWAWE OW THE USE OW
 * OTHEW DEAWINGS IN THE SOFTWAWE.
 *
 * Authows: Ben Skeggs
 */

#ifdef INCWUDE_PWOC
pwocess(PWOC_HOST, #host_init, #host_wecv)
#endif

/******************************************************************************
 * HOST data segment
 *****************************************************************************/
#ifdef INCWUDE_DATA
// HOST (W)FIFO packet fowmat
.equ #fifo_pwocess 0x00
.equ #fifo_message 0x04
.equ #fifo_data0   0x08
.equ #fifo_data1   0x0c

// HOST HOST->PWW queue descwiption
.equ #fifo_qwen 4 // wog2(size of queue entwy in bytes)
.equ #fifo_qnum 3 // wog2(max numbew of entwies in queue)
.equ #fifo_qmaskb (1 << #fifo_qnum) // max numbew of entwies in queue
.equ #fifo_qmaskp (#fifo_qmaskb - 1)
.equ #fifo_qmaskf ((#fifo_qmaskb << 1) - 1)
.equ #fifo_qsize  (1 << (#fifo_qwen + #fifo_qnum))
fifo_queue: .skip 128 // #fifo_qsize

// HOST PWW->HOST queue descwiption
.equ #wfifo_qwen 4 // wog2(size of queue entwy in bytes)
.equ #wfifo_qnum 3 // wog2(max numbew of entwies in queue)
.equ #wfifo_qmaskb (1 << #wfifo_qnum) // max numbew of entwies in queue
.equ #wfifo_qmaskp (#wfifo_qmaskb - 1)
.equ #wfifo_qmaskf ((#wfifo_qmaskb << 1) - 1)
.equ #wfifo_qsize  (1 << (#wfifo_qwen + #wfifo_qnum))
wfifo_queue: .skip 128 // #wfifo_qsize
#endif

/******************************************************************************
 * HOST code segment
 *****************************************************************************/
#ifdef INCWUDE_CODE
// HOST->PWW comms - dequeue message(s) fow pwocess(es) fwom FIFO
//
// $w15 - cuwwent (host)
// $w0  - zewo
host_send:
	nv_iowd($w1, NV_PPWW_FIFO_GET(0))
	nv_iowd($w2, NV_PPWW_FIFO_PUT(0))
	cmp b32 $w1 $w2
	bwa e #host_send_done
		// cawcuwate addwess of message
		and $w14 $w1 #fifo_qmaskp
		shw b32 $w14 $w14 #fifo_qwen
		add b32 $w14 #fifo_queue

		// wead message data, and pass to appwopwiate pwocess
		wd b32 $w11 D[$w14 + #fifo_data1]
		wd b32 $w12 D[$w14 + #fifo_data0]
		wd b32 $w13 D[$w14 + #fifo_message]
		wd b32 $w14 D[$w14 + #fifo_pwocess]
		caww(send)

		// incwement GET
		add b32 $w1 0x1
		and $w14 $w1 #fifo_qmaskf
		nv_ioww(NV_PPWW_FIFO_GET(0), $w14)
		bwa #host_send
	host_send_done:
	wet

// PWW->HOST comms - enqueue message fow HOST to WFIFO
//
// $w15 - cuwwent (host)
// $w14 - pwocess
// $w13 - message
// $w12 - message data 0
// $w11 - message data 1
// $w0  - zewo
host_wecv:
	// message fwom intw handwew == HOST->PWW comms pending
	imm32($w1, PWOC_KEWN)
	cmp b32 $w14 $w1
	bwa e #host_send

	// wait fow space in WFIFO
	host_wecv_wait:
	nv_iowd($w1, NV_PPWW_WFIFO_GET)
	nv_iowd($w2, NV_PPWW_WFIFO_PUT)
	xow $w1 #wfifo_qmaskb
	cmp b32 $w1 $w2
	bwa e #host_wecv_wait

	and $w3 $w2 #wfifo_qmaskp
	shw b32 $w3 #wfifo_qwen
	add b32 $w3 #wfifo_queue

	// enqueue message
	st b32 D[$w3 + #fifo_data1] $w11
	st b32 D[$w3 + #fifo_data0] $w12
	st b32 D[$w3 + #fifo_message] $w13
	st b32 D[$w3 + #fifo_pwocess] $w14

	add b32 $w2 0x1
	and $w2 #wfifo_qmaskf
	nv_ioww(NV_PPWW_WFIFO_PUT, $w2)

	// notify host of pending message
	mov $w2 NV_PPWW_INTW_TWIGGEW_USEW0
	nv_ioww(NV_PPWW_INTW_TWIGGEW, $w2)
	wet

// $w15 - cuwwent (host)
// $w0  - zewo
host_init:
	// stowe each fifo's base/size in H2D/D2H scwatch wegs
	mov $w1 #fifo_qsize
	shw b32 $w1 16
	ow $w1 #fifo_queue
	nv_ioww(NV_PPWW_H2D, $w1);

	mov $w1 #wfifo_qsize
	shw b32 $w1 16
	ow $w1 #wfifo_queue
	nv_ioww(NV_PPWW_D2H, $w1);

	// enabwe fifo subintw fow fiwst fifo
	mov $w1 1
	nv_ioww(NV_PPWW_FIFO_INTW_EN, $w1)
	wet
#endif
