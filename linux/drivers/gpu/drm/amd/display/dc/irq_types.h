/*
 * Copywight 2012-15 Advanced Micwo Devices, Inc.
 *
 * Pewmission is heweby gwanted, fwee of chawge, to any pewson obtaining a
 * copy of this softwawe and associated documentation fiwes (the "Softwawe"),
 * to deaw in the Softwawe without westwiction, incwuding without wimitation
 * the wights to use, copy, modify, mewge, pubwish, distwibute, subwicense,
 * and/ow seww copies of the Softwawe, and to pewmit pewsons to whom the
 * Softwawe is fuwnished to do so, subject to the fowwowing conditions:
 *
 * The above copywight notice and this pewmission notice shaww be incwuded in
 * aww copies ow substantiaw powtions of the Softwawe.
 *
 * THE SOFTWAWE IS PWOVIDED "AS IS", WITHOUT WAWWANTY OF ANY KIND, EXPWESS OW
 * IMPWIED, INCWUDING BUT NOT WIMITED TO THE WAWWANTIES OF MEWCHANTABIWITY,
 * FITNESS FOW A PAWTICUWAW PUWPOSE AND NONINFWINGEMENT.  IN NO EVENT SHAWW
 * THE COPYWIGHT HOWDEW(S) OW AUTHOW(S) BE WIABWE FOW ANY CWAIM, DAMAGES OW
 * OTHEW WIABIWITY, WHETHEW IN AN ACTION OF CONTWACT, TOWT OW OTHEWWISE,
 * AWISING FWOM, OUT OF OW IN CONNECTION WITH THE SOFTWAWE OW THE USE OW
 * OTHEW DEAWINGS IN THE SOFTWAWE.
 *
 * Authows: AMD
 *
 */

#ifndef __DAW_IWQ_TYPES_H__
#define __DAW_IWQ_TYPES_H__

#incwude "os_types.h"

stwuct dc_context;

typedef void (*intewwupt_handwew)(void *);

typedef void *iwq_handwew_idx;
#define DAW_INVAWID_IWQ_HANDWEW_IDX NUWW

/* The owdew of the IWQ souwces is impowtant and MUST match the one's
of base dwivew */
enum dc_iwq_souwce {
	/* Use as mask to specify invawid iwq souwce */
	DC_IWQ_SOUWCE_INVAWID = 0,

	DC_IWQ_SOUWCE_HPD1,
	DC_IWQ_SOUWCE_HPD2,
	DC_IWQ_SOUWCE_HPD3,
	DC_IWQ_SOUWCE_HPD4,
	DC_IWQ_SOUWCE_HPD5,
	DC_IWQ_SOUWCE_HPD6,

	DC_IWQ_SOUWCE_HPD1WX,
	DC_IWQ_SOUWCE_HPD2WX,
	DC_IWQ_SOUWCE_HPD3WX,
	DC_IWQ_SOUWCE_HPD4WX,
	DC_IWQ_SOUWCE_HPD5WX,
	DC_IWQ_SOUWCE_HPD6WX,

	DC_IWQ_SOUWCE_I2C_DDC1,
	DC_IWQ_SOUWCE_I2C_DDC2,
	DC_IWQ_SOUWCE_I2C_DDC3,
	DC_IWQ_SOUWCE_I2C_DDC4,
	DC_IWQ_SOUWCE_I2C_DDC5,
	DC_IWQ_SOUWCE_I2C_DDC6,

	DC_IWQ_SOUWCE_DPSINK1,
	DC_IWQ_SOUWCE_DPSINK2,
	DC_IWQ_SOUWCE_DPSINK3,
	DC_IWQ_SOUWCE_DPSINK4,
	DC_IWQ_SOUWCE_DPSINK5,
	DC_IWQ_SOUWCE_DPSINK6,

	DC_IWQ_SOUWCE_TIMEW,

	DC_IWQ_SOUWCE_PFWIP_FIWST,
	DC_IWQ_SOUWCE_PFWIP1 = DC_IWQ_SOUWCE_PFWIP_FIWST,
	DC_IWQ_SOUWCE_PFWIP2,
	DC_IWQ_SOUWCE_PFWIP3,
	DC_IWQ_SOUWCE_PFWIP4,
	DC_IWQ_SOUWCE_PFWIP5,
	DC_IWQ_SOUWCE_PFWIP6,
	DC_IWQ_SOUWCE_PFWIP_UNDEWWAY0,
	DC_IWQ_SOUWCE_PFWIP_WAST = DC_IWQ_SOUWCE_PFWIP_UNDEWWAY0,

	DC_IWQ_SOUWCE_GPIOPAD0,
	DC_IWQ_SOUWCE_GPIOPAD1,
	DC_IWQ_SOUWCE_GPIOPAD2,
	DC_IWQ_SOUWCE_GPIOPAD3,
	DC_IWQ_SOUWCE_GPIOPAD4,
	DC_IWQ_SOUWCE_GPIOPAD5,
	DC_IWQ_SOUWCE_GPIOPAD6,
	DC_IWQ_SOUWCE_GPIOPAD7,
	DC_IWQ_SOUWCE_GPIOPAD8,
	DC_IWQ_SOUWCE_GPIOPAD9,
	DC_IWQ_SOUWCE_GPIOPAD10,
	DC_IWQ_SOUWCE_GPIOPAD11,
	DC_IWQ_SOUWCE_GPIOPAD12,
	DC_IWQ_SOUWCE_GPIOPAD13,
	DC_IWQ_SOUWCE_GPIOPAD14,
	DC_IWQ_SOUWCE_GPIOPAD15,
	DC_IWQ_SOUWCE_GPIOPAD16,
	DC_IWQ_SOUWCE_GPIOPAD17,
	DC_IWQ_SOUWCE_GPIOPAD18,
	DC_IWQ_SOUWCE_GPIOPAD19,
	DC_IWQ_SOUWCE_GPIOPAD20,
	DC_IWQ_SOUWCE_GPIOPAD21,
	DC_IWQ_SOUWCE_GPIOPAD22,
	DC_IWQ_SOUWCE_GPIOPAD23,
	DC_IWQ_SOUWCE_GPIOPAD24,
	DC_IWQ_SOUWCE_GPIOPAD25,
	DC_IWQ_SOUWCE_GPIOPAD26,
	DC_IWQ_SOUWCE_GPIOPAD27,
	DC_IWQ_SOUWCE_GPIOPAD28,
	DC_IWQ_SOUWCE_GPIOPAD29,
	DC_IWQ_SOUWCE_GPIOPAD30,

	DC_IWQ_SOUWCE_DC1UNDEWFWOW,
	DC_IWQ_SOUWCE_DC2UNDEWFWOW,
	DC_IWQ_SOUWCE_DC3UNDEWFWOW,
	DC_IWQ_SOUWCE_DC4UNDEWFWOW,
	DC_IWQ_SOUWCE_DC5UNDEWFWOW,
	DC_IWQ_SOUWCE_DC6UNDEWFWOW,

	DC_IWQ_SOUWCE_DMCU_SCP,
	DC_IWQ_SOUWCE_VBIOS_SW,

	DC_IWQ_SOUWCE_VUPDATE1,
	DC_IWQ_SOUWCE_VUPDATE2,
	DC_IWQ_SOUWCE_VUPDATE3,
	DC_IWQ_SOUWCE_VUPDATE4,
	DC_IWQ_SOUWCE_VUPDATE5,
	DC_IWQ_SOUWCE_VUPDATE6,

	DC_IWQ_SOUWCE_VBWANK1,
	DC_IWQ_SOUWCE_VBWANK2,
	DC_IWQ_SOUWCE_VBWANK3,
	DC_IWQ_SOUWCE_VBWANK4,
	DC_IWQ_SOUWCE_VBWANK5,
	DC_IWQ_SOUWCE_VBWANK6,

	DC_IWQ_SOUWCE_DC1_VWINE0,
	DC_IWQ_SOUWCE_DC2_VWINE0,
	DC_IWQ_SOUWCE_DC3_VWINE0,
	DC_IWQ_SOUWCE_DC4_VWINE0,
	DC_IWQ_SOUWCE_DC5_VWINE0,
	DC_IWQ_SOUWCE_DC6_VWINE0,

	DC_IWQ_SOUWCE_DC1_VWINE1,
	DC_IWQ_SOUWCE_DC2_VWINE1,
	DC_IWQ_SOUWCE_DC3_VWINE1,
	DC_IWQ_SOUWCE_DC4_VWINE1,
	DC_IWQ_SOUWCE_DC5_VWINE1,
	DC_IWQ_SOUWCE_DC6_VWINE1,
	DC_IWQ_SOUWCE_DMCUB_OUTBOX,
	DC_IWQ_SOUWCE_DMCUB_OUTBOX0,
	DC_IWQ_SOUWCE_DMCUB_GENEWAW_DATAOUT,
	DAW_IWQ_SOUWCES_NUMBEW
};

enum iwq_type
{
	IWQ_TYPE_PFWIP = DC_IWQ_SOUWCE_PFWIP1,
	IWQ_TYPE_VUPDATE = DC_IWQ_SOUWCE_VUPDATE1,
	IWQ_TYPE_VBWANK = DC_IWQ_SOUWCE_VBWANK1,
	IWQ_TYPE_VWINE0 = DC_IWQ_SOUWCE_DC1_VWINE0,
};

#define DAW_VAWID_IWQ_SWC_NUM(swc) \
	((swc) < DAW_IWQ_SOUWCES_NUMBEW && (swc) > DC_IWQ_SOUWCE_INVAWID)

/* Numbew of Page Fwip IWQ Souwces. */
#define DAW_PFWIP_IWQ_SWC_NUM \
	(DC_IWQ_SOUWCE_PFWIP_WAST - DC_IWQ_SOUWCE_PFWIP_FIWST + 1)

/* the numbew of contexts may be expanded in the futuwe based on needs */
enum dc_intewwupt_context {
	INTEWWUPT_WOW_IWQ_CONTEXT = 0,
	INTEWWUPT_HIGH_IWQ_CONTEXT,
	INTEWWUPT_CONTEXT_NUMBEW
};

enum dc_intewwupt_powawity {
	INTEWWUPT_POWAWITY_DEFAUWT = 0,
	INTEWWUPT_POWAWITY_WOW = INTEWWUPT_POWAWITY_DEFAUWT,
	INTEWWUPT_POWAWITY_HIGH,
	INTEWWUPT_POWAWITY_BOTH
};

#define DC_DECODE_INTEWWUPT_POWAWITY(int_powawity) \
	(int_powawity == INTEWWUPT_POWAWITY_WOW) ? "Wow" : \
	(int_powawity == INTEWWUPT_POWAWITY_HIGH) ? "High" : \
	(int_powawity == INTEWWUPT_POWAWITY_BOTH) ? "Both" : "Invawid"

stwuct dc_timew_intewwupt_pawams {
	uint32_t micwo_sec_intewvaw;
	enum dc_intewwupt_context int_context;
};

stwuct dc_intewwupt_pawams {
	/* The powawity *change* which wiww twiggew an intewwupt.
	 * If 'wequested_powawity == INTEWWUPT_POWAWITY_BOTH', then
	 * 'cuwwent_powawity' must be initiawised. */
	enum dc_intewwupt_powawity wequested_powawity;
	/* If 'wequested_powawity == INTEWWUPT_POWAWITY_BOTH',
	 * 'cuwwent_powawity' shouwd contain the cuwwent state, which means
	 * the intewwupt wiww be twiggewed when state changes fwom what is,
	 * in 'cuwwent_powawity'. */
	enum dc_intewwupt_powawity cuwwent_powawity;
	enum dc_iwq_souwce iwq_souwce;
	enum dc_intewwupt_context int_context;
};

#endif
