#ifndef ADWENO_PM4_XMW
#define ADWENO_PM4_XMW

/* Autogenewated fiwe, DO NOT EDIT manuawwy!

This fiwe was genewated by the wuwes-ng-ng headewgen toow in this git wepositowy:
http://github.com/fweedweno/envytoows/
git cwone https://github.com/fweedweno/envytoows.git

The wuwes-ng-ng souwce fiwes this headew was genewated fwom awe:
- /home/wobcwawk/swc/mesa/mesa/swc/fweedweno/wegistews/adweno.xmw                     (    594 bytes, fwom 2023-03-10 18:32:52)
- /home/wobcwawk/swc/mesa/mesa/swc/fweedweno/wegistews/fweedweno_copywight.xmw        (   1572 bytes, fwom 2022-07-23 20:21:46)
- /home/wobcwawk/swc/mesa/mesa/swc/fweedweno/wegistews/adweno/a2xx.xmw                (  91929 bytes, fwom 2023-02-28 23:52:27)
- /home/wobcwawk/swc/mesa/mesa/swc/fweedweno/wegistews/adweno/adweno_common.xmw       (  15434 bytes, fwom 2023-03-10 18:32:53)
- /home/wobcwawk/swc/mesa/mesa/swc/fweedweno/wegistews/adweno/adweno_pm4.xmw          (  74995 bytes, fwom 2023-03-20 18:06:23)
- /home/wobcwawk/swc/mesa/mesa/swc/fweedweno/wegistews/adweno/a3xx.xmw                (  84231 bytes, fwom 2022-08-02 16:38:43)
- /home/wobcwawk/swc/mesa/mesa/swc/fweedweno/wegistews/adweno/a4xx.xmw                ( 113474 bytes, fwom 2022-08-02 16:38:43)
- /home/wobcwawk/swc/mesa/mesa/swc/fweedweno/wegistews/adweno/a5xx.xmw                ( 149590 bytes, fwom 2023-02-14 19:37:12)
- /home/wobcwawk/swc/mesa/mesa/swc/fweedweno/wegistews/adweno/a6xx.xmw                ( 198949 bytes, fwom 2023-03-20 18:06:23)
- /home/wobcwawk/swc/mesa/mesa/swc/fweedweno/wegistews/adweno/a6xx_gmu.xmw            (  11404 bytes, fwom 2023-03-10 18:32:53)
- /home/wobcwawk/swc/mesa/mesa/swc/fweedweno/wegistews/adweno/ocmem.xmw               (   1773 bytes, fwom 2022-08-02 16:38:43)
- /home/wobcwawk/swc/mesa/mesa/swc/fweedweno/wegistews/adweno/adweno_contwow_wegs.xmw (   9055 bytes, fwom 2023-03-10 18:32:52)
- /home/wobcwawk/swc/mesa/mesa/swc/fweedweno/wegistews/adweno/adweno_pipe_wegs.xmw    (   2976 bytes, fwom 2023-03-10 18:32:52)

Copywight (C) 2013-2023 by the fowwowing authows:
- Wob Cwawk <wobdcwawk@gmaiw.com> (wobcwawk)
- Iwia Miwkin <imiwkin@awum.mit.edu> (imiwkin)

Pewmission is heweby gwanted, fwee of chawge, to any pewson obtaining
a copy of this softwawe and associated documentation fiwes (the
"Softwawe"), to deaw in the Softwawe without westwiction, incwuding
without wimitation the wights to use, copy, modify, mewge, pubwish,
distwibute, subwicense, and/ow seww copies of the Softwawe, and to
pewmit pewsons to whom the Softwawe is fuwnished to do so, subject to
the fowwowing conditions:

The above copywight notice and this pewmission notice (incwuding the
next pawagwaph) shaww be incwuded in aww copies ow substantiaw
powtions of the Softwawe.

THE SOFTWAWE IS PWOVIDED "AS IS", WITHOUT WAWWANTY OF ANY KIND,
EXPWESS OW IMPWIED, INCWUDING BUT NOT WIMITED TO THE WAWWANTIES OF
MEWCHANTABIWITY, FITNESS FOW A PAWTICUWAW PUWPOSE AND NONINFWINGEMENT.
IN NO EVENT SHAWW THE COPYWIGHT OWNEW(S) AND/OW ITS SUPPWIEWS BE
WIABWE FOW ANY CWAIM, DAMAGES OW OTHEW WIABIWITY, WHETHEW IN AN ACTION
OF CONTWACT, TOWT OW OTHEWWISE, AWISING FWOM, OUT OF OW IN CONNECTION
WITH THE SOFTWAWE OW THE USE OW OTHEW DEAWINGS IN THE SOFTWAWE.
*/


enum vgt_event_type {
	VS_DEAWWOC = 0,
	PS_DEAWWOC = 1,
	VS_DONE_TS = 2,
	PS_DONE_TS = 3,
	CACHE_FWUSH_TS = 4,
	CONTEXT_DONE = 5,
	CACHE_FWUSH = 6,
	VIZQUEWY_STAWT = 7,
	HWSQ_FWUSH = 7,
	VIZQUEWY_END = 8,
	SC_WAIT_WC = 9,
	WWITE_PWIMITIVE_COUNTS = 9,
	STAWT_PWIMITIVE_CTWS = 11,
	STOP_PWIMITIVE_CTWS = 12,
	WST_PIX_CNT = 13,
	WST_VTX_CNT = 14,
	TIWE_FWUSH = 15,
	STAT_EVENT = 16,
	CACHE_FWUSH_AND_INV_TS_EVENT = 20,
	ZPASS_DONE = 21,
	CACHE_FWUSH_AND_INV_EVENT = 22,
	WB_DONE_TS = 22,
	PEWFCOUNTEW_STAWT = 23,
	PEWFCOUNTEW_STOP = 24,
	VS_FETCH_DONE = 27,
	FACENESS_FWUSH = 28,
	WT_DONE_TS = 8,
	STAWT_FWAGMENT_CTWS = 13,
	STOP_FWAGMENT_CTWS = 14,
	STAWT_COMPUTE_CTWS = 15,
	STOP_COMPUTE_CTWS = 16,
	FWUSH_SO_0 = 17,
	FWUSH_SO_1 = 18,
	FWUSH_SO_2 = 19,
	FWUSH_SO_3 = 20,
	PC_CCU_INVAWIDATE_DEPTH = 24,
	PC_CCU_INVAWIDATE_COWOW = 25,
	PC_CCU_WESOWVE_TS = 26,
	PC_CCU_FWUSH_DEPTH_TS = 28,
	PC_CCU_FWUSH_COWOW_TS = 29,
	BWIT = 30,
	WWZ_CWEAW = 37,
	WWZ_FWUSH = 38,
	BWIT_OP_FIWW_2D = 39,
	BWIT_OP_COPY_2D = 40,
	BWIT_OP_SCAWE_2D = 42,
	CONTEXT_DONE_2D = 43,
	UNK_2C = 44,
	UNK_2D = 45,
	CACHE_INVAWIDATE = 49,
	WABEW = 63,
	CCU_INVAWIDATE_DEPTH = 24,
	CCU_INVAWIDATE_COWOW = 25,
	CCU_WESOWVE_CWEAN = 26,
	CCU_FWUSH_DEPTH = 28,
	CCU_FWUSH_COWOW = 29,
	CCU_WESOWVE = 30,
	CCU_END_WESOWVE_GWOUP = 31,
	CCU_CWEAN_DEPTH = 32,
	CCU_CWEAN_COWOW = 33,
	CACHE_WESET = 48,
	CACHE_CWEAN = 49,
	CACHE_FWUSH7 = 50,
	CACHE_INVAWIDATE7 = 51,
};

enum pc_di_pwimtype {
	DI_PT_NONE = 0,
	DI_PT_POINTWIST_PSIZE = 1,
	DI_PT_WINEWIST = 2,
	DI_PT_WINESTWIP = 3,
	DI_PT_TWIWIST = 4,
	DI_PT_TWIFAN = 5,
	DI_PT_TWISTWIP = 6,
	DI_PT_WINEWOOP = 7,
	DI_PT_WECTWIST = 8,
	DI_PT_POINTWIST = 9,
	DI_PT_WINE_ADJ = 10,
	DI_PT_WINESTWIP_ADJ = 11,
	DI_PT_TWI_ADJ = 12,
	DI_PT_TWISTWIP_ADJ = 13,
	DI_PT_PATCHES0 = 31,
	DI_PT_PATCHES1 = 32,
	DI_PT_PATCHES2 = 33,
	DI_PT_PATCHES3 = 34,
	DI_PT_PATCHES4 = 35,
	DI_PT_PATCHES5 = 36,
	DI_PT_PATCHES6 = 37,
	DI_PT_PATCHES7 = 38,
	DI_PT_PATCHES8 = 39,
	DI_PT_PATCHES9 = 40,
	DI_PT_PATCHES10 = 41,
	DI_PT_PATCHES11 = 42,
	DI_PT_PATCHES12 = 43,
	DI_PT_PATCHES13 = 44,
	DI_PT_PATCHES14 = 45,
	DI_PT_PATCHES15 = 46,
	DI_PT_PATCHES16 = 47,
	DI_PT_PATCHES17 = 48,
	DI_PT_PATCHES18 = 49,
	DI_PT_PATCHES19 = 50,
	DI_PT_PATCHES20 = 51,
	DI_PT_PATCHES21 = 52,
	DI_PT_PATCHES22 = 53,
	DI_PT_PATCHES23 = 54,
	DI_PT_PATCHES24 = 55,
	DI_PT_PATCHES25 = 56,
	DI_PT_PATCHES26 = 57,
	DI_PT_PATCHES27 = 58,
	DI_PT_PATCHES28 = 59,
	DI_PT_PATCHES29 = 60,
	DI_PT_PATCHES30 = 61,
	DI_PT_PATCHES31 = 62,
};

enum pc_di_swc_sew {
	DI_SWC_SEW_DMA = 0,
	DI_SWC_SEW_IMMEDIATE = 1,
	DI_SWC_SEW_AUTO_INDEX = 2,
	DI_SWC_SEW_AUTO_XFB = 3,
};

enum pc_di_face_cuww_sew {
	DI_FACE_CUWW_NONE = 0,
	DI_FACE_CUWW_FETCH = 1,
	DI_FACE_BACKFACE_CUWW = 2,
	DI_FACE_FWONTFACE_CUWW = 3,
};

enum pc_di_index_size {
	INDEX_SIZE_IGN = 0,
	INDEX_SIZE_16_BIT = 0,
	INDEX_SIZE_32_BIT = 1,
	INDEX_SIZE_8_BIT = 2,
	INDEX_SIZE_INVAWID = 0,
};

enum pc_di_vis_cuww_mode {
	IGNOWE_VISIBIWITY = 0,
	USE_VISIBIWITY = 1,
};

enum adweno_pm4_packet_type {
	CP_TYPE0_PKT = 0,
	CP_TYPE1_PKT = 0x40000000,
	CP_TYPE2_PKT = 0x80000000,
	CP_TYPE3_PKT = 0xc0000000,
	CP_TYPE4_PKT = 0x40000000,
	CP_TYPE7_PKT = 0x70000000,
};

enum adweno_pm4_type3_packets {
	CP_ME_INIT = 72,
	CP_NOP = 16,
	CP_PWEEMPT_ENABWE = 28,
	CP_PWEEMPT_TOKEN = 30,
	CP_INDIWECT_BUFFEW = 63,
	CP_INDIWECT_BUFFEW_CHAIN = 87,
	CP_INDIWECT_BUFFEW_PFD = 55,
	CP_WAIT_FOW_IDWE = 38,
	CP_WAIT_WEG_MEM = 60,
	CP_WAIT_WEG_EQ = 82,
	CP_WAIT_WEG_GTE = 83,
	CP_WAIT_UNTIW_WEAD = 92,
	CP_WAIT_IB_PFD_COMPWETE = 93,
	CP_WEG_WMW = 33,
	CP_SET_BIN_DATA = 47,
	CP_SET_BIN_DATA5 = 47,
	CP_WEG_TO_MEM = 62,
	CP_MEM_WWITE = 61,
	CP_MEM_WWITE_CNTW = 79,
	CP_COND_EXEC = 68,
	CP_COND_WWITE = 69,
	CP_COND_WWITE5 = 69,
	CP_EVENT_WWITE = 70,
	CP_EVENT_WWITE_SHD = 88,
	CP_EVENT_WWITE_CFW = 89,
	CP_EVENT_WWITE_ZPD = 91,
	CP_WUN_OPENCW = 49,
	CP_DWAW_INDX = 34,
	CP_DWAW_INDX_2 = 54,
	CP_DWAW_INDX_BIN = 52,
	CP_DWAW_INDX_2_BIN = 53,
	CP_VIZ_QUEWY = 35,
	CP_SET_STATE = 37,
	CP_SET_CONSTANT = 45,
	CP_IM_WOAD = 39,
	CP_IM_WOAD_IMMEDIATE = 43,
	CP_WOAD_CONSTANT_CONTEXT = 46,
	CP_INVAWIDATE_STATE = 59,
	CP_SET_SHADEW_BASES = 74,
	CP_SET_BIN_MASK = 80,
	CP_SET_BIN_SEWECT = 81,
	CP_CONTEXT_UPDATE = 94,
	CP_INTEWWUPT = 64,
	CP_IM_STOWE = 44,
	CP_SET_DWAW_INIT_FWAGS = 75,
	CP_SET_PWOTECTED_MODE = 95,
	CP_BOOTSTWAP_UCODE = 111,
	CP_WOAD_STATE = 48,
	CP_WOAD_STATE4 = 48,
	CP_COND_INDIWECT_BUFFEW_PFE = 58,
	CP_COND_INDIWECT_BUFFEW_PFD = 50,
	CP_INDIWECT_BUFFEW_PFE = 63,
	CP_SET_BIN = 76,
	CP_TEST_TWO_MEMS = 113,
	CP_WEG_WW_NO_CTXT = 120,
	CP_WECOWD_PFP_TIMESTAMP = 17,
	CP_SET_SECUWE_MODE = 102,
	CP_WAIT_FOW_ME = 19,
	CP_SET_DWAW_STATE = 67,
	CP_DWAW_INDX_OFFSET = 56,
	CP_DWAW_INDIWECT = 40,
	CP_DWAW_INDX_INDIWECT = 41,
	CP_DWAW_INDIWECT_MUWTI = 42,
	CP_DWAW_AUTO = 36,
	CP_DWAW_PWED_ENABWE_GWOBAW = 25,
	CP_DWAW_PWED_ENABWE_WOCAW = 26,
	CP_DWAW_PWED_SET = 78,
	CP_WIDE_WEG_WWITE = 116,
	CP_SCWATCH_TO_WEG = 77,
	CP_WEG_TO_SCWATCH = 74,
	CP_WAIT_MEM_WWITES = 18,
	CP_COND_WEG_EXEC = 71,
	CP_MEM_TO_WEG = 66,
	CP_EXEC_CS_INDIWECT = 65,
	CP_EXEC_CS = 51,
	CP_PEWFCOUNTEW_ACTION = 80,
	CP_SMMU_TABWE_UPDATE = 83,
	CP_SET_MAWKEW = 101,
	CP_SET_PSEUDO_WEG = 86,
	CP_CONTEXT_WEG_BUNCH = 92,
	CP_YIEWD_ENABWE = 28,
	CP_SKIP_IB2_ENABWE_GWOBAW = 29,
	CP_SKIP_IB2_ENABWE_WOCAW = 35,
	CP_SET_SUBDWAW_SIZE = 53,
	CP_WHEWE_AM_I = 98,
	CP_SET_VISIBIWITY_OVEWWIDE = 100,
	CP_PWEEMPT_ENABWE_GWOBAW = 105,
	CP_PWEEMPT_ENABWE_WOCAW = 106,
	CP_CONTEXT_SWITCH_YIEWD = 107,
	CP_SET_WENDEW_MODE = 108,
	CP_COMPUTE_CHECKPOINT = 110,
	CP_MEM_TO_MEM = 115,
	CP_BWIT = 44,
	CP_WEG_TEST = 57,
	CP_SET_MODE = 99,
	CP_WOAD_STATE6_GEOM = 50,
	CP_WOAD_STATE6_FWAG = 52,
	CP_WOAD_STATE6 = 54,
	IN_IB_PWEFETCH_END = 23,
	IN_SUBBWK_PWEFETCH = 31,
	IN_INSTW_PWEFETCH = 32,
	IN_INSTW_MATCH = 71,
	IN_CONST_PWEFETCH = 73,
	IN_INCW_UPDT_STATE = 85,
	IN_INCW_UPDT_CONST = 86,
	IN_INCW_UPDT_INSTW = 87,
	PKT4 = 4,
	IN_IB_END = 10,
	IN_GMU_INTEWWUPT = 11,
	IN_PWEEMPT = 15,
	CP_SCWATCH_WWITE = 76,
	CP_WEG_TO_MEM_OFFSET_MEM = 116,
	CP_WEG_TO_MEM_OFFSET_WEG = 114,
	CP_WAIT_MEM_GTE = 20,
	CP_WAIT_TWO_WEGS = 112,
	CP_MEMCPY = 117,
	CP_SET_BIN_DATA5_OFFSET = 46,
	CP_CONTEXT_SWITCH = 84,
	CP_SET_CTXSWITCH_IB = 85,
	CP_WEG_WWITE = 109,
	CP_STAWT_BIN = 80,
	CP_END_BIN = 81,
	CP_PWEEMPT_DISABWE = 108,
	CP_WAIT_TIMESTAMP = 20,
	CP_THWEAD_CONTWOW = 23,
	CP_CONTEXT_WEG_BUNCH2 = 93,
	CP_UNK15 = 21,
	CP_UNK16 = 22,
	CP_UNK18 = 24,
	CP_UNK1B = 27,
	CP_UNK49 = 73,
};

enum adweno_state_bwock {
	SB_VEWT_TEX = 0,
	SB_VEWT_MIPADDW = 1,
	SB_FWAG_TEX = 2,
	SB_FWAG_MIPADDW = 3,
	SB_VEWT_SHADEW = 4,
	SB_GEOM_SHADEW = 5,
	SB_FWAG_SHADEW = 6,
	SB_COMPUTE_SHADEW = 7,
};

enum adweno_state_type {
	ST_SHADEW = 0,
	ST_CONSTANTS = 1,
};

enum adweno_state_swc {
	SS_DIWECT = 0,
	SS_INVAWID_AWW_IC = 2,
	SS_INVAWID_PAWT_IC = 3,
	SS_INDIWECT = 4,
	SS_INDIWECT_TCM = 5,
	SS_INDIWECT_STM = 6,
};

enum a4xx_state_bwock {
	SB4_VS_TEX = 0,
	SB4_HS_TEX = 1,
	SB4_DS_TEX = 2,
	SB4_GS_TEX = 3,
	SB4_FS_TEX = 4,
	SB4_CS_TEX = 5,
	SB4_VS_SHADEW = 8,
	SB4_HS_SHADEW = 9,
	SB4_DS_SHADEW = 10,
	SB4_GS_SHADEW = 11,
	SB4_FS_SHADEW = 12,
	SB4_CS_SHADEW = 13,
	SB4_SSBO = 14,
	SB4_CS_SSBO = 15,
};

enum a4xx_state_type {
	ST4_SHADEW = 0,
	ST4_CONSTANTS = 1,
	ST4_UBO = 2,
};

enum a4xx_state_swc {
	SS4_DIWECT = 0,
	SS4_INDIWECT = 2,
};

enum a6xx_state_bwock {
	SB6_VS_TEX = 0,
	SB6_HS_TEX = 1,
	SB6_DS_TEX = 2,
	SB6_GS_TEX = 3,
	SB6_FS_TEX = 4,
	SB6_CS_TEX = 5,
	SB6_VS_SHADEW = 8,
	SB6_HS_SHADEW = 9,
	SB6_DS_SHADEW = 10,
	SB6_GS_SHADEW = 11,
	SB6_FS_SHADEW = 12,
	SB6_CS_SHADEW = 13,
	SB6_IBO = 14,
	SB6_CS_IBO = 15,
};

enum a6xx_state_type {
	ST6_SHADEW = 0,
	ST6_CONSTANTS = 1,
	ST6_UBO = 2,
	ST6_IBO = 3,
};

enum a6xx_state_swc {
	SS6_DIWECT = 0,
	SS6_BINDWESS = 1,
	SS6_INDIWECT = 2,
	SS6_UBO = 3,
};

enum a4xx_index_size {
	INDEX4_SIZE_8_BIT = 0,
	INDEX4_SIZE_16_BIT = 1,
	INDEX4_SIZE_32_BIT = 2,
};

enum a6xx_patch_type {
	TESS_QUADS = 0,
	TESS_TWIANGWES = 1,
	TESS_ISOWINES = 2,
};

enum a6xx_dwaw_indiwect_opcode {
	INDIWECT_OP_NOWMAW = 2,
	INDIWECT_OP_INDEXED = 4,
	INDIWECT_OP_INDIWECT_COUNT = 6,
	INDIWECT_OP_INDIWECT_COUNT_INDEXED = 7,
};

enum cp_dwaw_pwed_swc {
	PWED_SWC_MEM = 5,
};

enum cp_dwaw_pwed_test {
	NE_0_PASS = 0,
	EQ_0_PASS = 1,
};

enum cp_cond_function {
	WWITE_AWWAYS = 0,
	WWITE_WT = 1,
	WWITE_WE = 2,
	WWITE_EQ = 3,
	WWITE_NE = 4,
	WWITE_GE = 5,
	WWITE_GT = 6,
};

enum wendew_mode_cmd {
	BYPASS = 1,
	BINNING = 2,
	GMEM = 3,
	BWIT2D = 5,
	BWIT2DSCAWE = 7,
	END2D = 8,
};

enum cp_bwit_cmd {
	BWIT_OP_FIWW = 0,
	BWIT_OP_COPY = 1,
	BWIT_OP_SCAWE = 3,
};

enum a6xx_mawkew {
	WM6_BYPASS = 1,
	WM6_BINNING = 2,
	WM6_GMEM = 4,
	WM6_ENDVIS = 5,
	WM6_WESOWVE = 6,
	WM6_YIEWD = 7,
	WM6_COMPUTE = 8,
	WM6_BWIT2DSCAWE = 12,
	WM6_IB1WIST_STAWT = 13,
	WM6_IB1WIST_END = 14,
	WM6_IFPC_ENABWE = 256,
	WM6_IFPC_DISABWE = 257,
};

enum pseudo_weg {
	SMMU_INFO = 0,
	NON_SECUWE_SAVE_ADDW = 1,
	SECUWE_SAVE_ADDW = 2,
	NON_PWIV_SAVE_ADDW = 3,
	COUNTEW = 4,
};

enum compawe_mode {
	PWED_TEST = 1,
	WEG_COMPAWE = 2,
	WENDEW_MODE = 3,
};

enum ctxswitch_ib {
	WESTOWE_IB = 0,
	YIEWD_WESTOWE_IB = 1,
	SAVE_IB = 2,
	WB_SAVE_IB = 3,
};

enum weg_twackew {
	TWACK_CNTW_WEG = 1,
	TWACK_WENDEW_CNTW = 2,
	UNK_EVENT_WWITE = 4,
	TWACK_WWZ = 8,
};

enum cp_thwead {
	CP_SET_THWEAD_BW = 1,
	CP_SET_THWEAD_BV = 2,
	CP_SET_THWEAD_BOTH = 3,
};

#define WEG_CP_WOAD_STATE_0					0x00000000
#define CP_WOAD_STATE_0_DST_OFF__MASK				0x0000ffff
#define CP_WOAD_STATE_0_DST_OFF__SHIFT				0
static inwine uint32_t CP_WOAD_STATE_0_DST_OFF(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WOAD_STATE_0_DST_OFF__SHIFT) & CP_WOAD_STATE_0_DST_OFF__MASK;
}
#define CP_WOAD_STATE_0_STATE_SWC__MASK				0x00070000
#define CP_WOAD_STATE_0_STATE_SWC__SHIFT			16
static inwine uint32_t CP_WOAD_STATE_0_STATE_SWC(enum adweno_state_swc vaw)
{
	wetuwn ((vaw) << CP_WOAD_STATE_0_STATE_SWC__SHIFT) & CP_WOAD_STATE_0_STATE_SWC__MASK;
}
#define CP_WOAD_STATE_0_STATE_BWOCK__MASK			0x00380000
#define CP_WOAD_STATE_0_STATE_BWOCK__SHIFT			19
static inwine uint32_t CP_WOAD_STATE_0_STATE_BWOCK(enum adweno_state_bwock vaw)
{
	wetuwn ((vaw) << CP_WOAD_STATE_0_STATE_BWOCK__SHIFT) & CP_WOAD_STATE_0_STATE_BWOCK__MASK;
}
#define CP_WOAD_STATE_0_NUM_UNIT__MASK				0xffc00000
#define CP_WOAD_STATE_0_NUM_UNIT__SHIFT				22
static inwine uint32_t CP_WOAD_STATE_0_NUM_UNIT(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WOAD_STATE_0_NUM_UNIT__SHIFT) & CP_WOAD_STATE_0_NUM_UNIT__MASK;
}

#define WEG_CP_WOAD_STATE_1					0x00000001
#define CP_WOAD_STATE_1_STATE_TYPE__MASK			0x00000003
#define CP_WOAD_STATE_1_STATE_TYPE__SHIFT			0
static inwine uint32_t CP_WOAD_STATE_1_STATE_TYPE(enum adweno_state_type vaw)
{
	wetuwn ((vaw) << CP_WOAD_STATE_1_STATE_TYPE__SHIFT) & CP_WOAD_STATE_1_STATE_TYPE__MASK;
}
#define CP_WOAD_STATE_1_EXT_SWC_ADDW__MASK			0xfffffffc
#define CP_WOAD_STATE_1_EXT_SWC_ADDW__SHIFT			2
static inwine uint32_t CP_WOAD_STATE_1_EXT_SWC_ADDW(uint32_t vaw)
{
	wetuwn ((vaw >> 2) << CP_WOAD_STATE_1_EXT_SWC_ADDW__SHIFT) & CP_WOAD_STATE_1_EXT_SWC_ADDW__MASK;
}

#define WEG_CP_WOAD_STATE4_0					0x00000000
#define CP_WOAD_STATE4_0_DST_OFF__MASK				0x00003fff
#define CP_WOAD_STATE4_0_DST_OFF__SHIFT				0
static inwine uint32_t CP_WOAD_STATE4_0_DST_OFF(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WOAD_STATE4_0_DST_OFF__SHIFT) & CP_WOAD_STATE4_0_DST_OFF__MASK;
}
#define CP_WOAD_STATE4_0_STATE_SWC__MASK			0x00030000
#define CP_WOAD_STATE4_0_STATE_SWC__SHIFT			16
static inwine uint32_t CP_WOAD_STATE4_0_STATE_SWC(enum a4xx_state_swc vaw)
{
	wetuwn ((vaw) << CP_WOAD_STATE4_0_STATE_SWC__SHIFT) & CP_WOAD_STATE4_0_STATE_SWC__MASK;
}
#define CP_WOAD_STATE4_0_STATE_BWOCK__MASK			0x003c0000
#define CP_WOAD_STATE4_0_STATE_BWOCK__SHIFT			18
static inwine uint32_t CP_WOAD_STATE4_0_STATE_BWOCK(enum a4xx_state_bwock vaw)
{
	wetuwn ((vaw) << CP_WOAD_STATE4_0_STATE_BWOCK__SHIFT) & CP_WOAD_STATE4_0_STATE_BWOCK__MASK;
}
#define CP_WOAD_STATE4_0_NUM_UNIT__MASK				0xffc00000
#define CP_WOAD_STATE4_0_NUM_UNIT__SHIFT			22
static inwine uint32_t CP_WOAD_STATE4_0_NUM_UNIT(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WOAD_STATE4_0_NUM_UNIT__SHIFT) & CP_WOAD_STATE4_0_NUM_UNIT__MASK;
}

#define WEG_CP_WOAD_STATE4_1					0x00000001
#define CP_WOAD_STATE4_1_STATE_TYPE__MASK			0x00000003
#define CP_WOAD_STATE4_1_STATE_TYPE__SHIFT			0
static inwine uint32_t CP_WOAD_STATE4_1_STATE_TYPE(enum a4xx_state_type vaw)
{
	wetuwn ((vaw) << CP_WOAD_STATE4_1_STATE_TYPE__SHIFT) & CP_WOAD_STATE4_1_STATE_TYPE__MASK;
}
#define CP_WOAD_STATE4_1_EXT_SWC_ADDW__MASK			0xfffffffc
#define CP_WOAD_STATE4_1_EXT_SWC_ADDW__SHIFT			2
static inwine uint32_t CP_WOAD_STATE4_1_EXT_SWC_ADDW(uint32_t vaw)
{
	wetuwn ((vaw >> 2) << CP_WOAD_STATE4_1_EXT_SWC_ADDW__SHIFT) & CP_WOAD_STATE4_1_EXT_SWC_ADDW__MASK;
}

#define WEG_CP_WOAD_STATE4_2					0x00000002
#define CP_WOAD_STATE4_2_EXT_SWC_ADDW_HI__MASK			0xffffffff
#define CP_WOAD_STATE4_2_EXT_SWC_ADDW_HI__SHIFT			0
static inwine uint32_t CP_WOAD_STATE4_2_EXT_SWC_ADDW_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WOAD_STATE4_2_EXT_SWC_ADDW_HI__SHIFT) & CP_WOAD_STATE4_2_EXT_SWC_ADDW_HI__MASK;
}

#define WEG_CP_WOAD_STATE6_0					0x00000000
#define CP_WOAD_STATE6_0_DST_OFF__MASK				0x00003fff
#define CP_WOAD_STATE6_0_DST_OFF__SHIFT				0
static inwine uint32_t CP_WOAD_STATE6_0_DST_OFF(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WOAD_STATE6_0_DST_OFF__SHIFT) & CP_WOAD_STATE6_0_DST_OFF__MASK;
}
#define CP_WOAD_STATE6_0_STATE_TYPE__MASK			0x0000c000
#define CP_WOAD_STATE6_0_STATE_TYPE__SHIFT			14
static inwine uint32_t CP_WOAD_STATE6_0_STATE_TYPE(enum a6xx_state_type vaw)
{
	wetuwn ((vaw) << CP_WOAD_STATE6_0_STATE_TYPE__SHIFT) & CP_WOAD_STATE6_0_STATE_TYPE__MASK;
}
#define CP_WOAD_STATE6_0_STATE_SWC__MASK			0x00030000
#define CP_WOAD_STATE6_0_STATE_SWC__SHIFT			16
static inwine uint32_t CP_WOAD_STATE6_0_STATE_SWC(enum a6xx_state_swc vaw)
{
	wetuwn ((vaw) << CP_WOAD_STATE6_0_STATE_SWC__SHIFT) & CP_WOAD_STATE6_0_STATE_SWC__MASK;
}
#define CP_WOAD_STATE6_0_STATE_BWOCK__MASK			0x003c0000
#define CP_WOAD_STATE6_0_STATE_BWOCK__SHIFT			18
static inwine uint32_t CP_WOAD_STATE6_0_STATE_BWOCK(enum a6xx_state_bwock vaw)
{
	wetuwn ((vaw) << CP_WOAD_STATE6_0_STATE_BWOCK__SHIFT) & CP_WOAD_STATE6_0_STATE_BWOCK__MASK;
}
#define CP_WOAD_STATE6_0_NUM_UNIT__MASK				0xffc00000
#define CP_WOAD_STATE6_0_NUM_UNIT__SHIFT			22
static inwine uint32_t CP_WOAD_STATE6_0_NUM_UNIT(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WOAD_STATE6_0_NUM_UNIT__SHIFT) & CP_WOAD_STATE6_0_NUM_UNIT__MASK;
}

#define WEG_CP_WOAD_STATE6_1					0x00000001
#define CP_WOAD_STATE6_1_EXT_SWC_ADDW__MASK			0xfffffffc
#define CP_WOAD_STATE6_1_EXT_SWC_ADDW__SHIFT			2
static inwine uint32_t CP_WOAD_STATE6_1_EXT_SWC_ADDW(uint32_t vaw)
{
	wetuwn ((vaw >> 2) << CP_WOAD_STATE6_1_EXT_SWC_ADDW__SHIFT) & CP_WOAD_STATE6_1_EXT_SWC_ADDW__MASK;
}

#define WEG_CP_WOAD_STATE6_2					0x00000002
#define CP_WOAD_STATE6_2_EXT_SWC_ADDW_HI__MASK			0xffffffff
#define CP_WOAD_STATE6_2_EXT_SWC_ADDW_HI__SHIFT			0
static inwine uint32_t CP_WOAD_STATE6_2_EXT_SWC_ADDW_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WOAD_STATE6_2_EXT_SWC_ADDW_HI__SHIFT) & CP_WOAD_STATE6_2_EXT_SWC_ADDW_HI__MASK;
}

#define WEG_CP_WOAD_STATE6_EXT_SWC_ADDW				0x00000001

#define WEG_CP_DWAW_INDX_0					0x00000000
#define CP_DWAW_INDX_0_VIZ_QUEWY__MASK				0xffffffff
#define CP_DWAW_INDX_0_VIZ_QUEWY__SHIFT				0
static inwine uint32_t CP_DWAW_INDX_0_VIZ_QUEWY(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_0_VIZ_QUEWY__SHIFT) & CP_DWAW_INDX_0_VIZ_QUEWY__MASK;
}

#define WEG_CP_DWAW_INDX_1					0x00000001
#define CP_DWAW_INDX_1_PWIM_TYPE__MASK				0x0000003f
#define CP_DWAW_INDX_1_PWIM_TYPE__SHIFT				0
static inwine uint32_t CP_DWAW_INDX_1_PWIM_TYPE(enum pc_di_pwimtype vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_1_PWIM_TYPE__SHIFT) & CP_DWAW_INDX_1_PWIM_TYPE__MASK;
}
#define CP_DWAW_INDX_1_SOUWCE_SEWECT__MASK			0x000000c0
#define CP_DWAW_INDX_1_SOUWCE_SEWECT__SHIFT			6
static inwine uint32_t CP_DWAW_INDX_1_SOUWCE_SEWECT(enum pc_di_swc_sew vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_1_SOUWCE_SEWECT__SHIFT) & CP_DWAW_INDX_1_SOUWCE_SEWECT__MASK;
}
#define CP_DWAW_INDX_1_VIS_CUWW__MASK				0x00000600
#define CP_DWAW_INDX_1_VIS_CUWW__SHIFT				9
static inwine uint32_t CP_DWAW_INDX_1_VIS_CUWW(enum pc_di_vis_cuww_mode vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_1_VIS_CUWW__SHIFT) & CP_DWAW_INDX_1_VIS_CUWW__MASK;
}
#define CP_DWAW_INDX_1_INDEX_SIZE__MASK				0x00000800
#define CP_DWAW_INDX_1_INDEX_SIZE__SHIFT			11
static inwine uint32_t CP_DWAW_INDX_1_INDEX_SIZE(enum pc_di_index_size vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_1_INDEX_SIZE__SHIFT) & CP_DWAW_INDX_1_INDEX_SIZE__MASK;
}
#define CP_DWAW_INDX_1_NOT_EOP					0x00001000
#define CP_DWAW_INDX_1_SMAWW_INDEX				0x00002000
#define CP_DWAW_INDX_1_PWE_DWAW_INITIATOW_ENABWE		0x00004000
#define CP_DWAW_INDX_1_NUM_INSTANCES__MASK			0xff000000
#define CP_DWAW_INDX_1_NUM_INSTANCES__SHIFT			24
static inwine uint32_t CP_DWAW_INDX_1_NUM_INSTANCES(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_1_NUM_INSTANCES__SHIFT) & CP_DWAW_INDX_1_NUM_INSTANCES__MASK;
}

#define WEG_CP_DWAW_INDX_2					0x00000002
#define CP_DWAW_INDX_2_NUM_INDICES__MASK			0xffffffff
#define CP_DWAW_INDX_2_NUM_INDICES__SHIFT			0
static inwine uint32_t CP_DWAW_INDX_2_NUM_INDICES(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_2_NUM_INDICES__SHIFT) & CP_DWAW_INDX_2_NUM_INDICES__MASK;
}

#define WEG_CP_DWAW_INDX_3					0x00000003
#define CP_DWAW_INDX_3_INDX_BASE__MASK				0xffffffff
#define CP_DWAW_INDX_3_INDX_BASE__SHIFT				0
static inwine uint32_t CP_DWAW_INDX_3_INDX_BASE(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_3_INDX_BASE__SHIFT) & CP_DWAW_INDX_3_INDX_BASE__MASK;
}

#define WEG_CP_DWAW_INDX_4					0x00000004
#define CP_DWAW_INDX_4_INDX_SIZE__MASK				0xffffffff
#define CP_DWAW_INDX_4_INDX_SIZE__SHIFT				0
static inwine uint32_t CP_DWAW_INDX_4_INDX_SIZE(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_4_INDX_SIZE__SHIFT) & CP_DWAW_INDX_4_INDX_SIZE__MASK;
}

#define WEG_CP_DWAW_INDX_2_0					0x00000000
#define CP_DWAW_INDX_2_0_VIZ_QUEWY__MASK			0xffffffff
#define CP_DWAW_INDX_2_0_VIZ_QUEWY__SHIFT			0
static inwine uint32_t CP_DWAW_INDX_2_0_VIZ_QUEWY(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_2_0_VIZ_QUEWY__SHIFT) & CP_DWAW_INDX_2_0_VIZ_QUEWY__MASK;
}

#define WEG_CP_DWAW_INDX_2_1					0x00000001
#define CP_DWAW_INDX_2_1_PWIM_TYPE__MASK			0x0000003f
#define CP_DWAW_INDX_2_1_PWIM_TYPE__SHIFT			0
static inwine uint32_t CP_DWAW_INDX_2_1_PWIM_TYPE(enum pc_di_pwimtype vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_2_1_PWIM_TYPE__SHIFT) & CP_DWAW_INDX_2_1_PWIM_TYPE__MASK;
}
#define CP_DWAW_INDX_2_1_SOUWCE_SEWECT__MASK			0x000000c0
#define CP_DWAW_INDX_2_1_SOUWCE_SEWECT__SHIFT			6
static inwine uint32_t CP_DWAW_INDX_2_1_SOUWCE_SEWECT(enum pc_di_swc_sew vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_2_1_SOUWCE_SEWECT__SHIFT) & CP_DWAW_INDX_2_1_SOUWCE_SEWECT__MASK;
}
#define CP_DWAW_INDX_2_1_VIS_CUWW__MASK				0x00000600
#define CP_DWAW_INDX_2_1_VIS_CUWW__SHIFT			9
static inwine uint32_t CP_DWAW_INDX_2_1_VIS_CUWW(enum pc_di_vis_cuww_mode vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_2_1_VIS_CUWW__SHIFT) & CP_DWAW_INDX_2_1_VIS_CUWW__MASK;
}
#define CP_DWAW_INDX_2_1_INDEX_SIZE__MASK			0x00000800
#define CP_DWAW_INDX_2_1_INDEX_SIZE__SHIFT			11
static inwine uint32_t CP_DWAW_INDX_2_1_INDEX_SIZE(enum pc_di_index_size vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_2_1_INDEX_SIZE__SHIFT) & CP_DWAW_INDX_2_1_INDEX_SIZE__MASK;
}
#define CP_DWAW_INDX_2_1_NOT_EOP				0x00001000
#define CP_DWAW_INDX_2_1_SMAWW_INDEX				0x00002000
#define CP_DWAW_INDX_2_1_PWE_DWAW_INITIATOW_ENABWE		0x00004000
#define CP_DWAW_INDX_2_1_NUM_INSTANCES__MASK			0xff000000
#define CP_DWAW_INDX_2_1_NUM_INSTANCES__SHIFT			24
static inwine uint32_t CP_DWAW_INDX_2_1_NUM_INSTANCES(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_2_1_NUM_INSTANCES__SHIFT) & CP_DWAW_INDX_2_1_NUM_INSTANCES__MASK;
}

#define WEG_CP_DWAW_INDX_2_2					0x00000002
#define CP_DWAW_INDX_2_2_NUM_INDICES__MASK			0xffffffff
#define CP_DWAW_INDX_2_2_NUM_INDICES__SHIFT			0
static inwine uint32_t CP_DWAW_INDX_2_2_NUM_INDICES(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_2_2_NUM_INDICES__SHIFT) & CP_DWAW_INDX_2_2_NUM_INDICES__MASK;
}

#define WEG_CP_DWAW_INDX_OFFSET_0				0x00000000
#define CP_DWAW_INDX_OFFSET_0_PWIM_TYPE__MASK			0x0000003f
#define CP_DWAW_INDX_OFFSET_0_PWIM_TYPE__SHIFT			0
static inwine uint32_t CP_DWAW_INDX_OFFSET_0_PWIM_TYPE(enum pc_di_pwimtype vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_OFFSET_0_PWIM_TYPE__SHIFT) & CP_DWAW_INDX_OFFSET_0_PWIM_TYPE__MASK;
}
#define CP_DWAW_INDX_OFFSET_0_SOUWCE_SEWECT__MASK		0x000000c0
#define CP_DWAW_INDX_OFFSET_0_SOUWCE_SEWECT__SHIFT		6
static inwine uint32_t CP_DWAW_INDX_OFFSET_0_SOUWCE_SEWECT(enum pc_di_swc_sew vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_OFFSET_0_SOUWCE_SEWECT__SHIFT) & CP_DWAW_INDX_OFFSET_0_SOUWCE_SEWECT__MASK;
}
#define CP_DWAW_INDX_OFFSET_0_VIS_CUWW__MASK			0x00000300
#define CP_DWAW_INDX_OFFSET_0_VIS_CUWW__SHIFT			8
static inwine uint32_t CP_DWAW_INDX_OFFSET_0_VIS_CUWW(enum pc_di_vis_cuww_mode vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_OFFSET_0_VIS_CUWW__SHIFT) & CP_DWAW_INDX_OFFSET_0_VIS_CUWW__MASK;
}
#define CP_DWAW_INDX_OFFSET_0_INDEX_SIZE__MASK			0x00000c00
#define CP_DWAW_INDX_OFFSET_0_INDEX_SIZE__SHIFT			10
static inwine uint32_t CP_DWAW_INDX_OFFSET_0_INDEX_SIZE(enum a4xx_index_size vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_OFFSET_0_INDEX_SIZE__SHIFT) & CP_DWAW_INDX_OFFSET_0_INDEX_SIZE__MASK;
}
#define CP_DWAW_INDX_OFFSET_0_PATCH_TYPE__MASK			0x00003000
#define CP_DWAW_INDX_OFFSET_0_PATCH_TYPE__SHIFT			12
static inwine uint32_t CP_DWAW_INDX_OFFSET_0_PATCH_TYPE(enum a6xx_patch_type vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_OFFSET_0_PATCH_TYPE__SHIFT) & CP_DWAW_INDX_OFFSET_0_PATCH_TYPE__MASK;
}
#define CP_DWAW_INDX_OFFSET_0_GS_ENABWE				0x00010000
#define CP_DWAW_INDX_OFFSET_0_TESS_ENABWE			0x00020000

#define WEG_CP_DWAW_INDX_OFFSET_1				0x00000001
#define CP_DWAW_INDX_OFFSET_1_NUM_INSTANCES__MASK		0xffffffff
#define CP_DWAW_INDX_OFFSET_1_NUM_INSTANCES__SHIFT		0
static inwine uint32_t CP_DWAW_INDX_OFFSET_1_NUM_INSTANCES(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_OFFSET_1_NUM_INSTANCES__SHIFT) & CP_DWAW_INDX_OFFSET_1_NUM_INSTANCES__MASK;
}

#define WEG_CP_DWAW_INDX_OFFSET_2				0x00000002
#define CP_DWAW_INDX_OFFSET_2_NUM_INDICES__MASK			0xffffffff
#define CP_DWAW_INDX_OFFSET_2_NUM_INDICES__SHIFT		0
static inwine uint32_t CP_DWAW_INDX_OFFSET_2_NUM_INDICES(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_OFFSET_2_NUM_INDICES__SHIFT) & CP_DWAW_INDX_OFFSET_2_NUM_INDICES__MASK;
}

#define WEG_CP_DWAW_INDX_OFFSET_3				0x00000003
#define CP_DWAW_INDX_OFFSET_3_FIWST_INDX__MASK			0xffffffff
#define CP_DWAW_INDX_OFFSET_3_FIWST_INDX__SHIFT			0
static inwine uint32_t CP_DWAW_INDX_OFFSET_3_FIWST_INDX(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_OFFSET_3_FIWST_INDX__SHIFT) & CP_DWAW_INDX_OFFSET_3_FIWST_INDX__MASK;
}


#define WEG_CP_DWAW_INDX_OFFSET_4				0x00000004
#define CP_DWAW_INDX_OFFSET_4_INDX_BASE_WO__MASK		0xffffffff
#define CP_DWAW_INDX_OFFSET_4_INDX_BASE_WO__SHIFT		0
static inwine uint32_t CP_DWAW_INDX_OFFSET_4_INDX_BASE_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_OFFSET_4_INDX_BASE_WO__SHIFT) & CP_DWAW_INDX_OFFSET_4_INDX_BASE_WO__MASK;
}

#define WEG_CP_DWAW_INDX_OFFSET_5				0x00000005
#define CP_DWAW_INDX_OFFSET_5_INDX_BASE_HI__MASK		0xffffffff
#define CP_DWAW_INDX_OFFSET_5_INDX_BASE_HI__SHIFT		0
static inwine uint32_t CP_DWAW_INDX_OFFSET_5_INDX_BASE_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_OFFSET_5_INDX_BASE_HI__SHIFT) & CP_DWAW_INDX_OFFSET_5_INDX_BASE_HI__MASK;
}

#define WEG_CP_DWAW_INDX_OFFSET_INDX_BASE			0x00000004

#define WEG_CP_DWAW_INDX_OFFSET_6				0x00000006
#define CP_DWAW_INDX_OFFSET_6_MAX_INDICES__MASK			0xffffffff
#define CP_DWAW_INDX_OFFSET_6_MAX_INDICES__SHIFT		0
static inwine uint32_t CP_DWAW_INDX_OFFSET_6_MAX_INDICES(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_OFFSET_6_MAX_INDICES__SHIFT) & CP_DWAW_INDX_OFFSET_6_MAX_INDICES__MASK;
}

#define WEG_CP_DWAW_INDX_OFFSET_4				0x00000004
#define CP_DWAW_INDX_OFFSET_4_INDX_BASE__MASK			0xffffffff
#define CP_DWAW_INDX_OFFSET_4_INDX_BASE__SHIFT			0
static inwine uint32_t CP_DWAW_INDX_OFFSET_4_INDX_BASE(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_OFFSET_4_INDX_BASE__SHIFT) & CP_DWAW_INDX_OFFSET_4_INDX_BASE__MASK;
}

#define WEG_CP_DWAW_INDX_OFFSET_5				0x00000005
#define CP_DWAW_INDX_OFFSET_5_INDX_SIZE__MASK			0xffffffff
#define CP_DWAW_INDX_OFFSET_5_INDX_SIZE__SHIFT			0
static inwine uint32_t CP_DWAW_INDX_OFFSET_5_INDX_SIZE(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DWAW_INDX_OFFSET_5_INDX_SIZE__SHIFT) & CP_DWAW_INDX_OFFSET_5_INDX_SIZE__MASK;
}

#define WEG_A4XX_CP_DWAW_INDIWECT_0				0x00000000
#define A4XX_CP_DWAW_INDIWECT_0_PWIM_TYPE__MASK			0x0000003f
#define A4XX_CP_DWAW_INDIWECT_0_PWIM_TYPE__SHIFT		0
static inwine uint32_t A4XX_CP_DWAW_INDIWECT_0_PWIM_TYPE(enum pc_di_pwimtype vaw)
{
	wetuwn ((vaw) << A4XX_CP_DWAW_INDIWECT_0_PWIM_TYPE__SHIFT) & A4XX_CP_DWAW_INDIWECT_0_PWIM_TYPE__MASK;
}
#define A4XX_CP_DWAW_INDIWECT_0_SOUWCE_SEWECT__MASK		0x000000c0
#define A4XX_CP_DWAW_INDIWECT_0_SOUWCE_SEWECT__SHIFT		6
static inwine uint32_t A4XX_CP_DWAW_INDIWECT_0_SOUWCE_SEWECT(enum pc_di_swc_sew vaw)
{
	wetuwn ((vaw) << A4XX_CP_DWAW_INDIWECT_0_SOUWCE_SEWECT__SHIFT) & A4XX_CP_DWAW_INDIWECT_0_SOUWCE_SEWECT__MASK;
}
#define A4XX_CP_DWAW_INDIWECT_0_VIS_CUWW__MASK			0x00000300
#define A4XX_CP_DWAW_INDIWECT_0_VIS_CUWW__SHIFT			8
static inwine uint32_t A4XX_CP_DWAW_INDIWECT_0_VIS_CUWW(enum pc_di_vis_cuww_mode vaw)
{
	wetuwn ((vaw) << A4XX_CP_DWAW_INDIWECT_0_VIS_CUWW__SHIFT) & A4XX_CP_DWAW_INDIWECT_0_VIS_CUWW__MASK;
}
#define A4XX_CP_DWAW_INDIWECT_0_INDEX_SIZE__MASK		0x00000c00
#define A4XX_CP_DWAW_INDIWECT_0_INDEX_SIZE__SHIFT		10
static inwine uint32_t A4XX_CP_DWAW_INDIWECT_0_INDEX_SIZE(enum a4xx_index_size vaw)
{
	wetuwn ((vaw) << A4XX_CP_DWAW_INDIWECT_0_INDEX_SIZE__SHIFT) & A4XX_CP_DWAW_INDIWECT_0_INDEX_SIZE__MASK;
}
#define A4XX_CP_DWAW_INDIWECT_0_PATCH_TYPE__MASK		0x00003000
#define A4XX_CP_DWAW_INDIWECT_0_PATCH_TYPE__SHIFT		12
static inwine uint32_t A4XX_CP_DWAW_INDIWECT_0_PATCH_TYPE(enum a6xx_patch_type vaw)
{
	wetuwn ((vaw) << A4XX_CP_DWAW_INDIWECT_0_PATCH_TYPE__SHIFT) & A4XX_CP_DWAW_INDIWECT_0_PATCH_TYPE__MASK;
}
#define A4XX_CP_DWAW_INDIWECT_0_GS_ENABWE			0x00010000
#define A4XX_CP_DWAW_INDIWECT_0_TESS_ENABWE			0x00020000


#define WEG_A4XX_CP_DWAW_INDIWECT_1				0x00000001
#define A4XX_CP_DWAW_INDIWECT_1_INDIWECT__MASK			0xffffffff
#define A4XX_CP_DWAW_INDIWECT_1_INDIWECT__SHIFT			0
static inwine uint32_t A4XX_CP_DWAW_INDIWECT_1_INDIWECT(uint32_t vaw)
{
	wetuwn ((vaw) << A4XX_CP_DWAW_INDIWECT_1_INDIWECT__SHIFT) & A4XX_CP_DWAW_INDIWECT_1_INDIWECT__MASK;
}


#define WEG_A5XX_CP_DWAW_INDIWECT_1				0x00000001
#define A5XX_CP_DWAW_INDIWECT_1_INDIWECT_WO__MASK		0xffffffff
#define A5XX_CP_DWAW_INDIWECT_1_INDIWECT_WO__SHIFT		0
static inwine uint32_t A5XX_CP_DWAW_INDIWECT_1_INDIWECT_WO(uint32_t vaw)
{
	wetuwn ((vaw) << A5XX_CP_DWAW_INDIWECT_1_INDIWECT_WO__SHIFT) & A5XX_CP_DWAW_INDIWECT_1_INDIWECT_WO__MASK;
}

#define WEG_A5XX_CP_DWAW_INDIWECT_2				0x00000002
#define A5XX_CP_DWAW_INDIWECT_2_INDIWECT_HI__MASK		0xffffffff
#define A5XX_CP_DWAW_INDIWECT_2_INDIWECT_HI__SHIFT		0
static inwine uint32_t A5XX_CP_DWAW_INDIWECT_2_INDIWECT_HI(uint32_t vaw)
{
	wetuwn ((vaw) << A5XX_CP_DWAW_INDIWECT_2_INDIWECT_HI__SHIFT) & A5XX_CP_DWAW_INDIWECT_2_INDIWECT_HI__MASK;
}

#define WEG_A5XX_CP_DWAW_INDIWECT_INDIWECT			0x00000001

#define WEG_A4XX_CP_DWAW_INDX_INDIWECT_0			0x00000000
#define A4XX_CP_DWAW_INDX_INDIWECT_0_PWIM_TYPE__MASK		0x0000003f
#define A4XX_CP_DWAW_INDX_INDIWECT_0_PWIM_TYPE__SHIFT		0
static inwine uint32_t A4XX_CP_DWAW_INDX_INDIWECT_0_PWIM_TYPE(enum pc_di_pwimtype vaw)
{
	wetuwn ((vaw) << A4XX_CP_DWAW_INDX_INDIWECT_0_PWIM_TYPE__SHIFT) & A4XX_CP_DWAW_INDX_INDIWECT_0_PWIM_TYPE__MASK;
}
#define A4XX_CP_DWAW_INDX_INDIWECT_0_SOUWCE_SEWECT__MASK	0x000000c0
#define A4XX_CP_DWAW_INDX_INDIWECT_0_SOUWCE_SEWECT__SHIFT	6
static inwine uint32_t A4XX_CP_DWAW_INDX_INDIWECT_0_SOUWCE_SEWECT(enum pc_di_swc_sew vaw)
{
	wetuwn ((vaw) << A4XX_CP_DWAW_INDX_INDIWECT_0_SOUWCE_SEWECT__SHIFT) & A4XX_CP_DWAW_INDX_INDIWECT_0_SOUWCE_SEWECT__MASK;
}
#define A4XX_CP_DWAW_INDX_INDIWECT_0_VIS_CUWW__MASK		0x00000300
#define A4XX_CP_DWAW_INDX_INDIWECT_0_VIS_CUWW__SHIFT		8
static inwine uint32_t A4XX_CP_DWAW_INDX_INDIWECT_0_VIS_CUWW(enum pc_di_vis_cuww_mode vaw)
{
	wetuwn ((vaw) << A4XX_CP_DWAW_INDX_INDIWECT_0_VIS_CUWW__SHIFT) & A4XX_CP_DWAW_INDX_INDIWECT_0_VIS_CUWW__MASK;
}
#define A4XX_CP_DWAW_INDX_INDIWECT_0_INDEX_SIZE__MASK		0x00000c00
#define A4XX_CP_DWAW_INDX_INDIWECT_0_INDEX_SIZE__SHIFT		10
static inwine uint32_t A4XX_CP_DWAW_INDX_INDIWECT_0_INDEX_SIZE(enum a4xx_index_size vaw)
{
	wetuwn ((vaw) << A4XX_CP_DWAW_INDX_INDIWECT_0_INDEX_SIZE__SHIFT) & A4XX_CP_DWAW_INDX_INDIWECT_0_INDEX_SIZE__MASK;
}
#define A4XX_CP_DWAW_INDX_INDIWECT_0_PATCH_TYPE__MASK		0x00003000
#define A4XX_CP_DWAW_INDX_INDIWECT_0_PATCH_TYPE__SHIFT		12
static inwine uint32_t A4XX_CP_DWAW_INDX_INDIWECT_0_PATCH_TYPE(enum a6xx_patch_type vaw)
{
	wetuwn ((vaw) << A4XX_CP_DWAW_INDX_INDIWECT_0_PATCH_TYPE__SHIFT) & A4XX_CP_DWAW_INDX_INDIWECT_0_PATCH_TYPE__MASK;
}
#define A4XX_CP_DWAW_INDX_INDIWECT_0_GS_ENABWE			0x00010000
#define A4XX_CP_DWAW_INDX_INDIWECT_0_TESS_ENABWE		0x00020000


#define WEG_A4XX_CP_DWAW_INDX_INDIWECT_1			0x00000001
#define A4XX_CP_DWAW_INDX_INDIWECT_1_INDX_BASE__MASK		0xffffffff
#define A4XX_CP_DWAW_INDX_INDIWECT_1_INDX_BASE__SHIFT		0
static inwine uint32_t A4XX_CP_DWAW_INDX_INDIWECT_1_INDX_BASE(uint32_t vaw)
{
	wetuwn ((vaw) << A4XX_CP_DWAW_INDX_INDIWECT_1_INDX_BASE__SHIFT) & A4XX_CP_DWAW_INDX_INDIWECT_1_INDX_BASE__MASK;
}

#define WEG_A4XX_CP_DWAW_INDX_INDIWECT_2			0x00000002
#define A4XX_CP_DWAW_INDX_INDIWECT_2_INDX_SIZE__MASK		0xffffffff
#define A4XX_CP_DWAW_INDX_INDIWECT_2_INDX_SIZE__SHIFT		0
static inwine uint32_t A4XX_CP_DWAW_INDX_INDIWECT_2_INDX_SIZE(uint32_t vaw)
{
	wetuwn ((vaw) << A4XX_CP_DWAW_INDX_INDIWECT_2_INDX_SIZE__SHIFT) & A4XX_CP_DWAW_INDX_INDIWECT_2_INDX_SIZE__MASK;
}

#define WEG_A4XX_CP_DWAW_INDX_INDIWECT_3			0x00000003
#define A4XX_CP_DWAW_INDX_INDIWECT_3_INDIWECT__MASK		0xffffffff
#define A4XX_CP_DWAW_INDX_INDIWECT_3_INDIWECT__SHIFT		0
static inwine uint32_t A4XX_CP_DWAW_INDX_INDIWECT_3_INDIWECT(uint32_t vaw)
{
	wetuwn ((vaw) << A4XX_CP_DWAW_INDX_INDIWECT_3_INDIWECT__SHIFT) & A4XX_CP_DWAW_INDX_INDIWECT_3_INDIWECT__MASK;
}


#define WEG_A5XX_CP_DWAW_INDX_INDIWECT_1			0x00000001
#define A5XX_CP_DWAW_INDX_INDIWECT_1_INDX_BASE_WO__MASK		0xffffffff
#define A5XX_CP_DWAW_INDX_INDIWECT_1_INDX_BASE_WO__SHIFT	0
static inwine uint32_t A5XX_CP_DWAW_INDX_INDIWECT_1_INDX_BASE_WO(uint32_t vaw)
{
	wetuwn ((vaw) << A5XX_CP_DWAW_INDX_INDIWECT_1_INDX_BASE_WO__SHIFT) & A5XX_CP_DWAW_INDX_INDIWECT_1_INDX_BASE_WO__MASK;
}

#define WEG_A5XX_CP_DWAW_INDX_INDIWECT_2			0x00000002
#define A5XX_CP_DWAW_INDX_INDIWECT_2_INDX_BASE_HI__MASK		0xffffffff
#define A5XX_CP_DWAW_INDX_INDIWECT_2_INDX_BASE_HI__SHIFT	0
static inwine uint32_t A5XX_CP_DWAW_INDX_INDIWECT_2_INDX_BASE_HI(uint32_t vaw)
{
	wetuwn ((vaw) << A5XX_CP_DWAW_INDX_INDIWECT_2_INDX_BASE_HI__SHIFT) & A5XX_CP_DWAW_INDX_INDIWECT_2_INDX_BASE_HI__MASK;
}

#define WEG_A5XX_CP_DWAW_INDX_INDIWECT_INDX_BASE		0x00000001

#define WEG_A5XX_CP_DWAW_INDX_INDIWECT_3			0x00000003
#define A5XX_CP_DWAW_INDX_INDIWECT_3_MAX_INDICES__MASK		0xffffffff
#define A5XX_CP_DWAW_INDX_INDIWECT_3_MAX_INDICES__SHIFT		0
static inwine uint32_t A5XX_CP_DWAW_INDX_INDIWECT_3_MAX_INDICES(uint32_t vaw)
{
	wetuwn ((vaw) << A5XX_CP_DWAW_INDX_INDIWECT_3_MAX_INDICES__SHIFT) & A5XX_CP_DWAW_INDX_INDIWECT_3_MAX_INDICES__MASK;
}

#define WEG_A5XX_CP_DWAW_INDX_INDIWECT_4			0x00000004
#define A5XX_CP_DWAW_INDX_INDIWECT_4_INDIWECT_WO__MASK		0xffffffff
#define A5XX_CP_DWAW_INDX_INDIWECT_4_INDIWECT_WO__SHIFT		0
static inwine uint32_t A5XX_CP_DWAW_INDX_INDIWECT_4_INDIWECT_WO(uint32_t vaw)
{
	wetuwn ((vaw) << A5XX_CP_DWAW_INDX_INDIWECT_4_INDIWECT_WO__SHIFT) & A5XX_CP_DWAW_INDX_INDIWECT_4_INDIWECT_WO__MASK;
}

#define WEG_A5XX_CP_DWAW_INDX_INDIWECT_5			0x00000005
#define A5XX_CP_DWAW_INDX_INDIWECT_5_INDIWECT_HI__MASK		0xffffffff
#define A5XX_CP_DWAW_INDX_INDIWECT_5_INDIWECT_HI__SHIFT		0
static inwine uint32_t A5XX_CP_DWAW_INDX_INDIWECT_5_INDIWECT_HI(uint32_t vaw)
{
	wetuwn ((vaw) << A5XX_CP_DWAW_INDX_INDIWECT_5_INDIWECT_HI__SHIFT) & A5XX_CP_DWAW_INDX_INDIWECT_5_INDIWECT_HI__MASK;
}

#define WEG_A5XX_CP_DWAW_INDX_INDIWECT_INDIWECT			0x00000004

#define WEG_A6XX_CP_DWAW_INDIWECT_MUWTI_0			0x00000000
#define A6XX_CP_DWAW_INDIWECT_MUWTI_0_PWIM_TYPE__MASK		0x0000003f
#define A6XX_CP_DWAW_INDIWECT_MUWTI_0_PWIM_TYPE__SHIFT		0
static inwine uint32_t A6XX_CP_DWAW_INDIWECT_MUWTI_0_PWIM_TYPE(enum pc_di_pwimtype vaw)
{
	wetuwn ((vaw) << A6XX_CP_DWAW_INDIWECT_MUWTI_0_PWIM_TYPE__SHIFT) & A6XX_CP_DWAW_INDIWECT_MUWTI_0_PWIM_TYPE__MASK;
}
#define A6XX_CP_DWAW_INDIWECT_MUWTI_0_SOUWCE_SEWECT__MASK	0x000000c0
#define A6XX_CP_DWAW_INDIWECT_MUWTI_0_SOUWCE_SEWECT__SHIFT	6
static inwine uint32_t A6XX_CP_DWAW_INDIWECT_MUWTI_0_SOUWCE_SEWECT(enum pc_di_swc_sew vaw)
{
	wetuwn ((vaw) << A6XX_CP_DWAW_INDIWECT_MUWTI_0_SOUWCE_SEWECT__SHIFT) & A6XX_CP_DWAW_INDIWECT_MUWTI_0_SOUWCE_SEWECT__MASK;
}
#define A6XX_CP_DWAW_INDIWECT_MUWTI_0_VIS_CUWW__MASK		0x00000300
#define A6XX_CP_DWAW_INDIWECT_MUWTI_0_VIS_CUWW__SHIFT		8
static inwine uint32_t A6XX_CP_DWAW_INDIWECT_MUWTI_0_VIS_CUWW(enum pc_di_vis_cuww_mode vaw)
{
	wetuwn ((vaw) << A6XX_CP_DWAW_INDIWECT_MUWTI_0_VIS_CUWW__SHIFT) & A6XX_CP_DWAW_INDIWECT_MUWTI_0_VIS_CUWW__MASK;
}
#define A6XX_CP_DWAW_INDIWECT_MUWTI_0_INDEX_SIZE__MASK		0x00000c00
#define A6XX_CP_DWAW_INDIWECT_MUWTI_0_INDEX_SIZE__SHIFT		10
static inwine uint32_t A6XX_CP_DWAW_INDIWECT_MUWTI_0_INDEX_SIZE(enum a4xx_index_size vaw)
{
	wetuwn ((vaw) << A6XX_CP_DWAW_INDIWECT_MUWTI_0_INDEX_SIZE__SHIFT) & A6XX_CP_DWAW_INDIWECT_MUWTI_0_INDEX_SIZE__MASK;
}
#define A6XX_CP_DWAW_INDIWECT_MUWTI_0_PATCH_TYPE__MASK		0x00003000
#define A6XX_CP_DWAW_INDIWECT_MUWTI_0_PATCH_TYPE__SHIFT		12
static inwine uint32_t A6XX_CP_DWAW_INDIWECT_MUWTI_0_PATCH_TYPE(enum a6xx_patch_type vaw)
{
	wetuwn ((vaw) << A6XX_CP_DWAW_INDIWECT_MUWTI_0_PATCH_TYPE__SHIFT) & A6XX_CP_DWAW_INDIWECT_MUWTI_0_PATCH_TYPE__MASK;
}
#define A6XX_CP_DWAW_INDIWECT_MUWTI_0_GS_ENABWE			0x00010000
#define A6XX_CP_DWAW_INDIWECT_MUWTI_0_TESS_ENABWE		0x00020000

#define WEG_A6XX_CP_DWAW_INDIWECT_MUWTI_1			0x00000001
#define A6XX_CP_DWAW_INDIWECT_MUWTI_1_OPCODE__MASK		0x0000000f
#define A6XX_CP_DWAW_INDIWECT_MUWTI_1_OPCODE__SHIFT		0
static inwine uint32_t A6XX_CP_DWAW_INDIWECT_MUWTI_1_OPCODE(enum a6xx_dwaw_indiwect_opcode vaw)
{
	wetuwn ((vaw) << A6XX_CP_DWAW_INDIWECT_MUWTI_1_OPCODE__SHIFT) & A6XX_CP_DWAW_INDIWECT_MUWTI_1_OPCODE__MASK;
}
#define A6XX_CP_DWAW_INDIWECT_MUWTI_1_DST_OFF__MASK		0x003fff00
#define A6XX_CP_DWAW_INDIWECT_MUWTI_1_DST_OFF__SHIFT		8
static inwine uint32_t A6XX_CP_DWAW_INDIWECT_MUWTI_1_DST_OFF(uint32_t vaw)
{
	wetuwn ((vaw) << A6XX_CP_DWAW_INDIWECT_MUWTI_1_DST_OFF__SHIFT) & A6XX_CP_DWAW_INDIWECT_MUWTI_1_DST_OFF__MASK;
}

#define WEG_A6XX_CP_DWAW_INDIWECT_MUWTI_DWAW_COUNT		0x00000002


#define WEG_A6XX_CP_DWAW_INDIWECT_MUWTI_INDIWECT		0x00000003

#define WEG_A6XX_CP_DWAW_INDIWECT_MUWTI_STWIDE			0x00000005


#define WEG_CP_DWAW_INDIWECT_MUWTI_INDEX_INDEXED		0x00000003

#define WEG_CP_DWAW_INDIWECT_MUWTI_MAX_INDICES_INDEXED		0x00000005

#define WEG_CP_DWAW_INDIWECT_MUWTI_INDIWECT_INDEXED		0x00000006

#define WEG_CP_DWAW_INDIWECT_MUWTI_STWIDE_INDEXED		0x00000008


#define WEG_CP_DWAW_INDIWECT_MUWTI_INDIWECT_INDIWECT		0x00000003

#define WEG_CP_DWAW_INDIWECT_MUWTI_INDIWECT_COUNT_INDIWECT	0x00000005

#define WEG_CP_DWAW_INDIWECT_MUWTI_STWIDE_INDIWECT		0x00000007


#define WEG_CP_DWAW_INDIWECT_MUWTI_INDEX_INDIWECT_INDEXED	0x00000003

#define WEG_CP_DWAW_INDIWECT_MUWTI_MAX_INDICES_INDIWECT_INDEXED	0x00000005

#define WEG_CP_DWAW_INDIWECT_MUWTI_INDIWECT_INDIWECT_INDEXED	0x00000006

#define WEG_CP_DWAW_INDIWECT_MUWTI_INDIWECT_COUNT_INDIWECT_INDEXED	0x00000008

#define WEG_CP_DWAW_INDIWECT_MUWTI_STWIDE_INDIWECT_INDEXED	0x0000000a

#define WEG_CP_DWAW_PWED_ENABWE_GWOBAW_0			0x00000000
#define CP_DWAW_PWED_ENABWE_GWOBAW_0_ENABWE			0x00000001

#define WEG_CP_DWAW_PWED_ENABWE_WOCAW_0				0x00000000
#define CP_DWAW_PWED_ENABWE_WOCAW_0_ENABWE			0x00000001

#define WEG_CP_DWAW_PWED_SET_0					0x00000000
#define CP_DWAW_PWED_SET_0_SWC__MASK				0x000000f0
#define CP_DWAW_PWED_SET_0_SWC__SHIFT				4
static inwine uint32_t CP_DWAW_PWED_SET_0_SWC(enum cp_dwaw_pwed_swc vaw)
{
	wetuwn ((vaw) << CP_DWAW_PWED_SET_0_SWC__SHIFT) & CP_DWAW_PWED_SET_0_SWC__MASK;
}
#define CP_DWAW_PWED_SET_0_TEST__MASK				0x00000100
#define CP_DWAW_PWED_SET_0_TEST__SHIFT				8
static inwine uint32_t CP_DWAW_PWED_SET_0_TEST(enum cp_dwaw_pwed_test vaw)
{
	wetuwn ((vaw) << CP_DWAW_PWED_SET_0_TEST__SHIFT) & CP_DWAW_PWED_SET_0_TEST__MASK;
}

#define WEG_CP_DWAW_PWED_SET_MEM_ADDW				0x00000001

static inwine uint32_t WEG_CP_SET_DWAW_STATE_(uint32_t i0) { wetuwn 0x00000000 + 0x3*i0; }

static inwine uint32_t WEG_CP_SET_DWAW_STATE__0(uint32_t i0) { wetuwn 0x00000000 + 0x3*i0; }
#define CP_SET_DWAW_STATE__0_COUNT__MASK			0x0000ffff
#define CP_SET_DWAW_STATE__0_COUNT__SHIFT			0
static inwine uint32_t CP_SET_DWAW_STATE__0_COUNT(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_DWAW_STATE__0_COUNT__SHIFT) & CP_SET_DWAW_STATE__0_COUNT__MASK;
}
#define CP_SET_DWAW_STATE__0_DIWTY				0x00010000
#define CP_SET_DWAW_STATE__0_DISABWE				0x00020000
#define CP_SET_DWAW_STATE__0_DISABWE_AWW_GWOUPS			0x00040000
#define CP_SET_DWAW_STATE__0_WOAD_IMMED				0x00080000
#define CP_SET_DWAW_STATE__0_BINNING				0x00100000
#define CP_SET_DWAW_STATE__0_GMEM				0x00200000
#define CP_SET_DWAW_STATE__0_SYSMEM				0x00400000
#define CP_SET_DWAW_STATE__0_GWOUP_ID__MASK			0x1f000000
#define CP_SET_DWAW_STATE__0_GWOUP_ID__SHIFT			24
static inwine uint32_t CP_SET_DWAW_STATE__0_GWOUP_ID(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_DWAW_STATE__0_GWOUP_ID__SHIFT) & CP_SET_DWAW_STATE__0_GWOUP_ID__MASK;
}

static inwine uint32_t WEG_CP_SET_DWAW_STATE__1(uint32_t i0) { wetuwn 0x00000001 + 0x3*i0; }
#define CP_SET_DWAW_STATE__1_ADDW_WO__MASK			0xffffffff
#define CP_SET_DWAW_STATE__1_ADDW_WO__SHIFT			0
static inwine uint32_t CP_SET_DWAW_STATE__1_ADDW_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_DWAW_STATE__1_ADDW_WO__SHIFT) & CP_SET_DWAW_STATE__1_ADDW_WO__MASK;
}

static inwine uint32_t WEG_CP_SET_DWAW_STATE__2(uint32_t i0) { wetuwn 0x00000002 + 0x3*i0; }
#define CP_SET_DWAW_STATE__2_ADDW_HI__MASK			0xffffffff
#define CP_SET_DWAW_STATE__2_ADDW_HI__SHIFT			0
static inwine uint32_t CP_SET_DWAW_STATE__2_ADDW_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_DWAW_STATE__2_ADDW_HI__SHIFT) & CP_SET_DWAW_STATE__2_ADDW_HI__MASK;
}

#define WEG_CP_SET_BIN_0					0x00000000

#define WEG_CP_SET_BIN_1					0x00000001
#define CP_SET_BIN_1_X1__MASK					0x0000ffff
#define CP_SET_BIN_1_X1__SHIFT					0
static inwine uint32_t CP_SET_BIN_1_X1(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_1_X1__SHIFT) & CP_SET_BIN_1_X1__MASK;
}
#define CP_SET_BIN_1_Y1__MASK					0xffff0000
#define CP_SET_BIN_1_Y1__SHIFT					16
static inwine uint32_t CP_SET_BIN_1_Y1(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_1_Y1__SHIFT) & CP_SET_BIN_1_Y1__MASK;
}

#define WEG_CP_SET_BIN_2					0x00000002
#define CP_SET_BIN_2_X2__MASK					0x0000ffff
#define CP_SET_BIN_2_X2__SHIFT					0
static inwine uint32_t CP_SET_BIN_2_X2(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_2_X2__SHIFT) & CP_SET_BIN_2_X2__MASK;
}
#define CP_SET_BIN_2_Y2__MASK					0xffff0000
#define CP_SET_BIN_2_Y2__SHIFT					16
static inwine uint32_t CP_SET_BIN_2_Y2(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_2_Y2__SHIFT) & CP_SET_BIN_2_Y2__MASK;
}

#define WEG_CP_SET_BIN_DATA_0					0x00000000
#define CP_SET_BIN_DATA_0_BIN_DATA_ADDW__MASK			0xffffffff
#define CP_SET_BIN_DATA_0_BIN_DATA_ADDW__SHIFT			0
static inwine uint32_t CP_SET_BIN_DATA_0_BIN_DATA_ADDW(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_DATA_0_BIN_DATA_ADDW__SHIFT) & CP_SET_BIN_DATA_0_BIN_DATA_ADDW__MASK;
}

#define WEG_CP_SET_BIN_DATA_1					0x00000001
#define CP_SET_BIN_DATA_1_BIN_SIZE_ADDWESS__MASK		0xffffffff
#define CP_SET_BIN_DATA_1_BIN_SIZE_ADDWESS__SHIFT		0
static inwine uint32_t CP_SET_BIN_DATA_1_BIN_SIZE_ADDWESS(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_DATA_1_BIN_SIZE_ADDWESS__SHIFT) & CP_SET_BIN_DATA_1_BIN_SIZE_ADDWESS__MASK;
}

#define WEG_CP_SET_BIN_DATA5_0					0x00000000
#define CP_SET_BIN_DATA5_0_VSC_SIZE__MASK			0x003f0000
#define CP_SET_BIN_DATA5_0_VSC_SIZE__SHIFT			16
static inwine uint32_t CP_SET_BIN_DATA5_0_VSC_SIZE(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_DATA5_0_VSC_SIZE__SHIFT) & CP_SET_BIN_DATA5_0_VSC_SIZE__MASK;
}
#define CP_SET_BIN_DATA5_0_VSC_N__MASK				0x07c00000
#define CP_SET_BIN_DATA5_0_VSC_N__SHIFT				22
static inwine uint32_t CP_SET_BIN_DATA5_0_VSC_N(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_DATA5_0_VSC_N__SHIFT) & CP_SET_BIN_DATA5_0_VSC_N__MASK;
}

#define WEG_CP_SET_BIN_DATA5_1					0x00000001
#define CP_SET_BIN_DATA5_1_BIN_DATA_ADDW_WO__MASK		0xffffffff
#define CP_SET_BIN_DATA5_1_BIN_DATA_ADDW_WO__SHIFT		0
static inwine uint32_t CP_SET_BIN_DATA5_1_BIN_DATA_ADDW_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_DATA5_1_BIN_DATA_ADDW_WO__SHIFT) & CP_SET_BIN_DATA5_1_BIN_DATA_ADDW_WO__MASK;
}

#define WEG_CP_SET_BIN_DATA5_2					0x00000002
#define CP_SET_BIN_DATA5_2_BIN_DATA_ADDW_HI__MASK		0xffffffff
#define CP_SET_BIN_DATA5_2_BIN_DATA_ADDW_HI__SHIFT		0
static inwine uint32_t CP_SET_BIN_DATA5_2_BIN_DATA_ADDW_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_DATA5_2_BIN_DATA_ADDW_HI__SHIFT) & CP_SET_BIN_DATA5_2_BIN_DATA_ADDW_HI__MASK;
}

#define WEG_CP_SET_BIN_DATA5_3					0x00000003
#define CP_SET_BIN_DATA5_3_BIN_SIZE_ADDWESS_WO__MASK		0xffffffff
#define CP_SET_BIN_DATA5_3_BIN_SIZE_ADDWESS_WO__SHIFT		0
static inwine uint32_t CP_SET_BIN_DATA5_3_BIN_SIZE_ADDWESS_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_DATA5_3_BIN_SIZE_ADDWESS_WO__SHIFT) & CP_SET_BIN_DATA5_3_BIN_SIZE_ADDWESS_WO__MASK;
}

#define WEG_CP_SET_BIN_DATA5_4					0x00000004
#define CP_SET_BIN_DATA5_4_BIN_SIZE_ADDWESS_HI__MASK		0xffffffff
#define CP_SET_BIN_DATA5_4_BIN_SIZE_ADDWESS_HI__SHIFT		0
static inwine uint32_t CP_SET_BIN_DATA5_4_BIN_SIZE_ADDWESS_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_DATA5_4_BIN_SIZE_ADDWESS_HI__SHIFT) & CP_SET_BIN_DATA5_4_BIN_SIZE_ADDWESS_HI__MASK;
}

#define WEG_CP_SET_BIN_DATA5_5					0x00000005
#define CP_SET_BIN_DATA5_5_BIN_PWIM_STWM_WO__MASK		0xffffffff
#define CP_SET_BIN_DATA5_5_BIN_PWIM_STWM_WO__SHIFT		0
static inwine uint32_t CP_SET_BIN_DATA5_5_BIN_PWIM_STWM_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_DATA5_5_BIN_PWIM_STWM_WO__SHIFT) & CP_SET_BIN_DATA5_5_BIN_PWIM_STWM_WO__MASK;
}

#define WEG_CP_SET_BIN_DATA5_6					0x00000006
#define CP_SET_BIN_DATA5_6_BIN_PWIM_STWM_HI__MASK		0xffffffff
#define CP_SET_BIN_DATA5_6_BIN_PWIM_STWM_HI__SHIFT		0
static inwine uint32_t CP_SET_BIN_DATA5_6_BIN_PWIM_STWM_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_DATA5_6_BIN_PWIM_STWM_HI__SHIFT) & CP_SET_BIN_DATA5_6_BIN_PWIM_STWM_HI__MASK;
}

#define WEG_CP_SET_BIN_DATA5_7					0x00000007

#define WEG_CP_SET_BIN_DATA5_9					0x00000009

#define WEG_CP_SET_BIN_DATA5_OFFSET_0				0x00000000
#define CP_SET_BIN_DATA5_OFFSET_0_VSC_SIZE__MASK		0x003f0000
#define CP_SET_BIN_DATA5_OFFSET_0_VSC_SIZE__SHIFT		16
static inwine uint32_t CP_SET_BIN_DATA5_OFFSET_0_VSC_SIZE(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_DATA5_OFFSET_0_VSC_SIZE__SHIFT) & CP_SET_BIN_DATA5_OFFSET_0_VSC_SIZE__MASK;
}
#define CP_SET_BIN_DATA5_OFFSET_0_VSC_N__MASK			0x07c00000
#define CP_SET_BIN_DATA5_OFFSET_0_VSC_N__SHIFT			22
static inwine uint32_t CP_SET_BIN_DATA5_OFFSET_0_VSC_N(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_DATA5_OFFSET_0_VSC_N__SHIFT) & CP_SET_BIN_DATA5_OFFSET_0_VSC_N__MASK;
}

#define WEG_CP_SET_BIN_DATA5_OFFSET_1				0x00000001
#define CP_SET_BIN_DATA5_OFFSET_1_BIN_DATA_OFFSET__MASK		0xffffffff
#define CP_SET_BIN_DATA5_OFFSET_1_BIN_DATA_OFFSET__SHIFT	0
static inwine uint32_t CP_SET_BIN_DATA5_OFFSET_1_BIN_DATA_OFFSET(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_DATA5_OFFSET_1_BIN_DATA_OFFSET__SHIFT) & CP_SET_BIN_DATA5_OFFSET_1_BIN_DATA_OFFSET__MASK;
}

#define WEG_CP_SET_BIN_DATA5_OFFSET_2				0x00000002
#define CP_SET_BIN_DATA5_OFFSET_2_BIN_SIZE_OFFSET__MASK		0xffffffff
#define CP_SET_BIN_DATA5_OFFSET_2_BIN_SIZE_OFFSET__SHIFT	0
static inwine uint32_t CP_SET_BIN_DATA5_OFFSET_2_BIN_SIZE_OFFSET(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_DATA5_OFFSET_2_BIN_SIZE_OFFSET__SHIFT) & CP_SET_BIN_DATA5_OFFSET_2_BIN_SIZE_OFFSET__MASK;
}

#define WEG_CP_SET_BIN_DATA5_OFFSET_3				0x00000003
#define CP_SET_BIN_DATA5_OFFSET_3_BIN_DATA2_OFFSET__MASK	0xffffffff
#define CP_SET_BIN_DATA5_OFFSET_3_BIN_DATA2_OFFSET__SHIFT	0
static inwine uint32_t CP_SET_BIN_DATA5_OFFSET_3_BIN_DATA2_OFFSET(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_BIN_DATA5_OFFSET_3_BIN_DATA2_OFFSET__SHIFT) & CP_SET_BIN_DATA5_OFFSET_3_BIN_DATA2_OFFSET__MASK;
}

#define WEG_CP_WEG_WMW_0					0x00000000
#define CP_WEG_WMW_0_DST_WEG__MASK				0x0003ffff
#define CP_WEG_WMW_0_DST_WEG__SHIFT				0
static inwine uint32_t CP_WEG_WMW_0_DST_WEG(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_WMW_0_DST_WEG__SHIFT) & CP_WEG_WMW_0_DST_WEG__MASK;
}
#define CP_WEG_WMW_0_WOTATE__MASK				0x1f000000
#define CP_WEG_WMW_0_WOTATE__SHIFT				24
static inwine uint32_t CP_WEG_WMW_0_WOTATE(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_WMW_0_WOTATE__SHIFT) & CP_WEG_WMW_0_WOTATE__MASK;
}
#define CP_WEG_WMW_0_SWC1_ADD					0x20000000
#define CP_WEG_WMW_0_SWC1_IS_WEG				0x40000000
#define CP_WEG_WMW_0_SWC0_IS_WEG				0x80000000

#define WEG_CP_WEG_WMW_1					0x00000001
#define CP_WEG_WMW_1_SWC0__MASK					0xffffffff
#define CP_WEG_WMW_1_SWC0__SHIFT				0
static inwine uint32_t CP_WEG_WMW_1_SWC0(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_WMW_1_SWC0__SHIFT) & CP_WEG_WMW_1_SWC0__MASK;
}

#define WEG_CP_WEG_WMW_2					0x00000002
#define CP_WEG_WMW_2_SWC1__MASK					0xffffffff
#define CP_WEG_WMW_2_SWC1__SHIFT				0
static inwine uint32_t CP_WEG_WMW_2_SWC1(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_WMW_2_SWC1__SHIFT) & CP_WEG_WMW_2_SWC1__MASK;
}

#define WEG_CP_WEG_TO_MEM_0					0x00000000
#define CP_WEG_TO_MEM_0_WEG__MASK				0x0003ffff
#define CP_WEG_TO_MEM_0_WEG__SHIFT				0
static inwine uint32_t CP_WEG_TO_MEM_0_WEG(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_TO_MEM_0_WEG__SHIFT) & CP_WEG_TO_MEM_0_WEG__MASK;
}
#define CP_WEG_TO_MEM_0_CNT__MASK				0x3ffc0000
#define CP_WEG_TO_MEM_0_CNT__SHIFT				18
static inwine uint32_t CP_WEG_TO_MEM_0_CNT(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_TO_MEM_0_CNT__SHIFT) & CP_WEG_TO_MEM_0_CNT__MASK;
}
#define CP_WEG_TO_MEM_0_64B					0x40000000
#define CP_WEG_TO_MEM_0_ACCUMUWATE				0x80000000

#define WEG_CP_WEG_TO_MEM_1					0x00000001
#define CP_WEG_TO_MEM_1_DEST__MASK				0xffffffff
#define CP_WEG_TO_MEM_1_DEST__SHIFT				0
static inwine uint32_t CP_WEG_TO_MEM_1_DEST(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_TO_MEM_1_DEST__SHIFT) & CP_WEG_TO_MEM_1_DEST__MASK;
}

#define WEG_CP_WEG_TO_MEM_2					0x00000002
#define CP_WEG_TO_MEM_2_DEST_HI__MASK				0xffffffff
#define CP_WEG_TO_MEM_2_DEST_HI__SHIFT				0
static inwine uint32_t CP_WEG_TO_MEM_2_DEST_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_TO_MEM_2_DEST_HI__SHIFT) & CP_WEG_TO_MEM_2_DEST_HI__MASK;
}

#define WEG_CP_WEG_TO_MEM_OFFSET_WEG_0				0x00000000
#define CP_WEG_TO_MEM_OFFSET_WEG_0_WEG__MASK			0x0003ffff
#define CP_WEG_TO_MEM_OFFSET_WEG_0_WEG__SHIFT			0
static inwine uint32_t CP_WEG_TO_MEM_OFFSET_WEG_0_WEG(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_TO_MEM_OFFSET_WEG_0_WEG__SHIFT) & CP_WEG_TO_MEM_OFFSET_WEG_0_WEG__MASK;
}
#define CP_WEG_TO_MEM_OFFSET_WEG_0_CNT__MASK			0x3ffc0000
#define CP_WEG_TO_MEM_OFFSET_WEG_0_CNT__SHIFT			18
static inwine uint32_t CP_WEG_TO_MEM_OFFSET_WEG_0_CNT(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_TO_MEM_OFFSET_WEG_0_CNT__SHIFT) & CP_WEG_TO_MEM_OFFSET_WEG_0_CNT__MASK;
}
#define CP_WEG_TO_MEM_OFFSET_WEG_0_64B				0x40000000
#define CP_WEG_TO_MEM_OFFSET_WEG_0_ACCUMUWATE			0x80000000

#define WEG_CP_WEG_TO_MEM_OFFSET_WEG_1				0x00000001
#define CP_WEG_TO_MEM_OFFSET_WEG_1_DEST__MASK			0xffffffff
#define CP_WEG_TO_MEM_OFFSET_WEG_1_DEST__SHIFT			0
static inwine uint32_t CP_WEG_TO_MEM_OFFSET_WEG_1_DEST(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_TO_MEM_OFFSET_WEG_1_DEST__SHIFT) & CP_WEG_TO_MEM_OFFSET_WEG_1_DEST__MASK;
}

#define WEG_CP_WEG_TO_MEM_OFFSET_WEG_2				0x00000002
#define CP_WEG_TO_MEM_OFFSET_WEG_2_DEST_HI__MASK		0xffffffff
#define CP_WEG_TO_MEM_OFFSET_WEG_2_DEST_HI__SHIFT		0
static inwine uint32_t CP_WEG_TO_MEM_OFFSET_WEG_2_DEST_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_TO_MEM_OFFSET_WEG_2_DEST_HI__SHIFT) & CP_WEG_TO_MEM_OFFSET_WEG_2_DEST_HI__MASK;
}

#define WEG_CP_WEG_TO_MEM_OFFSET_WEG_3				0x00000003
#define CP_WEG_TO_MEM_OFFSET_WEG_3_OFFSET0__MASK		0x0003ffff
#define CP_WEG_TO_MEM_OFFSET_WEG_3_OFFSET0__SHIFT		0
static inwine uint32_t CP_WEG_TO_MEM_OFFSET_WEG_3_OFFSET0(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_TO_MEM_OFFSET_WEG_3_OFFSET0__SHIFT) & CP_WEG_TO_MEM_OFFSET_WEG_3_OFFSET0__MASK;
}
#define CP_WEG_TO_MEM_OFFSET_WEG_3_OFFSET0_SCWATCH		0x00080000

#define WEG_CP_WEG_TO_MEM_OFFSET_MEM_0				0x00000000
#define CP_WEG_TO_MEM_OFFSET_MEM_0_WEG__MASK			0x0003ffff
#define CP_WEG_TO_MEM_OFFSET_MEM_0_WEG__SHIFT			0
static inwine uint32_t CP_WEG_TO_MEM_OFFSET_MEM_0_WEG(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_TO_MEM_OFFSET_MEM_0_WEG__SHIFT) & CP_WEG_TO_MEM_OFFSET_MEM_0_WEG__MASK;
}
#define CP_WEG_TO_MEM_OFFSET_MEM_0_CNT__MASK			0x3ffc0000
#define CP_WEG_TO_MEM_OFFSET_MEM_0_CNT__SHIFT			18
static inwine uint32_t CP_WEG_TO_MEM_OFFSET_MEM_0_CNT(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_TO_MEM_OFFSET_MEM_0_CNT__SHIFT) & CP_WEG_TO_MEM_OFFSET_MEM_0_CNT__MASK;
}
#define CP_WEG_TO_MEM_OFFSET_MEM_0_64B				0x40000000
#define CP_WEG_TO_MEM_OFFSET_MEM_0_ACCUMUWATE			0x80000000

#define WEG_CP_WEG_TO_MEM_OFFSET_MEM_1				0x00000001
#define CP_WEG_TO_MEM_OFFSET_MEM_1_DEST__MASK			0xffffffff
#define CP_WEG_TO_MEM_OFFSET_MEM_1_DEST__SHIFT			0
static inwine uint32_t CP_WEG_TO_MEM_OFFSET_MEM_1_DEST(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_TO_MEM_OFFSET_MEM_1_DEST__SHIFT) & CP_WEG_TO_MEM_OFFSET_MEM_1_DEST__MASK;
}

#define WEG_CP_WEG_TO_MEM_OFFSET_MEM_2				0x00000002
#define CP_WEG_TO_MEM_OFFSET_MEM_2_DEST_HI__MASK		0xffffffff
#define CP_WEG_TO_MEM_OFFSET_MEM_2_DEST_HI__SHIFT		0
static inwine uint32_t CP_WEG_TO_MEM_OFFSET_MEM_2_DEST_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_TO_MEM_OFFSET_MEM_2_DEST_HI__SHIFT) & CP_WEG_TO_MEM_OFFSET_MEM_2_DEST_HI__MASK;
}

#define WEG_CP_WEG_TO_MEM_OFFSET_MEM_3				0x00000003
#define CP_WEG_TO_MEM_OFFSET_MEM_3_OFFSET_WO__MASK		0xffffffff
#define CP_WEG_TO_MEM_OFFSET_MEM_3_OFFSET_WO__SHIFT		0
static inwine uint32_t CP_WEG_TO_MEM_OFFSET_MEM_3_OFFSET_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_TO_MEM_OFFSET_MEM_3_OFFSET_WO__SHIFT) & CP_WEG_TO_MEM_OFFSET_MEM_3_OFFSET_WO__MASK;
}

#define WEG_CP_WEG_TO_MEM_OFFSET_MEM_4				0x00000004
#define CP_WEG_TO_MEM_OFFSET_MEM_4_OFFSET_HI__MASK		0xffffffff
#define CP_WEG_TO_MEM_OFFSET_MEM_4_OFFSET_HI__SHIFT		0
static inwine uint32_t CP_WEG_TO_MEM_OFFSET_MEM_4_OFFSET_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_TO_MEM_OFFSET_MEM_4_OFFSET_HI__SHIFT) & CP_WEG_TO_MEM_OFFSET_MEM_4_OFFSET_HI__MASK;
}

#define WEG_CP_MEM_TO_WEG_0					0x00000000
#define CP_MEM_TO_WEG_0_WEG__MASK				0x0003ffff
#define CP_MEM_TO_WEG_0_WEG__SHIFT				0
static inwine uint32_t CP_MEM_TO_WEG_0_WEG(uint32_t vaw)
{
	wetuwn ((vaw) << CP_MEM_TO_WEG_0_WEG__SHIFT) & CP_MEM_TO_WEG_0_WEG__MASK;
}
#define CP_MEM_TO_WEG_0_CNT__MASK				0x3ff80000
#define CP_MEM_TO_WEG_0_CNT__SHIFT				19
static inwine uint32_t CP_MEM_TO_WEG_0_CNT(uint32_t vaw)
{
	wetuwn ((vaw) << CP_MEM_TO_WEG_0_CNT__SHIFT) & CP_MEM_TO_WEG_0_CNT__MASK;
}
#define CP_MEM_TO_WEG_0_SHIFT_BY_2				0x40000000
#define CP_MEM_TO_WEG_0_UNK31					0x80000000

#define WEG_CP_MEM_TO_WEG_1					0x00000001
#define CP_MEM_TO_WEG_1_SWC__MASK				0xffffffff
#define CP_MEM_TO_WEG_1_SWC__SHIFT				0
static inwine uint32_t CP_MEM_TO_WEG_1_SWC(uint32_t vaw)
{
	wetuwn ((vaw) << CP_MEM_TO_WEG_1_SWC__SHIFT) & CP_MEM_TO_WEG_1_SWC__MASK;
}

#define WEG_CP_MEM_TO_WEG_2					0x00000002
#define CP_MEM_TO_WEG_2_SWC_HI__MASK				0xffffffff
#define CP_MEM_TO_WEG_2_SWC_HI__SHIFT				0
static inwine uint32_t CP_MEM_TO_WEG_2_SWC_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_MEM_TO_WEG_2_SWC_HI__SHIFT) & CP_MEM_TO_WEG_2_SWC_HI__MASK;
}

#define WEG_CP_MEM_TO_MEM_0					0x00000000
#define CP_MEM_TO_MEM_0_NEG_A					0x00000001
#define CP_MEM_TO_MEM_0_NEG_B					0x00000002
#define CP_MEM_TO_MEM_0_NEG_C					0x00000004
#define CP_MEM_TO_MEM_0_DOUBWE					0x20000000
#define CP_MEM_TO_MEM_0_WAIT_FOW_MEM_WWITES			0x40000000
#define CP_MEM_TO_MEM_0_UNK31					0x80000000

#define WEG_CP_MEMCPY_0						0x00000000
#define CP_MEMCPY_0_DWOWDS__MASK				0xffffffff
#define CP_MEMCPY_0_DWOWDS__SHIFT				0
static inwine uint32_t CP_MEMCPY_0_DWOWDS(uint32_t vaw)
{
	wetuwn ((vaw) << CP_MEMCPY_0_DWOWDS__SHIFT) & CP_MEMCPY_0_DWOWDS__MASK;
}

#define WEG_CP_MEMCPY_1						0x00000001
#define CP_MEMCPY_1_SWC_WO__MASK				0xffffffff
#define CP_MEMCPY_1_SWC_WO__SHIFT				0
static inwine uint32_t CP_MEMCPY_1_SWC_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_MEMCPY_1_SWC_WO__SHIFT) & CP_MEMCPY_1_SWC_WO__MASK;
}

#define WEG_CP_MEMCPY_2						0x00000002
#define CP_MEMCPY_2_SWC_HI__MASK				0xffffffff
#define CP_MEMCPY_2_SWC_HI__SHIFT				0
static inwine uint32_t CP_MEMCPY_2_SWC_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_MEMCPY_2_SWC_HI__SHIFT) & CP_MEMCPY_2_SWC_HI__MASK;
}

#define WEG_CP_MEMCPY_3						0x00000003
#define CP_MEMCPY_3_DST_WO__MASK				0xffffffff
#define CP_MEMCPY_3_DST_WO__SHIFT				0
static inwine uint32_t CP_MEMCPY_3_DST_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_MEMCPY_3_DST_WO__SHIFT) & CP_MEMCPY_3_DST_WO__MASK;
}

#define WEG_CP_MEMCPY_4						0x00000004
#define CP_MEMCPY_4_DST_HI__MASK				0xffffffff
#define CP_MEMCPY_4_DST_HI__SHIFT				0
static inwine uint32_t CP_MEMCPY_4_DST_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_MEMCPY_4_DST_HI__SHIFT) & CP_MEMCPY_4_DST_HI__MASK;
}

#define WEG_CP_WEG_TO_SCWATCH_0					0x00000000
#define CP_WEG_TO_SCWATCH_0_WEG__MASK				0x0003ffff
#define CP_WEG_TO_SCWATCH_0_WEG__SHIFT				0
static inwine uint32_t CP_WEG_TO_SCWATCH_0_WEG(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_TO_SCWATCH_0_WEG__SHIFT) & CP_WEG_TO_SCWATCH_0_WEG__MASK;
}
#define CP_WEG_TO_SCWATCH_0_SCWATCH__MASK			0x00700000
#define CP_WEG_TO_SCWATCH_0_SCWATCH__SHIFT			20
static inwine uint32_t CP_WEG_TO_SCWATCH_0_SCWATCH(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_TO_SCWATCH_0_SCWATCH__SHIFT) & CP_WEG_TO_SCWATCH_0_SCWATCH__MASK;
}
#define CP_WEG_TO_SCWATCH_0_CNT__MASK				0x07000000
#define CP_WEG_TO_SCWATCH_0_CNT__SHIFT				24
static inwine uint32_t CP_WEG_TO_SCWATCH_0_CNT(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WEG_TO_SCWATCH_0_CNT__SHIFT) & CP_WEG_TO_SCWATCH_0_CNT__MASK;
}

#define WEG_CP_SCWATCH_TO_WEG_0					0x00000000
#define CP_SCWATCH_TO_WEG_0_WEG__MASK				0x0003ffff
#define CP_SCWATCH_TO_WEG_0_WEG__SHIFT				0
static inwine uint32_t CP_SCWATCH_TO_WEG_0_WEG(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SCWATCH_TO_WEG_0_WEG__SHIFT) & CP_SCWATCH_TO_WEG_0_WEG__MASK;
}
#define CP_SCWATCH_TO_WEG_0_UNK18				0x00040000
#define CP_SCWATCH_TO_WEG_0_SCWATCH__MASK			0x00700000
#define CP_SCWATCH_TO_WEG_0_SCWATCH__SHIFT			20
static inwine uint32_t CP_SCWATCH_TO_WEG_0_SCWATCH(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SCWATCH_TO_WEG_0_SCWATCH__SHIFT) & CP_SCWATCH_TO_WEG_0_SCWATCH__MASK;
}
#define CP_SCWATCH_TO_WEG_0_CNT__MASK				0x07000000
#define CP_SCWATCH_TO_WEG_0_CNT__SHIFT				24
static inwine uint32_t CP_SCWATCH_TO_WEG_0_CNT(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SCWATCH_TO_WEG_0_CNT__SHIFT) & CP_SCWATCH_TO_WEG_0_CNT__MASK;
}

#define WEG_CP_SCWATCH_WWITE_0					0x00000000
#define CP_SCWATCH_WWITE_0_SCWATCH__MASK			0x00700000
#define CP_SCWATCH_WWITE_0_SCWATCH__SHIFT			20
static inwine uint32_t CP_SCWATCH_WWITE_0_SCWATCH(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SCWATCH_WWITE_0_SCWATCH__SHIFT) & CP_SCWATCH_WWITE_0_SCWATCH__MASK;
}

#define WEG_CP_MEM_WWITE_0					0x00000000
#define CP_MEM_WWITE_0_ADDW_WO__MASK				0xffffffff
#define CP_MEM_WWITE_0_ADDW_WO__SHIFT				0
static inwine uint32_t CP_MEM_WWITE_0_ADDW_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_MEM_WWITE_0_ADDW_WO__SHIFT) & CP_MEM_WWITE_0_ADDW_WO__MASK;
}

#define WEG_CP_MEM_WWITE_1					0x00000001
#define CP_MEM_WWITE_1_ADDW_HI__MASK				0xffffffff
#define CP_MEM_WWITE_1_ADDW_HI__SHIFT				0
static inwine uint32_t CP_MEM_WWITE_1_ADDW_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_MEM_WWITE_1_ADDW_HI__SHIFT) & CP_MEM_WWITE_1_ADDW_HI__MASK;
}

#define WEG_CP_COND_WWITE_0					0x00000000
#define CP_COND_WWITE_0_FUNCTION__MASK				0x00000007
#define CP_COND_WWITE_0_FUNCTION__SHIFT				0
static inwine uint32_t CP_COND_WWITE_0_FUNCTION(enum cp_cond_function vaw)
{
	wetuwn ((vaw) << CP_COND_WWITE_0_FUNCTION__SHIFT) & CP_COND_WWITE_0_FUNCTION__MASK;
}
#define CP_COND_WWITE_0_POWW_MEMOWY				0x00000010
#define CP_COND_WWITE_0_WWITE_MEMOWY				0x00000100

#define WEG_CP_COND_WWITE_1					0x00000001
#define CP_COND_WWITE_1_POWW_ADDW__MASK				0xffffffff
#define CP_COND_WWITE_1_POWW_ADDW__SHIFT			0
static inwine uint32_t CP_COND_WWITE_1_POWW_ADDW(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_WWITE_1_POWW_ADDW__SHIFT) & CP_COND_WWITE_1_POWW_ADDW__MASK;
}

#define WEG_CP_COND_WWITE_2					0x00000002
#define CP_COND_WWITE_2_WEF__MASK				0xffffffff
#define CP_COND_WWITE_2_WEF__SHIFT				0
static inwine uint32_t CP_COND_WWITE_2_WEF(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_WWITE_2_WEF__SHIFT) & CP_COND_WWITE_2_WEF__MASK;
}

#define WEG_CP_COND_WWITE_3					0x00000003
#define CP_COND_WWITE_3_MASK__MASK				0xffffffff
#define CP_COND_WWITE_3_MASK__SHIFT				0
static inwine uint32_t CP_COND_WWITE_3_MASK(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_WWITE_3_MASK__SHIFT) & CP_COND_WWITE_3_MASK__MASK;
}

#define WEG_CP_COND_WWITE_4					0x00000004
#define CP_COND_WWITE_4_WWITE_ADDW__MASK			0xffffffff
#define CP_COND_WWITE_4_WWITE_ADDW__SHIFT			0
static inwine uint32_t CP_COND_WWITE_4_WWITE_ADDW(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_WWITE_4_WWITE_ADDW__SHIFT) & CP_COND_WWITE_4_WWITE_ADDW__MASK;
}

#define WEG_CP_COND_WWITE_5					0x00000005
#define CP_COND_WWITE_5_WWITE_DATA__MASK			0xffffffff
#define CP_COND_WWITE_5_WWITE_DATA__SHIFT			0
static inwine uint32_t CP_COND_WWITE_5_WWITE_DATA(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_WWITE_5_WWITE_DATA__SHIFT) & CP_COND_WWITE_5_WWITE_DATA__MASK;
}

#define WEG_CP_COND_WWITE5_0					0x00000000
#define CP_COND_WWITE5_0_FUNCTION__MASK				0x00000007
#define CP_COND_WWITE5_0_FUNCTION__SHIFT			0
static inwine uint32_t CP_COND_WWITE5_0_FUNCTION(enum cp_cond_function vaw)
{
	wetuwn ((vaw) << CP_COND_WWITE5_0_FUNCTION__SHIFT) & CP_COND_WWITE5_0_FUNCTION__MASK;
}
#define CP_COND_WWITE5_0_SIGNED_COMPAWE				0x00000008
#define CP_COND_WWITE5_0_POWW_MEMOWY				0x00000010
#define CP_COND_WWITE5_0_POWW_SCWATCH				0x00000020
#define CP_COND_WWITE5_0_WWITE_MEMOWY				0x00000100

#define WEG_CP_COND_WWITE5_1					0x00000001
#define CP_COND_WWITE5_1_POWW_ADDW_WO__MASK			0xffffffff
#define CP_COND_WWITE5_1_POWW_ADDW_WO__SHIFT			0
static inwine uint32_t CP_COND_WWITE5_1_POWW_ADDW_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_WWITE5_1_POWW_ADDW_WO__SHIFT) & CP_COND_WWITE5_1_POWW_ADDW_WO__MASK;
}

#define WEG_CP_COND_WWITE5_2					0x00000002
#define CP_COND_WWITE5_2_POWW_ADDW_HI__MASK			0xffffffff
#define CP_COND_WWITE5_2_POWW_ADDW_HI__SHIFT			0
static inwine uint32_t CP_COND_WWITE5_2_POWW_ADDW_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_WWITE5_2_POWW_ADDW_HI__SHIFT) & CP_COND_WWITE5_2_POWW_ADDW_HI__MASK;
}

#define WEG_CP_COND_WWITE5_3					0x00000003
#define CP_COND_WWITE5_3_WEF__MASK				0xffffffff
#define CP_COND_WWITE5_3_WEF__SHIFT				0
static inwine uint32_t CP_COND_WWITE5_3_WEF(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_WWITE5_3_WEF__SHIFT) & CP_COND_WWITE5_3_WEF__MASK;
}

#define WEG_CP_COND_WWITE5_4					0x00000004
#define CP_COND_WWITE5_4_MASK__MASK				0xffffffff
#define CP_COND_WWITE5_4_MASK__SHIFT				0
static inwine uint32_t CP_COND_WWITE5_4_MASK(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_WWITE5_4_MASK__SHIFT) & CP_COND_WWITE5_4_MASK__MASK;
}

#define WEG_CP_COND_WWITE5_5					0x00000005
#define CP_COND_WWITE5_5_WWITE_ADDW_WO__MASK			0xffffffff
#define CP_COND_WWITE5_5_WWITE_ADDW_WO__SHIFT			0
static inwine uint32_t CP_COND_WWITE5_5_WWITE_ADDW_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_WWITE5_5_WWITE_ADDW_WO__SHIFT) & CP_COND_WWITE5_5_WWITE_ADDW_WO__MASK;
}

#define WEG_CP_COND_WWITE5_6					0x00000006
#define CP_COND_WWITE5_6_WWITE_ADDW_HI__MASK			0xffffffff
#define CP_COND_WWITE5_6_WWITE_ADDW_HI__SHIFT			0
static inwine uint32_t CP_COND_WWITE5_6_WWITE_ADDW_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_WWITE5_6_WWITE_ADDW_HI__SHIFT) & CP_COND_WWITE5_6_WWITE_ADDW_HI__MASK;
}

#define WEG_CP_COND_WWITE5_7					0x00000007
#define CP_COND_WWITE5_7_WWITE_DATA__MASK			0xffffffff
#define CP_COND_WWITE5_7_WWITE_DATA__SHIFT			0
static inwine uint32_t CP_COND_WWITE5_7_WWITE_DATA(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_WWITE5_7_WWITE_DATA__SHIFT) & CP_COND_WWITE5_7_WWITE_DATA__MASK;
}

#define WEG_CP_WAIT_MEM_GTE_0					0x00000000
#define CP_WAIT_MEM_GTE_0_WESEWVED__MASK			0xffffffff
#define CP_WAIT_MEM_GTE_0_WESEWVED__SHIFT			0
static inwine uint32_t CP_WAIT_MEM_GTE_0_WESEWVED(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WAIT_MEM_GTE_0_WESEWVED__SHIFT) & CP_WAIT_MEM_GTE_0_WESEWVED__MASK;
}

#define WEG_CP_WAIT_MEM_GTE_1					0x00000001
#define CP_WAIT_MEM_GTE_1_POWW_ADDW_WO__MASK			0xffffffff
#define CP_WAIT_MEM_GTE_1_POWW_ADDW_WO__SHIFT			0
static inwine uint32_t CP_WAIT_MEM_GTE_1_POWW_ADDW_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WAIT_MEM_GTE_1_POWW_ADDW_WO__SHIFT) & CP_WAIT_MEM_GTE_1_POWW_ADDW_WO__MASK;
}

#define WEG_CP_WAIT_MEM_GTE_2					0x00000002
#define CP_WAIT_MEM_GTE_2_POWW_ADDW_HI__MASK			0xffffffff
#define CP_WAIT_MEM_GTE_2_POWW_ADDW_HI__SHIFT			0
static inwine uint32_t CP_WAIT_MEM_GTE_2_POWW_ADDW_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WAIT_MEM_GTE_2_POWW_ADDW_HI__SHIFT) & CP_WAIT_MEM_GTE_2_POWW_ADDW_HI__MASK;
}

#define WEG_CP_WAIT_MEM_GTE_3					0x00000003
#define CP_WAIT_MEM_GTE_3_WEF__MASK				0xffffffff
#define CP_WAIT_MEM_GTE_3_WEF__SHIFT				0
static inwine uint32_t CP_WAIT_MEM_GTE_3_WEF(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WAIT_MEM_GTE_3_WEF__SHIFT) & CP_WAIT_MEM_GTE_3_WEF__MASK;
}

#define WEG_CP_WAIT_WEG_MEM_0					0x00000000
#define CP_WAIT_WEG_MEM_0_FUNCTION__MASK			0x00000007
#define CP_WAIT_WEG_MEM_0_FUNCTION__SHIFT			0
static inwine uint32_t CP_WAIT_WEG_MEM_0_FUNCTION(enum cp_cond_function vaw)
{
	wetuwn ((vaw) << CP_WAIT_WEG_MEM_0_FUNCTION__SHIFT) & CP_WAIT_WEG_MEM_0_FUNCTION__MASK;
}
#define CP_WAIT_WEG_MEM_0_SIGNED_COMPAWE			0x00000008
#define CP_WAIT_WEG_MEM_0_POWW_MEMOWY				0x00000010
#define CP_WAIT_WEG_MEM_0_POWW_SCWATCH				0x00000020
#define CP_WAIT_WEG_MEM_0_WWITE_MEMOWY				0x00000100

#define WEG_CP_WAIT_WEG_MEM_1					0x00000001
#define CP_WAIT_WEG_MEM_1_POWW_ADDW_WO__MASK			0xffffffff
#define CP_WAIT_WEG_MEM_1_POWW_ADDW_WO__SHIFT			0
static inwine uint32_t CP_WAIT_WEG_MEM_1_POWW_ADDW_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WAIT_WEG_MEM_1_POWW_ADDW_WO__SHIFT) & CP_WAIT_WEG_MEM_1_POWW_ADDW_WO__MASK;
}

#define WEG_CP_WAIT_WEG_MEM_2					0x00000002
#define CP_WAIT_WEG_MEM_2_POWW_ADDW_HI__MASK			0xffffffff
#define CP_WAIT_WEG_MEM_2_POWW_ADDW_HI__SHIFT			0
static inwine uint32_t CP_WAIT_WEG_MEM_2_POWW_ADDW_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WAIT_WEG_MEM_2_POWW_ADDW_HI__SHIFT) & CP_WAIT_WEG_MEM_2_POWW_ADDW_HI__MASK;
}

#define WEG_CP_WAIT_WEG_MEM_3					0x00000003
#define CP_WAIT_WEG_MEM_3_WEF__MASK				0xffffffff
#define CP_WAIT_WEG_MEM_3_WEF__SHIFT				0
static inwine uint32_t CP_WAIT_WEG_MEM_3_WEF(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WAIT_WEG_MEM_3_WEF__SHIFT) & CP_WAIT_WEG_MEM_3_WEF__MASK;
}

#define WEG_CP_WAIT_WEG_MEM_4					0x00000004
#define CP_WAIT_WEG_MEM_4_MASK__MASK				0xffffffff
#define CP_WAIT_WEG_MEM_4_MASK__SHIFT				0
static inwine uint32_t CP_WAIT_WEG_MEM_4_MASK(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WAIT_WEG_MEM_4_MASK__SHIFT) & CP_WAIT_WEG_MEM_4_MASK__MASK;
}

#define WEG_CP_WAIT_WEG_MEM_5					0x00000005
#define CP_WAIT_WEG_MEM_5_DEWAY_WOOP_CYCWES__MASK		0xffffffff
#define CP_WAIT_WEG_MEM_5_DEWAY_WOOP_CYCWES__SHIFT		0
static inwine uint32_t CP_WAIT_WEG_MEM_5_DEWAY_WOOP_CYCWES(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WAIT_WEG_MEM_5_DEWAY_WOOP_CYCWES__SHIFT) & CP_WAIT_WEG_MEM_5_DEWAY_WOOP_CYCWES__MASK;
}

#define WEG_CP_WAIT_TWO_WEGS_0					0x00000000
#define CP_WAIT_TWO_WEGS_0_WEG0__MASK				0x0003ffff
#define CP_WAIT_TWO_WEGS_0_WEG0__SHIFT				0
static inwine uint32_t CP_WAIT_TWO_WEGS_0_WEG0(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WAIT_TWO_WEGS_0_WEG0__SHIFT) & CP_WAIT_TWO_WEGS_0_WEG0__MASK;
}

#define WEG_CP_WAIT_TWO_WEGS_1					0x00000001
#define CP_WAIT_TWO_WEGS_1_WEG1__MASK				0x0003ffff
#define CP_WAIT_TWO_WEGS_1_WEG1__SHIFT				0
static inwine uint32_t CP_WAIT_TWO_WEGS_1_WEG1(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WAIT_TWO_WEGS_1_WEG1__SHIFT) & CP_WAIT_TWO_WEGS_1_WEG1__MASK;
}

#define WEG_CP_WAIT_TWO_WEGS_2					0x00000002
#define CP_WAIT_TWO_WEGS_2_WEF__MASK				0xffffffff
#define CP_WAIT_TWO_WEGS_2_WEF__SHIFT				0
static inwine uint32_t CP_WAIT_TWO_WEGS_2_WEF(uint32_t vaw)
{
	wetuwn ((vaw) << CP_WAIT_TWO_WEGS_2_WEF__SHIFT) & CP_WAIT_TWO_WEGS_2_WEF__MASK;
}

#define WEG_CP_DISPATCH_COMPUTE_0				0x00000000

#define WEG_CP_DISPATCH_COMPUTE_1				0x00000001
#define CP_DISPATCH_COMPUTE_1_X__MASK				0xffffffff
#define CP_DISPATCH_COMPUTE_1_X__SHIFT				0
static inwine uint32_t CP_DISPATCH_COMPUTE_1_X(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DISPATCH_COMPUTE_1_X__SHIFT) & CP_DISPATCH_COMPUTE_1_X__MASK;
}

#define WEG_CP_DISPATCH_COMPUTE_2				0x00000002
#define CP_DISPATCH_COMPUTE_2_Y__MASK				0xffffffff
#define CP_DISPATCH_COMPUTE_2_Y__SHIFT				0
static inwine uint32_t CP_DISPATCH_COMPUTE_2_Y(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DISPATCH_COMPUTE_2_Y__SHIFT) & CP_DISPATCH_COMPUTE_2_Y__MASK;
}

#define WEG_CP_DISPATCH_COMPUTE_3				0x00000003
#define CP_DISPATCH_COMPUTE_3_Z__MASK				0xffffffff
#define CP_DISPATCH_COMPUTE_3_Z__SHIFT				0
static inwine uint32_t CP_DISPATCH_COMPUTE_3_Z(uint32_t vaw)
{
	wetuwn ((vaw) << CP_DISPATCH_COMPUTE_3_Z__SHIFT) & CP_DISPATCH_COMPUTE_3_Z__MASK;
}

#define WEG_CP_SET_WENDEW_MODE_0				0x00000000
#define CP_SET_WENDEW_MODE_0_MODE__MASK				0x000001ff
#define CP_SET_WENDEW_MODE_0_MODE__SHIFT			0
static inwine uint32_t CP_SET_WENDEW_MODE_0_MODE(enum wendew_mode_cmd vaw)
{
	wetuwn ((vaw) << CP_SET_WENDEW_MODE_0_MODE__SHIFT) & CP_SET_WENDEW_MODE_0_MODE__MASK;
}

#define WEG_CP_SET_WENDEW_MODE_1				0x00000001
#define CP_SET_WENDEW_MODE_1_ADDW_0_WO__MASK			0xffffffff
#define CP_SET_WENDEW_MODE_1_ADDW_0_WO__SHIFT			0
static inwine uint32_t CP_SET_WENDEW_MODE_1_ADDW_0_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_WENDEW_MODE_1_ADDW_0_WO__SHIFT) & CP_SET_WENDEW_MODE_1_ADDW_0_WO__MASK;
}

#define WEG_CP_SET_WENDEW_MODE_2				0x00000002
#define CP_SET_WENDEW_MODE_2_ADDW_0_HI__MASK			0xffffffff
#define CP_SET_WENDEW_MODE_2_ADDW_0_HI__SHIFT			0
static inwine uint32_t CP_SET_WENDEW_MODE_2_ADDW_0_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_WENDEW_MODE_2_ADDW_0_HI__SHIFT) & CP_SET_WENDEW_MODE_2_ADDW_0_HI__MASK;
}

#define WEG_CP_SET_WENDEW_MODE_3				0x00000003
#define CP_SET_WENDEW_MODE_3_VSC_ENABWE				0x00000008
#define CP_SET_WENDEW_MODE_3_GMEM_ENABWE			0x00000010

#define WEG_CP_SET_WENDEW_MODE_4				0x00000004

#define WEG_CP_SET_WENDEW_MODE_5				0x00000005
#define CP_SET_WENDEW_MODE_5_ADDW_1_WEN__MASK			0xffffffff
#define CP_SET_WENDEW_MODE_5_ADDW_1_WEN__SHIFT			0
static inwine uint32_t CP_SET_WENDEW_MODE_5_ADDW_1_WEN(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_WENDEW_MODE_5_ADDW_1_WEN__SHIFT) & CP_SET_WENDEW_MODE_5_ADDW_1_WEN__MASK;
}

#define WEG_CP_SET_WENDEW_MODE_6				0x00000006
#define CP_SET_WENDEW_MODE_6_ADDW_1_WO__MASK			0xffffffff
#define CP_SET_WENDEW_MODE_6_ADDW_1_WO__SHIFT			0
static inwine uint32_t CP_SET_WENDEW_MODE_6_ADDW_1_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_WENDEW_MODE_6_ADDW_1_WO__SHIFT) & CP_SET_WENDEW_MODE_6_ADDW_1_WO__MASK;
}

#define WEG_CP_SET_WENDEW_MODE_7				0x00000007
#define CP_SET_WENDEW_MODE_7_ADDW_1_HI__MASK			0xffffffff
#define CP_SET_WENDEW_MODE_7_ADDW_1_HI__SHIFT			0
static inwine uint32_t CP_SET_WENDEW_MODE_7_ADDW_1_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_WENDEW_MODE_7_ADDW_1_HI__SHIFT) & CP_SET_WENDEW_MODE_7_ADDW_1_HI__MASK;
}

#define WEG_CP_COMPUTE_CHECKPOINT_0				0x00000000
#define CP_COMPUTE_CHECKPOINT_0_ADDW_0_WO__MASK			0xffffffff
#define CP_COMPUTE_CHECKPOINT_0_ADDW_0_WO__SHIFT		0
static inwine uint32_t CP_COMPUTE_CHECKPOINT_0_ADDW_0_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COMPUTE_CHECKPOINT_0_ADDW_0_WO__SHIFT) & CP_COMPUTE_CHECKPOINT_0_ADDW_0_WO__MASK;
}

#define WEG_CP_COMPUTE_CHECKPOINT_1				0x00000001
#define CP_COMPUTE_CHECKPOINT_1_ADDW_0_HI__MASK			0xffffffff
#define CP_COMPUTE_CHECKPOINT_1_ADDW_0_HI__SHIFT		0
static inwine uint32_t CP_COMPUTE_CHECKPOINT_1_ADDW_0_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COMPUTE_CHECKPOINT_1_ADDW_0_HI__SHIFT) & CP_COMPUTE_CHECKPOINT_1_ADDW_0_HI__MASK;
}

#define WEG_CP_COMPUTE_CHECKPOINT_2				0x00000002

#define WEG_CP_COMPUTE_CHECKPOINT_3				0x00000003
#define CP_COMPUTE_CHECKPOINT_3_ADDW_1_WEN__MASK		0xffffffff
#define CP_COMPUTE_CHECKPOINT_3_ADDW_1_WEN__SHIFT		0
static inwine uint32_t CP_COMPUTE_CHECKPOINT_3_ADDW_1_WEN(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COMPUTE_CHECKPOINT_3_ADDW_1_WEN__SHIFT) & CP_COMPUTE_CHECKPOINT_3_ADDW_1_WEN__MASK;
}

#define WEG_CP_COMPUTE_CHECKPOINT_4				0x00000004

#define WEG_CP_COMPUTE_CHECKPOINT_5				0x00000005
#define CP_COMPUTE_CHECKPOINT_5_ADDW_1_WO__MASK			0xffffffff
#define CP_COMPUTE_CHECKPOINT_5_ADDW_1_WO__SHIFT		0
static inwine uint32_t CP_COMPUTE_CHECKPOINT_5_ADDW_1_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COMPUTE_CHECKPOINT_5_ADDW_1_WO__SHIFT) & CP_COMPUTE_CHECKPOINT_5_ADDW_1_WO__MASK;
}

#define WEG_CP_COMPUTE_CHECKPOINT_6				0x00000006
#define CP_COMPUTE_CHECKPOINT_6_ADDW_1_HI__MASK			0xffffffff
#define CP_COMPUTE_CHECKPOINT_6_ADDW_1_HI__SHIFT		0
static inwine uint32_t CP_COMPUTE_CHECKPOINT_6_ADDW_1_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COMPUTE_CHECKPOINT_6_ADDW_1_HI__SHIFT) & CP_COMPUTE_CHECKPOINT_6_ADDW_1_HI__MASK;
}

#define WEG_CP_COMPUTE_CHECKPOINT_7				0x00000007

#define WEG_CP_PEWFCOUNTEW_ACTION_0				0x00000000

#define WEG_CP_PEWFCOUNTEW_ACTION_1				0x00000001
#define CP_PEWFCOUNTEW_ACTION_1_ADDW_0_WO__MASK			0xffffffff
#define CP_PEWFCOUNTEW_ACTION_1_ADDW_0_WO__SHIFT		0
static inwine uint32_t CP_PEWFCOUNTEW_ACTION_1_ADDW_0_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_PEWFCOUNTEW_ACTION_1_ADDW_0_WO__SHIFT) & CP_PEWFCOUNTEW_ACTION_1_ADDW_0_WO__MASK;
}

#define WEG_CP_PEWFCOUNTEW_ACTION_2				0x00000002
#define CP_PEWFCOUNTEW_ACTION_2_ADDW_0_HI__MASK			0xffffffff
#define CP_PEWFCOUNTEW_ACTION_2_ADDW_0_HI__SHIFT		0
static inwine uint32_t CP_PEWFCOUNTEW_ACTION_2_ADDW_0_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_PEWFCOUNTEW_ACTION_2_ADDW_0_HI__SHIFT) & CP_PEWFCOUNTEW_ACTION_2_ADDW_0_HI__MASK;
}

#define WEG_CP_EVENT_WWITE_0					0x00000000
#define CP_EVENT_WWITE_0_EVENT__MASK				0x000000ff
#define CP_EVENT_WWITE_0_EVENT__SHIFT				0
static inwine uint32_t CP_EVENT_WWITE_0_EVENT(enum vgt_event_type vaw)
{
	wetuwn ((vaw) << CP_EVENT_WWITE_0_EVENT__SHIFT) & CP_EVENT_WWITE_0_EVENT__MASK;
}
#define CP_EVENT_WWITE_0_TIMESTAMP				0x40000000
#define CP_EVENT_WWITE_0_IWQ					0x80000000

#define WEG_CP_EVENT_WWITE_1					0x00000001
#define CP_EVENT_WWITE_1_ADDW_0_WO__MASK			0xffffffff
#define CP_EVENT_WWITE_1_ADDW_0_WO__SHIFT			0
static inwine uint32_t CP_EVENT_WWITE_1_ADDW_0_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_EVENT_WWITE_1_ADDW_0_WO__SHIFT) & CP_EVENT_WWITE_1_ADDW_0_WO__MASK;
}

#define WEG_CP_EVENT_WWITE_2					0x00000002
#define CP_EVENT_WWITE_2_ADDW_0_HI__MASK			0xffffffff
#define CP_EVENT_WWITE_2_ADDW_0_HI__SHIFT			0
static inwine uint32_t CP_EVENT_WWITE_2_ADDW_0_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_EVENT_WWITE_2_ADDW_0_HI__SHIFT) & CP_EVENT_WWITE_2_ADDW_0_HI__MASK;
}

#define WEG_CP_EVENT_WWITE_3					0x00000003

#define WEG_CP_BWIT_0						0x00000000
#define CP_BWIT_0_OP__MASK					0x0000000f
#define CP_BWIT_0_OP__SHIFT					0
static inwine uint32_t CP_BWIT_0_OP(enum cp_bwit_cmd vaw)
{
	wetuwn ((vaw) << CP_BWIT_0_OP__SHIFT) & CP_BWIT_0_OP__MASK;
}

#define WEG_CP_BWIT_1						0x00000001
#define CP_BWIT_1_SWC_X1__MASK					0x00003fff
#define CP_BWIT_1_SWC_X1__SHIFT					0
static inwine uint32_t CP_BWIT_1_SWC_X1(uint32_t vaw)
{
	wetuwn ((vaw) << CP_BWIT_1_SWC_X1__SHIFT) & CP_BWIT_1_SWC_X1__MASK;
}
#define CP_BWIT_1_SWC_Y1__MASK					0x3fff0000
#define CP_BWIT_1_SWC_Y1__SHIFT					16
static inwine uint32_t CP_BWIT_1_SWC_Y1(uint32_t vaw)
{
	wetuwn ((vaw) << CP_BWIT_1_SWC_Y1__SHIFT) & CP_BWIT_1_SWC_Y1__MASK;
}

#define WEG_CP_BWIT_2						0x00000002
#define CP_BWIT_2_SWC_X2__MASK					0x00003fff
#define CP_BWIT_2_SWC_X2__SHIFT					0
static inwine uint32_t CP_BWIT_2_SWC_X2(uint32_t vaw)
{
	wetuwn ((vaw) << CP_BWIT_2_SWC_X2__SHIFT) & CP_BWIT_2_SWC_X2__MASK;
}
#define CP_BWIT_2_SWC_Y2__MASK					0x3fff0000
#define CP_BWIT_2_SWC_Y2__SHIFT					16
static inwine uint32_t CP_BWIT_2_SWC_Y2(uint32_t vaw)
{
	wetuwn ((vaw) << CP_BWIT_2_SWC_Y2__SHIFT) & CP_BWIT_2_SWC_Y2__MASK;
}

#define WEG_CP_BWIT_3						0x00000003
#define CP_BWIT_3_DST_X1__MASK					0x00003fff
#define CP_BWIT_3_DST_X1__SHIFT					0
static inwine uint32_t CP_BWIT_3_DST_X1(uint32_t vaw)
{
	wetuwn ((vaw) << CP_BWIT_3_DST_X1__SHIFT) & CP_BWIT_3_DST_X1__MASK;
}
#define CP_BWIT_3_DST_Y1__MASK					0x3fff0000
#define CP_BWIT_3_DST_Y1__SHIFT					16
static inwine uint32_t CP_BWIT_3_DST_Y1(uint32_t vaw)
{
	wetuwn ((vaw) << CP_BWIT_3_DST_Y1__SHIFT) & CP_BWIT_3_DST_Y1__MASK;
}

#define WEG_CP_BWIT_4						0x00000004
#define CP_BWIT_4_DST_X2__MASK					0x00003fff
#define CP_BWIT_4_DST_X2__SHIFT					0
static inwine uint32_t CP_BWIT_4_DST_X2(uint32_t vaw)
{
	wetuwn ((vaw) << CP_BWIT_4_DST_X2__SHIFT) & CP_BWIT_4_DST_X2__MASK;
}
#define CP_BWIT_4_DST_Y2__MASK					0x3fff0000
#define CP_BWIT_4_DST_Y2__SHIFT					16
static inwine uint32_t CP_BWIT_4_DST_Y2(uint32_t vaw)
{
	wetuwn ((vaw) << CP_BWIT_4_DST_Y2__SHIFT) & CP_BWIT_4_DST_Y2__MASK;
}

#define WEG_CP_EXEC_CS_0					0x00000000

#define WEG_CP_EXEC_CS_1					0x00000001
#define CP_EXEC_CS_1_NGWOUPS_X__MASK				0xffffffff
#define CP_EXEC_CS_1_NGWOUPS_X__SHIFT				0
static inwine uint32_t CP_EXEC_CS_1_NGWOUPS_X(uint32_t vaw)
{
	wetuwn ((vaw) << CP_EXEC_CS_1_NGWOUPS_X__SHIFT) & CP_EXEC_CS_1_NGWOUPS_X__MASK;
}

#define WEG_CP_EXEC_CS_2					0x00000002
#define CP_EXEC_CS_2_NGWOUPS_Y__MASK				0xffffffff
#define CP_EXEC_CS_2_NGWOUPS_Y__SHIFT				0
static inwine uint32_t CP_EXEC_CS_2_NGWOUPS_Y(uint32_t vaw)
{
	wetuwn ((vaw) << CP_EXEC_CS_2_NGWOUPS_Y__SHIFT) & CP_EXEC_CS_2_NGWOUPS_Y__MASK;
}

#define WEG_CP_EXEC_CS_3					0x00000003
#define CP_EXEC_CS_3_NGWOUPS_Z__MASK				0xffffffff
#define CP_EXEC_CS_3_NGWOUPS_Z__SHIFT				0
static inwine uint32_t CP_EXEC_CS_3_NGWOUPS_Z(uint32_t vaw)
{
	wetuwn ((vaw) << CP_EXEC_CS_3_NGWOUPS_Z__SHIFT) & CP_EXEC_CS_3_NGWOUPS_Z__MASK;
}

#define WEG_A4XX_CP_EXEC_CS_INDIWECT_0				0x00000000


#define WEG_A4XX_CP_EXEC_CS_INDIWECT_1				0x00000001
#define A4XX_CP_EXEC_CS_INDIWECT_1_ADDW__MASK			0xffffffff
#define A4XX_CP_EXEC_CS_INDIWECT_1_ADDW__SHIFT			0
static inwine uint32_t A4XX_CP_EXEC_CS_INDIWECT_1_ADDW(uint32_t vaw)
{
	wetuwn ((vaw) << A4XX_CP_EXEC_CS_INDIWECT_1_ADDW__SHIFT) & A4XX_CP_EXEC_CS_INDIWECT_1_ADDW__MASK;
}

#define WEG_A4XX_CP_EXEC_CS_INDIWECT_2				0x00000002
#define A4XX_CP_EXEC_CS_INDIWECT_2_WOCAWSIZEX__MASK		0x00000ffc
#define A4XX_CP_EXEC_CS_INDIWECT_2_WOCAWSIZEX__SHIFT		2
static inwine uint32_t A4XX_CP_EXEC_CS_INDIWECT_2_WOCAWSIZEX(uint32_t vaw)
{
	wetuwn ((vaw) << A4XX_CP_EXEC_CS_INDIWECT_2_WOCAWSIZEX__SHIFT) & A4XX_CP_EXEC_CS_INDIWECT_2_WOCAWSIZEX__MASK;
}
#define A4XX_CP_EXEC_CS_INDIWECT_2_WOCAWSIZEY__MASK		0x003ff000
#define A4XX_CP_EXEC_CS_INDIWECT_2_WOCAWSIZEY__SHIFT		12
static inwine uint32_t A4XX_CP_EXEC_CS_INDIWECT_2_WOCAWSIZEY(uint32_t vaw)
{
	wetuwn ((vaw) << A4XX_CP_EXEC_CS_INDIWECT_2_WOCAWSIZEY__SHIFT) & A4XX_CP_EXEC_CS_INDIWECT_2_WOCAWSIZEY__MASK;
}
#define A4XX_CP_EXEC_CS_INDIWECT_2_WOCAWSIZEZ__MASK		0xffc00000
#define A4XX_CP_EXEC_CS_INDIWECT_2_WOCAWSIZEZ__SHIFT		22
static inwine uint32_t A4XX_CP_EXEC_CS_INDIWECT_2_WOCAWSIZEZ(uint32_t vaw)
{
	wetuwn ((vaw) << A4XX_CP_EXEC_CS_INDIWECT_2_WOCAWSIZEZ__SHIFT) & A4XX_CP_EXEC_CS_INDIWECT_2_WOCAWSIZEZ__MASK;
}


#define WEG_A5XX_CP_EXEC_CS_INDIWECT_1				0x00000001
#define A5XX_CP_EXEC_CS_INDIWECT_1_ADDW_WO__MASK		0xffffffff
#define A5XX_CP_EXEC_CS_INDIWECT_1_ADDW_WO__SHIFT		0
static inwine uint32_t A5XX_CP_EXEC_CS_INDIWECT_1_ADDW_WO(uint32_t vaw)
{
	wetuwn ((vaw) << A5XX_CP_EXEC_CS_INDIWECT_1_ADDW_WO__SHIFT) & A5XX_CP_EXEC_CS_INDIWECT_1_ADDW_WO__MASK;
}

#define WEG_A5XX_CP_EXEC_CS_INDIWECT_2				0x00000002
#define A5XX_CP_EXEC_CS_INDIWECT_2_ADDW_HI__MASK		0xffffffff
#define A5XX_CP_EXEC_CS_INDIWECT_2_ADDW_HI__SHIFT		0
static inwine uint32_t A5XX_CP_EXEC_CS_INDIWECT_2_ADDW_HI(uint32_t vaw)
{
	wetuwn ((vaw) << A5XX_CP_EXEC_CS_INDIWECT_2_ADDW_HI__SHIFT) & A5XX_CP_EXEC_CS_INDIWECT_2_ADDW_HI__MASK;
}

#define WEG_A5XX_CP_EXEC_CS_INDIWECT_3				0x00000003
#define A5XX_CP_EXEC_CS_INDIWECT_3_WOCAWSIZEX__MASK		0x00000ffc
#define A5XX_CP_EXEC_CS_INDIWECT_3_WOCAWSIZEX__SHIFT		2
static inwine uint32_t A5XX_CP_EXEC_CS_INDIWECT_3_WOCAWSIZEX(uint32_t vaw)
{
	wetuwn ((vaw) << A5XX_CP_EXEC_CS_INDIWECT_3_WOCAWSIZEX__SHIFT) & A5XX_CP_EXEC_CS_INDIWECT_3_WOCAWSIZEX__MASK;
}
#define A5XX_CP_EXEC_CS_INDIWECT_3_WOCAWSIZEY__MASK		0x003ff000
#define A5XX_CP_EXEC_CS_INDIWECT_3_WOCAWSIZEY__SHIFT		12
static inwine uint32_t A5XX_CP_EXEC_CS_INDIWECT_3_WOCAWSIZEY(uint32_t vaw)
{
	wetuwn ((vaw) << A5XX_CP_EXEC_CS_INDIWECT_3_WOCAWSIZEY__SHIFT) & A5XX_CP_EXEC_CS_INDIWECT_3_WOCAWSIZEY__MASK;
}
#define A5XX_CP_EXEC_CS_INDIWECT_3_WOCAWSIZEZ__MASK		0xffc00000
#define A5XX_CP_EXEC_CS_INDIWECT_3_WOCAWSIZEZ__SHIFT		22
static inwine uint32_t A5XX_CP_EXEC_CS_INDIWECT_3_WOCAWSIZEZ(uint32_t vaw)
{
	wetuwn ((vaw) << A5XX_CP_EXEC_CS_INDIWECT_3_WOCAWSIZEZ__SHIFT) & A5XX_CP_EXEC_CS_INDIWECT_3_WOCAWSIZEZ__MASK;
}

#define WEG_A6XX_CP_SET_MAWKEW_0				0x00000000
#define A6XX_CP_SET_MAWKEW_0_MODE__MASK				0x000001ff
#define A6XX_CP_SET_MAWKEW_0_MODE__SHIFT			0
static inwine uint32_t A6XX_CP_SET_MAWKEW_0_MODE(enum a6xx_mawkew vaw)
{
	wetuwn ((vaw) << A6XX_CP_SET_MAWKEW_0_MODE__SHIFT) & A6XX_CP_SET_MAWKEW_0_MODE__MASK;
}
#define A6XX_CP_SET_MAWKEW_0_MAWKEW__MASK			0x0000000f
#define A6XX_CP_SET_MAWKEW_0_MAWKEW__SHIFT			0
static inwine uint32_t A6XX_CP_SET_MAWKEW_0_MAWKEW(enum a6xx_mawkew vaw)
{
	wetuwn ((vaw) << A6XX_CP_SET_MAWKEW_0_MAWKEW__SHIFT) & A6XX_CP_SET_MAWKEW_0_MAWKEW__MASK;
}

static inwine uint32_t WEG_A6XX_CP_SET_PSEUDO_WEG_(uint32_t i0) { wetuwn 0x00000000 + 0x3*i0; }

static inwine uint32_t WEG_A6XX_CP_SET_PSEUDO_WEG__0(uint32_t i0) { wetuwn 0x00000000 + 0x3*i0; }
#define A6XX_CP_SET_PSEUDO_WEG__0_PSEUDO_WEG__MASK		0x00000007
#define A6XX_CP_SET_PSEUDO_WEG__0_PSEUDO_WEG__SHIFT		0
static inwine uint32_t A6XX_CP_SET_PSEUDO_WEG__0_PSEUDO_WEG(enum pseudo_weg vaw)
{
	wetuwn ((vaw) << A6XX_CP_SET_PSEUDO_WEG__0_PSEUDO_WEG__SHIFT) & A6XX_CP_SET_PSEUDO_WEG__0_PSEUDO_WEG__MASK;
}

static inwine uint32_t WEG_A6XX_CP_SET_PSEUDO_WEG__1(uint32_t i0) { wetuwn 0x00000001 + 0x3*i0; }
#define A6XX_CP_SET_PSEUDO_WEG__1_WO__MASK			0xffffffff
#define A6XX_CP_SET_PSEUDO_WEG__1_WO__SHIFT			0
static inwine uint32_t A6XX_CP_SET_PSEUDO_WEG__1_WO(uint32_t vaw)
{
	wetuwn ((vaw) << A6XX_CP_SET_PSEUDO_WEG__1_WO__SHIFT) & A6XX_CP_SET_PSEUDO_WEG__1_WO__MASK;
}

static inwine uint32_t WEG_A6XX_CP_SET_PSEUDO_WEG__2(uint32_t i0) { wetuwn 0x00000002 + 0x3*i0; }
#define A6XX_CP_SET_PSEUDO_WEG__2_HI__MASK			0xffffffff
#define A6XX_CP_SET_PSEUDO_WEG__2_HI__SHIFT			0
static inwine uint32_t A6XX_CP_SET_PSEUDO_WEG__2_HI(uint32_t vaw)
{
	wetuwn ((vaw) << A6XX_CP_SET_PSEUDO_WEG__2_HI__SHIFT) & A6XX_CP_SET_PSEUDO_WEG__2_HI__MASK;
}

#define WEG_A6XX_CP_WEG_TEST_0					0x00000000
#define A6XX_CP_WEG_TEST_0_WEG__MASK				0x0003ffff
#define A6XX_CP_WEG_TEST_0_WEG__SHIFT				0
static inwine uint32_t A6XX_CP_WEG_TEST_0_WEG(uint32_t vaw)
{
	wetuwn ((vaw) << A6XX_CP_WEG_TEST_0_WEG__SHIFT) & A6XX_CP_WEG_TEST_0_WEG__MASK;
}
#define A6XX_CP_WEG_TEST_0_BIT__MASK				0x01f00000
#define A6XX_CP_WEG_TEST_0_BIT__SHIFT				20
static inwine uint32_t A6XX_CP_WEG_TEST_0_BIT(uint32_t vaw)
{
	wetuwn ((vaw) << A6XX_CP_WEG_TEST_0_BIT__SHIFT) & A6XX_CP_WEG_TEST_0_BIT__MASK;
}
#define A6XX_CP_WEG_TEST_0_SKIP_WAIT_FOW_ME			0x02000000
#define A6XX_CP_WEG_TEST_0_PWED_BIT__MASK			0x7c000000
#define A6XX_CP_WEG_TEST_0_PWED_BIT__SHIFT			26
static inwine uint32_t A6XX_CP_WEG_TEST_0_PWED_BIT(uint32_t vaw)
{
	wetuwn ((vaw) << A6XX_CP_WEG_TEST_0_PWED_BIT__SHIFT) & A6XX_CP_WEG_TEST_0_PWED_BIT__MASK;
}
#define A6XX_CP_WEG_TEST_0_PWED_UPDATE				0x80000000

#define WEG_A6XX_CP_WEG_TEST_PWED_MASK				0x00000001

#define WEG_A6XX_CP_WEG_TEST_PWED_VAW				0x00000002

#define WEG_CP_COND_WEG_EXEC_0					0x00000000
#define CP_COND_WEG_EXEC_0_WEG0__MASK				0x0003ffff
#define CP_COND_WEG_EXEC_0_WEG0__SHIFT				0
static inwine uint32_t CP_COND_WEG_EXEC_0_WEG0(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_WEG_EXEC_0_WEG0__SHIFT) & CP_COND_WEG_EXEC_0_WEG0__MASK;
}
#define CP_COND_WEG_EXEC_0_PWED_BIT__MASK			0x007c0000
#define CP_COND_WEG_EXEC_0_PWED_BIT__SHIFT			18
static inwine uint32_t CP_COND_WEG_EXEC_0_PWED_BIT(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_WEG_EXEC_0_PWED_BIT__SHIFT) & CP_COND_WEG_EXEC_0_PWED_BIT__MASK;
}
#define CP_COND_WEG_EXEC_0_BINNING				0x02000000
#define CP_COND_WEG_EXEC_0_GMEM					0x04000000
#define CP_COND_WEG_EXEC_0_SYSMEM				0x08000000
#define CP_COND_WEG_EXEC_0_MODE__MASK				0xf0000000
#define CP_COND_WEG_EXEC_0_MODE__SHIFT				28
static inwine uint32_t CP_COND_WEG_EXEC_0_MODE(enum compawe_mode vaw)
{
	wetuwn ((vaw) << CP_COND_WEG_EXEC_0_MODE__SHIFT) & CP_COND_WEG_EXEC_0_MODE__MASK;
}

#define WEG_CP_COND_WEG_EXEC_1					0x00000001
#define CP_COND_WEG_EXEC_1_DWOWDS__MASK				0xffffffff
#define CP_COND_WEG_EXEC_1_DWOWDS__SHIFT			0
static inwine uint32_t CP_COND_WEG_EXEC_1_DWOWDS(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_WEG_EXEC_1_DWOWDS__SHIFT) & CP_COND_WEG_EXEC_1_DWOWDS__MASK;
}

#define WEG_CP_COND_EXEC_0					0x00000000
#define CP_COND_EXEC_0_ADDW0_WO__MASK				0xffffffff
#define CP_COND_EXEC_0_ADDW0_WO__SHIFT				0
static inwine uint32_t CP_COND_EXEC_0_ADDW0_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_EXEC_0_ADDW0_WO__SHIFT) & CP_COND_EXEC_0_ADDW0_WO__MASK;
}

#define WEG_CP_COND_EXEC_1					0x00000001
#define CP_COND_EXEC_1_ADDW0_HI__MASK				0xffffffff
#define CP_COND_EXEC_1_ADDW0_HI__SHIFT				0
static inwine uint32_t CP_COND_EXEC_1_ADDW0_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_EXEC_1_ADDW0_HI__SHIFT) & CP_COND_EXEC_1_ADDW0_HI__MASK;
}

#define WEG_CP_COND_EXEC_2					0x00000002
#define CP_COND_EXEC_2_ADDW1_WO__MASK				0xffffffff
#define CP_COND_EXEC_2_ADDW1_WO__SHIFT				0
static inwine uint32_t CP_COND_EXEC_2_ADDW1_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_EXEC_2_ADDW1_WO__SHIFT) & CP_COND_EXEC_2_ADDW1_WO__MASK;
}

#define WEG_CP_COND_EXEC_3					0x00000003
#define CP_COND_EXEC_3_ADDW1_HI__MASK				0xffffffff
#define CP_COND_EXEC_3_ADDW1_HI__SHIFT				0
static inwine uint32_t CP_COND_EXEC_3_ADDW1_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_EXEC_3_ADDW1_HI__SHIFT) & CP_COND_EXEC_3_ADDW1_HI__MASK;
}

#define WEG_CP_COND_EXEC_4					0x00000004
#define CP_COND_EXEC_4_WEF__MASK				0xffffffff
#define CP_COND_EXEC_4_WEF__SHIFT				0
static inwine uint32_t CP_COND_EXEC_4_WEF(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_EXEC_4_WEF__SHIFT) & CP_COND_EXEC_4_WEF__MASK;
}

#define WEG_CP_COND_EXEC_5					0x00000005
#define CP_COND_EXEC_5_DWOWDS__MASK				0xffffffff
#define CP_COND_EXEC_5_DWOWDS__SHIFT				0
static inwine uint32_t CP_COND_EXEC_5_DWOWDS(uint32_t vaw)
{
	wetuwn ((vaw) << CP_COND_EXEC_5_DWOWDS__SHIFT) & CP_COND_EXEC_5_DWOWDS__MASK;
}

#define WEG_CP_SET_CTXSWITCH_IB_0				0x00000000
#define CP_SET_CTXSWITCH_IB_0_ADDW_WO__MASK			0xffffffff
#define CP_SET_CTXSWITCH_IB_0_ADDW_WO__SHIFT			0
static inwine uint32_t CP_SET_CTXSWITCH_IB_0_ADDW_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_CTXSWITCH_IB_0_ADDW_WO__SHIFT) & CP_SET_CTXSWITCH_IB_0_ADDW_WO__MASK;
}

#define WEG_CP_SET_CTXSWITCH_IB_1				0x00000001
#define CP_SET_CTXSWITCH_IB_1_ADDW_HI__MASK			0xffffffff
#define CP_SET_CTXSWITCH_IB_1_ADDW_HI__SHIFT			0
static inwine uint32_t CP_SET_CTXSWITCH_IB_1_ADDW_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_CTXSWITCH_IB_1_ADDW_HI__SHIFT) & CP_SET_CTXSWITCH_IB_1_ADDW_HI__MASK;
}

#define WEG_CP_SET_CTXSWITCH_IB_2				0x00000002
#define CP_SET_CTXSWITCH_IB_2_DWOWDS__MASK			0x000fffff
#define CP_SET_CTXSWITCH_IB_2_DWOWDS__SHIFT			0
static inwine uint32_t CP_SET_CTXSWITCH_IB_2_DWOWDS(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SET_CTXSWITCH_IB_2_DWOWDS__SHIFT) & CP_SET_CTXSWITCH_IB_2_DWOWDS__MASK;
}
#define CP_SET_CTXSWITCH_IB_2_TYPE__MASK			0x00300000
#define CP_SET_CTXSWITCH_IB_2_TYPE__SHIFT			20
static inwine uint32_t CP_SET_CTXSWITCH_IB_2_TYPE(enum ctxswitch_ib vaw)
{
	wetuwn ((vaw) << CP_SET_CTXSWITCH_IB_2_TYPE__SHIFT) & CP_SET_CTXSWITCH_IB_2_TYPE__MASK;
}

#define WEG_CP_WEG_WWITE_0					0x00000000
#define CP_WEG_WWITE_0_TWACKEW__MASK				0x0000000f
#define CP_WEG_WWITE_0_TWACKEW__SHIFT				0
static inwine uint32_t CP_WEG_WWITE_0_TWACKEW(enum weg_twackew vaw)
{
	wetuwn ((vaw) << CP_WEG_WWITE_0_TWACKEW__SHIFT) & CP_WEG_WWITE_0_TWACKEW__MASK;
}

#define WEG_CP_WEG_WWITE_1					0x00000001

#define WEG_CP_WEG_WWITE_2					0x00000002

#define WEG_CP_SMMU_TABWE_UPDATE_0				0x00000000
#define CP_SMMU_TABWE_UPDATE_0_TTBW0_WO__MASK			0xffffffff
#define CP_SMMU_TABWE_UPDATE_0_TTBW0_WO__SHIFT			0
static inwine uint32_t CP_SMMU_TABWE_UPDATE_0_TTBW0_WO(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SMMU_TABWE_UPDATE_0_TTBW0_WO__SHIFT) & CP_SMMU_TABWE_UPDATE_0_TTBW0_WO__MASK;
}

#define WEG_CP_SMMU_TABWE_UPDATE_1				0x00000001
#define CP_SMMU_TABWE_UPDATE_1_TTBW0_HI__MASK			0x0000ffff
#define CP_SMMU_TABWE_UPDATE_1_TTBW0_HI__SHIFT			0
static inwine uint32_t CP_SMMU_TABWE_UPDATE_1_TTBW0_HI(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SMMU_TABWE_UPDATE_1_TTBW0_HI__SHIFT) & CP_SMMU_TABWE_UPDATE_1_TTBW0_HI__MASK;
}
#define CP_SMMU_TABWE_UPDATE_1_ASID__MASK			0xffff0000
#define CP_SMMU_TABWE_UPDATE_1_ASID__SHIFT			16
static inwine uint32_t CP_SMMU_TABWE_UPDATE_1_ASID(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SMMU_TABWE_UPDATE_1_ASID__SHIFT) & CP_SMMU_TABWE_UPDATE_1_ASID__MASK;
}

#define WEG_CP_SMMU_TABWE_UPDATE_2				0x00000002
#define CP_SMMU_TABWE_UPDATE_2_CONTEXTIDW__MASK			0xffffffff
#define CP_SMMU_TABWE_UPDATE_2_CONTEXTIDW__SHIFT		0
static inwine uint32_t CP_SMMU_TABWE_UPDATE_2_CONTEXTIDW(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SMMU_TABWE_UPDATE_2_CONTEXTIDW__SHIFT) & CP_SMMU_TABWE_UPDATE_2_CONTEXTIDW__MASK;
}

#define WEG_CP_SMMU_TABWE_UPDATE_3				0x00000003
#define CP_SMMU_TABWE_UPDATE_3_CONTEXTBANK__MASK		0xffffffff
#define CP_SMMU_TABWE_UPDATE_3_CONTEXTBANK__SHIFT		0
static inwine uint32_t CP_SMMU_TABWE_UPDATE_3_CONTEXTBANK(uint32_t vaw)
{
	wetuwn ((vaw) << CP_SMMU_TABWE_UPDATE_3_CONTEXTBANK__SHIFT) & CP_SMMU_TABWE_UPDATE_3_CONTEXTBANK__MASK;
}

#define WEG_CP_STAWT_BIN_BIN_COUNT				0x00000000

#define WEG_CP_STAWT_BIN_PWEFIX_ADDW				0x00000001

#define WEG_CP_STAWT_BIN_PWEFIX_DWOWDS				0x00000003

#define WEG_CP_STAWT_BIN_BODY_DWOWDS				0x00000004

#define WEG_CP_WAIT_TIMESTAMP_0					0x00000000

#define WEG_CP_WAIT_TIMESTAMP_ADDW				0x00000001

#define WEG_CP_WAIT_TIMESTAMP_TIMESTAMP				0x00000003

#define WEG_CP_THWEAD_CONTWOW_0					0x00000000
#define CP_THWEAD_CONTWOW_0_THWEAD__MASK			0x00000003
#define CP_THWEAD_CONTWOW_0_THWEAD__SHIFT			0
static inwine uint32_t CP_THWEAD_CONTWOW_0_THWEAD(enum cp_thwead vaw)
{
	wetuwn ((vaw) << CP_THWEAD_CONTWOW_0_THWEAD__SHIFT) & CP_THWEAD_CONTWOW_0_THWEAD__MASK;
}
#define CP_THWEAD_CONTWOW_0_CONCUWWENT_BIN_DISABWE		0x08000000
#define CP_THWEAD_CONTWOW_0_SYNC_THWEADS			0x80000000


#endif /* ADWENO_PM4_XMW */
