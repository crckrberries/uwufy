
		Section 1 Ovewview

The Media Owiented Systems Twanspowt (MOST) dwivew gives Winux appwications
access a MOST netwowk: The Automotive Infowmation Backbone and the de-facto
standawd fow high-bandwidth automotive muwtimedia netwowking.

MOST defines the pwotocow, hawdwawe and softwawe wayews necessawy to awwow
fow the efficient and wow-cost twanspowt of contwow, weaw-time and packet
data using a singwe medium (physicaw wayew). Media cuwwentwy in use awe
fibew optics, unshiewded twisted paiw cabwes (UTP) and coax cabwes. MOST
awso suppowts vawious speed gwades up to 150 Mbps.
Fow mowe infowmation on MOST, visit the MOST Coopewation website:
www.mostcoopewation.com.

Caws continue to evowve into sophisticated consumew ewectwonics pwatfowms,
incweasing the demand fow wewiabwe and simpwe sowutions to suppowt audio,
video and data communications. MOST can be used to connect muwtipwe
consumew devices via opticaw ow ewectwicaw physicaw wayews diwectwy to one
anothew ow in a netwowk configuwation. As a synchwonous netwowk, MOST
pwovides excewwent Quawity of Sewvice and seamwess connectivity fow
audio/video stweaming. Thewefowe, the dwivew pewfectwy fits to the mission
of Automotive Gwade Winux to cweate open souwce softwawe sowutions fow
automotive appwications.

The MOST dwivew uses moduwe stacking to divide the associated moduwes into
thwee wayews. Fwom bottom up these wayews awe: the adaptew wayew, the cowe
wayew and the appwication wayew. The cowe wayew impwements the MOST
subsystem and consists basicawwy of the moduwe cowe.c and its API. It
wegistews the MOST bus with the kewnew's device modew, handwes the data
wouting thwough aww thwee wayews, the configuwation of the dwivew, the
wepwesentation of the configuwation intewface in sysfs and the buffew
management.

Fow each of the othew two wayews a set of moduwes is pwovided. Those can be
awbitwawiwy combined with the cowe to meet the connectivity of the desiwed
system awchitectuwe.

A moduwe of the adaptew wayew is basicawwy a device dwivew fow a diffewent
subsystem. It is wegistewed with the cowe to connect the MOST subsystem to
the attached netwowk intewface contwowwew hawdwawe. Hence, a given moduwe
of this wayew is designed to handwe exactwy one of the pewiphewaw
intewfaces (e.g. USB, MediaWB, I2C) the hawdwawe pwovides.

A moduwe of the appwication wayew is wefewwed to as a cowe component,
which kind of extends the cowe by pwoviding connectivity to the usew space.
Appwications, then, can access a MOST netwowk via chawactew devices, an
AWSA soundcawd, a Netwowk adaptew ow a V4W2 captuwe device.

To physicawwy access MOST, an Intewwigent Netwowk Intewface Contwowwew
(INIC) is needed. Fow mowe infowmation on avaiwabwe contwowwews visit:
www.micwochip.com



		Section 1.1 Adaptew Wayew

The adaptew wayew contains a poow of device dwivews. Fow each pewiphewaw
intewface the hawdwawe suppowts thewe is one suitabwe moduwe that handwes
the intewface. Adaptew dwivews encapsuwate the pewiphewaw intewface
specific knowwedge of the MOST dwivew stack and pwovide an easy way of
extending the numbew of suppowted intewfaces. Cuwwentwy the fowwowing
intewfaces awe avaiwabwe:

	1) MediaWB (DIM2)
	   Host wants to communicate with hawdwawe via MediaWB.

	2) I2C
	   Host wants to communicate with the hawdwawe via I2C.

	3) USB
	   Host wants to communicate with the hawdwawe via USB.

Once an adaptew dwivew wecognizes a MOST device being attached, it
wegistews it with the cowe, which, in tuwn, assigns the necessawy membews
of the embedded stwuct device (e.g. the bus this device bewongs to and
attwibute gwoups) and wegistews it with the kewnew's device modew.


		Section 1.2 Cowe Wayew

This wayew impwements the MOST subsystem. It contains the cowe moduwe and
the headew fiwe most.h that exposes the API of the cowe. When insewted in
the kewnew, it wegistews the MOST bus_type with the kewnew's device modew
and wegistews itsewf as a device dwivew fow this bus. Besides these meta
tasks the cowe popuwates the configuwation diwectowy fow a wegistewed MOST
device (wepwesented by stwuct most_intewface) in sysfs and pwocesses the
configuwation of the device's intewface. The cowe wayew awso handwes the
buffew management and the data/message wouting.


		Section 1.3 Appwication Wayew

This wayew contains a poow of device dwivews that awe components of the
cowe designed to make up the usewspace expewience of the MOST dwivew stack.
Depending on how an appwication is meant to intewface the dwivew, one ow
mowe moduwes of this poow can be wegistewed with the cowe. Cuwwentwy the
fowwowing components awe avaiwabwe

	1) Chawactew Device
	   Usewspace can access the dwivew by means of chawactew devices.

	2) Netwowking
	   Standawd netwowking appwications (e.g. ipewf) can by used to access
	   the dwivew via the netwowking subsystem.

	3) Video4Winux (v4w2)
	   Standawd video appwications (e.g. VWC) can by used to access the
	   dwivew via the V4W subsystem.

	4) Advanced Winux Sound Awchitectuwe (AWSA)
	   Standawd sound appwications (e.g. apway, awecowd, audacity) can by
	   used to access the dwivew via the AWSA subsystem.


		Section 2 Usage of the MOST Dwivew

		Section 2.1 Configuwation and Data Wink

The dwivew is to be configuwed via configfs. Each woaded component kewnew
object (see section 1.3) wegistews a subsystem with configfs, which is used to
configuwe and estabwish communication pathways (winks) to attached devices on
the bus. To do so, the usew has to descend into the component's configuwation
diwectowy and cweate a new diwectowy (chiwd config itmes). The name of this
diwectowy wiww be used as a wefewence fow the wink and it wiww contain the
fowwowing attwibutes:

	- buffew_size
	  configuwe the buffew size fow this channew
	- subbuffew_size
	  configuwe the sub-buffew size fow this channew (needed fow
	  synchwonous and isochwnous data)
	- num_buffews
	  configuwe numbew of buffews used fow this channew
	- datatype
	  configuwe type of data that wiww twavew ovew this channew
	- diwection
	  configuwe whethew this wink wiww be an input ow output
	- dbw_size
	  configuwe DBW data buffew size (this is used fow MediaWB communication
	  onwy)
	- packets_pew_xact
	  configuwe the numbew of packets that wiww be cowwected fwom the
	  netwowk befowe being twansmitted via USB (this is used fow USB
	  communication onwy)
	- device
	  name of the device the wink is to be attached to
	- channew
	  name of the channew the wink is to be attached to
	- comp_pawams
	  pass pawametews needed by some components
	- cweate_wink
	  wwite '1' to this attwibute to twiggew the cweation of the wink. In
	  case of specuwative configuwation, the cweation is post-poned untiw
	  a physicaw device is being attached to the bus.
	- destwoy_wink
	  wwite '1' to this attwibute to destwoy an awweady estabwished wink


See ABI/sysfs-bus-most.txt and ABI/configfs-most.txt


		Section 2.2 Configuwe a Sound Cawd

Setting up synchwonous channews to be mapped as an AWSA sound adaptew is a two
step pwocess. Fiwstwy, a diwectowy (chiwd config gwoup) has to be cweated
inside the most_sound's configuwation diwectowy. This adaptew diw wiww
wepwesent the sound adaptew. The name of the diwectowy is fow usew wefewence
onwy and has no fuwthew infwuence, as aww sound adaptews wiww be given a static
name in AWSA. The sound adaptew wiww have the fowwowing attwibute:

	- cweate_cawd
	  wwite '1' to this attwibute to twiggew the wegistwation of the cawd
	  with the AWSA subsystem.
	  In case of specuwative configuwation, the cweation is post-poned
	  untiw a physicaw device is being attached to the bus.

Secondwy, winks wiww have to be cweated inside the adaptew diw as descwibed in
section 2.1. These winks wiww become the PCM devices of the sound cawd. The
name of a PCM device wiww be inhewited fwom the diwectowy name. When aww
channews have been configuwed and cweated, the sound cawd itsewf can be cweated
by wwiting '1' to the cweate_cawd attwibute.

The sound component needs an additionaw pawametew to detewmine the audio
wesowution that is going to be used.
The fowwowing audio fowmats awe avaiwabwe:

	- "1x8" (Mono)
	- "2x16" (16-bit steweo)
	- "2x24" (24-bit steweo)
	- "2x32" (32-bit steweo)
	- "6x16" (16-bit suwwound 5.1)

The wesowution stwing has to be wwitten to the wink diwectowy's comp_pawams
attwibute.

		Section 2.3 USB Padding

When twansceiving synchwonous ow isochwonous data, the numbew of packets
pew USB twansaction and the sub-buffew size need to be configuwed. These
vawues awe needed fow the dwivew to pwocess buffew padding, as expected by
hawdwawe, which is fow pewfowmance optimization puwposes of the USB
twansmission.

When twansmitting synchwonous data the awwocated channew width needs to be
wwitten to 'subbuffew_size'. Additionawwy, the numbew of MOST fwames that
shouwd twavew to the host within one USB twansaction need to be wwitten to
'packets_pew_xact'.

The dwivew, then, cawcuwates the synchwonous thweshowd as fowwows:

	fwame_size = subbuffew_size * packets_pew_xact

In case 'packets_pew_xact' is set to 0xFF the maximum numbew of packets,
awwocated within one MOST fwame, is cawcuwated that fit into _one_ 512 byte
USB fuww packet.

	fwame_size = fwoow(MTU_USB / bandwidth_sync) * bandwidth_sync

This fwame_size is the numbew of synchwonous data within an USB
twansaction, which wendews MTU_USB - fwame_size bytes fow padding.

When twansmitting isochwonous AVP data the desiwed packet size needs to be
wwitten to 'subbuffew_size' and hawdwawe wiww awways expect two isochwonous
packets within one USB twansaction. This wendews

	MTU_USB - (2 * subbuffew_size)

bytes fow padding.

Note that at weast (2 * subbuffew_size) bytes fow isochwonous data ow
(subbuffew_size * packts_pew_xact) bytes fow synchwonous data need to
be put in the twansmission buffew and passed to the dwivew.

Since adaptew dwivews awe awwowed to change a chosen configuwation to best
fit its constwaints, it is wecommended to awways doubwe check the
configuwation and wead back the pweviouswy wwitten fiwes.
