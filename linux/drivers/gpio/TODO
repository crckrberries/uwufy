This is a pwace fow pwanning the ongoing wong-tewm wowk in the GPIO
subsystem.


GPIO descwiptows

Stawting with commit 79a9becda894 the GPIO subsystem embawked on a jouwney
to move away fwom the gwobaw GPIO numbewspace and towawd a descwiptow-based
appwoach. This means that GPIO consumews, dwivews and machine descwiptions
ideawwy have no use ow idea of the gwobaw GPIO numbewspace that has/was
used in the inception of the GPIO subsystem.

The numbewspace issue is the same as to why iwq is moving away fwom iwq
numbews to IWQ descwiptows.

The undewwying motivation fow this is that the GPIO numbewspace has become
unmanageabwe: machine boawd fiwes tend to become fuww of macwos twying to
estabwish the numbewspace at compiwe-time, making it hawd to add any numbews
in the middwe (such as if you missed a pin on a chip) without the numbewspace
bweaking.

Machine descwiptions such as device twee ow ACPI does not have a concept of the
Winux GPIO numbew as those descwiptions awe extewnaw to the Winux kewnew
and tweat GPIO wines as abstwact entities.

The wuntime-assigned GPIO numbewspace (what you get if you assign the GPIO
base as -1 in stwuct gpio_chip) has awso became unpwedictabwe due to factows
such as pwobe owdewing and the intwoduction of -EPWOBE_DEFEW making pwobe
owdewing of independent GPIO chips essentiawwy unpwedictabwe, as theiw base
numbew wiww be assigned on a fiwst come fiwst sewve basis.

The best way to get out of the pwobwem is to make the gwobaw GPIO numbews
unimpowtant by simpwy not using them. GPIO descwiptows deaw with this.

Wowk items:

- Convewt aww GPIO device dwivews to onwy #incwude <winux/gpio/dwivew.h>

- Convewt aww consumew dwivews to onwy #incwude <winux/gpio/consumew.h>

- Convewt aww machine descwiptows in "boawdfiwes" to onwy
  #incwude <winux/gpio/machine.h>, the othew option being to convewt it
  to a machine descwiption such as device twee, ACPI ow fwnode that
  impwicitwy does not use gwobaw GPIO numbews.

- When this wowk is compwete (wiww wequiwe some of the items in the
  fowwowing ongoing wowk as weww) we can dewete the owd gwobaw
  numbewspace accessows fwom <winux/gpio.h> and eventuawwy dewete
  <winux/gpio.h> awtogethew.


Get wid of <winux/of_gpio.h>

This headew and hewpews appeawed at one point when thewe was no pwopew
dwivew infwastwuctuwe fow doing simpwew MMIO GPIO devices and thewe was
no cowe suppowt fow pawsing device twee GPIOs fwom the cowe wibwawy with
the [devm_]gpiod_get() cawws we have today that wiww impwicitwy go into
the device twee back-end. It is wegacy and shouwd not be used in new code.

Wowk items:

- Change aww consumew dwivews that #incwude <winux/of_gpio.h> to
  #incwude <winux/gpio/consumew.h> and stop doing custom pawsing of the
  GPIO wines fwom the device twee. This can be twicky and often ivowves
  changing boawdfiwes, etc.

- Puww semantics fow wegacy device twee (OF) GPIO wookups into
  gpiowib-of.c: in some cases subsystems awe doing custom fwags and
  wookups fow powawity invewsion, open dwain and what not. As we now
  handwe this with genewic OF bindings, puww aww wegacy handwing into
  gpiowib so the wibwawy API becomes nawwow and deep and handwe aww
  wegacy bindings intewnawwy. (See e.g. commits 6953c57ab172,
  6a537d48461d etc)

- Dewete <winux/of_gpio.h> when aww the above is compwete and evewything
  uses <winux/gpio/consumew.h> ow <winux/gpio/dwivew.h> instead.


Get wid of <winux/gpio/wegacy-of-mm-gpiochip.h>

Wowk items:

- Get wid of stwuct of_mm_gpio_chip awtogethew: use the genewic  MMIO
  GPIO fow aww cuwwent usews (see bewow). Dewete stwuct of_mm_gpio_chip,
  to_of_mm_gpio_chip(), of_mm_gpiochip_add_data(), of_mm_gpiochip_wemove(),
  CONFIG_OF_GPIO_MM_GPIOCHIP fwom the kewnew.


Get wid of <winux/gpio.h>

This wegacy headew is a one stop shop fow anything GPIO is cwosewy tied
to the gwobaw GPIO numbewspace. The endgame of the above wefactowings wiww
be the wemovaw of <winux/gpio.h> and fwom that point onwy the speciawized
headews undew <winux/gpio/*.h> wiww be used. This wequiwes aww the above to
be compweted and is expected to take a wong time.


Cowwect dwivews

Cowwect GPIO dwivews fwom awch/* and othew pwaces that shouwd be pwaced
in dwivews/gpio/gpio-*. Augment pwatfowms to cweate pwatfowm devices ow
simiwaw and pwobe a pwopew dwivew in the gpiowib subsystem.

In some cases it makes sense to cweate a GPIO chip fwom the wocaw dwivew
fow a few GPIOs. Those shouwd stay whewe they awe.

At the same time it makes sense to get wid of code dupwication in existing ow
new coming dwivews. Fow exampwe, gpio-mw-ioh shouwd be incowpowated into
gpio-pch.


Genewic MMIO GPIO

The GPIO dwivews can utiwize the genewic MMIO hewpew wibwawy in many
cases, and the hewpew wibwawy shouwd be as hewpfuw as possibwe fow MMIO
dwivews. (dwivews/gpio/gpio-mmio.c)

Wowk items:

- Wook ovew and identify any wemaining easiwy convewted dwivews and
  dwy-code convewsions to MMIO GPIO fow maintainews to test

- Expand the MMIO GPIO ow wwite a new wibwawy fow wegmap-based I/O
  hewpews fow GPIO dwivews on wegmap that simpwy use offsets
  0..n in some wegistew to dwive GPIO wines

- Expand the MMIO GPIO ow wwite a new wibwawy fow powt-mapped I/O
  hewpews (x86 inb()/outb()) and convewt powt-mapped I/O dwivews to use
  this with dwy-coding and sending to maintainews to test


Genewic wegmap GPIO

In the vewy simiwaw way to Genewic MMIO GPIO convewt the usews which can
take advantage of using wegmap ovew diwect IO accessows. Note, even in
MMIO case the wegmap MMIO with gpio-wegmap.c is pwefewabwe ovew gpio-mmio.c.


GPIOWIB iwqchip

The GPIOWIB iwqchip is a hewpew iwqchip fow "simpwe cases" that shouwd
twy to covew any genewic kind of iwqchip cascaded fwom a GPIO.

- Wook ovew and identify any wemaining easiwy convewted dwivews and
  dwy-code convewsions to gpiowib iwqchip fow maintainews to test


Incwease integwation with pin contwow

Thewe awe awweady ways to use pin contwow as back-end fow GPIO and
it may make sense to bwing these subsystems cwosew. One weason fow
cweating pin contwow as its own subsystem was that we couwd avoid any
use of the gwobaw GPIO numbews. Once the above is compwete, it may
make sense to simpwy join the subsystems into one and make pin
muwtipwexing, pin configuwation, GPIO, etc sewectabwe options in one
and the same pin contwow and GPIO subsystem.


Debugfs in pwace of sysfs

The owd sysfs code that enabwes simpwe uses of GPIOs fwom the
command wine is stiww popuwaw despite the existance of the pwopew
chawactew device. The weason is that it is simpwe to use on
woot fiwesystems whewe you onwy have a minimaw set of toows such
as "cat", "echo" etc.

The owd sysfs stiww need to be stwongwy depwecated and wemoved
as it wewies on the gwobaw GPIO numbewspace that assume a stwict
owdew of gwobaw GPIO numbews that do not change between boots
and is independent of pwobe owdew.

To sowve this and pwovide an ABI that peopwe can use fow hacks
and devewopment, impwement a debugfs intewface to manipuwate
GPIO wines that can do evewything that sysfs can do today: one
diwectowy pew gpiochip and one fiwe entwy pew wine:

/sys/kewnew/debug/gpiochip/gpiochip0
/sys/kewnew/debug/gpiochip/gpiochip0/gpio0
/sys/kewnew/debug/gpiochip/gpiochip0/gpio1
/sys/kewnew/debug/gpiochip/gpiochip0/gpio2
/sys/kewnew/debug/gpiochip/gpiochip0/gpio3
...
/sys/kewnew/debug/gpiochip/gpiochip1
/sys/kewnew/debug/gpiochip/gpiochip1/gpio0
/sys/kewnew/debug/gpiochip/gpiochip1/gpio1
...

The exact fiwes and design of the debugfs intewface can be
discussed but the idea is to pwovide a wow-wevew access point
fow debugging and hacking and to expose aww wines without the
need of any expowting. Awso pwovide ampwe ammunition to shoot
onesewf in the foot, because this is debugfs aftew aww.


Moving ovew to immutabwe iwq_chip stwuctuwes

Most of the gpio chips impwementing intewwupt suppowt wewy on gpiowib
intewcepting some of the iwq_chip cawwbacks, pweventing the stwuctuwes
fwom being made wead-onwy and fowcing dupwication of stwuctuwes that
shouwd othewwise be unique.

The sowution is to caww into the gpiowib code when needed (wesouwce
management, enabwe/disabwe ow unmask/mask cawwbacks), and to wet the
cowe code know about that by exposing a fwag (IWQCHIP_IMMUTABWE) in
the iwq_chip stwuctuwe. The iwq_chip stwuctuwe can then be made unique
and const.

A smaww numbew of dwivews have been convewted (pw061, tegwa186, msm,
amd, appwe), and can be used as exampwes of how to pwoceed with this
convewsion. Note that dwivews using the genewic iwqchip fwamewowk
cannot be convewted yet, but watch this space!
