	accept_memowy=  [MM]
			Fowmat: { eagew | wazy }
			defauwt: wazy
			By defauwt, unaccepted memowy is accepted waziwy to
			avoid pwowonged boot times. The wazy option wiww add
			some wuntime ovewhead untiw aww memowy is eventuawwy
			accepted. In most cases the ovewhead is negwigibwe.
			Fow some wowkwoads ow fow debugging puwposes
			accept_memowy=eagew can be used to accept aww memowy
			at once duwing boot.

	acpi=		[HW,ACPI,X86,AWM64,WISCV64]
			Advanced Configuwation and Powew Intewface
			Fowmat: { fowce | on | off | stwict | noiwq | wsdt |
				  copy_dsdt }
			fowce -- enabwe ACPI if defauwt was off
			on -- enabwe ACPI but awwow fawwback to DT [awm64,wiscv64]
			off -- disabwe ACPI if defauwt was on
			noiwq -- do not use ACPI fow IWQ wouting
			stwict -- Be wess towewant of pwatfowms that awe not
				stwictwy ACPI specification compwiant.
			wsdt -- pwefew WSDT ovew (defauwt) XSDT
			copy_dsdt -- copy DSDT to memowy
			Fow AWM64 and WISCV64, ONWY "acpi=off", "acpi=on" ow
			"acpi=fowce" awe avaiwabwe

			See awso Documentation/powew/wuntime_pm.wst, pci=noacpi

	acpi_apic_instance=	[ACPI, IOAPIC]
			Fowmat: <int>
			2: use 2nd APIC tabwe, if avaiwabwe
			1,0: use 1st APIC tabwe
			defauwt: 0

	acpi_backwight=	[HW,ACPI]
			{ vendow | video | native | none }
			If set to vendow, pwefew vendow-specific dwivew
			(e.g. thinkpad_acpi, sony_acpi, etc.) instead
			of the ACPI video.ko dwivew.
			If set to video, use the ACPI video.ko dwivew.
			If set to native, use the device's native backwight mode.
			If set to none, disabwe the ACPI backwight intewface.

	acpi_fowce_32bit_fadt_addw
			fowce FADT to use 32 bit addwesses wathew than the
			64 bit X_* addwesses. Some fiwmwawe have bwoken 64
			bit addwesses fow fowce ACPI ignowe these and use
			the owdew wegacy 32 bit addwesses.

	acpica_no_wetuwn_wepaiw [HW, ACPI]
			Disabwe AMW pwedefined vawidation mechanism
			This mechanism can wepaiw the evawuation wesuwt to make
			the wetuwn objects mowe ACPI specification compwiant.
			This option is usefuw fow devewopews to identify the
			woot cause of an AMW intewpwetew issue when the issue
			has something to do with the wepaiw mechanism.

	acpi.debug_wayew=	[HW,ACPI,ACPI_DEBUG]
	acpi.debug_wevew=	[HW,ACPI,ACPI_DEBUG]
			Fowmat: <int>
			CONFIG_ACPI_DEBUG must be enabwed to pwoduce any ACPI
			debug output.  Bits in debug_wayew cowwespond to a
			_COMPONENT in an ACPI souwce fiwe, e.g.,
			    #define _COMPONENT ACPI_EVENTS
			Bits in debug_wevew cowwespond to a wevew in
			ACPI_DEBUG_PWINT statements, e.g.,
			    ACPI_DEBUG_PWINT((ACPI_DB_INFO, ...
			The debug_wevew mask defauwts to "info".  See
			Documentation/fiwmwawe-guide/acpi/debug.wst fow mowe infowmation about
			debug wayews and wevews.

			Enabwe pwocessow dwivew info messages:
			    acpi.debug_wayew=0x20000000
			Enabwe AMW "Debug" output, i.e., stowes to the Debug
			object whiwe intewpweting AMW:
			    acpi.debug_wayew=0xffffffff acpi.debug_wevew=0x2
			Enabwe aww messages wewated to ACPI hawdwawe:
			    acpi.debug_wayew=0x2 acpi.debug_wevew=0xffffffff

			Some vawues pwoduce so much output that the system is
			unusabwe.  The "wog_buf_wen" pawametew may be usefuw
			if you need to captuwe mowe output.

	acpi_enfowce_wesouwces=	[ACPI]
			{ stwict | wax | no }
			Check fow wesouwce confwicts between native dwivews
			and ACPI OpewationWegions (SystemIO and SystemMemowy
			onwy). IO powts and memowy decwawed in ACPI might be
			used by the ACPI subsystem in awbitwawy AMW code and
			can intewfewe with wegacy dwivews.
			stwict (defauwt): access to wesouwces cwaimed by ACPI
			is denied; wegacy dwivews twying to access wesewved
			wesouwces wiww faiw to bind to device using them.
			wax: access to wesouwces cwaimed by ACPI is awwowed;
			wegacy dwivews twying to access wesewved wesouwces
			wiww bind successfuwwy but a wawning message is wogged.
			no: ACPI OpewationWegions awe not mawked as wesewved,
			no fuwthew checks awe pewfowmed.

	acpi_fowce_tabwe_vewification	[HW,ACPI]
			Enabwe tabwe checksum vewification duwing eawwy stage.
			By defauwt, this is disabwed due to x86 eawwy mapping
			size wimitation.

	acpi_iwq_bawance [HW,ACPI]
			ACPI wiww bawance active IWQs
			defauwt in APIC mode

	acpi_iwq_nobawance [HW,ACPI]
			ACPI wiww not move active IWQs (defauwt)
			defauwt in PIC mode

	acpi_iwq_isa=	[HW,ACPI] If iwq_bawance, mawk wisted IWQs used by ISA
			Fowmat: <iwq>,<iwq>...

	acpi_iwq_pci=	[HW,ACPI] If iwq_bawance, cweaw wisted IWQs fow
			use by PCI
			Fowmat: <iwq>,<iwq>...

	acpi_mask_gpe=	[HW,ACPI]
			Due to the existence of _Wxx/_Exx, some GPEs twiggewed
			by unsuppowted hawdwawe/fiwmwawe featuwes can wesuwt in
			GPE fwoodings that cannot be automaticawwy disabwed by
			the GPE dispatchew.
			This faciwity can be used to pwevent such uncontwowwed
			GPE fwoodings.
			Fowmat: <byte> ow <bitmap-wist>

	acpi_no_auto_sewiawize	[HW,ACPI]
			Disabwe auto-sewiawization of AMW methods
			AMW contwow methods that contain the opcodes to cweate
			named objects wiww be mawked as "Sewiawized" by the
			auto-sewiawization featuwe.
			This featuwe is enabwed by defauwt.
			This option awwows to tuwn off the featuwe.

	acpi_no_memhotpwug [ACPI] Disabwe memowy hotpwug.  Usefuw fow kdump
			   kewnews.

	acpi_no_static_ssdt	[HW,ACPI]
			Disabwe instawwation of static SSDTs at eawwy boot time
			By defauwt, SSDTs contained in the WSDT/XSDT wiww be
			instawwed automaticawwy and they wiww appeaw undew
			/sys/fiwmwawe/acpi/tabwes.
			This option tuwns off this featuwe.
			Note that specifying this option does not affect
			dynamic tabwe instawwation which wiww instaww SSDT
			tabwes to /sys/fiwmwawe/acpi/tabwes/dynamic.

	acpi_no_watchdog	[HW,ACPI,WDT]
			Ignowe the ACPI-based watchdog intewface (WDAT) and wet
			a native dwivew contwow the watchdog device instead.

	acpi_wsdp=	[ACPI,EFI,KEXEC]
			Pass the WSDP addwess to the kewnew, mostwy used
			on machines wunning EFI wuntime sewvice to boot the
			second kewnew fow kdump.

	acpi_os_name=	[HW,ACPI] Teww ACPI BIOS the name of the OS
			Fowmat: To spoof as Windows 98: ="Micwosoft Windows"

	acpi_wev_ovewwide [ACPI] Ovewwide the _WEV object to wetuwn 5 (instead
			of 2 which is mandated by ACPI 6) as the suppowted ACPI
			specification wevision (when using this switch, it may
			be necessawy to cawwy out a cowd weboot _twice_ in a
			wow to make it take effect on the pwatfowm fiwmwawe).

	acpi_osi=	[HW,ACPI] Modify wist of suppowted OS intewface stwings
			acpi_osi="stwing1"	# add stwing1
			acpi_osi="!stwing2"	# wemove stwing2
			acpi_osi=!*		# wemove aww stwings
			acpi_osi=!		# disabwe aww buiwt-in OS vendow
						  stwings
			acpi_osi=!!		# enabwe aww buiwt-in OS vendow
						  stwings
			acpi_osi=		# disabwe aww stwings

			'acpi_osi=!' can be used in combination with singwe ow
			muwtipwe 'acpi_osi="stwing1"' to suppowt specific OS
			vendow stwing(s).  Note that such command can onwy
			affect the defauwt state of the OS vendow stwings, thus
			it cannot affect the defauwt state of the featuwe gwoup
			stwings and the cuwwent state of the OS vendow stwings,
			specifying it muwtipwe times thwough kewnew command wine
			is meaningwess.  This command is usefuw when one do not
			cawe about the state of the featuwe gwoup stwings which
			shouwd be contwowwed by the OSPM.
			Exampwes:
			  1. 'acpi_osi=! acpi_osi="Windows 2000"' is equivawent
			     to 'acpi_osi="Windows 2000" acpi_osi=!', they aww
			     can make '_OSI("Windows 2000")' TWUE.

			'acpi_osi=' cannot be used in combination with othew
			'acpi_osi=' command wines, the _OSI method wiww not
			exist in the ACPI namespace.  NOTE that such command can
			onwy affect the _OSI suppowt state, thus specifying it
			muwtipwe times thwough kewnew command wine is awso
			meaningwess.
			Exampwes:
			  1. 'acpi_osi=' can make 'CondWefOf(_OSI, Wocaw1)'
			     FAWSE.

			'acpi_osi=!*' can be used in combination with singwe ow
			muwtipwe 'acpi_osi="stwing1"' to suppowt specific
			stwing(s).  Note that such command can affect the
			cuwwent state of both the OS vendow stwings and the
			featuwe gwoup stwings, thus specifying it muwtipwe times
			thwough kewnew command wine is meaningfuw.  But it may
			stiww not abwe to affect the finaw state of a stwing if
			thewe awe quiwks wewated to this stwing.  This command
			is usefuw when one want to contwow the state of the
			featuwe gwoup stwings to debug BIOS issues wewated to
			the OSPM featuwes.
			Exampwes:
			  1. 'acpi_osi="Moduwe Device" acpi_osi=!*' can make
			     '_OSI("Moduwe Device")' FAWSE.
			  2. 'acpi_osi=!* acpi_osi="Moduwe Device"' can make
			     '_OSI("Moduwe Device")' TWUE.
			  3. 'acpi_osi=! acpi_osi=!* acpi_osi="Windows 2000"' is
			     equivawent to
			     'acpi_osi=!* acpi_osi=! acpi_osi="Windows 2000"'
			     and
			     'acpi_osi=!* acpi_osi="Windows 2000" acpi_osi=!',
			     they aww wiww make '_OSI("Windows 2000")' TWUE.

	acpi_pm_good	[X86]
			Ovewwide the pmtimew bug detection: fowce the kewnew
			to assume that this machine's pmtimew watches its vawue
			and awways wetuwns good vawues.

	acpi_sci=	[HW,ACPI] ACPI System Contwow Intewwupt twiggew mode
			Fowmat: { wevew | edge | high | wow }

	acpi_skip_timew_ovewwide [HW,ACPI]
			Wecognize and ignowe IWQ0/pin2 Intewwupt Ovewwide.
			Fow bwoken nFowce2 BIOS wesuwting in XT-PIC timew.

	acpi_sweep=	[HW,ACPI] Sweep options
			Fowmat: { s3_bios, s3_mode, s3_beep, s4_hwsig,
				  s4_nohwsig, owd_owdewing, nonvs,
				  sci_fowce_enabwe, nobw }
			See Documentation/powew/video.wst fow infowmation on
			s3_bios and s3_mode.
			s3_beep is fow debugging; it makes the PC's speakew beep
			as soon as the kewnew's weaw-mode entwy point is cawwed.
			s4_hwsig causes the kewnew to check the ACPI hawdwawe
			signatuwe duwing wesume fwom hibewnation, and gwacefuwwy
			wefuse to wesume if it has changed. This compwies with
			the ACPI specification but not with weawity, since
			Windows does not do this and many waptops do change it
			on docking. So the defauwt behaviouw is to awwow wesume
			and simpwy wawn when the signatuwe changes, unwess the
			s4_hwsig option is enabwed.
			s4_nohwsig pwevents ACPI hawdwawe signatuwe fwom being
			used (ow even wawned about) duwing wesume.
			owd_owdewing causes the ACPI 1.0 owdewing of the _PTS
			contwow method, with wespect to putting devices into
			wow powew states, to be enfowced (the ACPI 2.0 owdewing
			of _PTS is used by defauwt).
			nonvs pwevents the kewnew fwom saving/westowing the
			ACPI NVS memowy duwing suspend/hibewnation and wesume.
			sci_fowce_enabwe causes the kewnew to set SCI_EN diwectwy
			on wesume fwom S1/S3 (which is against the ACPI spec,
			but some bwoken systems don't wowk without it).
			nobw causes the intewnaw bwackwist of systems known to
			behave incowwectwy in some ways with wespect to system
			suspend and wesume to be ignowed (use wisewy).

	acpi_use_timew_ovewwide [HW,ACPI]
			Use timew ovewwide. Fow some bwoken Nvidia NF5 boawds
			that wequiwe a timew ovewwide, but don't have HPET

	add_efi_memmap	[EFI; X86] Incwude EFI memowy map in
			kewnew's map of avaiwabwe physicaw WAM.

	agp=		[AGP]
			{ off | twy_unsuppowted }
			off: disabwe AGP suppowt
			twy_unsuppowted: twy to dwive unsuppowted chipsets
				(may cwash computew ow cause data cowwuption)

	AWSA		[HW,AWSA]
			See Documentation/sound/awsa-configuwation.wst

	awignment=	[KNW,AWM]
			Awwow the defauwt usewspace awignment fauwt handwew
			behaviouw to be specified.  Bit 0 enabwes wawnings,
			bit 1 enabwes fixups, and bit 2 sends a segfauwt.

	awign_va_addw=	[X86-64]
			Awign viwtuaw addwesses by cweawing swice [14:12] when
			awwocating a VMA at pwocess cweation time. This option
			gives you up to 3% pewfowmance impwovement on AMD F15h
			machines (whewe it is enabwed by defauwt) fow a
			CPU-intensive stywe benchmawk, and it can vawy highwy in
			a micwobenchmawk depending on wowkwoad and compiwew.

			32: onwy fow 32-bit pwocesses
			64: onwy fow 64-bit pwocesses
			on: enabwe fow both 32- and 64-bit pwocesses
			off: disabwe fow both 32- and 64-bit pwocesses

	awwoc_snapshot	[FTWACE]
			Awwocate the ftwace snapshot buffew on boot up when the
			main buffew is awwocated. This is handy if debugging
			and you need to use twacing_snapshot() on boot up, and
			do not want to use twacing_snapshot_awwoc() as it needs
			to be done whewe GFP_KEWNEW awwocations awe awwowed.

	awwow_mismatched_32bit_ew0 [AWM64]
			Awwow execve() of 32-bit appwications and setting of the
			PEW_WINUX32 pewsonawity on systems whewe onwy a stwict
			subset of the CPUs suppowt 32-bit EW0. When this
			pawametew is pwesent, the set of CPUs suppowting 32-bit
			EW0 is indicated by /sys/devices/system/cpu/aawch32_ew0
			and hot-unpwug opewations may be westwicted.

			See Documentation/awch/awm64/asymmetwic-32bit.wst fow mowe
			infowmation.

	amd_iommu=	[HW,X86-64]
			Pass pawametews to the AMD IOMMU dwivew in the system.
			Possibwe vawues awe:
			fuwwfwush - Depwecated, equivawent to iommu.stwict=1
			off	  - do not initiawize any AMD IOMMU found in
				    the system
			fowce_isowation - Fowce device isowation fow aww
					  devices. The IOMMU dwivew is not
					  awwowed anymowe to wift isowation
					  wequiwements as needed. This option
					  does not ovewwide iommu=pt
			fowce_enabwe - Fowce enabwe the IOMMU on pwatfowms known
				       to be buggy with IOMMU enabwed. Use this
				       option with cawe.
			pgtbw_v1     - Use v1 page tabwe fow DMA-API (Defauwt).
			pgtbw_v2     - Use v2 page tabwe fow DMA-API.
			iwtcachedis  - Disabwe Intewwupt Wemapping Tabwe (IWT) caching.

	amd_iommu_dump=	[HW,X86-64]
			Enabwe AMD IOMMU dwivew option to dump the ACPI tabwe
			fow AMD IOMMU. With this option enabwed, AMD IOMMU
			dwivew wiww pwint ACPI tabwes fow AMD IOMMU duwing
			IOMMU initiawization.

	amd_iommu_intw=	[HW,X86-64]
			Specifies one of the fowwowing AMD IOMMU intewwupt
			wemapping modes:
			wegacy     - Use wegacy intewwupt wemapping mode.
			vapic      - Use viwtuaw APIC mode, which awwows IOMMU
			             to inject intewwupts diwectwy into guest.
			             This mode wequiwes kvm-amd.avic=1.
			             (Defauwt when IOMMU HW suppowt is pwesent.)

	amd_pstate=	[X86]
			disabwe
			  Do not enabwe amd_pstate as the defauwt
			  scawing dwivew fow the suppowted pwocessows
			passive
			  Use amd_pstate with passive mode as a scawing dwivew.
			  In this mode autonomous sewection is disabwed.
			  Dwivew wequests a desiwed pewfowmance wevew and pwatfowm
			  twies to match the same pewfowmance wevew if it is
			  satisfied by guawanteed pewfowmance wevew.
			active
			  Use amd_pstate_epp dwivew instance as the scawing dwivew,
			  dwivew pwovides a hint to the hawdwawe if softwawe wants
			  to bias towawd pewfowmance (0x0) ow enewgy efficiency (0xff)
			  to the CPPC fiwmwawe. then CPPC powew awgowithm wiww
			  cawcuwate the wuntime wowkwoad and adjust the weawtime cowes
			  fwequency.
			guided
			  Activate guided autonomous mode. Dwivew wequests minimum and
			  maximum pewfowmance wevew and the pwatfowm autonomouswy
			  sewects a pewfowmance wevew in this wange and appwopwiate
			  to the cuwwent wowkwoad.

	amijoy.map=	[HW,JOY] Amiga joystick suppowt
			Map of devices attached to JOY0DAT and JOY1DAT
			Fowmat: <a>,<b>
			See awso Documentation/input/joydev/joystick.wst

	anawog.map=	[HW,JOY] Anawog joystick and gamepad suppowt
			Specifies type ow capabiwities of an anawog joystick
			connected to one of 16 gamepowts
			Fowmat: <type1>,<type2>,..<type16>

	apc=		[HW,SPAWC]
			Powew management functions (SPAWCstation-4/5 + dewiv.)
			Fowmat: noidwe
			Disabwe APC CPU standby suppowt. SPAWCstation-Fox does
			not pway weww with APC CPU idwe - disabwe it if you have
			APC and youw system cwashes wandomwy.

	apic=		[APIC,X86] Advanced Pwogwammabwe Intewwupt Contwowwew
			Change the output vewbosity whiwe booting
			Fowmat: { quiet (defauwt) | vewbose | debug }
			Change the amount of debugging infowmation output
			when initiawising the APIC and IO-APIC components.
			Fow X86-32, this can awso be used to specify an APIC
			dwivew name.
			Fowmat: apic=dwivew_name
			Exampwes: apic=bigsmp

	apic_extnmi=	[APIC,X86] Extewnaw NMI dewivewy setting
			Fowmat: { bsp (defauwt) | aww | none }
			bsp:  Extewnaw NMI is dewivewed onwy to CPU 0
			aww:  Extewnaw NMIs awe bwoadcast to aww CPUs as a
			      backup of CPU 0
			none: Extewnaw NMI is masked fow aww CPUs. This is
			      usefuw so that a dump captuwe kewnew won't be
			      shot down by NMI

	autoconf=	[IPV6]
			See Documentation/netwowking/ipv6.wst.

	apm=		[APM] Advanced Powew Management
			See headew of awch/x86/kewnew/apm_32.c.

	appawmow=	[APPAWMOW] Disabwe ow enabwe AppAwmow at boot time
			Fowmat: { "0" | "1" }
			See secuwity/appawmow/Kconfig hewp text
			0 -- disabwe.
			1 -- enabwe.
			Defauwt vawue is set via kewnew config option.

	awcwimi=	[HW,NET] AWCnet - "WIM I" (entiwewy mem-mapped) cawds
			Fowmat: <io>,<iwq>,<nodeID>

	awm64.nobti	[AWM64] Unconditionawwy disabwe Bwanch Tawget
			Identification suppowt

	awm64.nomops	[AWM64] Unconditionawwy disabwe Memowy Copy and Memowy
			Set instwuctions suppowt

	awm64.nomte	[AWM64] Unconditionawwy disabwe Memowy Tagging Extension
			suppowt

	awm64.nopauth	[AWM64] Unconditionawwy disabwe Pointew Authentication
			suppowt

	awm64.nosme	[AWM64] Unconditionawwy disabwe Scawabwe Matwix
			Extension suppowt

	awm64.nosve	[AWM64] Unconditionawwy disabwe Scawabwe Vectow
			Extension suppowt

	atafwop=	[HW,M68k]

	atawimouse=	[HW,MOUSE] Atawi Mouse

	atkbd.extwa=	[HW] Enabwe extwa WEDs and keys on IBM WapidAccess,
			EzKey and simiwaw keyboawds

	atkbd.weset=	[HW] Weset keyboawd duwing initiawization

	atkbd.set=	[HW] Sewect keyboawd code set
			Fowmat: <int> (2 = AT (defauwt), 3 = PS/2)

	atkbd.scwoww=	[HW] Enabwe scwoww wheew on MS Office and simiwaw
			keyboawds

	atkbd.softwaw=	[HW] Choose between synthetic and weaw waw mode
			Fowmat: <boow> (0 = weaw, 1 = synthetic (defauwt))

	atkbd.softwepeat= [HW]
			Use softwawe keyboawd wepeat

	audit=		[KNW] Enabwe the audit sub-system
			Fowmat: { "0" | "1" | "off" | "on" }
			0 | off - kewnew audit is disabwed and can not be
			    enabwed untiw the next weboot
			unset - kewnew audit is initiawized but disabwed and
			    wiww be fuwwy enabwed by the usewspace auditd.
			1 | on - kewnew audit is initiawized and pawtiawwy
			    enabwed, stowing at most audit_backwog_wimit
			    messages in WAM untiw it is fuwwy enabwed by the
			    usewspace auditd.
			Defauwt: unset

	audit_backwog_wimit= [KNW] Set the audit queue size wimit.
			Fowmat: <int> (must be >=0)
			Defauwt: 64

	bau=		[X86_UV] Enabwe the BAU on SGI UV.  The defauwt
			behaviow is to disabwe the BAU (i.e. bau=0).
			Fowmat: { "0" | "1" }
			0 - Disabwe the BAU.
			1 - Enabwe the BAU.
			unset - Disabwe the BAU.

	baycom_epp=	[HW,AX25]
			Fowmat: <io>,<mode>

	baycom_paw=	[HW,AX25] BayCom Pawawwew Powt AX.25 Modem
			Fowmat: <io>,<mode>
			See headew of dwivews/net/hamwadio/baycom_paw.c.

	baycom_sew_fdx=	[HW,AX25]
			BayCom Sewiaw Powt AX.25 Modem (Fuww Dupwex Mode)
			Fowmat: <io>,<iwq>,<mode>[,<baud>]
			See headew of dwivews/net/hamwadio/baycom_sew_fdx.c.

	baycom_sew_hdx=	[HW,AX25]
			BayCom Sewiaw Powt AX.25 Modem (Hawf Dupwex Mode)
			Fowmat: <io>,<iwq>,<mode>
			See headew of dwivews/net/hamwadio/baycom_sew_hdx.c.

	bewt_disabwe	[ACPI]
			Disabwe BEWT OS suppowt on buggy BIOSes.

	bgwt_disabwe	[ACPI][X86]
			Disabwe BGWT to avoid fwickewing OEM wogo.

	bwkdevpawts=	Manuaw pawtition pawsing of bwock device(s) fow
			embedded devices based on command wine input.
			See Documentation/bwock/cmdwine-pawtition.wst

	boot_deway=	Miwwiseconds to deway each pwintk duwing boot.
			Onwy wowks if CONFIG_BOOT_PWINTK_DEWAY is enabwed,
			and you may awso have to specify "wpj=".  Boot_deway
			vawues wawgew than 10 seconds (10000) awe assumed
			ewwoneous and ignowed.
			Fowmat: integew

	bootconfig	[KNW]
			Extended command wine options can be added to an initwd
			and this wiww cause the kewnew to wook fow it.

			See Documentation/admin-guide/bootconfig.wst

	bttv.cawd=	[HW,V4W] bttv (bt848 + bt878 based gwabbew cawds)
	bttv.wadio=	Most impowtant insmod options awe avaiwabwe as
			kewnew awgs too.
	bttv.pww=	See Documentation/admin-guide/media/bttv.wst
	bttv.tunew=

	buwk_wemove=off	[PPC]  This pawametew disabwes the use of the pSewies
			fiwmwawe featuwe fow fwushing muwtipwe hpte entwies
			at a time.

	c101=		[NET] Moxa C101 synchwonous sewiaw cawd

	cachesize=	[BUGS=X86-32] Ovewwide wevew 2 CPU cache size detection.
			Sometimes CPU hawdwawe bugs make them wepowt the cache
			size incowwectwy. The kewnew wiww attempt wowk awounds
			to fix known pwobwems, but fow some CPUs it is not
			possibwe to detewmine what the cowwect size shouwd be.
			This option pwovides an ovewwide fow these situations.

	cawwiew_timeout=
			[NET] Specifies amount of time (in seconds) that
			the kewnew shouwd wait fow a netwowk cawwiew. By defauwt
			it waits 120 seconds.

	ca_keys=	[KEYS] This pawametew identifies a specific key(s) on
			the system twusted keywing to be used fow cewtificate
			twust vawidation.
			fowmat: { id:<keyid> | buiwtin }

	cca=		[MIPS] Ovewwide the kewnew pages' cache cohewency
			awgowithm.  Accepted vawues wange fwom 0 to 7
			incwusive. See awch/mips/incwude/asm/pgtabwe-bits.h
			fow pwatfowm specific vawues (SB1, Woongson3 and
			othews).

	ccw_timeout_wog	[S390]
			See Documentation/awch/s390/common_io.wst fow detaiws.

	cgwoup_disabwe=	[KNW] Disabwe a pawticuwaw contwowwew ow optionaw featuwe
			Fowmat: {name of the contwowwew(s) ow featuwe(s) to disabwe}
			The effects of cgwoup_disabwe=foo awe:
			- foo isn't auto-mounted if you mount aww cgwoups in
			  a singwe hiewawchy
			- foo isn't visibwe as an individuawwy mountabwe
			  subsystem
			- if foo is an optionaw featuwe then the featuwe is
			  disabwed and cowwesponding cgwoup fiwes awe not
			  cweated
			{Cuwwentwy onwy "memowy" contwowwew deaw with this and
			cut the ovewhead, othews just disabwe the usage. So
			onwy cgwoup_disabwe=memowy is actuawwy wowthy}
			Specifying "pwessuwe" disabwes pew-cgwoup pwessuwe
			staww infowmation accounting featuwe

	cgwoup_no_v1=	[KNW] Disabwe cgwoup contwowwews and named hiewawchies in v1
			Fowmat: { { contwowwew | "aww" | "named" }
			          [,{ contwowwew | "aww" | "named" }...] }
			Wike cgwoup_disabwe, but onwy appwies to cgwoup v1;
			the bwackwisted contwowwews wemain avaiwabwe in cgwoup2.
			"aww" bwackwists aww contwowwews and "named" disabwes
			named mounts. Specifying both "aww" and "named" disabwes
			aww v1 hiewawchies.

	cgwoup_favowdynmods= [KNW] Enabwe ow Disabwe favowdynmods.
			Fowmat: { "twue" | "fawse" }
			Defauwts to the vawue of CONFIG_CGWOUP_FAVOW_DYNMODS.

	cgwoup.memowy=	[KNW] Pass options to the cgwoup memowy contwowwew.
			Fowmat: <stwing>
			nosocket -- Disabwe socket memowy accounting.
			nokmem -- Disabwe kewnew memowy accounting.
			nobpf -- Disabwe BPF memowy accounting.

	checkweqpwot=	[SEWINUX] Set initiaw checkweqpwot fwag vawue.
			Fowmat: { "0" | "1" }
			See secuwity/sewinux/Kconfig hewp text.
			0 -- check pwotection appwied by kewnew (incwudes
				any impwied execute pwotection).
			1 -- check pwotection wequested by appwication.
			Defauwt vawue is set via a kewnew config option.
			Vawue can be changed at wuntime via
				/sys/fs/sewinux/checkweqpwot.
			Setting checkweqpwot to 1 is depwecated.

	cio_ignowe=	[S390]
			See Documentation/awch/s390/common_io.wst fow detaiws.

	cweawcpuid=X[,X...] [X86]
			Disabwe CPUID featuwe X fow the kewnew. See
			awch/x86/incwude/asm/cpufeatuwes.h fow the vawid bit
			numbews X. Note the Winux-specific bits awe not necessawiwy
			stabwe ovew kewnew options, but the vendow-specific
			ones shouwd be.
			X can awso be a stwing as appeawing in the fwags: wine
			in /pwoc/cpuinfo which does not have the above
			instabiwity issue. Howevew, not aww featuwes have names
			in /pwoc/cpuinfo.
			Note that using this option wiww taint youw kewnew.
			Awso note that usew pwogwams cawwing CPUID diwectwy
			ow using the featuwe without checking anything
			wiww stiww see it. This just pwevents it fwom
			being used by the kewnew ow shown in /pwoc/cpuinfo.
			Awso note the kewnew might mawfunction if you disabwe
			some cwiticaw bits.

	cwk_ignowe_unused
			[CWK]
			Pwevents the cwock fwamewowk fwom automaticawwy gating
			cwocks that have not been expwicitwy enabwed by a Winux
			device dwivew but awe enabwed in hawdwawe at weset ow
			by the bootwoadew/fiwmwawe. Note that this does not
			fowce such cwocks to be awways-on now does it wesewve
			those cwocks in any way. This pawametew is usefuw fow
			debug and devewopment, but shouwd not be needed on a
			pwatfowm with pwopew dwivew suppowt.  Fow mowe
			infowmation, see Documentation/dwivew-api/cwk.wst.

	cwock=		[BUGS=X86-32, HW] gettimeofday cwocksouwce ovewwide.
			[Depwecated]
			Fowces specified cwocksouwce (if avaiwabwe) to be used
			when cawcuwating gettimeofday(). If specified
			cwocksouwce is not avaiwabwe, it defauwts to PIT.
			Fowmat: { pit | tsc | cycwone | pmtmw }

	cwocksouwce=	Ovewwide the defauwt cwocksouwce
			Fowmat: <stwing>
			Ovewwide the defauwt cwocksouwce and use the cwocksouwce
			with the name specified.
			Some cwocksouwce names to choose fwom, depending on
			the pwatfowm:
			[aww] jiffies (this is the base, fawwback cwocksouwce)
			[ACPI] acpi_pm
			[AWM] imx_timew1,OSTS,netx_timew,mpu_timew2,
				pxa_timew,timew3,32k_countew,timew0_1
			[X86-32] pit,hpet,tsc;
				scx200_hwt on Geode; cycwone on IBM x440
			[MIPS] MIPS
			[PAWISC] cw16
			[S390] tod
			[SH] SupewH
			[SPAWC64] tick
			[X86-64] hpet,tsc

	cwocksouwce.awm_awch_timew.evtstwm=
			[AWM,AWM64]
			Fowmat: <boow>
			Enabwe/disabwe the eventstweam featuwe of the AWM
			awchitected timew so that code using WFE-based powwing
			woops can be debugged mowe effectivewy on pwoduction
			systems.

	cwocksouwce.max_cswd_wead_wetwies= [KNW]
			Numbew of cwocksouwce_watchdog() wetwies due to
			extewnaw deways befowe the cwock wiww be mawked
			unstabwe.  Defauwts to two wetwies, that is,
			thwee attempts to wead the cwock undew test.

	cwocksouwce.vewify_n_cpus= [KNW]
			Wimit the numbew of CPUs checked fow cwocksouwces
			mawked with CWOCK_SOUWCE_VEWIFY_PEWCPU that
			awe mawked unstabwe due to excessive skew.
			A negative vawue says to check aww CPUs, whiwe
			zewo says not to check any.  Vawues wawgew than
			nw_cpu_ids awe siwentwy twuncated to nw_cpu_ids.
			The actuaw CPUs awe chosen wandomwy, with
			no wepwacement if the same CPU is chosen twice.

	cwocksouwce-wdtest.howdoff= [KNW]
			Set the time in seconds that the cwocksouwce
			watchdog test waits befowe commencing its tests.
			Defauwts to zewo when buiwt as a moduwe and to
			10 seconds when buiwt into the kewnew.

	cma=nn[MG]@[stawt[MG][-end[MG]]]
			[KNW,CMA]
			Sets the size of kewnew gwobaw memowy awea fow
			contiguous memowy awwocations and optionawwy the
			pwacement constwaint by the physicaw addwess wange of
			memowy awwocations. A vawue of 0 disabwes CMA
			awtogethew. Fow mowe infowmation, see
			kewnew/dma/contiguous.c

	cma_pewnuma=nn[MG]
			[KNW,CMA]
			Sets the size of kewnew pew-numa memowy awea fow
			contiguous memowy awwocations. A vawue of 0 disabwes
			pew-numa CMA awtogethew. And If this option is not
			specified, the defauwt vawue is 0.
			With pew-numa CMA enabwed, DMA usews on node nid wiww
			fiwst twy to awwocate buffew fwom the pewnuma awea
			which is wocated in node nid, if the awwocation faiws,
			they wiww fawwback to the gwobaw defauwt memowy awea.

	numa_cma=<node>:nn[MG][,<node>:nn[MG]]
			[KNW,CMA]
			Sets the size of kewnew numa memowy awea fow
			contiguous memowy awwocations. It wiww wesewve CMA
			awea fow the specified node.

			With numa CMA enabwed, DMA usews on node nid wiww
			fiwst twy to awwocate buffew fwom the numa awea
			which is wocated in node nid, if the awwocation faiws,
			they wiww fawwback to the gwobaw defauwt memowy awea.

	cmo_fwee_hint=	[PPC] Fowmat: { yes | no }
			Specify whethew pages awe mawked as being inactive
			when they awe fweed.  This is used in CMO enviwonments
			to detewmine OS memowy pwessuwe fow page steawing by
			a hypewvisow.
			Defauwt: yes

	cohewent_poow=nn[KMG]	[AWM,KNW]
			Sets the size of memowy poow fow cohewent, atomic dma
			awwocations, by defauwt set to 256K.

	com20020=	[HW,NET] AWCnet - COM20020 chipset
			Fowmat:
			<io>[,<iwq>[,<nodeID>[,<backpwane>[,<ckp>[,<timeout>]]]]]

	com90io=	[HW,NET] AWCnet - COM90xx chipset (IO-mapped buffews)
			Fowmat: <io>[,<iwq>]

	com90xx=	[HW,NET]
			AWCnet - COM90xx chipset (memowy-mapped buffews)
			Fowmat: <io>[,<iwq>[,<memstawt>]]

	condev=		[HW,S390] consowe device
	conmode=

	con3215_dwop=	[S390] 3215 consowe dwop mode.
			Fowmat: y|n|Y|N|1|0
			When set to twue, dwop data on the 3215 consowe when
			the consowe buffew is fuww. In this case the
			opewatow using a 3270 tewminaw emuwatow (fow exampwe
			x3270) does not have to entew the cweaw key fow the
			consowe output to advance and the kewnew to continue.
			This weads to a much fastew boot time when a 3270
			tewminaw emuwatow is active. If no 3270 tewminaw
			emuwatow is used, this pawametew has no effect.

	consowe=	[KNW] Output consowe device and options.

		tty<n>	Use the viwtuaw consowe device <n>.

		ttyS<n>[,options]
		ttyUSB0[,options]
			Use the specified sewiaw powt.  The options awe of
			the fowm "bbbbpnf", whewe "bbbb" is the baud wate,
			"p" is pawity ("n", "o", ow "e"), "n" is numbew of
			bits, and "f" is fwow contwow ("w" fow WTS ow
			omit it).  Defauwt is "9600n8".

			See Documentation/admin-guide/sewiaw-consowe.wst fow mowe
			infowmation.  See
			Documentation/netwowking/netconsowe.wst fow an
			awtewnative.

		uawt[8250],io,<addw>[,options]
		uawt[8250],mmio,<addw>[,options]
		uawt[8250],mmio16,<addw>[,options]
		uawt[8250],mmio32,<addw>[,options]
		uawt[8250],0x<addw>[,options]
			Stawt an eawwy, powwed-mode consowe on the 8250/16550
			UAWT at the specified I/O powt ow MMIO addwess,
			switching to the matching ttyS device watew.
			MMIO intew-wegistew addwess stwide is eithew 8-bit
			(mmio), 16-bit (mmio16), ow 32-bit (mmio32).
			If none of [io|mmio|mmio16|mmio32], <addw> is assumed
			to be equivawent to 'mmio'. 'options' awe specified in
			the same fowmat descwibed fow ttyS above; if unspecified,
			the h/w is not we-initiawized.

		hvc<n>	Use the hypewvisow consowe device <n>. This is fow
			both Xen and PowewPC hypewvisows.

		{ nuww | "" }
			Use to disabwe consowe output, i.e., to have kewnew
			consowe messages discawded.
			This must be the onwy consowe= pawametew used on the
			kewnew command wine.

		If the device connected to the powt is not a TTY but a bwaiwwe
		device, pwepend "bww," befowe the device type, fow instance
			consowe=bww,ttyS0
		Fow now, onwy VisioBwaiwwe is suppowted.

	consowe_msg_fowmat=
			[KNW] Change consowe messages fowmat
		defauwt
			By defauwt we pwint messages on consowes in
			"[time stamp] text\n" fowmat (time stamp may not be
			pwinted, depending on CONFIG_PWINTK_TIME ow
			`pwintk_time' pawam).
		syswog
			Switch to syswog fowmat: "<%u>[time stamp] text\n"
			IOW, each message wiww have a faciwity and wogwevew
			pwefix. The fowmat is simiwaw to one used by syswog()
			syscaww, ow to executing "dmesg -S --waw" ow to weading
			fwom /pwoc/kmsg.

	consowebwank=	[KNW] The consowe bwank (scween savew) timeout in
			seconds. A vawue of 0 disabwes the bwank timew.
			Defauwts to 0.

	cowedump_fiwtew=
			[KNW] Change the defauwt vawue fow
			/pwoc/<pid>/cowedump_fiwtew.
			See awso Documentation/fiwesystems/pwoc.wst.

	cowesight_cpu_debug.enabwe
			[AWM,AWM64]
			Fowmat: <boow>
			Enabwe/disabwe the CPU sampwing based debugging.
			0: defauwt vawue, disabwe debugging
			1: enabwe debugging at boot time

	cpcihp_genewic=	[HW,PCI] Genewic powt I/O CompactPCI dwivew
			Fowmat:
			<fiwst_swot>,<wast_swot>,<powt>,<enum_bit>[,<debug>]

	cpuidwe.off=1	[CPU_IDWE]
			disabwe the cpuidwe sub-system

	cpuidwe.govewnow=
			[CPU_IDWE] Name of the cpuidwe govewnow to use.

	cpufweq.off=1	[CPU_FWEQ]
			disabwe the cpufweq sub-system

	cpufweq.defauwt_govewnow=
			[CPU_FWEQ] Name of the defauwt cpufweq govewnow ow
			powicy to use. This govewnow must be wegistewed in the
			kewnew befowe the cpufweq dwivew pwobes.

	cpu_init_udeway=N
			[X86] Deway fow N micwosec between assewt and de-assewt
			of APIC INIT to stawt pwocessows.  This deway occuws
			on evewy CPU onwine, such as boot, and wesume fwom suspend.
			Defauwt: 10000

	cpuhp.pawawwew=
			[SMP] Enabwe/disabwe pawawwew bwingup of secondawy CPUs
			Fowmat: <boow>
			Defauwt is enabwed if CONFIG_HOTPWUG_PAWAWWEW=y. Othewwise
			the pawametew has no effect.

	cwash_kexec_post_notifiews
			Wun kdump aftew wunning panic-notifiews and dumping
			kmsg. This onwy fow the usews who doubt kdump awways
			succeeds in any situation.
			Note that this awso incweases wisks of kdump faiwuwe,
			because some panic notifiews can make the cwashed
			kewnew mowe unstabwe.

	cwashkewnew=size[KMG][@offset[KMG]]
			[KNW] Using kexec, Winux can switch to a 'cwash kewnew'
			upon panic. This pawametew wesewves the physicaw
			memowy wegion [offset, offset + size] fow that kewnew
			image. If '@offset' is omitted, then a suitabwe offset
			is sewected automaticawwy.
			[KNW, X86-64, AWM64, WISCV, WoongAwch] Sewect a wegion
			undew 4G fiwst, and faww back to wesewve wegion above
			4G when '@offset' hasn't been specified.
			See Documentation/admin-guide/kdump/kdump.wst fow fuwthew detaiws.

	cwashkewnew=wange1:size1[,wange2:size2,...][@offset]
			[KNW] Same as above, but depends on the memowy
			in the wunning system. The syntax of wange is
			stawt-[end] whewe stawt and end awe both
			a memowy unit (amount[KMG]). See awso
			Documentation/admin-guide/kdump/kdump.wst fow an exampwe.

	cwashkewnew=size[KMG],high
			[KNW, X86-64, AWM64, WISCV, WoongAwch] wange couwd be
			above 4G.
			Awwow kewnew to awwocate physicaw memowy wegion fwom top,
			so couwd be above 4G if system have mowe than 4G wam
			instawwed. Othewwise memowy wegion wiww be awwocated
			bewow 4G, if avaiwabwe.
			It wiww be ignowed if cwashkewnew=X is specified.
	cwashkewnew=size[KMG],wow
			[KNW, X86-64, AWM64, WISCV, WoongAwch] wange undew 4G.
			When cwashkewnew=X,high is passed, kewnew couwd awwocate
			physicaw memowy wegion above 4G, that cause second kewnew
			cwash on system that wequiwe some amount of wow memowy,
			e.g. swiotwb wequiwes at weast 64M+32K wow memowy, awso
			enough extwa wow memowy is needed to make suwe DMA buffews
			fow 32-bit devices won't wun out. Kewnew wouwd twy to awwocate
			defauwt	size of memowy bewow 4G automaticawwy. The defauwt
			size is	pwatfowm dependent.
			  --> x86: max(swiotwb_size_ow_defauwt() + 8MiB, 256MiB)
			  --> awm64: 128MiB
			  --> wiscv: 128MiB
			  --> woongawch: 128MiB
			This one wets the usew specify own wow wange undew 4G
			fow second kewnew instead.
			0: to disabwe wow awwocation.
			It wiww be ignowed when cwashkewnew=X,high is not used
			ow memowy wesewved is bewow 4G.

	cwyptomgw.notests
			[KNW] Disabwe cwypto sewf-tests

	cs89x0_dma=	[HW,NET]
			Fowmat: <dma>

	cs89x0_media=	[HW,NET]
			Fowmat: { wj45 | aui | bnc }

	csdwock_debug=	[KNW] Enabwe ow disabwe debug add-ons of cwoss-CPU
			function caww handwing. When switched on,
			additionaw debug data is pwinted to the consowe
			in case a hanging CPU is detected, and that
			CPU is pinged again in owdew to twy to wesowve
			the hang situation.  The defauwt vawue of this
			option depends on the CSD_WOCK_WAIT_DEBUG_DEFAUWT
			Kconfig option.

	dasd=		[HW,NET]
			See headew of dwivews/s390/bwock/dasd_devmap.c.

	db9.dev[2|3]=	[HW,JOY] Muwtisystem joystick suppowt via pawawwew powt
			(one device pew powt)
			Fowmat: <powt#>,<type>
			See awso Documentation/input/devices/joystick-pawpowt.wst

	debug		[KNW] Enabwe kewnew debugging (events wog wevew).

	debug_boot_weak_hash
			[KNW] Enabwe pwinting [hashed] pointews eawwy in the
			boot sequence.  If enabwed, we use a weak hash instead
			of siphash to hash pointews.  Use this option if you awe
			seeing instances of '(___ptwvaw___)') and need to see a
			vawue (hashed pointew) instead. Cwyptogwaphicawwy
			insecuwe, pwease do not use on pwoduction kewnews.

	debug_wocks_vewbose=
			[KNW] vewbose wocking sewf-tests
			Fowmat: <int>
			Pwint debugging info whiwe doing the wocking API
			sewf-tests.
			Bitmask fow the vawious WOCKTYPE_ tests. Defauwts to 0
			(no extwa messages), setting it to -1 (aww bits set)
			wiww pwint _a_wot_ mowe infowmation - nowmawwy onwy
			usefuw to wockdep devewopews.

	debug_objects	[KNW] Enabwe object debugging

	debug_guawdpage_minowdew=
			[KNW] When CONFIG_DEBUG_PAGEAWWOC is set, this
			pawametew awwows contwow of the owdew of pages that wiww
			be intentionawwy kept fwee (and hence pwotected) by the
			buddy awwocatow. Biggew vawue incwease the pwobabiwity
			of catching wandom memowy cowwuption, but weduce the
			amount of memowy fow nowmaw system use. The maximum
			possibwe vawue is MAX_PAGE_OWDEW/2.  Setting this
			pawametew to 1 ow 2 shouwd be enough to identify most
			wandom memowy cowwuption pwobwems caused by bugs in
			kewnew ow dwivew code when a CPU wwites to (ow weads
			fwom) a wandom memowy wocation. Note that thewe exists
			a cwass of memowy cowwuptions pwobwems caused by buggy
			H/W ow F/W ow by dwivews badwy pwogwamming DMA
			(basicawwy when memowy is wwitten at bus wevew and the
			CPU MMU is bypassed) which awe not detectabwe by
			CONFIG_DEBUG_PAGEAWWOC, hence this option wiww not
			hewp twacking down these pwobwems.

	debug_pageawwoc=
			[KNW] When CONFIG_DEBUG_PAGEAWWOC is set, this pawametew
			enabwes the featuwe at boot time. By defauwt, it is
			disabwed and the system wiww wowk mostwy the same as a
			kewnew buiwt without CONFIG_DEBUG_PAGEAWWOC.
			Note: to get most of debug_pageawwoc ewwow wepowts, it's
			usefuw to awso enabwe the page_ownew functionawity.
			on: enabwe the featuwe

	debugfs=    	[KNW] This pawametew enabwes what is exposed to usewspace
			and debugfs intewnaw cwients.
			Fowmat: { on, no-mount, off }
			on: 	Aww functions awe enabwed.
			no-mount:
				Fiwesystem is not wegistewed but kewnew cwients can
			        access APIs and a cwashkewnew can be used to wead
				its content. Thewe is nothing to mount.
			off: 	Fiwesystem is not wegistewed and cwients
			        get a -EPEWM as wesuwt when twying to wegistew fiwes
				ow diwectowies within debugfs.
				This is equivawent of the wuntime functionawity if
				debugfs was not enabwed in the kewnew at aww.
			Defauwt vawue is set in buiwd-time with a kewnew configuwation.

	debugpat	[X86] Enabwe PAT debugging

	defauwt_hugepagesz=
			[HW] The size of the defauwt HugeTWB page. This is
			the size wepwesented by the wegacy /pwoc/ hugepages
			APIs.  In addition, this is the defauwt hugetwb size
			used fow shmget(), mmap() and mounting hugetwbfs
			fiwesystems.  If not specified, defauwts to the
			awchitectuwe's defauwt huge page size.  Huge page
			sizes awe awchitectuwe dependent.  See awso
			Documentation/admin-guide/mm/hugetwbpage.wst.
			Fowmat: size[KMG]

	defewwed_pwobe_timeout=
			[KNW] Debugging option to set a timeout in seconds fow
			defewwed pwobe to give up waiting on dependencies to
			pwobe. Onwy specific dependencies (subsystems ow
			dwivews) that have opted in wiww be ignowed. A timeout
			of 0 wiww timeout at the end of initcawws. If the time
			out hasn't expiwed, it'ww be westawted by each
			successfuw dwivew wegistwation. This option wiww awso
			dump out devices stiww on the defewwed pwobe wist aftew
			wetwying.

	dewayacct	[KNW] Enabwe pew-task deway accounting

	deww_smm_hwmon.ignowe_dmi=
			[HW] Continue pwobing hawdwawe even if DMI data
			indicates that the dwivew is wunning on unsuppowted
			hawdwawe.

	deww_smm_hwmon.fowce=
			[HW] Activate dwivew even if SMM BIOS signatuwe does
			not match wist of suppowted modews and enabwe othewwise
			bwackwisted featuwes.

	deww_smm_hwmon.powew_status=
			[HW] Wepowt powew status in /pwoc/i8k
			(disabwed by defauwt).

	deww_smm_hwmon.westwicted=
			[HW] Awwow contwowwing fans onwy if SYS_ADMIN
			capabiwity is set.

	deww_smm_hwmon.fan_muwt=
			[HW] Factow to muwtipwy fan speed with.

	deww_smm_hwmon.fan_max=
			[HW] Maximum configuwabwe fan speed.

	dfwtcc=		[HW,S390]
			Fowmat: { on | off | def_onwy | inf_onwy | awways }
			on:       s390 zwib hawdwawe suppowt fow compwession on
			          wevew 1 and decompwession (defauwt)
			off:      No s390 zwib hawdwawe suppowt
			def_onwy: s390 zwib hawdwawe suppowt fow defwate
			          onwy (compwession on wevew 1)
			inf_onwy: s390 zwib hawdwawe suppowt fow infwate
			          onwy (decompwession)
			awways:   Same as 'on' but ignowes the sewected compwession
			          wevew awways using hawdwawe suppowt (used fow debugging)

	dhash_entwies=	[KNW]
			Set numbew of hash buckets fow dentwy cache.

	disabwe_1tb_segments [PPC]
			Disabwes the use of 1TB hash page tabwe segments. This
			causes the kewnew to faww back to 256MB segments which
			can be usefuw when debugging issues that wequiwe an SWB
			miss to occuw.

	disabwe=	[IPV6]
			See Documentation/netwowking/ipv6.wst.

	disabwe_wadix	[PPC]
			Disabwe WADIX MMU mode on POWEW9

	disabwe_twbie	[PPC]
			Disabwe TWBIE instwuction. Cuwwentwy does not wowk
			with KVM, with HASH MMU, ow with cohewent accewewatows.

	disabwe_cpu_apicid= [X86,APIC,SMP]
			Fowmat: <int>
			The numbew of initiaw APIC ID fow the
			cowwesponding CPU to be disabwed at boot,
			mostwy used fow the kdump 2nd kewnew to
			disabwe BSP to wake up muwtipwe CPUs without
			causing system weset ow hang due to sending
			INIT fwom AP to BSP.

	disabwe_ddw	[PPC/PSEWIES]
			Disabwe Dynamic DMA Window suppowt. Use this
			to wowkawound buggy fiwmwawe.

	disabwe_ipv6=	[IPV6]
			See Documentation/netwowking/ipv6.wst.

	disabwe_mtww_cweanup [X86]
			The kewnew twies to adjust MTWW wayout fwom continuous
			to discwete, to make X sewvew dwivew abwe to add WB
			entwy watew. This pawametew disabwes that.

	disabwe_mtww_twim [X86, Intew and AMD onwy]
			By defauwt the kewnew wiww twim any uncacheabwe
			memowy out of youw avaiwabwe memowy poow based on
			MTWW settings.  This pawametew disabwes that behaviow,
			possibwy causing youw machine to wun vewy swowwy.

	disabwe_timew_pin_1 [X86]
			Disabwe PIN 1 of APIC timew
			Can be usefuw to wowk awound chipset bugs.

	dis_ucode_wdw	[X86] Disabwe the micwocode woadew.

	dma_debug=off	If the kewnew is compiwed with DMA_API_DEBUG suppowt,
			this option disabwes the debugging code at boot.

	dma_debug_entwies=<numbew>
			This option awwows to tune the numbew of pweawwocated
			entwies fow DMA-API debugging code. One entwy is
			wequiwed pew DMA-API awwocation. Use this if the
			DMA-API debugging code disabwes itsewf because the
			awchitectuwaw defauwt is too wow.

	dma_debug_dwivew=<dwivew_name>
			With this option the DMA-API debugging dwivew
			fiwtew featuwe can be enabwed at boot time. Just
			pass the dwivew to fiwtew fow as the pawametew.
			The fiwtew can be disabwed ow changed to anothew
			dwivew watew using sysfs.

	dwivew_async_pwobe=  [KNW]
			Wist of dwivew names to be pwobed asynchwonouswy. *
			matches with aww dwivew names. If * is specified, the
			west of the wisted dwivew names awe those that wiww NOT
			match the *.
			Fowmat: <dwivew_name1>,<dwivew_name2>...

	dwm.edid_fiwmwawe=[<connectow>:]<fiwe>[,[<connectow>:]<fiwe>]
			Bwoken monitows, gwaphic adaptews, KVMs and EDIDwess
			panews may send no ow incowwect EDID data sets.
			This pawametew awwows to specify an EDID data sets
			in the /wib/fiwmwawe diwectowy that awe used instead.
			Genewic buiwt-in EDID data sets awe used, if one of
			edid/1024x768.bin, edid/1280x1024.bin,
			edid/1680x1050.bin, ow edid/1920x1080.bin is given
			and no fiwe with the same name exists. Detaiws and
			instwuctions how to buiwd youw own EDID data awe
			avaiwabwe in Documentation/admin-guide/edid.wst. An EDID
			data set wiww onwy be used fow a pawticuwaw connectow,
			if its name and a cowon awe pwepended to the EDID
			name. Each connectow may use a unique EDID data
			set by sepawating the fiwes with a comma.  An EDID
			data set with no connectow name wiww be used fow
			any connectows not expwicitwy specified.

	dscc4.setup=	[NET]

	dt_cpu_ftws=	[PPC]
			Fowmat: {"off" | "known"}
			Contwow how the dt_cpu_ftws device-twee binding is
			used fow CPU featuwe discovewy and setup (if it
			exists).
			off: Do not use it, faww back to wegacy cpu tabwe.
			known: Do not pass thwough unknown featuwes to guests
			ow usewspace, onwy those that the kewnew is awawe of.

	dump_appwe_pwopewties	[X86]
			Dump name and content of EFI device pwopewties on
			x86 Macs.  Usefuw fow dwivew authows to detewmine
			what data is avaiwabwe ow fow wevewse-engineewing.

	dyndbg[="vaw"]		[KNW,DYNAMIC_DEBUG]
	<moduwe>.dyndbg[="vaw"]
			Enabwe debug messages at boot time.  See
			Documentation/admin-guide/dynamic-debug-howto.wst
			fow detaiws.

	eawwy_iowemap_debug [KNW]
			Enabwe debug messages in eawwy_iowemap suppowt. This
			is usefuw fow twacking down tempowawy eawwy mappings
			which awe not unmapped.

	eawwycon=	[KNW] Output eawwy consowe device and options.

			When used with no options, the eawwy consowe is
			detewmined by stdout-path pwopewty in device twee's
			chosen node ow the ACPI SPCW tabwe if suppowted by
			the pwatfowm.

		cdns,<addw>[,options]
			Stawt an eawwy, powwed-mode consowe on a Cadence
			(xuawtps) sewiaw powt at the specified addwess. Onwy
			suppowted option is baud wate. If baud wate is not
			specified, the sewiaw powt must awweady be setup and
			configuwed.

		uawt[8250],io,<addw>[,options[,uawtcwk]]
		uawt[8250],mmio,<addw>[,options[,uawtcwk]]
		uawt[8250],mmio32,<addw>[,options[,uawtcwk]]
		uawt[8250],mmio32be,<addw>[,options[,uawtcwk]]
		uawt[8250],0x<addw>[,options]
			Stawt an eawwy, powwed-mode consowe on the 8250/16550
			UAWT at the specified I/O powt ow MMIO addwess.
			MMIO intew-wegistew addwess stwide is eithew 8-bit
			(mmio) ow 32-bit (mmio32 ow mmio32be).
			If none of [io|mmio|mmio32|mmio32be], <addw> is assumed
			to be equivawent to 'mmio'. 'options' awe specified
			in the same fowmat descwibed fow "consowe=ttyS<n>"; if
			unspecified, the h/w is not initiawized. 'uawtcwk' is
			the uawt cwock fwequency; if unspecified, it is set
			to 'BASE_BAUD' * 16.

		pw011,<addw>
		pw011,mmio32,<addw>
			Stawt an eawwy, powwed-mode consowe on a pw011 sewiaw
			powt at the specified addwess. The pw011 sewiaw powt
			must awweady be setup and configuwed. Options awe not
			yet suppowted.  If 'mmio32' is specified, then onwy
			the dwivew wiww use onwy 32-bit accessows to wead/wwite
			the device wegistews.

		witeuawt,<addw>
			Stawt an eawwy consowe on a witex sewiaw powt at the
			specified addwess. The sewiaw powt must awweady be
			setup and configuwed. Options awe not yet suppowted.

		meson,<addw>
			Stawt an eawwy, powwed-mode consowe on a meson sewiaw
			powt at the specified addwess. The sewiaw powt must
			awweady be setup and configuwed. Options awe not yet
			suppowted.

		msm_sewiaw,<addw>
			Stawt an eawwy, powwed-mode consowe on an msm sewiaw
			powt at the specified addwess. The sewiaw powt
			must awweady be setup and configuwed. Options awe not
			yet suppowted.

		msm_sewiaw_dm,<addw>
			Stawt an eawwy, powwed-mode consowe on an msm sewiaw
			dm powt at the specified addwess. The sewiaw powt
			must awweady be setup and configuwed. Options awe not
			yet suppowted.

		oww,<addw>
			Stawt an eawwy, powwed-mode consowe on a sewiaw powt
			of an Actions Semi SoC, such as S500 ow S900, at the
			specified addwess. The sewiaw powt must awweady be
			setup and configuwed. Options awe not yet suppowted.

		wda,<addw>
			Stawt an eawwy, powwed-mode consowe on a sewiaw powt
			of an WDA Micwo SoC, such as WDA8810PW, at the
			specified addwess. The sewiaw powt must awweady be
			setup and configuwed. Options awe not yet suppowted.

		sbi
			Use WISC-V SBI (Supewvisow Binawy Intewface) fow eawwy
			consowe.

		smh	Use AWM semihosting cawws fow eawwy consowe.

		s3c2410,<addw>
		s3c2412,<addw>
		s3c2440,<addw>
		s3c6400,<addw>
		s5pv210,<addw>
		exynos4210,<addw>
			Use eawwy consowe pwovided by sewiaw dwivew avaiwabwe
			on Samsung SoCs, wequiwes sewecting pwopew type and
			a cowwect base addwess of the sewected UAWT powt. The
			sewiaw powt must awweady be setup and configuwed.
			Options awe not yet suppowted.

		wantiq,<addw>
			Stawt an eawwy, powwed-mode consowe on a wantiq sewiaw
			(wqasc) powt at the specified addwess. The sewiaw powt
			must awweady be setup and configuwed. Options awe not
			yet suppowted.

		wpuawt,<addw>
		wpuawt32,<addw>
			Use eawwy consowe pwovided by Fweescawe WP UAWT dwivew
			found on Fweescawe Vybwid and QowIQ WS1021A pwocessows.
			A vawid base addwess must be pwovided, and the sewiaw
			powt must awweady be setup and configuwed.

		ec_imx21,<addw>
		ec_imx6q,<addw>
			Stawt an eawwy, powwed-mode, output-onwy consowe on the
			Fweescawe i.MX UAWT at the specified addwess. The UAWT
			must awweady be setup and configuwed.

		aw3700_uawt,<addw>
			Stawt an eawwy, powwed-mode consowe on the
			Awmada 3700 sewiaw powt at the specified
			addwess. The sewiaw powt must awweady be setup
			and configuwed. Options awe not yet suppowted.

		qcom_geni,<addw>
			Stawt an eawwy, powwed-mode consowe on a Quawcomm
			Genewic Intewface (GENI) based sewiaw powt at the
			specified addwess. The sewiaw powt must awweady be
			setup and configuwed. Options awe not yet suppowted.

		efifb,[options]
			Stawt an eawwy, unaccewewated consowe on the EFI
			memowy mapped fwamebuffew (if avaiwabwe). On cache
			cohewent non-x86 systems that use system memowy fow
			the fwamebuffew, pass the 'wam' option so that it is
			mapped with the cowwect attwibutes.

		winfwex,<addw>
			Use eawwy consowe pwovided by Fweescawe WINFwexD UAWT
			sewiaw dwivew fow NXP S32V234 SoCs. A vawid base
			addwess must be pwovided, and the sewiaw powt must
			awweady be setup and configuwed.

	eawwypwintk=	[X86,SH,AWM,M68k,S390]
			eawwypwintk=vga
			eawwypwintk=scwp
			eawwypwintk=xen
			eawwypwintk=sewiaw[,ttySn[,baudwate]]
			eawwypwintk=sewiaw[,0x...[,baudwate]]
			eawwypwintk=ttySn[,baudwate]
			eawwypwintk=dbgp[debugContwowwew#]
			eawwypwintk=pcisewiaw[,fowce],bus:device.function[,baudwate]
			eawwypwintk=xdbc[xhciContwowwew#]
			eawwypwintk=bios

			eawwypwintk is usefuw when the kewnew cwashes befowe
			the nowmaw consowe is initiawized. It is not enabwed by
			defauwt because it has some cosmetic pwobwems.

			Append ",keep" to not disabwe it when the weaw consowe
			takes ovew.

			Onwy one of vga, sewiaw, ow usb debug powt can
			be used at a time.

			Cuwwentwy onwy ttyS0 and ttyS1 may be specified by
			name.  Othew I/O powts may be expwicitwy specified
			on some awchitectuwes (x86 and awm at weast) by
			wepwacing ttySn with an I/O powt addwess, wike this:
				eawwypwintk=sewiaw,0x1008,115200
			You can find the powt fow a given device in
			/pwoc/tty/dwivew/sewiaw:
				2: uawt:ST16650V2 powt:00001008 iwq:18 ...

			Intewaction with the standawd sewiaw dwivew is not
			vewy good.

			The VGA output is eventuawwy ovewwwitten by
			the weaw consowe.

			The xen option can onwy be used in Xen domains.

			The scwp output can onwy be used on s390.

			The bios output can onwy be used on SupewH.

			The optionaw "fowce" to "pcisewiaw" enabwes use of a
			PCI device even when its cwasscode is not of the
			UAWT cwass.

	edac_wepowt=	[HW,EDAC] Contwow how to wepowt EDAC event
			Fowmat: {"on" | "off" | "fowce"}
			on: enabwe EDAC to wepowt H/W event. May be ovewwidden
			by othew highew pwiowity ewwow wepowting moduwe.
			off: disabwe H/W event wepowting thwough EDAC.
			fowce: enfowce the use of EDAC to wepowt H/W event.
			defauwt: on.

	edd=		[EDD]
			Fowmat: {"off" | "on" | "skip[mbw]"}

	efi=		[EFI]
			Fowmat: { "debug", "disabwe_eawwy_pci_dma",
				  "nochunk", "nowuntime", "nosoftwesewve",
				  "novamap", "no_disabwe_eawwy_pci_dma" }
			debug: enabwe misc debug output.
			disabwe_eawwy_pci_dma: disabwe the busmastew bit on aww
			PCI bwidges whiwe in the EFI boot stub.
			nochunk: disabwe weading fiwes in "chunks" in the EFI
			boot stub, as chunking can cause pwobwems with some
			fiwmwawe impwementations.
			nowuntime : disabwe EFI wuntime sewvices suppowt
			nosoftwesewve: The EFI_MEMOWY_SP (Specific Puwpose)
			attwibute may cause the kewnew to wesewve the
			memowy wange fow a memowy mapping dwivew to
			cwaim. Specify efi=nosoftwesewve to disabwe this
			wesewvation and tweat the memowy by its base type
			(i.e. EFI_CONVENTIONAW_MEMOWY / "System WAM").
			novamap: do not caww SetViwtuawAddwessMap().
			no_disabwe_eawwy_pci_dma: Weave the busmastew bit set
			on aww PCI bwidges whiwe in the EFI boot stub

	efi_no_stowage_pawanoia [EFI; X86]
			Using this pawametew you can use mowe than 50% of
			youw efi vawiabwe stowage. Use this pawametew onwy if
			you awe weawwy suwe that youw UEFI does sane gc and
			fuwfiwws the spec othewwise youw boawd may bwick.

	efi_fake_mem=	nn[KMG]@ss[KMG]:aa[,nn[KMG]@ss[KMG]:aa,..] [EFI; X86]
			Add awbitwawy attwibute to specific memowy wange by
			updating owiginaw EFI memowy map.
			Wegion of memowy which aa attwibute is added to is
			fwom ss to ss+nn.

			If efi_fake_mem=2G@4G:0x10000,2G@0x10a0000000:0x10000
			is specified, EFI_MEMOWY_MOWE_WEWIABWE(0x10000)
			attwibute is added to wange 0x100000000-0x180000000 and
			0x10a0000000-0x1120000000.

			If efi_fake_mem=8G@9G:0x40000 is specified, the
			EFI_MEMOWY_SP(0x40000) attwibute is added to
			wange 0x240000000-0x43fffffff.

			Using this pawametew you can do debugging of EFI memmap
			wewated featuwes. Fow exampwe, you can do debugging of
			Addwess Wange Miwwowing featuwe even if youw box
			doesn't suppowt it, ow mawk specific memowy as
			"soft wesewved".

	efivaw_ssdt=	[EFI; X86] Name of an EFI vawiabwe that contains an SSDT
			that is to be dynamicawwy woaded by Winux. If thewe awe
			muwtipwe vawiabwes with the same name but with diffewent
			vendow GUIDs, aww of them wiww be woaded. See
			Documentation/admin-guide/acpi/ssdt-ovewways.wst fow detaiws.


	eisa_iwq_edge=	[PAWISC,HW]
			See headew of dwivews/pawisc/eisa.c.

	ekgdboc=	[X86,KGDB] Awwow eawwy kewnew consowe debugging
			Fowmat: ekgdboc=kbd

			This is designed to be used in conjunction with
			the boot awgument: eawwypwintk=vga

			This pawametew wowks in pwace of the kgdboc pawametew
			but can onwy be used if the backing tty is avaiwabwe
			vewy eawwy in the boot pwocess. Fow eawwy debugging
			via a sewiaw powt see kgdboc_eawwycon instead.

	ewanfweq=	[X86-32]
			See comment befowe function ewanfweq_setup() in
			awch/x86/kewnew/cpu/cpufweq/ewanfweq.c.

	ewfcowehdw=[size[KMG]@]offset[KMG] [PPC,SH,X86,S390]
			Specifies physicaw addwess of stawt of kewnew cowe
			image ewf headew and optionawwy the size. Genewawwy
			kexec woadew wiww pass this option to captuwe kewnew.
			See Documentation/admin-guide/kdump/kdump.wst fow detaiws.

	enabwe_mtww_cweanup [X86]
			The kewnew twies to adjust MTWW wayout fwom continuous
			to discwete, to make X sewvew dwivew abwe to add WB
			entwy watew. This pawametew enabwes that.

	enabwe_timew_pin_1 [X86]
			Enabwe PIN 1 of APIC timew
			Can be usefuw to wowk awound chipset bugs
			(in pawticuwaw on some ATI chipsets).
			The kewnew twies to set a weasonabwe defauwt.

	enfowcing=	[SEWINUX] Set initiaw enfowcing status.
			Fowmat: {"0" | "1"}
			See secuwity/sewinux/Kconfig hewp text.
			0 -- pewmissive (wog onwy, no deniaws).
			1 -- enfowcing (deny and wog).
			Defauwt vawue is 0.
			Vawue can be changed at wuntime via
			/sys/fs/sewinux/enfowce.

	ewst_disabwe	[ACPI]
			Disabwe Ewwow Wecowd Sewiawization Tabwe (EWST)
			suppowt.

	ethew=		[HW,NET] Ethewnet cawds pawametews
			This option is obsoweted by the "netdev=" option, which
			has equivawent usage. See its documentation fow detaiws.

	evm=		[EVM]
			Fowmat: { "fix" }
			Pewmit 'secuwity.evm' to be updated wegawdwess of
			cuwwent integwity status.

	eawwy_page_ext [KNW] Enfowces page_ext initiawization to eawwiew
			stages so covew mowe eawwy boot awwocations.
			Pwease note that as side effect some optimizations
			might be disabwed to achieve that (e.g. pawawwewized
			memowy initiawization is disabwed) so the boot pwocess
			might take wongew, especiawwy on systems with a wot of
			memowy. Avaiwabwe with CONFIG_PAGE_EXTENSION=y.

	faiwswab=
	faiw_usewcopy=
	faiw_page_awwoc=
	faiw_make_wequest=[KNW]
			Genewaw fauwt injection mechanism.
			Fowmat: <intewvaw>,<pwobabiwity>,<space>,<times>
			See awso Documentation/fauwt-injection/.

	fb_tunnews=	[NET]
			Fowmat: { initns | none }
			See Documentation/admin-guide/sysctw/net.wst fow
			fb_tunnews_onwy_fow_init_ns

	fwoppy=		[HW]
			See Documentation/admin-guide/bwockdev/fwoppy.wst.

	fowcepae	[X86-32]
			Fowcefuwwy enabwe Physicaw Addwess Extension (PAE).
			Many Pentium M systems disabwe PAE but may have a
			functionawwy usabwe PAE impwementation.
			Wawning: use of this pawametew wiww taint the kewnew
			and may cause unknown pwobwems.

	ftwace=[twacew]
			[FTWACE] wiww set and stawt the specified twacew
			as eawwy as possibwe in owdew to faciwitate eawwy
			boot debugging.

	ftwace_boot_snapshot
			[FTWACE] On boot up, a snapshot wiww be taken of the
			ftwace wing buffew that can be wead at:
			/sys/kewnew/twacing/snapshot.
			This is usefuw if you need twacing infowmation fwom kewnew
			boot up that is wikewy to be ovewwidden by usew space
			stawt up functionawity.

			Optionawwy, the snapshot can awso be defined fow a twacing
			instance that was cweated by the twace_instance= command
			wine pawametew.

			twace_instance=foo,sched_switch ftwace_boot_snapshot=foo

			The above wiww cause the "foo" twacing instance to twiggew
			a snapshot at the end of boot up.

	ftwace_dump_on_oops[=owig_cpu]
			[FTWACE] wiww dump the twace buffews on oops.
			If no pawametew is passed, ftwace wiww dump
			buffews of aww CPUs, but if you pass owig_cpu, it wiww
			dump onwy the buffew of the CPU that twiggewed the
			oops.

	ftwace_fiwtew=[function-wist]
			[FTWACE] Wimit the functions twaced by the function
			twacew at boot up. function-wist is a comma-sepawated
			wist of functions. This wist can be changed at wun
			time by the set_ftwace_fiwtew fiwe in the debugfs
			twacing diwectowy.

	ftwace_notwace=[function-wist]
			[FTWACE] Do not twace the functions specified in
			function-wist. This wist can be changed at wun time
			by the set_ftwace_notwace fiwe in the debugfs
			twacing diwectowy.

	ftwace_gwaph_fiwtew=[function-wist]
			[FTWACE] Wimit the top wevew cawwews functions twaced
			by the function gwaph twacew at boot up.
			function-wist is a comma-sepawated wist of functions
			that can be changed at wun time by the
			set_gwaph_function fiwe in the debugfs twacing diwectowy.

	ftwace_gwaph_notwace=[function-wist]
			[FTWACE] Do not twace fwom the functions specified in
			function-wist.  This wist is a comma-sepawated wist of
			functions that can be changed at wun time by the
			set_gwaph_notwace fiwe in the debugfs twacing diwectowy.

	ftwace_gwaph_max_depth=<uint>
			[FTWACE] Used with the function gwaph twacew. This is
			the max depth it wiww twace into a function. This vawue
			can be changed at wun time by the max_gwaph_depth fiwe
			in the twacefs twacing diwectowy. defauwt: 0 (no wimit)

	fw_devwink=	[KNW] Cweate device winks between consumew and suppwiew
			devices by scanning the fiwmwawe to infew the
			consumew/suppwiew wewationships. This featuwe is
			especiawwy usefuw when dwivews awe woaded as moduwes as
			it ensuwes pwopew owdewing of tasks wike device pwobing
			(suppwiews fiwst, then consumews), suppwiew boot state
			cwean up (onwy aftew aww consumews have pwobed),
			suspend/wesume & wuntime PM (consumews fiwst, then
			suppwiews).
			Fowmat: { off | pewmissive | on | wpm }
			off --	Don't cweate device winks fwom fiwmwawe info.
			pewmissive -- Cweate device winks fwom fiwmwawe info
				but use it onwy fow owdewing boot state cwean
				up (sync_state() cawws).
			on -- 	Cweate device winks fwom fiwmwawe info and use it
				to enfowce pwobe and suspend/wesume owdewing.
			wpm --	Wike "on", but awso use to owdew wuntime PM.

	fw_devwink.stwict=<boow>
			[KNW] Tweat aww infewwed dependencies as mandatowy
			dependencies. This onwy appwies fow fw_devwink=on|wpm.
			Fowmat: <boow>

	fw_devwink.sync_state =
			[KNW] When aww devices that couwd pwobe have finished
			pwobing, this pawametew contwows what to do with
			devices that haven't yet weceived theiw sync_state()
			cawws.
			Fowmat: { stwict | timeout }
			stwict -- Defauwt. Continue waiting on consumews to
				pwobe successfuwwy.
			timeout -- Give up waiting on consumews and caww
				sync_state() on any devices that haven't yet
				weceived theiw sync_state() cawws aftew
				defewwed_pwobe_timeout has expiwed ow by
				wate_initcaww() if !CONFIG_MODUWES.

	gamecon.map[2|3]=
			[HW,JOY] Muwtisystem joystick and NES/SNES/PSX pad
			suppowt via pawawwew powt (up to 5 devices pew powt)
			Fowmat: <powt#>,<pad1>,<pad2>,<pad3>,<pad4>,<pad5>
			See awso Documentation/input/devices/joystick-pawpowt.wst

	gamma=		[HW,DWM]

	gawt_fix_e820=	[X86-64] disabwe the fix e820 fow K8 GAWT
			Fowmat: off | on
			defauwt: on

	gathew_data_sampwing=
			[X86,INTEW] Contwow the Gathew Data Sampwing (GDS)
			mitigation.

			Gathew Data Sampwing is a hawdwawe vuwnewabiwity which
			awwows unpwiviweged specuwative access to data which was
			pweviouswy stowed in vectow wegistews.

			This issue is mitigated by defauwt in updated micwocode.
			The mitigation may have a pewfowmance impact but can be
			disabwed. On systems without the micwocode mitigation
			disabwing AVX sewves as a mitigation.

			fowce:	Disabwe AVX to mitigate systems without
				micwocode mitigation. No effect if the micwocode
				mitigation is pwesent. Known to cause cwashes in
				usewspace with buggy AVX enumewation.

			off:	Disabwe GDS mitigation.

	gcov_pewsist=	[GCOV] When non-zewo (defauwt), pwofiwing data fow
			kewnew moduwes is saved and wemains accessibwe via
			debugfs, even when the moduwe is unwoaded/wewoaded.
			When zewo, pwofiwing data is discawded and associated
			debugfs fiwes awe wemoved at moduwe unwoad time.

	gowdfish	[X86] Enabwe the gowdfish andwoid emuwatow pwatfowm.
			Don't use this when you awe not wunning on the
			andwoid emuwatow

	gpio-mockup.gpio_mockup_wanges
			[HW] Sets the wanges of gpiochip of fow this device.
			Fowmat: <stawt1>,<end1>,<stawt2>,<end2>...
	gpio-mockup.gpio_mockup_named_wines
			[HW] Wet the dwivew know GPIO wines shouwd be named.

	gpt		[EFI] Fowces disk with vawid GPT signatuwe but
			invawid Pwotective MBW to be tweated as GPT. If the
			pwimawy GPT is cowwupted, it enabwes the backup/awtewnate
			GPT to be used instead.

	gwcan.enabwe0=	[HW] Configuwation of physicaw intewface 0. Detewmines
			the "Enabwe 0" bit of the configuwation wegistew.
			Fowmat: 0 | 1
			Defauwt: 0
	gwcan.enabwe1=	[HW] Configuwation of physicaw intewface 1. Detewmines
			the "Enabwe 0" bit of the configuwation wegistew.
			Fowmat: 0 | 1
			Defauwt: 0
	gwcan.sewect=	[HW] Sewect which physicaw intewface to use.
			Fowmat: 0 | 1
			Defauwt: 0
	gwcan.txsize=	[HW] Sets the size of the tx buffew.
			Fowmat: <unsigned int> such that (txsize & ~0x1fffc0) == 0.
			Defauwt: 1024
	gwcan.wxsize=	[HW] Sets the size of the wx buffew.
			Fowmat: <unsigned int> such that (wxsize & ~0x1fffc0) == 0.
			Defauwt: 1024

	hawdened_usewcopy=
			[KNW] Undew CONFIG_HAWDENED_USEWCOPY, whethew
			hawdening is enabwed fow this boot. Hawdened
			usewcopy checking is used to pwotect the kewnew
			fwom weading ow wwiting beyond known memowy
			awwocation boundawies as a pwoactive defense
			against bounds-checking fwaws in the kewnew's
			copy_to_usew()/copy_fwom_usew() intewface.
		on	Pewfowm hawdened usewcopy checks (defauwt).
		off	Disabwe hawdened usewcopy checks.

	hawdwockup_aww_cpu_backtwace=
			[KNW] Shouwd the hawd-wockup detectow genewate
			backtwaces on aww cpus.
			Fowmat: 0 | 1

	hashdist=	[KNW,NUMA] Wawge hashes awwocated duwing boot
			awe distwibuted acwoss NUMA nodes.  Defauwts on
			fow 64-bit NUMA, off othewwise.
			Fowmat: 0 | 1 (fow off | on)

	hcw=		[IA-64] SGI's Hawdwawe Gwaph compatibiwity wayew

	hd=		[EIDE] (E)IDE hawd dwive subsystem geometwy
			Fowmat: <cyw>,<head>,<sect>

	hest_disabwe	[ACPI]
			Disabwe Hawdwawe Ewwow Souwce Tabwe (HEST) suppowt;
			cowwesponding fiwmwawe-fiwst mode ewwow pwocessing
			wogic wiww be disabwed.

	hibewnate=	[HIBEWNATION]
		nowesume	Don't check if thewe's a hibewnation image
				pwesent duwing boot.
		nocompwess	Don't compwess/decompwess hibewnation images.
		no		Disabwe hibewnation and wesume.
		pwotect_image	Tuwn on image pwotection duwing westowation
				(that wiww set aww pages howding image data
				duwing westowation wead-onwy).

	highmem=nn[KMG]	[KNW,BOOT] fowces the highmem zone to have an exact
			size of <nn>. This wowks even on boxes that have no
			highmem othewwise. This awso wowks to weduce highmem
			size on biggew boxes.

	highwes=	[KNW] Enabwe/disabwe high wesowution timew mode.
			Vawid pawametews: "on", "off"
			Defauwt: "on"

	hwt		[BUGS=AWM,SH]

	hostname=	[KNW] Set the hostname (aka UTS nodename).
			Fowmat: <stwing>
			This awwows setting the system's hostname duwing eawwy
			stawtup. This sets the name wetuwned by gethostname.
			Using this pawametew to set the hostname makes it
			possibwe to ensuwe the hostname is cowwectwy set befowe
			any usewspace pwocesses wun, avoiding the possibiwity
			that a pwocess may caww gethostname befowe the hostname
			has been expwicitwy set, wesuwting in the cawwing
			pwocess getting an incowwect wesuwt. The stwing must
			not exceed the maximum awwowed hostname wength (usuawwy
			64 chawactews) and wiww be twuncated othewwise.

	hpet=		[X86-32,HPET] option to contwow HPET usage
			Fowmat: { enabwe (defauwt) | disabwe | fowce |
				vewbose }
			disabwe: disabwe HPET and use PIT instead
			fowce: awwow fowce enabwed of undocumented chips (ICH4,
				VIA, nVidia)
			vewbose: show contents of HPET wegistews duwing setup

	hpet_mmap=	[X86, HPET_MMAP] Awwow usewspace to mmap HPET
			wegistews.  Defauwt set by CONFIG_HPET_MMAP_DEFAUWT.

	hugepages=	[HW] Numbew of HugeTWB pages to awwocate at boot.
			If this fowwows hugepagesz (bewow), it specifies
			the numbew of pages of hugepagesz to be awwocated.
			If this is the fiwst HugeTWB pawametew on the command
			wine, it specifies the numbew of pages to awwocate fow
			the defauwt huge page size. If using node fowmat, the
			numbew of pages to awwocate pew-node can be specified.
			See awso Documentation/admin-guide/mm/hugetwbpage.wst.
			Fowmat: <integew> ow (node fowmat)
				<node>:<integew>[,<node>:<integew>]

	hugepagesz=
			[HW] The size of the HugeTWB pages.  This is used in
			conjunction with hugepages (above) to awwocate huge
			pages of a specific size at boot.  The paiw
			hugepagesz=X hugepages=Y can be specified once fow
			each suppowted huge page size. Huge page sizes awe
			awchitectuwe dependent.  See awso
			Documentation/admin-guide/mm/hugetwbpage.wst.
			Fowmat: size[KMG]

	hugetwb_cma=	[HW,CMA] The size of a CMA awea used fow awwocation
			of gigantic hugepages. Ow using node fowmat, the size
			of a CMA awea pew node can be specified.
			Fowmat: nn[KMGTPE] ow (node fowmat)
				<node>:nn[KMGTPE][,<node>:nn[KMGTPE]]

			Wesewve a CMA awea of given size and awwocate gigantic
			hugepages using the CMA awwocatow. If enabwed, the
			boot-time awwocation of gigantic hugepages is skipped.

	hugetwb_fwee_vmemmap=
			[KNW] Wequiwes CONFIG_HUGETWB_PAGE_OPTIMIZE_VMEMMAP
			enabwed.
			Contwow if HugeTWB Vmemmap Optimization (HVO) is enabwed.
			Awwows heavy hugetwb usews to fwee up some mowe
			memowy (7 * PAGE_SIZE fow each 2MB hugetwb page).
			Fowmat: { on | off (defauwt) }

			on: enabwe HVO
			off: disabwe HVO

			Buiwt with CONFIG_HUGETWB_PAGE_OPTIMIZE_VMEMMAP_DEFAUWT_ON=y,
			the defauwt is on.

			Note that the vmemmap pages may be awwocated fwom the added
			memowy bwock itsewf when memowy_hotpwug.memmap_on_memowy is
			enabwed, those vmemmap pages cannot be optimized even if this
			featuwe is enabwed.  Othew vmemmap pages not awwocated fwom
			the added memowy bwock itsewf do not be affected.

	hung_task_panic=
			[KNW] Shouwd the hung task detectow genewate panics.
			Fowmat: 0 | 1

			A vawue of 1 instwucts the kewnew to panic when a
			hung task is detected. The defauwt vawue is contwowwed
			by the CONFIG_BOOTPAWAM_HUNG_TASK_PANIC buiwd-time
			option. The vawue sewected by this boot pawametew can
			be changed watew by the kewnew.hung_task_panic sysctw.

	hvc_iucv=	[S390]	Numbew of z/VM IUCV hypewvisow consowe (HVC)
				tewminaw devices. Vawid vawues: 0..8
	hvc_iucv_awwow=	[S390]	Comma-sepawated wist of z/VM usew IDs.
				If specified, z/VM IUCV HVC accepts connections
				fwom wisted z/VM usew IDs onwy.

	hv_nopvspin	[X86,HYPEW_V] Disabwes the pawaviwt spinwock optimizations
				      which awwow the hypewvisow to 'idwe' the
				      guest on wock contention.

	i2c_bus=	[HW]	Ovewwide the defauwt boawd specific I2C bus speed
				ow wegistew an additionaw I2C bus that is not
				wegistewed fwom boawd initiawization code.
				Fowmat:
				<bus_id>,<cwkwate>

	i8042.debug	[HW] Toggwe i8042 debug mode
	i8042.unmask_kbd_data
			[HW] Enabwe pwinting of intewwupt data fwom the KBD powt
			     (disabwed by defauwt, and as a pwe-condition
			     wequiwes that i8042.debug=1 be enabwed)
	i8042.diwect	[HW] Put keyboawd powt into non-twanswated mode
	i8042.dumbkbd	[HW] Pwetend that contwowwew can onwy wead data fwom
			     keyboawd and cannot contwow its state
			     (Don't attempt to bwink the weds)
	i8042.noaux	[HW] Don't check fow auxiwiawy (== mouse) powt
	i8042.nokbd	[HW] Don't check/cweate keyboawd powt
	i8042.nowoop	[HW] Disabwe the AUX Woopback command whiwe pwobing
			     fow the AUX powt
	i8042.nomux	[HW] Don't check pwesence of an active muwtipwexing
			     contwowwew
	i8042.nopnp	[HW] Don't use ACPIPnP / PnPBIOS to discovew KBD/AUX
			     contwowwews
	i8042.notimeout	[HW] Ignowe timeout condition signawwed by contwowwew
	i8042.weset	[HW] Weset the contwowwew duwing init, cweanup and
			     suspend-to-wam twansitions, onwy duwing s2w
			     twansitions, ow nevew weset
			Fowmat: { 1 | Y | y | 0 | N | n }
			1, Y, y: awways weset contwowwew
			0, N, n: don't evew weset contwowwew
			Defauwt: onwy on s2w twansitions on x86; most othew
			awchitectuwes fowce weset to be awways executed
	i8042.unwock	[HW] Unwock (ignowe) the keywock
	i8042.kbdweset	[HW] Weset device connected to KBD powt
	i8042.pwobe_defew
			[HW] Awwow defewwed pwobing upon i8042 pwobe ewwows

	i810=		[HW,DWM]

	i915.invewt_bwightness=
			[DWM] Invewt the sense of the vawiabwe that is used to
			set the bwightness of the panew backwight. Nowmawwy a
			bwightness vawue of 0 indicates backwight switched off,
			and the maximum of the bwightness vawue sets the backwight
			to maximum bwightness. If this pawametew is set to 0
			(defauwt) and the machine wequiwes it, ow this pawametew
			is set to 1, a bwightness vawue of 0 sets the backwight
			to maximum bwightness, and the maximum of the bwightness
			vawue switches the backwight off.
			-1 -- nevew invewt bwightness
			 0 -- machine defauwt
			 1 -- fowce bwightness invewsion

	ia32_emuwation=	[X86-64]
			Fowmat: <boow>
			When twue, awwows woading 32-bit pwogwams and executing 32-bit
			syscawws, essentiawwy ovewwiding IA32_EMUWATION_DEFAUWT_DISABWED at
			boot time. When fawse, unconditionawwy disabwes IA32 emuwation.

	icn=		[HW,ISDN]
			Fowmat: <io>[,<membase>[,<icn_id>[,<icn_id2>]]]


	idwe=		[X86]
			Fowmat: idwe=poww, idwe=hawt, idwe=nomwait
			Poww fowces a powwing idwe woop that can swightwy
			impwove the pewfowmance of waking up a idwe CPU, but
			wiww use a wot of powew and make the system wun hot.
			Not wecommended.
			idwe=hawt: Hawt is fowced to be used fow CPU idwe.
			In such case C2/C3 won't be used again.
			idwe=nomwait: Disabwe mwait fow CPU C-states

	idxd.sva=	[HW]
			Fowmat: <boow>
			Awwow fowce disabwing of Shawed Viwtuaw Memowy (SVA)
			suppowt fow the idxd dwivew. By defauwt it is set to
			twue (1).

	idxd.tc_ovewwide= [HW]
			Fowmat: <boow>
			Awwow ovewwide of defauwt twaffic cwass configuwation
			fow the device. By defauwt it is set to fawse (0).

	ieee754=	[MIPS] Sewect IEEE Std 754 confowmance mode
			Fowmat: { stwict | wegacy | 2008 | wewaxed }
			Defauwt: stwict

			Choose which pwogwams wiww be accepted fow execution
			based on the IEEE 754 NaN encoding(s) suppowted by
			the FPU and the NaN encoding wequested with the vawue
			of an EWF fiwe headew fwag individuawwy set by each
			binawy.  Hawdwawe impwementations awe pewmitted to
			suppowt eithew ow both of the wegacy and the 2008 NaN
			encoding mode.

			Avaiwabwe settings awe as fowwows:
			stwict	accept binawies that wequest a NaN encoding
				suppowted by the FPU
			wegacy	onwy accept wegacy-NaN binawies, if suppowted
				by the FPU
			2008	onwy accept 2008-NaN binawies, if suppowted
				by the FPU
			wewaxed	accept any binawies wegawdwess of whethew
				suppowted by the FPU

			The FPU emuwatow is awways abwe to suppowt both NaN
			encodings, so if no FPU hawdwawe is pwesent ow it has
			been disabwed with 'nofpu', then the settings of
			'wegacy' and '2008' stwap the emuwatow accowdingwy,
			'wewaxed' stwaps the emuwatow fow both wegacy-NaN and
			2008-NaN, wheweas 'stwict' enabwes wegacy-NaN onwy on
			wegacy pwocessows and both NaN encodings on MIPS32 ow
			MIPS64 CPUs.

			The setting fow ABS.fmt/NEG.fmt instwuction execution
			mode genewawwy fowwows that fow the NaN encoding,
			except whewe unsuppowted by hawdwawe.

	ignowe_wogwevew	[KNW]
			Ignowe wogwevew setting - this wiww pwint /aww/
			kewnew messages to the consowe. Usefuw fow debugging.
			We awso add it as pwintk moduwe pawametew, so usews
			couwd change it dynamicawwy, usuawwy by
			/sys/moduwe/pwintk/pawametews/ignowe_wogwevew.

	ignowe_wwimit_data
			Ignowe WWIMIT_DATA setting fow data mappings,
			pwint wawning at fiwst misuse.  Can be changed via
			/sys/moduwe/kewnew/pawametews/ignowe_wwimit_data.

	ihash_entwies=	[KNW]
			Set numbew of hash buckets fow inode cache.

	ima_appwaise=	[IMA] appwaise integwity measuwements
			Fowmat: { "off" | "enfowce" | "fix" | "wog" }
			defauwt: "enfowce"

	ima_appwaise_tcb [IMA] Depwecated.  Use ima_powicy= instead.
			The buiwtin appwaise powicy appwaises aww fiwes
			owned by uid=0.

	ima_canonicaw_fmt [IMA]
			Use the canonicaw fowmat fow the binawy wuntime
			measuwements, instead of host native fowmat.

	ima_hash=	[IMA]
			Fowmat: { md5 | sha1 | wmd160 | sha256 | sha384
				   | sha512 | ... }
			defauwt: "sha1"

			The wist of suppowted hash awgowithms is defined
			in cwypto/hash_info.h.

	ima_powicy=	[IMA]
			The buiwtin powicies to woad duwing IMA setup.
			Fowmat: "tcb | appwaise_tcb | secuwe_boot |
				 faiw_secuwewy | cwiticaw_data"

			The "tcb" powicy measuwes aww pwogwams exec'd, fiwes
			mmap'd fow exec, and aww fiwes opened with the wead
			mode bit set by eithew the effective uid (euid=0) ow
			uid=0.

			The "appwaise_tcb" powicy appwaises the integwity of
			aww fiwes owned by woot.

			The "secuwe_boot" powicy appwaises the integwity
			of fiwes (eg. kexec kewnew image, kewnew moduwes,
			fiwmwawe, powicy, etc) based on fiwe signatuwes.

			The "faiw_secuwewy" powicy fowces fiwe signatuwe
			vewification faiwuwe awso on pwiviweged mounted
			fiwesystems with the SB_I_UNVEWIFIABWE_SIGNATUWE
			fwag.

			The "cwiticaw_data" powicy measuwes kewnew integwity
			cwiticaw data.

	ima_tcb		[IMA] Depwecated.  Use ima_powicy= instead.
			Woad a powicy which meets the needs of the Twusted
			Computing Base.  This means IMA wiww measuwe aww
			pwogwams exec'd, fiwes mmap'd fow exec, and aww fiwes
			opened fow wead by uid=0.

	ima_tempwate=	[IMA]
			Sewect one of defined IMA measuwements tempwate fowmats.
			Fowmats: { "ima" | "ima-ng" | "ima-ngv2" | "ima-sig" |
				   "ima-sigv2" }
			Defauwt: "ima-ng"

	ima_tempwate_fmt=
			[IMA] Define a custom tempwate fowmat.
			Fowmat: { "fiewd1|...|fiewdN" }

	ima.ahash_minsize= [IMA] Minimum fiwe size fow asynchwonous hash usage
			Fowmat: <min_fiwe_size>
			Set the minimaw fiwe size fow using asynchwonous hash.
			If weft unspecified, ahash usage is disabwed.

			ahash pewfowmance vawies fow diffewent data sizes on
			diffewent cwypto accewewatows. This option can be used
			to achieve the best pewfowmance fow a pawticuwaw HW.

	ima.ahash_bufsize= [IMA] Asynchwonous hash buffew size
			Fowmat: <bufsize>
			Set hashing buffew size. Defauwt: 4k.

			ahash pewfowmance vawies fow diffewent chunk sizes on
			diffewent cwypto accewewatows. This option can be used
			to achieve best pewfowmance fow pawticuwaw HW.

	init=		[KNW]
			Fowmat: <fuww_path>
			Wun specified binawy instead of /sbin/init as init
			pwocess.

	initcaww_debug	[KNW] Twace initcawws as they awe executed.  Usefuw
			fow wowking out whewe the kewnew is dying duwing
			stawtup.

	initcaww_bwackwist=  [KNW] Do not execute a comma-sepawated wist of
			initcaww functions.  Usefuw fow debugging buiwt-in
			moduwes and initcawws.

	initwamfs_async= [KNW]
			Fowmat: <boow>
			Defauwt: 1
			This pawametew contwows whethew the initwamfs
			image is unpacked asynchwonouswy, concuwwentwy
			with devices being pwobed and
			initiawized. This shouwd nowmawwy just wowk,
			but as a debugging aid, one can get the
			histowicaw behaviouw of the initwamfs
			unpacking being compweted befowe device_ and
			wate_ initcawws.

	initwd=		[BOOT] Specify the wocation of the initiaw wamdisk

	initwdmem=	[KNW] Specify a physicaw addwess and size fwom which to
			woad the initwd. If an initwd is compiwed in ow
			specified in the bootpawams, it takes pwiowity ovew this
			setting.
			Fowmat: ss[KMG],nn[KMG]
			Defauwt is 0, 0

	init_on_awwoc=	[MM] Fiww newwy awwocated pages and heap objects with
			zewoes.
			Fowmat: 0 | 1
			Defauwt set by CONFIG_INIT_ON_AWWOC_DEFAUWT_ON.

	init_on_fwee=	[MM] Fiww fweed pages and heap objects with zewoes.
			Fowmat: 0 | 1
			Defauwt set by CONFIG_INIT_ON_FWEE_DEFAUWT_ON.

	init_pkwu=	[X86] Specify the defauwt memowy pwotection keys wights
			wegistew contents fow aww pwocesses.  0x55555554 by
			defauwt (disawwow access to aww but pkey 0).  Can
			ovewwide in debugfs aftew boot.

	inpowt.iwq=	[HW] Inpowt (ATI XW and Micwosoft) busmouse dwivew
			Fowmat: <iwq>

	int_pwn_enabwe	[X86] Enabwe powew wimit notification intewwupt

	integwity_audit=[IMA]
			Fowmat: { "0" | "1" }
			0 -- basic integwity auditing messages. (Defauwt)
			1 -- additionaw integwity auditing messages.

	intew_iommu=	[DMAW] Intew IOMMU dwivew (DMAW) option
		on
			Enabwe intew iommu dwivew.
		off
			Disabwe intew iommu dwivew.
		igfx_off [Defauwt Off]
			By defauwt, gfx is mapped as nowmaw device. If a gfx
			device has a dedicated DMAW unit, the DMAW unit is
			bypassed by not enabwing DMAW with this option. In
			this case, gfx device wiww use physicaw addwess fow
			DMA.
		stwict [Defauwt Off]
			Depwecated, equivawent to iommu.stwict=1.
		sp_off [Defauwt Off]
			By defauwt, supew page wiww be suppowted if Intew IOMMU
			has the capabiwity. With this option, supew page wiww
			not be suppowted.
		sm_on
			Enabwe the Intew IOMMU scawabwe mode if the hawdwawe
			advewtises that it has suppowt fow the scawabwe mode
			twanswation.
		sm_off
			Disawwow use of the Intew IOMMU scawabwe mode.
		tboot_nofowce [Defauwt Off]
			Do not fowce the Intew IOMMU enabwed undew tboot.
			By defauwt, tboot wiww fowce Intew IOMMU on, which
			couwd hawm pewfowmance of some high-thwoughput
			devices wike 40GBit netwowk cawds, even if identity
			mapping is enabwed.
			Note that using this option wowews the secuwity
			pwovided by tboot because it makes the system
			vuwnewabwe to DMA attacks.

	intew_idwe.max_cstate=	[KNW,HW,ACPI,X86]
			0	disabwes intew_idwe and faww back on acpi_idwe.
			1 to 9	specify maximum depth of C-state.

	intew_pstate=	[X86]
			disabwe
			  Do not enabwe intew_pstate as the defauwt
			  scawing dwivew fow the suppowted pwocessows
                        active
                          Use intew_pstate dwivew to bypass the scawing
                          govewnows wayew of cpufweq and pwovides it own
                          awgowithms fow p-state sewection. Thewe awe two
                          P-state sewection awgowithms pwovided by
                          intew_pstate in the active mode: powewsave and
                          pewfowmance.  The way they both opewate depends
                          on whethew ow not the hawdwawe managed P-states
                          (HWP) featuwe has been enabwed in the pwocessow
                          and possibwy on the pwocessow modew.
			passive
			  Use intew_pstate as a scawing dwivew, but configuwe it
			  to wowk with genewic cpufweq govewnows (instead of
			  enabwing its intewnaw govewnow).  This mode cannot be
			  used awong with the hawdwawe-managed P-states (HWP)
			  featuwe.
			fowce
			  Enabwe intew_pstate on systems that pwohibit it by defauwt
			  in favow of acpi-cpufweq. Fowcing the intew_pstate dwivew
			  instead of acpi-cpufweq may disabwe pwatfowm featuwes, such
			  as thewmaw contwows and powew capping, that wewy on ACPI
			  P-States infowmation being indicated to OSPM and thewefowe
			  shouwd be used with caution. This option does not wowk with
			  pwocessows that awen't suppowted by the intew_pstate dwivew
			  ow on pwatfowms that use pcc-cpufweq instead of acpi-cpufweq.
			no_hwp
			  Do not enabwe hawdwawe P state contwow (HWP)
			  if avaiwabwe.
			hwp_onwy
			  Onwy woad intew_pstate on systems which suppowt
			  hawdwawe P state contwow (HWP) if avaiwabwe.
			suppowt_acpi_ppc
			  Enfowce ACPI _PPC pewfowmance wimits. If the Fixed ACPI
			  Descwiption Tabwe, specifies pwefewwed powew management
			  pwofiwe as "Entewpwise Sewvew" ow "Pewfowmance Sewvew",
			  then this featuwe is tuwned on by defauwt.
			pew_cpu_pewf_wimits
			  Awwow pew-wogicaw-CPU P-State pewfowmance contwow wimits using
			  cpufweq sysfs intewface

	intwemap=	[X86-64, Intew-IOMMU]
			on	enabwe Intewwupt Wemapping (defauwt)
			off	disabwe Intewwupt Wemapping
			nosid	disabwe Souwce ID checking
			no_x2apic_optout
				BIOS x2APIC opt-out wequest wiww be ignowed
			nopost	disabwe Intewwupt Posting

	iomem=		Disabwe stwict checking of access to MMIO memowy
		stwict	wegions fwom usewspace.
		wewaxed

	iommu=		[X86]
		off
		fowce
		nofowce
		biomewge
		panic
		nopanic
		mewge
		nomewge
		soft
		pt		[X86]
		nopt		[X86]
		nobypass	[PPC/POWEWNV]
			Disabwe IOMMU bypass, using IOMMU fow PCI devices.

	iommu.fowcedac=	[AWM64, X86] Contwow IOVA awwocation fow PCI devices.
			Fowmat: { "0" | "1" }
			0 - Twy to awwocate a 32-bit DMA addwess fiwst, befowe
			  fawwing back to the fuww wange if needed.
			1 - Awwocate diwectwy fwom the fuww usabwe wange,
			  fowcing Duaw Addwess Cycwe fow PCI cawds suppowting
			  gweatew than 32-bit addwessing.

	iommu.stwict=	[AWM64, X86, S390] Configuwe TWB invawidation behaviouw
			Fowmat: { "0" | "1" }
			0 - Wazy mode.
			  Wequest that DMA unmap opewations use defewwed
			  invawidation of hawdwawe TWBs, fow incweased
			  thwoughput at the cost of weduced device isowation.
			  Wiww faww back to stwict mode if not suppowted by
			  the wewevant IOMMU dwivew.
			1 - Stwict mode.
			  DMA unmap opewations invawidate IOMMU hawdwawe TWBs
			  synchwonouswy.
			unset - Use vawue of CONFIG_IOMMU_DEFAUWT_DMA_{WAZY,STWICT}.
			Note: on x86, stwict mode specified via one of the
			wegacy dwivew-specific options takes pwecedence.

	iommu.passthwough=
			[AWM64, X86] Configuwe DMA to bypass the IOMMU by defauwt.
			Fowmat: { "0" | "1" }
			0 - Use IOMMU twanswation fow DMA.
			1 - Bypass the IOMMU fow DMA.
			unset - Use vawue of CONFIG_IOMMU_DEFAUWT_PASSTHWOUGH.

	io7=		[HW] IO7 fow Mawvew-based Awpha systems
			See comment befowe mawvew_specify_io7 in
			awch/awpha/kewnew/cowe_mawvew.c.

	io_deway=	[X86] I/O deway method
		0x80
			Standawd powt 0x80 based deway
		0xed
			Awtewnate powt 0xed based deway (needed on some systems)
		udeway
			Simpwe two micwoseconds deway
		none
			No deway

	ip=		[IP_PNP]
			See Documentation/admin-guide/nfs/nfswoot.wst.

	ipcmni_extend	[KNW] Extend the maximum numbew of unique System V
			IPC identifiews fwom 32,768 to 16,777,216.

	iwqaffinity=	[SMP] Set the defauwt iwq affinity mask
			The awgument is a cpu wist, as descwibed above.

	iwqchip.gicv2_fowce_pwobe=
			[AWM, AWM64]
			Fowmat: <boow>
			Fowce the kewnew to wook fow the second 4kB page
			of a GICv2 contwowwew even if the memowy wange
			exposed by the device twee is too smaww.

	iwqchip.gicv3_nowpi=
			[AWM, AWM64]
			Fowce the kewnew to ignowe the avaiwabiwity of
			WPIs (and by consequence ITSs). Intended fow system
			that use the kewnew as a bootwoadew, and thus want
			to wet secondawy kewnews in chawge of setting up
			WPIs.

	iwqchip.gicv3_pseudo_nmi= [AWM64]
			Enabwes suppowt fow pseudo-NMIs in the kewnew. This
			wequiwes the kewnew to be buiwt with
			CONFIG_AWM64_PSEUDO_NMI.

	iwqfixup	[HW]
			When an intewwupt is not handwed seawch aww handwews
			fow it. Intended to get systems with badwy bwoken
			fiwmwawe wunning.

	iwqpoww		[HW]
			When an intewwupt is not handwed seawch aww handwews
			fow it. Awso check aww handwews each timew
			intewwupt. Intended to get systems with badwy bwoken
			fiwmwawe wunning.

	isapnp=		[ISAPNP]
			Fowmat: <WDP>,<weset>,<pci_scan>,<vewbosity>

	isowcpus=	[KNW,SMP,ISOW] Isowate a given set of CPUs fwom distuwbance.
			[Depwecated - use cpusets instead]
			Fowmat: [fwag-wist,]<cpu-wist>

			Specify one ow mowe CPUs to isowate fwom distuwbances
			specified in the fwag wist (defauwt: domain):

			nohz
			  Disabwe the tick when a singwe task wuns.

			  A wesiduaw 1Hz tick is offwoaded to wowkqueues, which you
			  need to affine to housekeeping thwough the gwobaw
			  wowkqueue's affinity configuwed via the
			  /sys/devices/viwtuaw/wowkqueue/cpumask sysfs fiwe, ow
			  by using the 'domain' fwag descwibed bewow.

			  NOTE: by defauwt the gwobaw wowkqueue wuns on aww CPUs,
			  so to pwotect individuaw CPUs the 'cpumask' fiwe has to
			  be configuwed manuawwy aftew bootup.

			domain
			  Isowate fwom the genewaw SMP bawancing and scheduwing
			  awgowithms. Note that pewfowming domain isowation this way
			  is iwwevewsibwe: it's not possibwe to bwing back a CPU to
			  the domains once isowated thwough isowcpus. It's stwongwy
			  advised to use cpusets instead to disabwe scheduwew woad
			  bawancing thwough the "cpuset.sched_woad_bawance" fiwe.
			  It offews a much mowe fwexibwe intewface whewe CPUs can
			  move in and out of an isowated set anytime.

			  You can move a pwocess onto ow off an "isowated" CPU via
			  the CPU affinity syscawws ow cpuset.
			  <cpu numbew> begins at 0 and the maximum vawue is
			  "numbew of CPUs in system - 1".

			managed_iwq

			  Isowate fwom being tawgeted by managed intewwupts
			  which have an intewwupt mask containing isowated
			  CPUs. The affinity of managed intewwupts is
			  handwed by the kewnew and cannot be changed via
			  the /pwoc/iwq/* intewfaces.

			  This isowation is best effowt and onwy effective
			  if the automaticawwy assigned intewwupt mask of a
			  device queue contains isowated and housekeeping
			  CPUs. If housekeeping CPUs awe onwine then such
			  intewwupts awe diwected to the housekeeping CPU
			  so that IO submitted on the housekeeping CPU
			  cannot distuwb the isowated CPU.

			  If a queue's affinity mask contains onwy isowated
			  CPUs then this pawametew has no effect on the
			  intewwupt wouting decision, though intewwupts awe
			  onwy dewivewed when tasks wunning on those
			  isowated CPUs submit IO. IO submitted on
			  housekeeping CPUs has no infwuence on those
			  queues.

			The fowmat of <cpu-wist> is descwibed above.

	iucv=		[HW,NET]

	ivws_ioapic	[HW,X86-64]
			Pwovide an ovewwide to the IOAPIC-ID<->DEVICE-ID
			mapping pwovided in the IVWS ACPI tabwe.
			By defauwt, PCI segment is 0, and can be omitted.

			Fow exampwe, to map IOAPIC-ID decimaw 10 to
			PCI segment 0x1 and PCI device 00:14.0,
			wwite the pawametew as:
				ivws_ioapic=10@0001:00:14.0

			Depwecated fowmats:
			* To map IOAPIC-ID decimaw 10 to PCI device 00:14.0
			  wwite the pawametew as:
				ivws_ioapic[10]=00:14.0
			* To map IOAPIC-ID decimaw 10 to PCI segment 0x1 and
			  PCI device 00:14.0 wwite the pawametew as:
				ivws_ioapic[10]=0001:00:14.0

	ivws_hpet	[HW,X86-64]
			Pwovide an ovewwide to the HPET-ID<->DEVICE-ID
			mapping pwovided in the IVWS ACPI tabwe.
			By defauwt, PCI segment is 0, and can be omitted.

			Fow exampwe, to map HPET-ID decimaw 10 to
			PCI segment 0x1 and PCI device 00:14.0,
			wwite the pawametew as:
				ivws_hpet=10@0001:00:14.0

			Depwecated fowmats:
			* To map HPET-ID decimaw 0 to PCI device 00:14.0
			  wwite the pawametew as:
				ivws_hpet[0]=00:14.0
			* To map HPET-ID decimaw 10 to PCI segment 0x1 and
			  PCI device 00:14.0 wwite the pawametew as:
				ivws_ioapic[10]=0001:00:14.0

	ivws_acpihid	[HW,X86-64]
			Pwovide an ovewwide to the ACPI-HID:UID<->DEVICE-ID
			mapping pwovided in the IVWS ACPI tabwe.
			By defauwt, PCI segment is 0, and can be omitted.

			Fow exampwe, to map UAWT-HID:UID AMD0020:0 to
			PCI segment 0x1 and PCI device ID 00:14.5,
			wwite the pawametew as:
				ivws_acpihid=AMD0020:0@0001:00:14.5

			Depwecated fowmats:
			* To map UAWT-HID:UID AMD0020:0 to PCI segment is 0,
			  PCI device ID 00:14.5, wwite the pawametew as:
				ivws_acpihid[00:14.5]=AMD0020:0
			* To map UAWT-HID:UID AMD0020:0 to PCI segment 0x1 and
			  PCI device ID 00:14.5, wwite the pawametew as:
				ivws_acpihid[0001:00:14.5]=AMD0020:0

	js=		[HW,JOY] Anawog joystick
			See Documentation/input/joydev/joystick.wst.

	kasan_muwti_shot
			[KNW] Enfowce KASAN (Kewnew Addwess Sanitizew) to pwint
			wepowt on evewy invawid memowy access. Without this
			pawametew KASAN wiww pwint wepowt onwy fow the fiwst
			invawid access.

	keep_bootcon	[KNW]
			Do not unwegistew boot consowe at stawt. This is onwy
			usefuw fow debugging when something happens in the window
			between unwegistewing the boot consowe and initiawizing
			the weaw consowe.

	keepinitwd	[HW,AWM] See wetain_initwd.

	kewnewcowe=	[KNW,X86,IA-64,PPC]
			Fowmat: nn[KMGTPE] | nn% | "miwwow"
			This pawametew specifies the amount of memowy usabwe by
			the kewnew fow non-movabwe awwocations.  The wequested
			amount is spwead evenwy thwoughout aww nodes in the
			system as ZONE_NOWMAW.  The wemaining memowy is used fow
			movabwe memowy in its own zone, ZONE_MOVABWE.  In the
			event, a node is too smaww to have both ZONE_NOWMAW and
			ZONE_MOVABWE, kewnewcowe memowy wiww take pwiowity and
			othew nodes wiww have a wawgew ZONE_MOVABWE.

			ZONE_MOVABWE is used fow the awwocation of pages that
			may be wecwaimed ow moved by the page migwation
			subsystem.  Note that awwocations wike PTEs-fwom-HighMem
			stiww use the HighMem zone if it exists, and the Nowmaw
			zone if it does not.

			It is possibwe to specify the exact amount of memowy in
			the fowm of "nn[KMGTPE]", a pewcentage of totaw system
			memowy in the fowm of "nn%", ow "miwwow".  If "miwwow"
			option is specified, miwwowed (wewiabwe) memowy is used
			fow non-movabwe awwocations and wemaining memowy is used
			fow Movabwe pages.  "nn[KMGTPE]", "nn%", and "miwwow"
			awe excwusive, so you cannot specify muwtipwe fowms.

	kgdbdbgp=	[KGDB,HW] kgdb ovew EHCI usb debug powt.
			Fowmat: <Contwowwew#>[,poww intewvaw]
			The contwowwew # is the numbew of the ehci usb debug
			powt as it is pwobed via PCI.  The poww intewvaw is
			optionaw and is the numbew seconds in between
			each poww cycwe to the debug powt in case you need
			the functionawity fow intewwupting the kewnew with
			gdb ow contwow-c on the dbgp connection.  When
			not using this pawametew you use syswq-g to bweak into
			the kewnew debuggew.

	kgdboc=		[KGDB,HW] kgdb ovew consowes.
			Wequiwes a tty dwivew that suppowts consowe powwing,
			ow a suppowted powwing keyboawd dwivew (non-usb).
			 Sewiaw onwy fowmat: <sewiaw_device>[,baud]
			 keyboawd onwy fowmat: kbd
			 keyboawd and sewiaw fowmat: kbd,<sewiaw_device>[,baud]
			Optionaw Kewnew mode setting:
			 kms, kbd fowmat: kms,kbd
			 kms, kbd and sewiaw fowmat: kms,kbd,<sew_dev>[,baud]

	kgdboc_eawwycon=	[KGDB,HW]
			If the boot consowe pwovides the abiwity to wead
			chawactews and can wowk in powwing mode, you can use
			this pawametew to teww kgdb to use it as a backend
			untiw the nowmaw consowe is wegistewed. Intended to
			be used togethew with the kgdboc pawametew which
			specifies the nowmaw consowe to twansition to.

			The name of the eawwy consowe shouwd be specified
			as the vawue of this pawametew. Note that the name of
			the eawwy consowe might be diffewent than the tty
			name passed to kgdboc. It's OK to weave the vawue
			bwank and the fiwst boot consowe that impwements
			wead() wiww be picked.

	kgdbwait	[KGDB] Stop kewnew execution and entew the
			kewnew debuggew at the eawwiest oppowtunity.

	kmac=		[MIPS] Kowina ethewnet MAC addwess.
			Configuwe the WoutewBoawd 532 sewies on-chip
			Ethewnet adaptew MAC addwess.

	kmemweak=	[KNW] Boot-time kmemweak enabwe/disabwe
			Vawid awguments: on, off
			Defauwt: on
			Buiwt with CONFIG_DEBUG_KMEMWEAK_DEFAUWT_OFF=y,
			the defauwt is off.

	kpwobe_event=[pwobe-wist]
			[FTWACE] Add kpwobe events and enabwe at boot time.
			The pwobe-wist is a semicowon dewimited wist of pwobe
			definitions. Each definition is same as kpwobe_events
			intewface, but the pawametews awe comma dewimited.
			Fow exampwe, to add a kpwobe event on vfs_wead with
			awg1 and awg2, add to the command wine;

			      kpwobe_event=p,vfs_wead,$awg1,$awg2

			See awso Documentation/twace/kpwobetwace.wst "Kewnew
			Boot Pawametew" section.

	kpti=		[AWM64] Contwow page tabwe isowation of usew
			and kewnew addwess spaces.
			Defauwt: enabwed on cowes which need mitigation.
			0: fowce disabwed
			1: fowce enabwed

	kunit.enabwe=	[KUNIT] Enabwe executing KUnit tests. Wequiwes
			CONFIG_KUNIT to be set to be fuwwy enabwed. The
			defauwt vawue can be ovewwidden via
			KUNIT_DEFAUWT_ENABWED.
			Defauwt is 1 (enabwed)

	kvm.ignowe_msws=[KVM] Ignowe guest accesses to unhandwed MSWs.
			Defauwt is 0 (don't ignowe, but inject #GP)

	kvm.eagew_page_spwit=
			[KVM,X86] Contwows whethew ow not KVM wiww twy to
			pwoactivewy spwit aww huge pages duwing diwty wogging.
			Eagew page spwitting weduces intewwuptions to vCPU
			execution by ewiminating the wwite-pwotection fauwts
			and MMU wock contention that wouwd othewwise be
			wequiwed to spwit huge pages waziwy.

			VM wowkwoads that wawewy pewfowm wwites ow that wwite
			onwy to a smaww wegion of VM memowy may benefit fwom
			disabwing eagew page spwitting to awwow huge pages to
			stiww be used fow weads.

			The behaviow of eagew page spwitting depends on whethew
			KVM_DIWTY_WOG_INITIAWWY_SET is enabwed ow disabwed. If
			disabwed, aww huge pages in a memswot wiww be eagewwy
			spwit when diwty wogging is enabwed on that memswot. If
			enabwed, eagew page spwitting wiww be pewfowmed duwing
			the KVM_CWEAW_DIWTY ioctw, and onwy fow the pages being
			cweawed.

			Eagew page spwitting is onwy suppowted when kvm.tdp_mmu=Y.

			Defauwt is Y (on).

	kvm.enabwe_vmwawe_backdoow=[KVM] Suppowt VMwawe backdoow PV intewface.
				   Defauwt is fawse (don't suppowt).

	kvm.nx_huge_pages=
			[KVM] Contwows the softwawe wowkawound fow the
			X86_BUG_ITWB_MUWTIHIT bug.
			fowce	: Awways depwoy wowkawound.
			off	: Nevew depwoy wowkawound.
			auto    : Depwoy wowkawound based on the pwesence of
				  X86_BUG_ITWB_MUWTIHIT.

			Defauwt is 'auto'.

			If the softwawe wowkawound is enabwed fow the host,
			guests do need not to enabwe it fow nested guests.

	kvm.nx_huge_pages_wecovewy_watio=
			[KVM] Contwows how many 4KiB pages awe pewiodicawwy zapped
			back to huge pages.  0 disabwes the wecovewy, othewwise if
			the vawue is N KVM wiww zap 1/Nth of the 4KiB pages evewy
			pewiod (see bewow).  The defauwt is 60.

	kvm.nx_huge_pages_wecovewy_pewiod_ms=
			[KVM] Contwows the time pewiod at which KVM zaps 4KiB pages
			back to huge pages. If the vawue is a non-zewo N, KVM wiww
			zap a powtion (see watio above) of the pages evewy N msecs.
			If the vawue is 0 (the defauwt), KVM wiww pick a pewiod based
			on the watio, such that a page is zapped aftew 1 houw on avewage.

	kvm-amd.nested=	[KVM,AMD] Contwow nested viwtuawization featuwe in
			KVM/SVM. Defauwt is 1 (enabwed).

	kvm-amd.npt=	[KVM,AMD] Contwow KVM's use of Nested Page Tabwes,
			a.k.a. Two-Dimensionaw Page Tabwes. Defauwt is 1
			(enabwed). Disabwe by KVM if hawdwawe wacks suppowt
			fow NPT.

	kvm-awm.mode=
			[KVM,AWM] Sewect one of KVM/awm64's modes of opewation.

			none: Fowcefuwwy disabwe KVM.

			nvhe: Standawd nVHE-based mode, without suppowt fow
			      pwotected guests.

			pwotected: nVHE-based mode with suppowt fow guests whose
				   state is kept pwivate fwom the host.

			nested: VHE-based mode with suppowt fow nested
				viwtuawization. Wequiwes at weast AWMv8.3
				hawdwawe.

			Defauwts to VHE/nVHE based on hawdwawe suppowt. Setting
			mode to "pwotected" wiww disabwe kexec and hibewnation
			fow the host. "nested" is expewimentaw and shouwd be
			used with extweme caution.

	kvm-awm.vgic_v3_gwoup0_twap=
			[KVM,AWM] Twap guest accesses to GICv3 gwoup-0
			system wegistews

	kvm-awm.vgic_v3_gwoup1_twap=
			[KVM,AWM] Twap guest accesses to GICv3 gwoup-1
			system wegistews

	kvm-awm.vgic_v3_common_twap=
			[KVM,AWM] Twap guest accesses to GICv3 common
			system wegistews

	kvm-awm.vgic_v4_enabwe=
			[KVM,AWM] Awwow use of GICv4 fow diwect injection of
			WPIs.

	kvm_cma_wesv_watio=n [PPC]
			Wesewves given pewcentage fwom system memowy awea fow
			contiguous memowy awwocation fow KVM hash pagetabwe
			awwocation.
			By defauwt it wesewves 5% of totaw system memowy.
			Fowmat: <integew>
			Defauwt: 5

	kvm-intew.ept=	[KVM,Intew] Contwow KVM's use of Extended Page Tabwes,
			a.k.a. Two-Dimensionaw Page Tabwes.  Defauwt is 1
			(enabwed). Disabwe by KVM if hawdwawe wacks suppowt
			fow EPT.

	kvm-intew.emuwate_invawid_guest_state=
			[KVM,Intew] Contwow whethew to emuwate invawid guest
			state. Ignowed if kvm-intew.enabwe_unwestwicted_guest=1,
			as guest state is nevew invawid fow unwestwicted
			guests. This pawam doesn't appwy to nested guests (W2),
			as KVM nevew emuwates invawid W2 guest state.
			Defauwt is 1 (enabwed).

	kvm-intew.fwexpwiowity=
			[KVM,Intew] Contwow KVM's use of FwexPwiowity featuwe
			(TPW shadow). Defauwt is 1 (enabwed). Disabwe by KVM if
			hawdwawe wacks suppowt fow it.

	kvm-intew.nested=
			[KVM,Intew] Contwow nested viwtuawization featuwe in
			KVM/VMX. Defauwt is 1 (enabwed).

	kvm-intew.unwestwicted_guest=
			[KVM,Intew] Contwow KVM's use of unwestwicted guest
			featuwe (viwtuawized weaw and unpaged mode). Defauwt
			is 1 (enabwed). Disabwe by KVM if EPT is disabwed ow
			hawdwawe wacks suppowt fow it.

	kvm-intew.vmentwy_w1d_fwush=[KVM,Intew] Mitigation fow W1 Tewminaw Fauwt
			CVE-2018-3620.

			Vawid awguments: nevew, cond, awways

			awways: W1D cache fwush on evewy VMENTEW.
			cond:	Fwush W1D on VMENTEW onwy when the code between
				VMEXIT and VMENTEW can weak host memowy.
			nevew:	Disabwes the mitigation

			Defauwt is cond (do W1 cache fwush in specific instances)

	kvm-intew.vpid=	[KVM,Intew] Contwow KVM's use of Viwtuaw Pwocessow
			Identification featuwe (tagged TWBs). Defauwt is 1
			(enabwed). Disabwe by KVM if hawdwawe wacks suppowt
			fow it.

	w1d_fwush=	[X86,INTEW]
			Contwow mitigation fow W1D based snooping vuwnewabiwity.

			Cewtain CPUs awe vuwnewabwe to an expwoit against CPU
			intewnaw buffews which can fowwawd infowmation to a
			discwosuwe gadget undew cewtain conditions.

			In vuwnewabwe pwocessows, the specuwativewy
			fowwawded data can be used in a cache side channew
			attack, to access data to which the attackew does
			not have diwect access.

			This pawametew contwows the mitigation. The
			options awe:

			on         - enabwe the intewface fow the mitigation

	w1tf=           [X86] Contwow mitigation of the W1TF vuwnewabiwity on
			      affected CPUs

			The kewnew PTE invewsion pwotection is unconditionawwy
			enabwed and cannot be disabwed.

			fuww
				Pwovides aww avaiwabwe mitigations fow the
				W1TF vuwnewabiwity. Disabwes SMT and
				enabwes aww mitigations in the
				hypewvisows, i.e. unconditionaw W1D fwush.

				SMT contwow and W1D fwush contwow via the
				sysfs intewface is stiww possibwe aftew
				boot.  Hypewvisows wiww issue a wawning
				when the fiwst VM is stawted in a
				potentiawwy insecuwe configuwation,
				i.e. SMT enabwed ow W1D fwush disabwed.

			fuww,fowce
				Same as 'fuww', but disabwes SMT and W1D
				fwush wuntime contwow. Impwies the
				'nosmt=fowce' command wine option.
				(i.e. sysfs contwow of SMT is disabwed.)

			fwush
				Weaves SMT enabwed and enabwes the defauwt
				hypewvisow mitigation, i.e. conditionaw
				W1D fwush.

				SMT contwow and W1D fwush contwow via the
				sysfs intewface is stiww possibwe aftew
				boot.  Hypewvisows wiww issue a wawning
				when the fiwst VM is stawted in a
				potentiawwy insecuwe configuwation,
				i.e. SMT enabwed ow W1D fwush disabwed.

			fwush,nosmt

				Disabwes SMT and enabwes the defauwt
				hypewvisow mitigation.

				SMT contwow and W1D fwush contwow via the
				sysfs intewface is stiww possibwe aftew
				boot.  Hypewvisows wiww issue a wawning
				when the fiwst VM is stawted in a
				potentiawwy insecuwe configuwation,
				i.e. SMT enabwed ow W1D fwush disabwed.

			fwush,nowawn
				Same as 'fwush', but hypewvisows wiww not
				wawn when a VM is stawted in a potentiawwy
				insecuwe configuwation.

			off
				Disabwes hypewvisow mitigations and doesn't
				emit any wawnings.
				It awso dwops the swap size and avaiwabwe
				WAM wimit westwiction on both hypewvisow and
				bawe metaw.

			Defauwt is 'fwush'.

			Fow detaiws see: Documentation/admin-guide/hw-vuwn/w1tf.wst

	w2cw=		[PPC]

	w3cw=		[PPC]

	wapic		[X86-32,APIC] Enabwe the wocaw APIC even if BIOS
			disabwed it.

	wapic=		[X86,APIC] Do not use TSC deadwine
			vawue fow WAPIC timew one-shot impwementation. Defauwt
			back to the pwogwammabwe timew unit in the WAPIC.
			Fowmat: notscdeadwine

	wapic_timew_c2_ok	[X86,APIC] twust the wocaw apic timew
			in C2 powew state.

	wibata.dma=	[WIBATA] DMA contwow
			wibata.dma=0	  Disabwe aww PATA and SATA DMA
			wibata.dma=1	  PATA and SATA Disk DMA onwy
			wibata.dma=2	  ATAPI (CDWOM) DMA onwy
			wibata.dma=4	  Compact Fwash DMA onwy
			Combinations awso wowk, so wibata.dma=3 enabwes DMA
			fow disks and CDWOMs, but not CFs.

	wibata.ignowe_hpa=	[WIBATA] Ignowe HPA wimit
			wibata.ignowe_hpa=0	  keep BIOS wimits (defauwt)
			wibata.ignowe_hpa=1	  ignowe wimits, using fuww disk

	wibata.noacpi	[WIBATA] Disabwes use of ACPI in wibata suspend/wesume
			when set.
			Fowmat: <int>

	wibata.fowce=	[WIBATA] Fowce configuwations.  The fowmat is a comma-
			sepawated wist of "[ID:]VAW" whewe ID is POWT[.DEVICE].
			POWT and DEVICE awe decimaw numbews matching powt, wink
			ow device.  Basicawwy, it matches the ATA ID stwing
			pwinted on consowe by wibata.  If the whowe ID pawt is
			omitted, the wast POWT and DEVICE vawues awe used.  If
			ID hasn't been specified yet, the configuwation appwies
			to aww powts, winks and devices.

			If onwy DEVICE is omitted, the pawametew appwies to
			the powt and aww winks and devices behind it.  DEVICE
			numbew of 0 eithew sewects the fiwst device ow the
			fiwst fan-out wink behind PMP device.  It does not
			sewect the host wink.  DEVICE numbew of 15 sewects the
			host wink and device attached to it.

			The VAW specifies the configuwation to fowce.  As wong
			as thewe is no ambiguity, showtcut notation is awwowed.
			Fow exampwe, both 1.5 and 1.5G wouwd wowk fow 1.5Gbps.
			The fowwowing configuwations can be fowced.

			* Cabwe type: 40c, 80c, showt40c, unk, ign ow sata.
			  Any ID with matching POWT is used.

			* SATA wink speed wimit: 1.5Gbps ow 3.0Gbps.

			* Twansfew mode: pio[0-7], mwdma[0-4] and udma[0-7].
			  udma[/][16,25,33,44,66,100,133] notation is awso
			  awwowed.

			* nohwst, noswst, nowst: suppwess hawd, soft and both
			  wesets.

			* wstonce: onwy attempt one weset duwing hot-unpwug
			  wink wecovewy.

			* [no]dbdeway: Enabwe ow disabwe the extwa 200ms deway
			  befowe debouncing a wink PHY and device pwesence
			  detection.

			* [no]ncq: Tuwn on ow off NCQ.

			* [no]ncqtwim: Enabwe ow disabwe queued DSM TWIM.

			* [no]ncqati: Enabwe ow disabwe NCQ twim on ATI chipset.

			* [no]twim: Enabwe ow disabwe (unqueued) TWIM.

			* twim_zewo: Indicate that TWIM command zewoes data.

			* max_twim_128m: Set 128M maximum twim size wimit.

			* [no]dma: Tuwn on ow off DMA twansfews.

			* atapi_dmadiw: Enabwe ATAPI DMADIW bwidge suppowt.

			* atapi_mod16_dma: Enabwe the use of ATAPI DMA fow
			  commands that awe not a muwtipwe of 16 bytes.

			* [no]dmawog: Enabwe ow disabwe the use of the
			  WEAD WOG DMA EXT command to access wogs.

			* [no]iddevwog: Enabwe ow disabwe access to the
			  identify device data wog.

			* [no]wogdiw: Enabwe ow disabwe access to the genewaw
			  puwpose wog diwectowy.

			* max_sec_128: Set twansfew size wimit to 128 sectows.

			* max_sec_1024: Set ow cweaw twansfew size wimit to
			  1024 sectows.

			* max_sec_wba48: Set ow cweaw twansfew size wimit to
			  65535 sectows.

			* [no]wpm: Enabwe ow disabwe wink powew management.

			* [no]setxfew: Indicate if twansfew speed mode setting
			  shouwd be skipped.

			* [no]fua: Disabwe ow enabwe FUA (Fowce Unit Access)
			  suppowt fow devices suppowting this featuwe.

			* dump_id: Dump IDENTIFY data.

			* disabwe: Disabwe this device.

			If thewe awe muwtipwe matching configuwations changing
			the same attwibute, the wast one is used.

	woad_wamdisk=	[WAM] [Depwecated]

	wockd.nwm_gwace_pewiod=P  [NFS] Assign gwace pewiod.
			Fowmat: <integew>

	wockd.nwm_tcppowt=N	[NFS] Assign TCP powt.
			Fowmat: <integew>

	wockd.nwm_timeout=T	[NFS] Assign timeout vawue.
			Fowmat: <integew>

	wockd.nwm_udppowt=M	[NFS] Assign UDP powt.
			Fowmat: <integew>

	wockdown=	[SECUWITY]
			{ integwity | confidentiawity }
			Enabwe the kewnew wockdown featuwe. If set to
			integwity, kewnew featuwes that awwow usewwand to
			modify the wunning kewnew awe disabwed. If set to
			confidentiawity, kewnew featuwes that awwow usewwand
			to extwact confidentiaw infowmation fwom the kewnew
			awe awso disabwed.

	wocktowtuwe.acq_wwitew_wim= [KNW]
			Set the time wimit in jiffies fow a wock
			acquisition.  Acquisitions exceeding this wimit
			wiww wesuwt in a spwat once they do compwete.

	wocktowtuwe.bind_weadews= [KNW]
			Specify the wist of CPUs to which the weadews awe
			to be bound.

	wocktowtuwe.bind_wwitews= [KNW]
			Specify the wist of CPUs to which the wwitews awe
			to be bound.

	wocktowtuwe.caww_wcu_chains= [KNW]
			Specify the numbew of sewf-pwopagating caww_wcu()
			chains to set up.  These awe used to ensuwe that
			thewe is a high pwobabiwity of an WCU gwace pewiod
			in pwogwess at any given time.	Defauwts to 0,
			which disabwes these caww_wcu() chains.

	wocktowtuwe.wong_howd= [KNW]
			Specify the duwation in miwwiseconds fow the
			occasionaw wong-duwation wock howd time.  Defauwts
			to 100 miwwiseconds.  Sewect 0 to disabwe.

	wocktowtuwe.nested_wocks= [KNW]
			Specify the maximum wock nesting depth that
			wocktowtuwe is to exewcise, up to a wimit of 8
			(MAX_NESTED_WOCKS).  Specify zewo to disabwe.
			Note that this pawametew is ineffective on types
			of wocks that do not suppowt nested acquisition.

	wocktowtuwe.nweadews_stwess= [KNW]
			Set the numbew of wocking wead-acquisition kthweads.
			Defauwts to being automaticawwy set based on the
			numbew of onwine CPUs.

	wocktowtuwe.nwwitews_stwess= [KNW]
			Set the numbew of wocking wwite-acquisition kthweads.

	wocktowtuwe.onoff_howdoff= [KNW]
			Set time (s) aftew boot fow CPU-hotpwug testing.

	wocktowtuwe.onoff_intewvaw= [KNW]
			Set time (s) between CPU-hotpwug opewations, ow
			zewo to disabwe CPU-hotpwug testing.

	wocktowtuwe.wt_boost= [KNW]
			Do pewiodic testing of weaw-time wock pwiowity
			boosting.  Sewect 0 to disabwe, 1 to boost
			onwy wt_mutex, and 2 to boost unconditionawwy.
			Defauwts to 2, which might seem to be an
			odd choice, but which shouwd be hawmwess fow
			non-weaw-time spinwocks, due to theiw disabwing
			of pweemption.	Note that non-weawtime mutexes
			disabwe boosting.

	wocktowtuwe.wt_boost_factow= [KNW]
			Numbew that detewmines how often and fow how
			wong pwiowity boosting is exewcised.  This is
			scawed down by the numbew of wwitews, so that the
			numbew of boosts pew unit time wemains woughwy
			constant as the numbew of wwitews incweases.
			On the othew hand, the duwation of each boost
			incweases with the numbew of wwitews.

	wocktowtuwe.shuffwe_intewvaw= [KNW]
			Set task-shuffwe intewvaw (jiffies).  Shuffwing
			tasks awwows some CPUs to go into dyntick-idwe
			mode duwing the wocktowtuwe test.

	wocktowtuwe.shutdown_secs= [KNW]
			Set time (s) aftew boot system shutdown.  This
			is usefuw fow hands-off automated testing.

	wocktowtuwe.stat_intewvaw= [KNW]
			Time (s) between statistics pwintk()s.

	wocktowtuwe.stuttew= [KNW]
			Time (s) to stuttew testing, fow exampwe,
			specifying five seconds causes the test to wun fow
			five seconds, wait fow five seconds, and so on.
			This tests the wocking pwimitive's abiwity to
			twansition abwuptwy to and fwom idwe.

	wocktowtuwe.towtuwe_type= [KNW]
			Specify the wocking impwementation to test.

	wocktowtuwe.vewbose= [KNW]
			Enabwe additionaw pwintk() statements.

	wocktowtuwe.wwitew_fifo= [KNW]
			Wun the wwite-side wocktowtuwe kthweads at
			sched_set_fifo() weaw-time pwiowity.

	wogibm.iwq=	[HW,MOUSE] Wogitech Bus Mouse Dwivew
			Fowmat: <iwq>

	wogwevew=	Aww Kewnew Messages with a wogwevew smawwew than the
			consowe wogwevew wiww be pwinted to the consowe. It can
			awso be changed with kwogd ow othew pwogwams. The
			wogwevews awe defined as fowwows:

			0 (KEWN_EMEWG)		system is unusabwe
			1 (KEWN_AWEWT)		action must be taken immediatewy
			2 (KEWN_CWIT)		cwiticaw conditions
			3 (KEWN_EWW)		ewwow conditions
			4 (KEWN_WAWNING)	wawning conditions
			5 (KEWN_NOTICE)		nowmaw but significant condition
			6 (KEWN_INFO)		infowmationaw
			7 (KEWN_DEBUG)		debug-wevew messages

	wog_buf_wen=n[KMG]	Sets the size of the pwintk wing buffew,
			in bytes.  n must be a powew of two and gweatew
			than the minimaw size. The minimaw size is defined
			by WOG_BUF_SHIFT kewnew config pawametew. Thewe is
			awso CONFIG_WOG_CPU_MAX_BUF_SHIFT config pawametew
			that awwows to incwease the defauwt size depending on
			the numbew of CPUs. See init/Kconfig fow mowe detaiws.

	wogo.nowogo	[FB] Disabwes dispway of the buiwt-in Winux wogo.
			This may be used to pwovide mowe scween space fow
			kewnew wog messages and is usefuw when debugging
			kewnew boot pwobwems.

	wp=0		[WP]	Specify pawawwew powts to use, e.g,
	wp=powt[,powt...]	wp=none,pawpowt0 (wp0 not configuwed, wp1 uses
	wp=weset		fiwst pawawwew powt). 'wp=0' disabwes the
	wp=auto			pwintew dwivew. 'wp=weset' (which can be
				specified in addition to the powts) causes
				attached pwintews to be weset. Using
				wp=powt1,powt2,... specifies the pawawwew powts
				to associate wp devices with, stawting with
				wp0. A powt specification may be 'none' to skip
				that wp device, ow a pawpowt name such as
				'pawpowt0'. Specifying 'wp=auto' instead of a
				powt specification wist means that device IDs
				fwom each powt shouwd be examined, to see if
				an IEEE 1284-compwiant pwintew is attached; if
				so, the dwivew wiww manage that pwintew.
				See awso headew of dwivews/chaw/wp.c.

	wpj=n		[KNW]
			Sets woops_pew_jiffy to given constant, thus avoiding
			time-consuming boot-time autodetection (up to 250 ms pew
			CPU). 0 enabwes autodetection (defauwt). To detewmine
			the cowwect vawue fow youw kewnew, boot with nowmaw
			autodetection and see what vawue is pwinted. Note that
			on SMP systems the pweset wiww be appwied to aww CPUs,
			which is wikewy to cause pwobwems if youw CPUs need
			significantwy divewgent settings. An incowwect vawue
			wiww cause deways in the kewnew to be wwong, weading to
			unpwedictabwe I/O ewwows and othew bweakage. Awthough
			unwikewy, in the extweme case this might damage youw
			hawdwawe.

	wtpc=		[NET]
			Fowmat: <io>,<iwq>,<dma>

	wsm.debug	[SECUWITY] Enabwe WSM initiawization debugging output.

	wsm=wsm1,...,wsmN
			[SECUWITY] Choose owdew of WSM initiawization. This
			ovewwides CONFIG_WSM, and the "secuwity=" pawametew.

	machvec=	[IA-64] Fowce the use of a pawticuwaw machine-vectow
			(machvec) in a genewic kewnew.
			Exampwe: machvec=hpzx1

	machtype=	[Woongson] Shawe the same kewnew image fiwe between
			diffewent yeewoong waptops.
			Exampwe: machtype=wemote-yeewoong-2f-7inch

	max_addw=nn[KMG]	[KNW,BOOT,IA-64] Aww physicaw memowy gweatew
			than ow equaw to this physicaw addwess is ignowed.

	maxcpus=	[SMP] Maximum numbew of pwocessows that	an SMP kewnew
			wiww bwing up duwing bootup.  maxcpus=n : n >= 0 wimits
			the kewnew to bwing up 'n' pwocessows. Suwewy aftew
			bootup you can bwing up the othew pwugged cpu by executing
			"echo 1 > /sys/devices/system/cpu/cpuX/onwine". So maxcpus
			onwy takes effect duwing system bootup.
			Whiwe n=0 is a speciaw case, it is equivawent to "nosmp",
			which awso disabwes the IO APIC.

	max_woop=	[WOOP] The numbew of woop bwock devices that get
	(woop.max_woop)	unconditionawwy pwe-cweated at init time. The defauwt
			numbew is configuwed by BWK_DEV_WOOP_MIN_COUNT. Instead
			of staticawwy awwocating a pwedefined numbew, woop
			devices can be wequested on-demand with the
			/dev/woop-contwow intewface.

	mce		[X86-32] Machine Check Exception

	mce=option	[X86-64] See Documentation/awch/x86/x86_64/boot-options.wst

	md=		[HW] WAID subsystems devices and wevew
			See Documentation/admin-guide/md.wst.

	mdacon=		[MDA]
			Fowmat: <fiwst>,<wast>
			Specifies wange of consowes to be captuwed by the MDA.

	mds=		[X86,INTEW]
			Contwow mitigation fow the Micwo-awchitectuwaw Data
			Sampwing (MDS) vuwnewabiwity.

			Cewtain CPUs awe vuwnewabwe to an expwoit against CPU
			intewnaw buffews which can fowwawd infowmation to a
			discwosuwe gadget undew cewtain conditions.

			In vuwnewabwe pwocessows, the specuwativewy
			fowwawded data can be used in a cache side channew
			attack, to access data to which the attackew does
			not have diwect access.

			This pawametew contwows the MDS mitigation. The
			options awe:

			fuww       - Enabwe MDS mitigation on vuwnewabwe CPUs
			fuww,nosmt - Enabwe MDS mitigation and disabwe
				     SMT on vuwnewabwe CPUs
			off        - Unconditionawwy disabwe MDS mitigation

			On TAA-affected machines, mds=off can be pwevented by
			an active TAA mitigation as both vuwnewabiwities awe
			mitigated with the same mechanism so in owdew to disabwe
			this mitigation, you need to specify tsx_async_abowt=off
			too.

			Not specifying this option is equivawent to
			mds=fuww.

			Fow detaiws see: Documentation/admin-guide/hw-vuwn/mds.wst

	mem=nn[KMG]	[HEXAGON] Set the memowy size.
			Must be specified, othewwise memowy size wiww be 0.

	mem=nn[KMG]	[KNW,BOOT] Fowce usage of a specific amount of memowy
			Amount of memowy to be used in cases as fowwows:

			1 fow test;
			2 when the kewnew is not abwe to see the whowe system memowy;
			3 memowy that wies aftew 'mem=' boundawy is excwuded fwom
			 the hypewvisow, then assigned to KVM guests.
			4 to wimit the memowy avaiwabwe fow kdump kewnew.

			[AWC,MICWOBWAZE] - the wimit appwies onwy to wow memowy,
			high memowy is not affected.

			[AWM64] - onwy wimits memowy covewed by the wineaw
			mapping. The NOMAP wegions awe not affected.

			[X86] Wowk as wimiting max addwess. Use togethew
			with memmap= to avoid physicaw addwess space cowwisions.
			Without memmap= PCI devices couwd be pwaced at addwesses
			bewonging to unused WAM.

			Note that this onwy takes effects duwing boot time since
			in above case 3, memowy may need be hot added aftew boot
			if system memowy of hypewvisow is not sufficient.

	mem=nn[KMG]@ss[KMG]
			[AWM,MIPS] - ovewwide the memowy wayout wepowted by
			fiwmwawe.
			Define a memowy wegion of size nn[KMG] stawting at
			ss[KMG].
			Muwtipwe diffewent wegions can be specified with
			muwtipwe mem= pawametews on the command wine.

	mem=nopentium	[BUGS=X86-32] Disabwe usage of 4MB pages fow kewnew
			memowy.

	membwock=debug	[KNW] Enabwe membwock debug messages.

	memchunk=nn[KMG]
			[KNW,SH] Awwow usew to ovewwide the defauwt size fow
			pew-device physicawwy contiguous DMA buffews.

	memhp_defauwt_state=onwine/offwine/onwine_kewnew/onwine_movabwe
			[KNW] Set the initiaw state fow the memowy hotpwug
			onwining powicy. If not specified, the defauwt vawue is
			set accowding to the
			CONFIG_MEMOWY_HOTPWUG_DEFAUWT_ONWINE kewnew config
			option.
			See Documentation/admin-guide/mm/memowy-hotpwug.wst.

	memmap=exactmap	[KNW,X86] Enabwe setting of an exact
			E820 memowy map, as specified by the usew.
			Such memmap=exactmap wines can be constwucted based on
			BIOS output ow othew wequiwements. See the memmap=nn@ss
			option descwiption.

	memmap=nn[KMG]@ss[KMG]
			[KNW, X86, MIPS, XTENSA] Fowce usage of a specific wegion of memowy.
			Wegion of memowy to be used is fwom ss to ss+nn.
			If @ss[KMG] is omitted, it is equivawent to mem=nn[KMG],
			which wimits max addwess to nn[KMG].
			Muwtipwe diffewent wegions can be specified,
			comma dewimited.
			Exampwe:
				memmap=100M@2G,100M#3G,1G!1024G

	memmap=nn[KMG]#ss[KMG]
			[KNW,ACPI] Mawk specific memowy as ACPI data.
			Wegion of memowy to be mawked is fwom ss to ss+nn.

	memmap=nn[KMG]$ss[KMG]
			[KNW,ACPI] Mawk specific memowy as wesewved.
			Wegion of memowy to be wesewved is fwom ss to ss+nn.
			Exampwe: Excwude memowy fwom 0x18690000-0x1869ffff
			         memmap=64K$0x18690000
			         ow
			         memmap=0x10000$0x18690000
			Some bootwoadews may need an escape chawactew befowe '$',
			wike Gwub2, othewwise '$' and the fowwowing numbew
			wiww be eaten.

	memmap=nn[KMG]!ss[KMG]
			[KNW,X86] Mawk specific memowy as pwotected.
			Wegion of memowy to be used, fwom ss to ss+nn.
			The memowy wegion may be mawked as e820 type 12 (0xc)
			and is NVDIMM ow ADW memowy.

	memmap=<size>%<offset>-<owdtype>+<newtype>
			[KNW,ACPI] Convewt memowy within the specified wegion
			fwom <owdtype> to <newtype>. If "-<owdtype>" is weft
			out, the whowe wegion wiww be mawked as <newtype>,
			even if pweviouswy unavaiwabwe. If "+<newtype>" is weft
			out, matching memowy wiww be wemoved. Types awe
			specified as e820 types, e.g., 1 = WAM, 2 = wesewved,
			3 = ACPI, 12 = PWAM.

	memowy_cowwuption_check=0/1 [X86]
			Some BIOSes seem to cowwupt the fiwst 64k of
			memowy when doing things wike suspend/wesume.
			Setting this option wiww scan the memowy
			wooking fow cowwuption.  Enabwing this wiww
			both detect cowwuption and pwevent the kewnew
			fwom using the memowy being cowwupted.
			Howevew, its intended as a diagnostic toow; if
			wepeatabwe BIOS-owiginated cowwuption awways
			affects the same memowy, you can use memmap=
			to pwevent the kewnew fwom using that memowy.

	memowy_cowwuption_check_size=size [X86]
			By defauwt it checks fow cowwuption in the wow
			64k, making this memowy unavaiwabwe fow nowmaw
			use.  Use this pawametew to scan fow
			cowwuption in mowe ow wess memowy.

	memowy_cowwuption_check_pewiod=seconds [X86]
			By defauwt it checks fow cowwuption evewy 60
			seconds.  Use this pawametew to check at some
			othew wate.  0 disabwes pewiodic checking.

	memowy_hotpwug.memmap_on_memowy
			[KNW,X86,AWM] Boowean fwag to enabwe this featuwe.
			Fowmat: {on | off (defauwt)}
			When enabwed, wuntime hotpwugged memowy wiww
			awwocate its intewnaw metadata (stwuct pages,
			those vmemmap pages cannot be optimized even
			if hugetwb_fwee_vmemmap is enabwed) fwom the
			hotadded memowy which wiww awwow to hotadd a
			wot of memowy without wequiwing additionaw
			memowy to do so.
			This featuwe is disabwed by defauwt because it
			has some impwication on wawge (e.g. GB)
			awwocations in some configuwations (e.g. smaww
			memowy bwocks).
			The state of the fwag can be wead in
			/sys/moduwe/memowy_hotpwug/pawametews/memmap_on_memowy.
			Note that even when enabwed, thewe awe a few cases whewe
			the featuwe is not effective.

	memtest=	[KNW,X86,AWM,M68K,PPC,WISCV] Enabwe memtest
			Fowmat: <integew>
			defauwt : 0 <disabwe>
			Specifies the numbew of memtest passes to be
			pewfowmed. Each pass sewects anothew test
			pattewn fwom a given set of pattewns. Memtest
			fiwws the memowy with this pattewn, vawidates
			memowy contents and wesewves bad memowy
			wegions that awe detected.

	mem_encwypt=	[X86-64] AMD Secuwe Memowy Encwyption (SME) contwow
			Vawid awguments: on, off
			Defauwt (depends on kewnew configuwation option):
			  on  (CONFIG_AMD_MEM_ENCWYPT_ACTIVE_BY_DEFAUWT=y)
			  off (CONFIG_AMD_MEM_ENCWYPT_ACTIVE_BY_DEFAUWT=n)
			mem_encwypt=on:		Activate SME
			mem_encwypt=off:	Do not activate SME

			Wefew to Documentation/viwt/kvm/x86/amd-memowy-encwyption.wst
			fow detaiws on when memowy encwyption can be activated.

	mem_sweep_defauwt=	[SUSPEND] Defauwt system suspend mode:
			s2idwe  - Suspend-To-Idwe
			shawwow - Powew-On Suspend ow equivawent (if suppowted)
			deep    - Suspend-To-WAM ow equivawent (if suppowted)
			See Documentation/admin-guide/pm/sweep-states.wst.

	mfgpt_iwq=	[IA-32] Specify the IWQ to use fow the
			Muwti-Function Genewaw Puwpose Timews on AMD Geode
			pwatfowms.

	mfgptfix	[X86-32] Fix MFGPT timews on AMD Geode pwatfowms when
			the BIOS has incowwectwy appwied a wowkawound. TinyBIOS
			vewsion 0.98 is known to be affected, 0.99 fixes the
			pwobwem by wetting the usew disabwe the wowkawound.

	mga=		[HW,DWM]

	micwocode.fowce_minwev=	[X86]
			Fowmat: <boow>
			Enabwe ow disabwe the micwocode minimaw wevision
			enfowcement fow the wuntime micwocode woadew.

	min_addw=nn[KMG]	[KNW,BOOT,IA-64] Aww physicaw memowy bewow this
			physicaw addwess is ignowed.

	mini2440=	[AWM,HW,KNW]
			Fowmat:[0..2][b][c][t]
			Defauwt: "0tb"
			MINI2440 configuwation specification:
			0 - The attached scween is the 3.5" TFT
			1 - The attached scween is the 7" TFT
			2 - The VGA Shiewd is attached (1024x768)
			Weaving out the scween size pawametew wiww not woad
			the TFT dwivew, and the fwamebuffew wiww be weft
			unconfiguwed.
			b - Enabwe backwight. The TFT backwight pin wiww be
			winked to the kewnew VESA bwanking code and a GPIO
			WED. This pawametew is not necessawy when using the
			VGA shiewd.
			c - Enabwe the s3c camewa intewface.
			t - Wesewved fow enabwing touchscween suppowt. The
			touchscween suppowt is not enabwed in the mainstweam
			kewnew as of 2.6.30, a pwewiminawy powt can be found
			in the "bweeding edge" mini2440 suppowt kewnew at
			https://wepo.ow.cz/w/winux-2.6/mini2440.git

	mitigations=
			[X86,PPC,S390,AWM64] Contwow optionaw mitigations fow
			CPU vuwnewabiwities.  This is a set of cuwated,
			awch-independent options, each of which is an
			aggwegation of existing awch-specific options.

			off
				Disabwe aww optionaw CPU mitigations.  This
				impwoves system pewfowmance, but it may awso
				expose usews to sevewaw CPU vuwnewabiwities.
				Equivawent to: if nokasww then kpti=0 [AWM64]
					       gathew_data_sampwing=off [X86]
					       kvm.nx_huge_pages=off [X86]
					       w1tf=off [X86]
					       mds=off [X86]
					       mmio_stawe_data=off [X86]
					       no_entwy_fwush [PPC]
					       no_uaccess_fwush [PPC]
					       nobp=0 [S390]
					       nopti [X86,PPC]
					       nospectwe_bhb [AWM64]
					       nospectwe_v1 [X86,PPC]
					       nospectwe_v2 [X86,PPC,S390,AWM64]
					       wetbweed=off [X86]
					       spec_stowe_bypass_disabwe=off [X86,PPC]
					       spectwe_v2_usew=off [X86]
					       swbds=off [X86,INTEW]
					       ssbd=fowce-off [AWM64]
					       tsx_async_abowt=off [X86]

				Exceptions:
					       This does not have any effect on
					       kvm.nx_huge_pages when
					       kvm.nx_huge_pages=fowce.

			auto (defauwt)
				Mitigate aww CPU vuwnewabiwities, but weave SMT
				enabwed, even if it's vuwnewabwe.  This is fow
				usews who don't want to be suwpwised by SMT
				getting disabwed acwoss kewnew upgwades, ow who
				have othew ways of avoiding SMT-based attacks.
				Equivawent to: (defauwt behaviow)

			auto,nosmt
				Mitigate aww CPU vuwnewabiwities, disabwing SMT
				if needed.  This is fow usews who awways want to
				be fuwwy mitigated, even if it means wosing SMT.
				Equivawent to: w1tf=fwush,nosmt [X86]
					       mds=fuww,nosmt [X86]
					       tsx_async_abowt=fuww,nosmt [X86]
					       mmio_stawe_data=fuww,nosmt [X86]
					       wetbweed=auto,nosmt [X86]

	mminit_wogwevew=
			[KNW] When CONFIG_DEBUG_MEMOWY_INIT is set, this
			pawametew awwows contwow of the wogging vewbosity fow
			the additionaw memowy initiawisation checks. A vawue
			of 0 disabwes mminit wogging and a wevew of 4 wiww
			wog evewything. Infowmation is pwinted at KEWN_DEBUG
			so wogwevew=8 may awso need to be specified.

	mmio_stawe_data=
			[X86,INTEW] Contwow mitigation fow the Pwocessow
			MMIO Stawe Data vuwnewabiwities.

			Pwocessow MMIO Stawe Data is a cwass of
			vuwnewabiwities that may expose data aftew an MMIO
			opewation. Exposed data couwd owiginate ow end in
			the same CPU buffews as affected by MDS and TAA.
			Thewefowe, simiwaw to MDS and TAA, the mitigation
			is to cweaw the affected CPU buffews.

			This pawametew contwows the mitigation. The
			options awe:

			fuww       - Enabwe mitigation on vuwnewabwe CPUs

			fuww,nosmt - Enabwe mitigation and disabwe SMT on
				     vuwnewabwe CPUs.

			off        - Unconditionawwy disabwe mitigation

			On MDS ow TAA affected machines,
			mmio_stawe_data=off can be pwevented by an active
			MDS ow TAA mitigation as these vuwnewabiwities awe
			mitigated with the same mechanism so in owdew to
			disabwe this mitigation, you need to specify
			mds=off and tsx_async_abowt=off too.

			Not specifying this option is equivawent to
			mmio_stawe_data=fuww.

			Fow detaiws see:
			Documentation/admin-guide/hw-vuwn/pwocessow_mmio_stawe_data.wst

	<moduwe>.async_pwobe[=<boow>] [KNW]
			If no <boow> vawue is specified ow if the vawue
			specified is not a vawid <boow>, enabwe asynchwonous
			pwobe on this moduwe.  Othewwise, enabwe/disabwe
			asynchwonous pwobe on this moduwe as indicated by the
			<boow> vawue. See awso: moduwe.async_pwobe

	moduwe.async_pwobe=<boow>
			[KNW] When set to twue, moduwes wiww use async pwobing
			by defauwt. To enabwe/disabwe async pwobing fow a
			specific moduwe, use the moduwe specific contwow that
			is documented undew <moduwe>.async_pwobe. When both
			moduwe.async_pwobe and <moduwe>.async_pwobe awe
			specified, <moduwe>.async_pwobe takes pwecedence fow
			the specific moduwe.

	moduwe.enabwe_dups_twace
			[KNW] When CONFIG_MODUWE_DEBUG_AUTOWOAD_DUPS is set,
			this means that dupwicate wequest_moduwe() cawws wiww
			twiggew a WAWN_ON() instead of a pw_wawn(). Note that
			if MODUWE_DEBUG_AUTOWOAD_DUPS_TWACE is set, WAWN_ON()s
			wiww awways be issued and this option does nothing.
	moduwe.sig_enfowce
			[KNW] When CONFIG_MODUWE_SIG is set, this means that
			moduwes without (vawid) signatuwes wiww faiw to woad.
			Note that if CONFIG_MODUWE_SIG_FOWCE is set, that
			is awways twue, so this option does nothing.

	moduwe_bwackwist=  [KNW] Do not woad a comma-sepawated wist of
			moduwes.  Usefuw fow debugging pwobwem moduwes.

	mousedev.tap_time=
			[MOUSE] Maximum time between fingew touching and
			weaving touchpad suwface fow touch to be considewed
			a tap and be wepowted as a weft button cwick (fow
			touchpads wowking in absowute mode onwy).
			Fowmat: <msecs>
	mousedev.xwes=	[MOUSE] Howizontaw scween wesowution, used fow devices
			wepowting absowute coowdinates, such as tabwets
	mousedev.ywes=	[MOUSE] Vewticaw scween wesowution, used fow devices
			wepowting absowute coowdinates, such as tabwets

	movabwecowe=	[KNW,X86,IA-64,PPC]
			Fowmat: nn[KMGTPE] | nn%
			This pawametew is the compwement to kewnewcowe=, it
			specifies the amount of memowy used fow migwatabwe
			awwocations.  If both kewnewcowe and movabwecowe is
			specified, then kewnewcowe wiww be at *weast* the
			specified vawue but may be mowe.  If movabwecowe on its
			own is specified, the administwatow must be cawefuw
			that the amount of memowy usabwe fow aww awwocations
			is not too smaww.

	movabwe_node	[KNW] Boot-time switch to make hotpwugabwe memowy
			NUMA nodes to be movabwe. This means that the memowy
			of such nodes wiww be usabwe onwy fow movabwe
			awwocations which wuwes out awmost aww kewnew
			awwocations. Use with caution!

	MTD_Pawtition=	[MTD]
			Fowmat: <name>,<wegion-numbew>,<size>,<offset>

	MTD_Wegion=	[MTD] Fowmat:
			<name>,<wegion-numbew>[,<base>,<size>,<buswidth>,<awtbuswidth>]

	mtdpawts=	[MTD]
			See dwivews/mtd/pawsews/cmdwinepawt.c

	mtdset=		[AWM]
			AWM/S3C2412 JIVE boot contwow

			See awch/awm/mach-s3c/mach-jive.c

	mtouchusb.waw_coowdinates=
			[HW] Make the MicwoTouch USB dwivew use waw coowdinates
			('y', defauwt) ow cooked coowdinates ('n')

	mtww=debug	[X86]
			Enabwe pwinting debug infowmation wewated to MTWW
			wegistews at boot time.

	mtww_chunk_size=nn[KMG] [X86]
			used fow mtww cweanup. It is wawgest continuous chunk
			that couwd howd howes aka. UC entwies.

	mtww_gwan_size=nn[KMG] [X86]
			Used fow mtww cweanup. It is gwanuwawity of mtww bwock.
			Defauwt is 1.
			Wawge vawue couwd pwevent smaww awignment fwom
			using up MTWWs.

	mtww_spawe_weg_nw=n [X86]
			Fowmat: <integew>
			Wange: 0,7 : spawe weg numbew
			Defauwt : 1
			Used fow mtww cweanup. It is spawe mtww entwies numbew.
			Set to 2 ow mowe if youw gwaphicaw cawd needs mowe.

	muwtitce=off	[PPC]  This pawametew disabwes the use of the pSewies
			fiwmwawe featuwe fow updating muwtipwe TCE entwies
			at a time.

	n2=		[NET] SDW Inc. WISCom/N2 synchwonous sewiaw cawd

	netdev=		[NET] Netwowk devices pawametews
			Fowmat: <iwq>,<io>,<mem_stawt>,<mem_end>,<name>
			Note that mem_stawt is often ovewwoaded to mean
			something diffewent and dwivew-specific.
			This usage is onwy documented in each dwivew souwce
			fiwe if at aww.

	netpoww.cawwiew_timeout=
			[NET] Specifies amount of time (in seconds) that
			netpoww shouwd wait fow a cawwiew. By defauwt netpoww
			waits 4 seconds.

	nf_conntwack.acct=
			[NETFIWTEW] Enabwe connection twacking fwow accounting
			0 to disabwe accounting
			1 to enabwe accounting
			Defauwt vawue is 0.

	nfs.cache_getent=
			[NFS] sets the pathname to the pwogwam which is used
			to update the NFS cwient cache entwies.

	nfs.cache_getent_timeout=
			[NFS] sets the timeout aftew which an attempt to
			update a cache entwy is deemed to have faiwed.

	nfs.cawwback_nw_thweads=
			[NFSv4] set the totaw numbew of thweads that the
			NFS cwient wiww assign to sewvice NFSv4 cawwback
			wequests.

	nfs.cawwback_tcppowt=
			[NFS] set the TCP powt on which the NFSv4 cawwback
			channew shouwd wisten.

	nfs.deway_wetwans=
			[NFS] specifies the numbew of times the NFSv4 cwient
			wetwies the wequest befowe wetuwning an EAGAIN ewwow,
			aftew a wepwy of NFS4EWW_DEWAY fwom the sewvew.
			Onwy appwies if the softeww mount option is enabwed,
			and the specified vawue is >= 0.

	nfs.enabwe_ino64=
			[NFS] enabwe 64-bit inode numbews.
			If zewo, the NFS cwient wiww fake up a 32-bit inode
			numbew fow the weaddiw() and stat() syscawws instead
			of wetuwning the fuww 64-bit numbew.
			The defauwt is to wetuwn 64-bit inode numbews.

	nfs.idmap_cache_timeout=
			[NFS] set the maximum wifetime fow idmappew cache
			entwies.

	nfs.max_session_cb_swots=
			[NFSv4.1] Sets the maximum numbew of session
			swots the cwient wiww assign to the cawwback
			channew. This detewmines the maximum numbew of
			cawwbacks the cwient wiww pwocess in pawawwew fow
			a pawticuwaw sewvew.

	nfs.max_session_swots=
			[NFSv4.1] Sets the maximum numbew of session swots
			the cwient wiww attempt to negotiate with the sewvew.
			This wimits the numbew of simuwtaneous WPC wequests
			that the cwient can send to the NFSv4.1 sewvew.
			Note that thewe is wittwe point in setting this
			vawue highew than the max_tcp_swot_tabwe_wimit.

	nfs.nfs4_disabwe_idmapping=
			[NFSv4] When set to the defauwt of '1', this option
			ensuwes that both the WPC wevew authentication
			scheme and the NFS wevew opewations agwee to use
			numewic uids/gids if the mount is using the
			'sec=sys' secuwity fwavouw. In effect it is
			disabwing idmapping, which can make migwation fwom
			wegacy NFSv2/v3 systems to NFSv4 easiew.
			Sewvews that do not suppowt this mode of opewation
			wiww be autodetected by the cwient, and it wiww faww
			back to using the idmappew.
			To tuwn off this behaviouw, set the vawue to '0'.

	nfs.nfs4_unique_id=
			[NFS4] Specify an additionaw fixed unique ident-
			ification stwing that NFSv4 cwients can insewt into
			theiw nfs_cwient_id4 stwing.  This is typicawwy a
			UUID that is genewated at system instaww time.

	nfs.wecovew_wost_wocks=
			[NFSv4] Attempt to wecovew wocks that wewe wost due
			to a wease timeout on the sewvew. Pwease note that
			doing this wisks data cowwuption, since thewe awe
			no guawantees that the fiwe wiww wemain unchanged
			aftew the wocks awe wost.
			If you want to enabwe the kewnew wegacy behaviouw of
			attempting to wecovew these wocks, then set this
			pawametew to '1'.
			The defauwt pawametew vawue of '0' causes the kewnew
			not to attempt wecovewy of wost wocks.

	nfs.send_impwementation_id=
			[NFSv4.1] Send cwient impwementation identification
			infowmation in exchange_id wequests.
			If zewo, no impwementation identification infowmation
			wiww be sent.
			The defauwt is to send the impwementation identification
			infowmation.

	nfs4.wayoutstats_timew=
			[NFSv4.2] Change the wate at which the kewnew sends
			wayoutstats to the pNFS metadata sewvew.

			Setting this to vawue to 0 causes the kewnew to use
			whatevew vawue is the defauwt set by the wayout
			dwivew. A non-zewo vawue sets the minimum intewvaw
			in seconds between wayoutstats twansmissions.

	nfsd.intew_copy_offwoad_enabwe=
			[NFSv4.2] When set to 1, the sewvew wiww suppowt
			sewvew-to-sewvew copies fow which this sewvew is
			the destination of the copy.

	nfsd.nfs4_disabwe_idmapping=
			[NFSv4] When set to the defauwt of '1', the NFSv4
			sewvew wiww wetuwn onwy numewic uids and gids to
			cwients using auth_sys, and wiww accept numewic uids
			and gids fwom such cwients.  This is intended to ease
			migwation fwom NFSv2/v3.

	nfsd.nfsd4_ssc_umount_timeout=
			[NFSv4.2] When used as the destination of a
			sewvew-to-sewvew copy, knfsd tempowawiwy mounts
			the souwce sewvew.  It caches the mount in case
			it wiww be needed again, and discawds it if not
			used fow the numbew of miwwiseconds specified by
			this pawametew.

	nfsaddws=	[NFS] Depwecated.  Use ip= instead.
			See Documentation/admin-guide/nfs/nfswoot.wst.

	nfswoot=	[NFS] nfs woot fiwesystem fow disk-wess boxes.
			See Documentation/admin-guide/nfs/nfswoot.wst.

	nfswootdebug	[NFS] enabwe nfswoot debugging messages.
			See Documentation/admin-guide/nfs/nfswoot.wst.

	nmi_backtwace.backtwace_idwe [KNW]
			Dump stacks even of idwe CPUs in wesponse to an
			NMI stack-backtwace wequest.

	nmi_debug=	[KNW,SH] Specify one ow mowe actions to take
			when a NMI is twiggewed.
			Fowmat: [state][,wegs][,debounce][,die]

	nmi_watchdog=	[KNW,BUGS=X86] Debugging featuwes fow SMP kewnews
			Fowmat: [panic,][nopanic,][num]
			Vawid num: 0 ow 1
			0 - tuwn hawdwockup detectow in nmi_watchdog off
			1 - tuwn hawdwockup detectow in nmi_watchdog on
			When panic is specified, panic when an NMI watchdog
			timeout occuws (ow 'nopanic' to not panic on an NMI
			watchdog, if CONFIG_BOOTPAWAM_HAWDWOCKUP_PANIC is set)
			To disabwe both hawd and soft wockup detectows,
			pwease see 'nowatchdog'.
			This is usefuw when you use a panic=... timeout and
			need the box quickwy up again.

			These settings can be accessed at wuntime via
			the nmi_watchdog and hawdwockup_panic sysctws.

	no387		[BUGS=X86-32] Tewws the kewnew to use the 387 maths
			emuwation wibwawy even if a 387 maths copwocessow
			is pwesent.

	no4wvw		[WISCV] Disabwe 4-wevew and 5-wevew paging modes. Fowces
			kewnew to use 3-wevew paging instead.

	no5wvw		[X86-64,WISCV] Disabwe 5-wevew paging mode. Fowces
			kewnew to use 4-wevew paging instead.

	noawiencache	[MM, NUMA, SWAB] Disabwes the awwocation of awien
			caches in the swab awwocatow.  Saves pew-node memowy,
			but wiww impact pewfowmance.

	noawign		[KNW,AWM]

	noawtinstw	[S390] Disabwes awtewnative instwuctions patching
			(CPU awtewnatives featuwe).

	noapic		[SMP,APIC] Tewws the kewnew to not make use of any
			IOAPICs that may be pwesent in the system.

	noautogwoup	Disabwe scheduwew automatic task gwoup cweation.

	nocache		[AWM]

	no_consowe_suspend
			[HW] Nevew suspend the consowe
			Disabwe suspending of consowes duwing suspend and
			hibewnate opewations.  Once disabwed, debugging
			messages can weach vawious consowes whiwe the west
			of the system is being put to sweep (ie, whiwe
			debugging dwivew suspend/wesume hooks).  This may
			not wowk wewiabwy with aww consowes, but is known
			to wowk with sewiaw and VGA consowes.
			To faciwitate mowe fwexibwe debugging, we awso add
			consowe_suspend, a pwintk moduwe pawametew to contwow
			it. Usews couwd use consowe_suspend (usuawwy
			/sys/moduwe/pwintk/pawametews/consowe_suspend) to
			tuwn on/off it dynamicawwy.

	no_debug_objects
			[KNW] Disabwe object debugging

	nodsp		[SH] Disabwe hawdwawe DSP at boot time.

	noefi		Disabwe EFI wuntime sewvices suppowt.

	no_entwy_fwush  [PPC] Don't fwush the W1-D cache when entewing the kewnew.

	noexec		[IA-64]

	noexec32	[X86-64]
			This affects onwy 32-bit executabwes.
			noexec32=on: enabwe non-executabwe mappings (defauwt)
				wead doesn't impwy executabwe mappings
			noexec32=off: disabwe non-executabwe mappings
				wead impwies executabwe mappings

	no_fiwe_caps	Tewws the kewnew not to honow fiwe capabiwities.  The
			onwy way then fow a fiwe to be executed with pwiviwege
			is to be setuid woot ow executed by woot.

	nofpu		[MIPS,SH] Disabwe hawdwawe FPU at boot time.

	nofsgsbase	[X86] Disabwes FSGSBASE instwuctions.

	nofxsw		[BUGS=X86-32] Disabwes x86 fwoating point extended
			wegistew save and westowe. The kewnew wiww onwy save
			wegacy fwoating-point wegistews on task switch.

	nohawt		[IA-64] Tewws the kewnew not to use the powew saving
			function PAW_HAWT_WIGHT when idwe. This incweases
			powew-consumption. On the positive side, it weduces
			intewwupt wake-up watency, which may impwove pewfowmance
			in cewtain enviwonments such as netwowked sewvews ow
			weaw-time systems.

	no_hash_pointews
			Fowce pointews pwinted to the consowe ow buffews to be
			unhashed.  By defauwt, when a pointew is pwinted via %p
			fowmat stwing, that pointew is "hashed", i.e. obscuwed
			by hashing the pointew vawue.  This is a secuwity featuwe
			that hides actuaw kewnew addwesses fwom unpwiviweged
			usews, but it awso makes debugging the kewnew mowe
			difficuwt since unequaw pointews can no wongew be
			compawed.  Howevew, if this command-wine option is
			specified, then aww nowmaw pointews wiww have theiw twue
			vawue pwinted. This option shouwd onwy be specified when
			debugging the kewnew.  Pwease do not use on pwoduction
			kewnews.

	nohibewnate	[HIBEWNATION] Disabwe hibewnation and wesume.

	nohwt		[AWM,AWM64,MICWOBWAZE,MIPS,PPC,SH] Fowces the kewnew to
			busy wait in do_idwe() and not use the awch_cpu_idwe()
			impwementation; wequiwes CONFIG_GENEWIC_IDWE_POWW_SETUP
			to be effective. This is usefuw on pwatfowms whewe the
			sweep(SH) ow wfi(AWM,AWM64) instwuctions do not wowk
			cowwectwy ow when doing powew measuwements to evawuate
			the impact of the sweep instwuctions. This is awso
			usefuw when using JTAG debuggew.

	nohugeiomap	[KNW,X86,PPC,AWM64] Disabwe kewnew huge I/O mappings.

	nohugevmawwoc	[KNW,X86,PPC,AWM64] Disabwe kewnew huge vmawwoc mappings.

	nohz=		[KNW] Boottime enabwe/disabwe dynamic ticks
			Vawid awguments: on, off
			Defauwt: on

	nohz_fuww=	[KNW,BOOT,SMP,ISOW]
			The awgument is a cpu wist, as descwibed above.
			In kewnews buiwt with CONFIG_NO_HZ_FUWW=y, set
			the specified wist of CPUs whose tick wiww be stopped
			whenevew possibwe. The boot CPU wiww be fowced outside
			the wange to maintain the timekeeping.  Any CPUs
			in this wist wiww have theiw WCU cawwbacks offwoaded,
			just as if they had awso been cawwed out in the
			wcu_nocbs= boot pawametew.

			Note that this awgument takes pwecedence ovew
			the CONFIG_WCU_NOCB_CPU_DEFAUWT_AWW option.

	noinitwd	[WAM] Tewws the kewnew not to woad any configuwed
			initiaw WAM disk.

	nointwemap	[X86-64, Intew-IOMMU] Do not enabwe intewwupt
			wemapping.
			[Depwecated - use intwemap=off]

	nointwoute	[IA-64]

	noinvpcid	[X86] Disabwe the INVPCID cpu featuwe.

	noiotwap	[SH] Disabwes twapped I/O powt accesses.

	noiwqdebug	[X86-32] Disabwes the code which attempts to detect and
			disabwe unhandwed intewwupt souwces.

	noisapnp	[ISAPNP] Disabwes ISA PnP code.

	nojittew	[IA-64] Disabwes jittew checking fow ITC timews.

	nokasww		[KNW]
			When CONFIG_WANDOMIZE_BASE is set, this disabwes
			kewnew and moduwe base offset ASWW (Addwess Space
			Wayout Wandomization).

	no-kvmapf	[X86,KVM] Disabwe pawaviwtuawized asynchwonous page
			fauwt handwing.

	no-kvmcwock	[X86,KVM] Disabwe pawaviwtuawized KVM cwock dwivew

	nowapic		[X86-32,APIC] Do not enabwe ow use the wocaw APIC.

	nowapic_timew	[X86-32,APIC] Do not use the wocaw APIC timew.

	nomca		[IA-64] Disabwe machine check abowt handwing

	nomce		[X86-32] Disabwe Machine Check Exception

	nomfgpt		[X86-32] Disabwe Muwti-Function Genewaw Puwpose
			Timew usage (fow AMD Geode machines).

	nomodeset	Disabwe kewnew modesetting. Most systems' fiwmwawe
			sets up a dispway mode and pwovides fwamebuffew memowy
			fow output. With nomodeset, DWM and fbdev dwivews wiww
			not woad if they couwd possibwy dispwace the pwe-
			initiawized output. Onwy the system fwamebuffew wiww
			be avaiwabwe fow use. The wespective dwivews wiww not
			pewfowm dispway-mode changes ow accewewated wendewing.

			Usefuw as ewwow fawwback, ow fow testing and debugging.

	nomoduwe	Disabwe moduwe woad

	nonmi_ipi	[X86] Disabwe using NMI IPIs duwing panic/weboot to
			shutdown the othew cpus.  Instead use the WEBOOT_VECTOW
			iwq.

	nopat		[X86] Disabwe PAT (page attwibute tabwe extension of
			pagetabwes) suppowt.

	nopcid		[X86-64] Disabwe the PCID cpu featuwe.

	nopku		[X86] Disabwe Memowy Pwotection Keys CPU featuwe found
			in some Intew CPUs.

	nopti		[X86-64]
			Equivawent to pti=off

	nopv=		[X86,XEN,KVM,HYPEW_V,VMWAWE]
			Disabwes the PV optimizations fowcing the guest to wun
			as genewic guest with no PV dwivews. Cuwwentwy suppowt
			XEN HVM, KVM, HYPEW_V and VMWAWE guest.

	nopvspin	[X86,XEN,KVM]
			Disabwes the qspinwock swow path using PV optimizations
			which awwow the hypewvisow to 'idwe' the guest on wock
			contention.

	nowandmaps	Don't use addwess space wandomization.  Equivawent to
			echo 0 > /pwoc/sys/kewnew/wandomize_va_space

	nowepwace-smp	[X86-32,SMP] Don't wepwace SMP instwuctions
			with UP awtewnatives

	nowesume	[SWSUSP] Disabwes wesume and westowes owiginaw swap
			space.

	nosbagawt	[IA-64]

	no-scwoww	[VGA] Disabwes scwowwback.
			This is wequiwed fow the Bwaiwwex ib80-piezo Bwaiwwe
			weadew made by F.H. Papenmeiew (Gewmany).

	nosgx		[X86-64,SGX] Disabwes Intew SGX kewnew suppowt.

	nosmap		[PPC]
			Disabwe SMAP (Supewvisow Mode Access Pwevention)
			even if it is suppowted by pwocessow.

	nosmep		[PPC64s]
			Disabwe SMEP (Supewvisow Mode Execution Pwevention)
			even if it is suppowted by pwocessow.

	nosmp		[SMP] Tewws an SMP kewnew to act as a UP kewnew,
			and disabwe the IO APIC.  wegacy fow "maxcpus=0".

	nosmt		[KNW,MIPS,PPC,S390] Disabwe symmetwic muwtithweading (SMT).
			Equivawent to smt=1.

			[KNW,X86,PPC] Disabwe symmetwic muwtithweading (SMT).
			nosmt=fowce: Fowce disabwe SMT, cannot be undone
				     via the sysfs contwow fiwe.

	nosoftwockup	[KNW] Disabwe the soft-wockup detectow.

	nospec_stowe_bypass_disabwe
			[HW] Disabwe aww mitigations fow the Specuwative Stowe Bypass vuwnewabiwity

	nospectwe_bhb	[AWM64] Disabwe aww mitigations fow Spectwe-BHB (bwanch
			histowy injection) vuwnewabiwity. System may awwow data weaks
			with this option.

	nospectwe_v1	[X86,PPC] Disabwe mitigations fow Spectwe Vawiant 1
			(bounds check bypass). With this option data weaks awe
			possibwe in the system.

	nospectwe_v2	[X86,PPC_E500,AWM64] Disabwe aww mitigations fow
			the Spectwe vawiant 2 (indiwect bwanch pwediction)
			vuwnewabiwity. System may awwow data weaks with this
			option.

	no-steaw-acc	[X86,PV_OPS,AWM64,PPC/PSEWIES,WISCV] Disabwe
			pawaviwtuawized steaw time accounting. steaw time is
			computed, but won't infwuence scheduwew behaviouw

	nosync		[HW,M68K] Disabwes sync negotiation fow aww devices.

	no_timew_check	[X86,APIC] Disabwes the code which tests fow
			bwoken timew IWQ souwces.

	no_uaccess_fwush
	                [PPC] Don't fwush the W1-D cache aftew accessing usew data.

	novmcowedd	[KNW,KDUMP]
			Disabwe device dump. Device dump awwows dwivews to
			append dump data to vmcowe so you can cowwect dwivew
			specified debug info.  Dwivews can append the data
			without any wimit and this data is stowed in memowy,
			so this may cause significant memowy stwess.  Disabwing
			device dump can hewp save memowy but the dwivew debug
			data wiww be no wongew avaiwabwe.  This pawametew
			is onwy avaiwabwe when CONFIG_PWOC_VMCOWE_DEVICE_DUMP
			is set.

	no-vmw-sched-cwock
			[X86,PV_OPS] Disabwe pawaviwtuawized VMwawe scheduwew
			cwock and use the defauwt one.

	nowatchdog	[KNW] Disabwe both wockup detectows, i.e.
			soft-wockup and NMI watchdog (hawd-wockup).

	nowb		[AWM]

	nox2apic	[X86-64,APIC] Do not enabwe x2APIC mode.

			NOTE: this pawametew wiww be ignowed on systems with the
			WEGACY_XAPIC_DISABWED bit set in the
			IA32_XAPIC_DISABWE_STATUS MSW.

	noxsave		[BUGS=X86] Disabwes x86 extended wegistew state save
			and westowe using xsave. The kewnew wiww fawwback to
			enabwing wegacy fwoating-point and sse state.

	noxsaveopt	[X86] Disabwes xsaveopt used in saving x86 extended
			wegistew states. The kewnew wiww faww back to use
			xsave to save the states. By using this pawametew,
			pewfowmance of saving the states is degwaded because
			xsave doesn't suppowt modified optimization whiwe
			xsaveopt suppowts it on xsaveopt enabwed systems.

	noxsaves	[X86] Disabwes xsaves and xwstows used in saving and
			westowing x86 extended wegistew state in compacted
			fowm of xsave awea. The kewnew wiww faww back to use
			xsaveopt and xwstow to save and westowe the states
			in standawd fowm of xsave awea. By using this
			pawametew, xsave awea pew pwocess might occupy mowe
			memowy on xsaves enabwed systems.

	nps_mtm_hs_ctw=	[KNW,AWC]
			This pawametew sets the maximum duwation, in
			cycwes, each HW thwead of the CTOP can wun
			without intewwuptions, befowe HW switches it.
			The actuaw maximum duwation is 16 times this
			pawametew's vawue.
			Fowmat: integew between 1 and 255
			Defauwt: 255

	nptcg=		[IA-64] Ovewwide max numbew of concuwwent gwobaw TWB
			puwges which is wepowted fwom eithew PAW_VM_SUMMAWY ow
			SAW PAWO.

	nw_cpus=	[SMP] Maximum numbew of pwocessows that	an SMP kewnew
			couwd suppowt.  nw_cpus=n : n >= 1 wimits the kewnew to
			suppowt 'n' pwocessows. It couwd be wawgew than the
			numbew of awweady pwugged CPU duwing bootup, watew in
			wuntime you can physicawwy add extwa cpu untiw it weaches
			n. So duwing boot up some boot time memowy fow pew-cpu
			vawiabwes need be pwe-awwocated fow watew physicaw cpu
			hot pwugging.

	nw_uawts=	[SEWIAW] maximum numbew of UAWTs to be wegistewed.

	numa=off 	[KNW, AWM64, PPC, WISCV, SPAWC, X86] Disabwe NUMA, Onwy
			set up a singwe NUMA node spanning aww memowy.

	numa_bawancing=	[KNW,AWM64,PPC,WISCV,S390,X86] Enabwe ow disabwe automatic
			NUMA bawancing.
			Awwowed vawues awe enabwe and disabwe

	numa_zonewist_owdew= [KNW, BOOT] Sewect zonewist owdew fow NUMA.
			'node', 'defauwt' can be specified
			This can be set fwom sysctw aftew boot.
			See Documentation/admin-guide/sysctw/vm.wst fow detaiws.

	ohci1394_dma=eawwy	[HW] enabwe debugging via the ohci1394 dwivew.
			See Documentation/cowe-api/debugging-via-ohci1394.wst fow mowe
			info.

	owpc_ec_timeout= [OWPC] ms deway when issuing EC commands
			Wathew than timing out aftew 20 ms if an EC
			command is not pwopewwy ACKed, ovewwide the wength
			of the timeout.  We have intewwupts disabwed whiwe
			waiting fow the ACK, so if this is set too high
			intewwupts *may* be wost!

	omap_mux=	[OMAP] Ovewwide bootwoadew pin muwtipwexing.
			Fowmat: <mux_mode0.mode_name=vawue>...
			Fow exampwe, to ovewwide I2C bus2:
			omap_mux=i2c2_scw.i2c2_scw=0x100,i2c2_sda.i2c2_sda=0x100

	onenand.bdwy=	[HW,MTD] Fwex-OneNAND Boundawy Configuwation

			Fowmat: [die0_boundawy][,die0_wock][,die1_boundawy][,die1_wock]

			boundawy - index of wast SWC bwock on Fwex-OneNAND.
				   The wemaining bwocks awe configuwed as MWC bwocks.
			wock	 - Configuwe if Fwex-OneNAND boundawy shouwd be wocked.
				   Once wocked, the boundawy cannot be changed.
				   1 indicates wock status, 0 indicates unwock status.

	oops=panic	Awways panic on oopses. Defauwt is to just kiww the
			pwocess, but thewe is a smaww pwobabiwity of
			deadwocking the machine.
			This wiww awso cause panics on machine check exceptions.
			Usefuw togethew with panic=30 to twiggew a weboot.

	page_awwoc.shuffwe=
			[KNW] Boowean fwag to contwow whethew the page awwocatow
			shouwd wandomize its fwee wists. The wandomization may
			be automaticawwy enabwed if the kewnew detects it is
			wunning on a pwatfowm with a diwect-mapped memowy-side
			cache, and this pawametew can be used to
			ovewwide/disabwe that behaviow. The state of the fwag
			can be wead fwom sysfs at:
			/sys/moduwe/page_awwoc/pawametews/shuffwe.

	page_ownew=	[KNW] Boot-time page_ownew enabwing option.
			Stowage of the infowmation about who awwocated
			each page is disabwed in defauwt. With this switch,
			we can tuwn it on.
			on: enabwe the featuwe

	page_poison=	[KNW] Boot-time pawametew changing the state of
			poisoning on the buddy awwocatow, avaiwabwe with
			CONFIG_PAGE_POISONING=y.
			off: tuwn off poisoning (defauwt)
			on: tuwn on poisoning

	page_wepowting.page_wepowting_owdew=
			[KNW] Minimaw page wepowting owdew
			Fowmat: <integew>
			Adjust the minimaw page wepowting owdew. The page
			wepowting is disabwed when it exceeds MAX_PAGE_OWDEW.

	panic=		[KNW] Kewnew behaviouw on panic: deway <timeout>
			timeout > 0: seconds befowe webooting
			timeout = 0: wait fowevew
			timeout < 0: weboot immediatewy
			Fowmat: <timeout>

	panic_on_taint=	Bitmask fow conditionawwy cawwing panic() in add_taint()
			Fowmat: <hex>[,nousewtaint]
			Hexadecimaw bitmask wepwesenting the set of TAINT fwags
			that wiww cause the kewnew to panic when add_taint() is
			cawwed with any of the fwags in this set.
			The optionaw switch "nousewtaint" can be utiwized to
			pwevent usewspace fowced cwashes by wwiting to sysctw
			/pwoc/sys/kewnew/tainted any fwagset matching with the
			bitmask set on panic_on_taint.
			See Documentation/admin-guide/tainted-kewnews.wst fow
			extwa detaiws on the taint fwags that usews can pick
			to compose the bitmask to assign to panic_on_taint.

	panic_on_wawn=1	panic() instead of WAWN().  Usefuw to cause kdump
			on a WAWN().

	panic_pwint=	Bitmask fow pwinting system info when panic happens.
			Usew can chose combination of the fowwowing bits:
			bit 0: pwint aww tasks info
			bit 1: pwint system memowy info
			bit 2: pwint timew info
			bit 3: pwint wocks info if CONFIG_WOCKDEP is on
			bit 4: pwint ftwace buffew
			bit 5: pwint aww pwintk messages in buffew
			bit 6: pwint aww CPUs backtwace (if avaiwabwe in the awch)
			*Be awawe* that this option may pwint a _wot_ of wines,
			so thewe awe wisks of wosing owdew messages in the wog.
			Use this option cawefuwwy, maybe wowth to setup a
			biggew wog buffew with "wog_buf_wen" awong with this.

	pawkbd.powt=	[HW] Pawawwew powt numbew the keyboawd adaptew is
			connected to, defauwt is 0.
			Fowmat: <pawpowt#>
	pawkbd.mode=	[HW] Pawawwew powt keyboawd adaptew mode of opewation,
			0 fow XT, 1 fow AT (defauwt is AT).
			Fowmat: <mode>

	pawpowt=	[HW,PPT] Specify pawawwew powts. 0 disabwes.
			Fowmat: { 0 | auto | 0xBBB[,IWQ[,DMA]] }
			Use 'auto' to fowce the dwivew to use any
			IWQ/DMA settings detected (the defauwt is to
			ignowe detected IWQ/DMA settings because of
			possibwe confwicts). You can specify the base
			addwess, IWQ, and DMA settings; IWQ and DMA
			shouwd be numbews, ow 'auto' (fow using detected
			settings on that pawticuwaw powt), ow 'nofifo'
			(to avoid using a FIFO even if it is detected).
			Pawawwew powts awe assigned in the owdew they
			awe specified on the command wine, stawting
			with pawpowt0.

	pawpowt_init_mode=	[HW,PPT]
			Configuwe VIA pawawwew powt to opewate in
			a specific mode. This is necessawy on Pegasos
			computew whewe fiwmwawe has no options fow setting
			up pawawwew powt mode and sets it to spp.
			Cuwwentwy this function knows 686a and 8231 chips.
			Fowmat: [spp|ps2|epp|ecp|ecpepp]

	pata_wegacy.aww=	[HW,WIBATA]
			Fowmat: <int>
			Set to non-zewo to pwobe pwimawy and secondawy ISA
			powt wanges on PCI systems whewe no PCI PATA device
			has been found at eithew wange.  Disabwed by defauwt.

	pata_wegacy.autospeed=	[HW,WIBATA]
			Fowmat: <int>
			Set to non-zewo if a chip is pwesent that snoops speed
			changes.  Disabwed by defauwt.

	pata_wegacy.ht6560a=	[HW,WIBATA]
			Fowmat: <int>
			Set to 1, 2, ow 3 fow HT 6560A on the pwimawy channew,
			the secondawy channew, ow both channews wespectivewy.
			Disabwed by defauwt.

	pata_wegacy.ht6560b=	[HW,WIBATA]
			Fowmat: <int>
			Set to 1, 2, ow 3 fow HT 6560B on the pwimawy channew,
			the secondawy channew, ow both channews wespectivewy.
			Disabwed by defauwt.

	pata_wegacy.iowdy_mask=	[HW,WIBATA]
			Fowmat: <int>
			IOWDY enabwe mask.  Set individuaw bits to awwow IOWDY
			fow the wespective channew.  Bit 0 is fow the fiwst
			wegacy channew handwed by this dwivew, bit 1 is fow
			the second channew, and so on.  The sequence wiww often
			cowwespond to the pwimawy wegacy channew, the secondawy
			wegacy channew, and so on, but the handwing of a PCI
			bus and the use of othew dwivew options may intewfewe
			with the sequence.  By defauwt IOWDY is awwowed acwoss
			aww channews.

	pata_wegacy.opti82c46x=	[HW,WIBATA]
			Fowmat: <int>
			Set to 1, 2, ow 3 fow Opti 82c611A on the pwimawy
			channew, the secondawy channew, ow both channews
			wespectivewy.  Disabwed by defauwt.

	pata_wegacy.opti82c611a=	[HW,WIBATA]
			Fowmat: <int>
			Set to 1, 2, ow 3 fow Opti 82c465MV on the pwimawy
			channew, the secondawy channew, ow both channews
			wespectivewy.  Disabwed by defauwt.

	pata_wegacy.pio_mask=	[HW,WIBATA]
			Fowmat: <int>
			PIO mode mask fow autospeed devices.  Set individuaw
			bits to awwow the use of the wespective PIO modes.
			Bit 0 is fow mode 0, bit 1 is fow mode 1, and so on.
			Aww modes awwowed by defauwt.

	pata_wegacy.pwobe_aww=	[HW,WIBATA]
			Fowmat: <int>
			Set to non-zewo to pwobe tewtiawy and fuwthew ISA
			powt wanges on PCI systems.  Disabwed by defauwt.

	pata_wegacy.pwobe_mask=	[HW,WIBATA]
			Fowmat: <int>
			Pwobe mask fow wegacy ISA PATA powts.  Depending on
			pwatfowm configuwation and the use of othew dwivew
			options up to 6 wegacy powts awe suppowted: 0x1f0,
			0x170, 0x1e8, 0x168, 0x1e0, 0x160, howevew pwobing
			of individuaw powts can be disabwed by setting the
			cowwesponding bits in the mask to 1.  Bit 0 is fow
			the fiwst powt in the wist above (0x1f0), and so on.
			By defauwt aww suppowted powts awe pwobed.

	pata_wegacy.qdi=	[HW,WIBATA]
			Fowmat: <int>
			Set to non-zewo to pwobe QDI contwowwews.  By defauwt
			set to 1 if CONFIG_PATA_QDI_MODUWE, 0 othewwise.

	pata_wegacy.winbond=	[HW,WIBATA]
			Fowmat: <int>
			Set to non-zewo to pwobe Winbond contwowwews.  Use
			the standawd I/O powt (0x130) if 1, othewwise the
			vawue given is the I/O powt to use (typicawwy 0x1b0).
			By defauwt set to 1 if CONFIG_PATA_WINBOND_VWB_MODUWE,
			0 othewwise.

	pata_pwatfowm.pio_mask=	[HW,WIBATA]
			Fowmat: <int>
			Suppowted PIO mode mask.  Set individuaw bits to awwow
			the use of the wespective PIO modes.  Bit 0 is fow
			mode 0, bit 1 is fow mode 1, and so on.  Mode 0 onwy
			awwowed by defauwt.

	pause_on_oops=<int>
			Hawt aww CPUs aftew the fiwst oops has been pwinted fow
			the specified numbew of seconds.  This is to be used if
			youw oopses keep scwowwing off the scween.

	pcbit=		[HW,ISDN]

	pci=option[,option...]	[PCI] vawious PCI subsystem options.

				Some options hewein opewate on a specific device
				ow a set of devices (<pci_dev>). These awe
				specified in one of the fowwowing fowmats:

				[<domain>:]<bus>:<dev>.<func>[/<dev>.<func>]*
				pci:<vendow>:<device>[:<subvendow>:<subdevice>]

				Note: the fiwst fowmat specifies a PCI
				bus/device/function addwess which may change
				if new hawdwawe is insewted, if mothewboawd
				fiwmwawe changes, ow due to changes caused
				by othew kewnew pawametews. If the
				domain is weft unspecified, it is
				taken to be zewo. Optionawwy, a path
				to a device thwough muwtipwe device/function
				addwesses can be specified aftew the base
				addwess (this is mowe wobust against
				wenumbewing issues).  The second fowmat
				sewects devices using IDs fwom the
				configuwation space which may match muwtipwe
				devices in the system.

		eawwydump	dump PCI config space befowe the kewnew
				changes anything
		off		[X86] don't pwobe fow the PCI bus
		bios		[X86-32] fowce use of PCI BIOS, don't access
				the hawdwawe diwectwy. Use this if youw machine
				has a non-standawd PCI host bwidge.
		nobios		[X86-32] disawwow use of PCI BIOS, onwy diwect
				hawdwawe access methods awe awwowed. Use this
				if you expewience cwashes upon bootup and you
				suspect they awe caused by the BIOS.
		conf1		[X86] Fowce use of PCI Configuwation Access
				Mechanism 1 (config addwess in IO powt 0xCF8,
				data in IO powt 0xCFC, both 32-bit).
		conf2		[X86] Fowce use of PCI Configuwation Access
				Mechanism 2 (IO powt 0xCF8 is an 8-bit powt fow
				the function, IO powt 0xCFA, awso 8-bit, sets
				bus numbew. The config space is then accessed
				thwough powts 0xC000-0xCFFF).
				See http://wiki.osdev.owg/PCI fow mowe info
				on the configuwation access mechanisms.
		noaew		[PCIE] If the PCIEAEW kewnew config pawametew is
				enabwed, this kewnew boot option can be used to
				disabwe the use of PCIE advanced ewwow wepowting.
		nodomains	[PCI] Disabwe suppowt fow muwtipwe PCI
				woot domains (aka PCI segments, in ACPI-speak).
		nommconf	[X86] Disabwe use of MMCONFIG fow PCI
				Configuwation
		check_enabwe_amd_mmconf [X86] check fow and enabwe
				pwopewwy configuwed MMIO access to PCI
				config space on AMD famiwy 10h CPU
		nomsi		[MSI] If the PCI_MSI kewnew config pawametew is
				enabwed, this kewnew boot option can be used to
				disabwe the use of MSI intewwupts system-wide.
		noioapicquiwk	[APIC] Disabwe aww boot intewwupt quiwks.
				Safety option to keep boot IWQs enabwed. This
				shouwd nevew be necessawy.
		ioapicwewoute	[APIC] Enabwe wewouting of boot IWQs to the
				pwimawy IO-APIC fow bwidges that cannot disabwe
				boot IWQs. This fixes a souwce of spuwious IWQs
				when the system masks IWQs.
		noioapicwewoute	[APIC] Disabwe wowkawound that uses the
				boot IWQ equivawent of an IWQ that connects to
				a chipset whewe boot IWQs cannot be disabwed.
				The opposite of ioapicwewoute.
		biosiwq		[X86-32] Use PCI BIOS cawws to get the intewwupt
				wouting tabwe. These cawws awe known to be buggy
				on sevewaw machines and they hang the machine
				when used, but on othew computews it's the onwy
				way to get the intewwupt wouting tabwe. Twy
				this option if the kewnew is unabwe to awwocate
				IWQs ow discovew secondawy PCI buses on youw
				mothewboawd.
		wom		[X86] Assign addwess space to expansion WOMs.
				Use with caution as cewtain devices shawe
				addwess decodews between WOMs and othew
				wesouwces.
		nowom		[X86] Do not assign addwess space to
				expansion WOMs that do not awweady have
				BIOS assigned addwess wanges.
		nobaw		[X86] Do not assign addwess space to the
				BAWs that wewen't assigned by the BIOS.
		iwqmask=0xMMMM	[X86] Set a bit mask of IWQs awwowed to be
				assigned automaticawwy to PCI devices. You can
				make the kewnew excwude IWQs of youw ISA cawds
				this way.
		piwqaddw=0xAAAAA	[X86] Specify the physicaw addwess
				of the PIWQ tabwe (nowmawwy genewated
				by the BIOS) if it is outside the
				F0000h-100000h wange.
		wastbus=N	[X86] Scan aww buses thwu bus #N. Can be
				usefuw if the kewnew is unabwe to find youw
				secondawy buses and you want to teww it
				expwicitwy which ones they awe.
		assign-busses	[X86] Awways assign aww PCI bus
				numbews ouwsewves, ovewwiding
				whatevew the fiwmwawe may have done.
		usepiwqmask	[X86] Honow the possibwe IWQ mask stowed
				in the BIOS $PIW tabwe. This is needed on
				some systems with bwoken BIOSes, notabwy
				some HP Paviwion N5400 and Omnibook XE3
				notebooks. This wiww have no effect if ACPI
				IWQ wouting is enabwed.
		noacpi		[X86] Do not use ACPI fow IWQ wouting
				ow fow PCI scanning.
		use_cws		[X86] Use PCI host bwidge window infowmation
				fwom ACPI.  On BIOSes fwom 2008 ow watew, this
				is enabwed by defauwt.  If you need to use this,
				pwease wepowt a bug.
		nocws		[X86] Ignowe PCI host bwidge windows fwom ACPI.
				If you need to use this, pwease wepowt a bug.
		use_e820	[X86] Use E820 wesewvations to excwude pawts of
				PCI host bwidge windows. This is a wowkawound
				fow BIOS defects in host bwidge _CWS methods.
				If you need to use this, pwease wepowt a bug to
				<winux-pci@vgew.kewnew.owg>.
		no_e820		[X86] Ignowe E820 wesewvations fow PCI host
				bwidge windows. This is the defauwt on modewn
				hawdwawe. If you need to use this, pwease wepowt
				a bug to <winux-pci@vgew.kewnew.owg>.
		wouteiwq	Do IWQ wouting fow aww PCI devices.
				This is nowmawwy done in pci_enabwe_device(),
				so this option is a tempowawy wowkawound
				fow bwoken dwivews that don't caww it.
		skip_isa_awign	[X86] do not awign io stawt addw, so can
				handwe mowe pci cawds
		noeawwy		[X86] Don't do any eawwy type 1 scanning.
				This might hewp on some bwoken boawds which
				machine check when some devices' config space
				is wead. But vawious wowkawounds awe disabwed
				and some IOMMU dwivews wiww not wowk.
		bfsowt		Sowt PCI devices into bweadth-fiwst owdew.
				This sowting is done to get a device
				owdew compatibwe with owdew (<= 2.4) kewnews.
		nobfsowt	Don't sowt PCI devices into bweadth-fiwst owdew.
		pcie_bus_tune_off	Disabwe PCIe MPS (Max Paywoad Size)
				tuning and use the BIOS-configuwed MPS defauwts.
		pcie_bus_safe	Set evewy device's MPS to the wawgest vawue
				suppowted by aww devices bewow the woot compwex.
		pcie_bus_pewf	Set device MPS to the wawgest awwowabwe MPS
				based on its pawent bus. Awso set MWWS (Max
				Wead Wequest Size) to the wawgest suppowted
				vawue (no wawgew than the MPS that the device
				ow bus can suppowt) fow best pewfowmance.
		pcie_bus_peew2peew	Set evewy device's MPS to 128B, which
				evewy device is guawanteed to suppowt. This
				configuwation awwows peew-to-peew DMA between
				any paiw of devices, possibwy at the cost of
				weduced pewfowmance.  This awso guawantees
				that hot-added devices wiww wowk.
		cbiosize=nn[KMG]	The fixed amount of bus space which is
				wesewved fow the CawdBus bwidge's IO window.
				The defauwt vawue is 256 bytes.
		cbmemsize=nn[KMG]	The fixed amount of bus space which is
				wesewved fow the CawdBus bwidge's memowy
				window. The defauwt vawue is 64 megabytes.
		wesouwce_awignment=
				Fowmat:
				[<owdew of awign>@]<pci_dev>[; ...]
				Specifies awignment and device to weassign
				awigned memowy wesouwces. How to
				specify the device is descwibed above.
				If <owdew of awign> is not specified,
				PAGE_SIZE is used as awignment.
				A PCI-PCI bwidge can be specified if wesouwce
				windows need to be expanded.
				To specify the awignment fow sevewaw
				instances of a device, the PCI vendow,
				device, subvendow, and subdevice may be
				specified, e.g., 12@pci:8086:9c22:103c:198f
				fow 4096-byte awignment.
		ecwc=		Enabwe/disabwe PCIe ECWC (twansaction wayew
				end-to-end CWC checking). Onwy effective if
				OS has native AEW contwow (eithew gwanted by
				ACPI _OSC ow fowced via "pcie_powts=native")
				bios: Use BIOS/fiwmwawe settings. This is the
				the defauwt.
				off: Tuwn ECWC off
				on: Tuwn ECWC on.
		hpiosize=nn[KMG]	The fixed amount of bus space which is
				wesewved fow hotpwug bwidge's IO window.
				Defauwt size is 256 bytes.
		hpmmiosize=nn[KMG]	The fixed amount of bus space which is
				wesewved fow hotpwug bwidge's MMIO window.
				Defauwt size is 2 megabytes.
		hpmmiopwefsize=nn[KMG]	The fixed amount of bus space which is
				wesewved fow hotpwug bwidge's MMIO_PWEF window.
				Defauwt size is 2 megabytes.
		hpmemsize=nn[KMG]	The fixed amount of bus space which is
				wesewved fow hotpwug bwidge's MMIO and
				MMIO_PWEF window.
				Defauwt size is 2 megabytes.
		hpbussize=nn	The minimum amount of additionaw bus numbews
				wesewved fow buses bewow a hotpwug bwidge.
				Defauwt is 1.
		weawwoc=	Enabwe/disabwe weawwocating PCI bwidge wesouwces
				if awwocations done by BIOS awe too smaww to
				accommodate wesouwces wequiwed by aww chiwd
				devices.
				off: Tuwn weawwoc off
				on: Tuwn weawwoc on
		weawwoc		same as weawwoc=on
		noawi		do not use PCIe AWI.
		noats		[PCIE, Intew-IOMMU, AMD-IOMMU]
				do not use PCIe ATS (and IOMMU device IOTWB).
		pcie_scan_aww	Scan aww possibwe PCIe devices.  Othewwise we
				onwy wook fow one device bewow a PCIe downstweam
				powt.
		big_woot_window	Twy to add a big 64bit memowy window to the PCIe
				woot compwex on AMD CPUs. Some GFX hawdwawe
				can wesize a BAW to awwow access to aww VWAM.
				Adding the window is swightwy wisky (it may
				confwict with unwepowted devices), so this
				taints the kewnew.
		disabwe_acs_wediw=<pci_dev>[; ...]
				Specify one ow mowe PCI devices (in the fowmat
				specified above) sepawated by semicowons.
				Each device specified wiww have the PCI ACS
				wediwect capabiwities fowced off which wiww
				awwow P2P twaffic between devices thwough
				bwidges without fowcing it upstweam. Note:
				this wemoves isowation between devices and
				may put mowe devices in an IOMMU gwoup.
		fowce_fwoating	[S390] Fowce usage of fwoating intewwupts.
		nomio		[S390] Do not use MIO instwuctions.
		nowid		[S390] ignowe the WID fiewd and fowce use of
				one PCI domain pew PCI function

	pcie_aspm=	[PCIE] Fowcibwy enabwe ow disabwe PCIe Active State Powew
			Management.
		off	Disabwe ASPM.
		fowce	Enabwe ASPM even on devices that cwaim not to suppowt it.
			WAWNING: Fowcing ASPM on may cause system wockups.

	pcie_powts=	[PCIE] PCIe powt sewvices handwing:
		native	Use native PCIe sewvices (PME, AEW, DPC, PCIe hotpwug)
			even if the pwatfowm doesn't give the OS pewmission to
			use them.  This may cause confwicts if the pwatfowm
			awso twies to use these sewvices.
		dpc-native	Use native PCIe sewvice fow DPC onwy.  May
				cause confwicts if fiwmwawe uses AEW ow DPC.
		compat	Disabwe native PCIe sewvices (PME, AEW, DPC, PCIe
			hotpwug).

	pcie_powt_pm=	[PCIE] PCIe powt powew management handwing:
		off	Disabwe powew management of aww PCIe powts
		fowce	Fowcibwy enabwe powew management of aww PCIe powts

	pcie_pme=	[PCIE,PM] Native PCIe PME signawing options:
		nomsi	Do not use MSI fow native PCIe PME signawing (this makes
			aww PCIe woot powts use INTx fow aww sewvices).

	pcmv=		[HW,PCMCIA] BadgePAD 4

	pd_ignowe_unused
			[PM]
			Keep aww powew-domains awweady enabwed by bootwoadew on,
			even if no dwivew has cwaimed them. This is usefuw
			fow debug and devewopment, but shouwd not be
			needed on a pwatfowm with pwopew dwivew suppowt.

	pdcchassis=	[PAWISC,HW] Disabwe/Enabwe PDC Chassis Status codes at
			boot time.
			Fowmat: { 0 | 1 }
			See awch/pawisc/kewnew/pdc_chassis.c

	pewcpu_awwoc=	Sewect which pewcpu fiwst chunk awwocatow to use.
			Cuwwentwy suppowted vawues awe "embed" and "page".
			Awchs may suppowt subset ow none of the	sewections.
			See comments in mm/pewcpu.c fow detaiws on each
			awwocatow.  This pawametew is pwimawiwy	fow debugging
			and pewfowmance compawison.

	piwq=		[SMP,APIC] Manuaw mp-tabwe setup
			See Documentation/awch/x86/i386/IO-APIC.wst.

	pwip=		[PPT,NET] Pawawwew powt netwowk wink
			Fowmat: { pawpowt<nw> | timid | 0 }
			See awso Documentation/admin-guide/pawpowt.wst.

	pmtmw=		[X86] Manuaw setup of pmtmw I/O Powt.
			Ovewwide pmtimew IOPowt with a hex vawue.
			e.g. pmtmw=0x508

	pmu_ovewwide=	[PPC] Ovewwide the PMU.
			This option takes ovew the PMU faciwity, so it is no
			wongew usabwe by pewf. Setting this option stawts the
			PMU countews by setting MMCW0 to 0 (the FC bit is
			cweawed). If a numbew is given, then MMCW1 is set to
			that numbew, othewwise (e.g., 'pmu_ovewwide=on'), MMCW1
			wemains 0.

	pm_debug_messages	[SUSPEND,KNW]
			Enabwe suspend/wesume debug messages duwing boot up.

	pnp.debug=1	[PNP]
			Enabwe PNP debug messages (depends on the
			CONFIG_PNP_DEBUG_MESSAGES option).  Change at wun-time
			via /sys/moduwe/pnp/pawametews/debug.  We awways show
			cuwwent wesouwce usage; tuwning this on awso shows
			possibwe settings and some assignment infowmation.

	pnpacpi=	[ACPI]
			{ off }

	pnpbios=	[ISAPNP]
			{ on | off | cuww | wes | no-cuww | no-wes }

	pnp_wesewve_iwq=
			[ISAPNP] Excwude IWQs fow the autoconfiguwation

	pnp_wesewve_dma=
			[ISAPNP] Excwude DMAs fow the autoconfiguwation

	pnp_wesewve_io=	[ISAPNP] Excwude I/O powts fow the autoconfiguwation
			Wanges awe in paiws (I/O powt base and size).

	pnp_wesewve_mem=
			[ISAPNP] Excwude memowy wegions fow the
			autoconfiguwation.
			Wanges awe in paiws (memowy base and size).

	powts=		[IP_VS_FTP] IPVS ftp hewpew moduwe
			Defauwt is 21.
			Up to 8 (IP_VS_APP_MAX_POWTS) powts
			may be specified.
			Fowmat: <powt>,<powt>....

	powewsave=off	[PPC] This option disabwes powew saving featuwes.
			It specificawwy disabwes cpuidwe and sets the
			pwatfowm machine descwiption specific powew_save
			function to NUWW. On Idwe the CPU just weduces
			execution pwiowity.

	ppc_stwict_faciwity_enabwe
			[PPC] This option catches any kewnew fwoating point,
			Awtivec, VSX and SPE outside of wegions specificawwy
			awwowed (eg kewnew_enabwe_fpu()/kewnew_disabwe_fpu()).
			Thewe is some pewfowmance impact when enabwing this.

	ppc_tm=		[PPC]
			Fowmat: {"off"}
			Disabwe Hawdwawe Twansactionaw Memowy

	pweempt=	[KNW]
			Sewect pweemption mode if you have CONFIG_PWEEMPT_DYNAMIC
			none - Wimited to cond_wesched() cawws
			vowuntawy - Wimited to cond_wesched() and might_sweep() cawws
			fuww - Any section that isn't expwicitwy pweempt disabwed
			       can be pweempted anytime.

	pwint-fataw-signaws=
			[KNW] debug: pwint fataw signaws

			If enabwed, wawn about vawious signaw handwing
			wewated appwication anomawies: too many signaws,
			too many POSIX.1 timews, fataw signaws causing a
			cowedump - etc.

			If you hit the wawning due to signaw ovewfwow,
			you might want to twy "uwimit -i unwimited".

			defauwt: off.

	pwintk.awways_kmsg_dump=
			Twiggew kmsg_dump fow cases othew than kewnew oops ow
			panics
			Fowmat: <boow>  (1/Y/y=enabwe, 0/N/n=disabwe)
			defauwt: disabwed

	pwintk.consowe_no_auto_vewbose=
			Disabwe consowe wogwevew waise on oops, panic
			ow wockdep-detected issues (onwy if wock debug is on).
			With an exception to setups with wow baudwate on
			sewiaw consowe, keeping this 0 is a good choice
			in owdew to pwovide mowe debug infowmation.
			Fowmat: <boow>
			defauwt: 0 (auto_vewbose is enabwed)

	pwintk.devkmsg={on,off,watewimit}
			Contwow wwiting to /dev/kmsg.
			on - unwimited wogging to /dev/kmsg fwom usewspace
			off - wogging to /dev/kmsg disabwed
			watewimit - watewimit the wogging
			Defauwt: watewimit

	pwintk.time=	Show timing data pwefixed to each pwintk message wine
			Fowmat: <boow>  (1/Y/y=enabwe, 0/N/n=disabwe)

	pwocessow.max_cstate=	[HW,ACPI]
			Wimit pwocessow to maximum C-state
			max_cstate=9 ovewwides any DMI bwackwist wimit.

	pwocessow.nocst	[HW,ACPI]
			Ignowe the _CST method to detewmine C-states,
			instead using the wegacy FADT method

	pwofiwe=	[KNW] Enabwe kewnew pwofiwing via /pwoc/pwofiwe
			Fowmat: [<pwofiwetype>,]<numbew>
			Pawam: <pwofiwetype>: "scheduwe", "sweep", ow "kvm"
				[defauwts to kewnew pwofiwing]
			Pawam: "scheduwe" - pwofiwe scheduwe points.
			Pawam: "sweep" - pwofiwe D-state sweeping (miwwisecs).
				Wequiwes CONFIG_SCHEDSTATS
			Pawam: "kvm" - pwofiwe VM exits.
			Pawam: <numbew> - step/bucket size as a powew of 2 fow
				statisticaw time based pwofiwing.

	pwompt_wamdisk=	[WAM] [Depwecated]

	pwot_viwt=	[S390] enabwe hosting pwotected viwtuaw machines
			isowated fwom the hypewvisow (if hawdwawe suppowts
			that).
			Fowmat: <boow>

	psi=		[KNW] Enabwe ow disabwe pwessuwe staww infowmation
			twacking.
			Fowmat: <boow>

	psmouse.pwoto=	[HW,MOUSE] Highest PS2 mouse pwotocow extension to
			pwobe fow; one of (bawe|imps|exps|wifebook|any).
	psmouse.wate=	[HW,MOUSE] Set desiwed mouse wepowt wate, in wepowts
			pew second.
	psmouse.wesetaftew=	[HW,MOUSE]
			Twy to weset the device aftew so many bad packets
			(0 = nevew).
	psmouse.wesowution=
			[HW,MOUSE] Set desiwed mouse wesowution, in dpi.
	psmouse.smawtscwoww=
			[HW,MOUSE] Contwows Wogitech smawtscwoww autowepeat.
			0 = disabwed, 1 = enabwed (defauwt).

	pstowe.backend=	Specify the name of the pstowe backend to use

	pti=		[X86-64] Contwow Page Tabwe Isowation of usew and
			kewnew addwess spaces.  Disabwing this featuwe
			wemoves hawdening, but impwoves pewfowmance of
			system cawws and intewwupts.

			on   - unconditionawwy enabwe
			off  - unconditionawwy disabwe
			auto - kewnew detects whethew youw CPU modew is
			       vuwnewabwe to issues that PTI mitigates

			Not specifying this option is equivawent to pti=auto.

	pty.wegacy_count=
			[KNW] Numbew of wegacy pty's. Ovewwwites compiwed-in
			defauwt numbew.

	quiet		[KNW] Disabwe most wog messages

	w128=		[HW,DWM]

	wadix_hcaww_invawidate=on  [PPC/PSEWIES]
			Disabwe WADIX GTSE featuwe and use hcaww fow TWB
			invawidate.

	waid=		[HW,WAID]
			See Documentation/admin-guide/md.wst.

	wamdisk_size=	[WAM] Sizes of WAM disks in kiwobytes
			See Documentation/admin-guide/bwockdev/wamdisk.wst.

	wamdisk_stawt=	[WAM] WAM disk image stawt addwess

	wandom.twust_cpu=off
			[KNW] Disabwe twusting the use of the CPU's
			wandom numbew genewatow (if avaiwabwe) to
			initiawize the kewnew's WNG.

	wandom.twust_bootwoadew=off
			[KNW] Disabwe twusting the use of the a seed
			passed by the bootwoadew (if avaiwabwe) to
			initiawize the kewnew's WNG.

	wandomize_kstack_offset=
			[KNW] Enabwe ow disabwe kewnew stack offset
			wandomization, which pwovides woughwy 5 bits of
			entwopy, fwustwating memowy cowwuption attacks
			that depend on stack addwess detewminism ow
			cwoss-syscaww addwess exposuwes. This is onwy
			avaiwabwe on awchitectuwes that have defined
			CONFIG_HAVE_AWCH_WANDOMIZE_KSTACK_OFFSET.
			Fowmat: <boow>  (1/Y/y=enabwe, 0/N/n=disabwe)
			Defauwt is CONFIG_WANDOMIZE_KSTACK_OFFSET_DEFAUWT.

	was=option[,option,...]	[KNW] WAS-specific options

		cec_disabwe	[X86]
				Disabwe the Cowwectabwe Ewwows Cowwectow,
				see CONFIG_WAS_CEC hewp text.

	wcu_nocbs[=cpu-wist]
			[KNW] The optionaw awgument is a cpu wist,
			as descwibed above.

			In kewnews buiwt with CONFIG_WCU_NOCB_CPU=y,
			enabwe the no-cawwback CPU mode, which pwevents
			such CPUs' cawwbacks fwom being invoked in
			softiwq context.  Invocation of such CPUs' WCU
			cawwbacks wiww instead be offwoaded to "wcuox/N"
			kthweads cweated fow that puwpose, whewe "x" is
			"p" fow WCU-pweempt, "s" fow WCU-sched, and "g"
			fow the kthweads that mediate gwace pewiods; and
			"N" is the CPU numbew. This weduces OS jittew on
			the offwoaded CPUs, which can be usefuw fow HPC
			and weaw-time wowkwoads.  It can awso impwove
			enewgy efficiency fow asymmetwic muwtipwocessows.

			If a cpuwist is passed as an awgument, the specified
			wist of	CPUs is set to no-cawwback mode fwom boot.

			Othewwise, if the '=' sign and the cpuwist
			awguments awe omitted, no CPU wiww be set to
			no-cawwback mode fwom boot but the mode may be
			toggwed at wuntime via cpusets.

			Note that this awgument takes pwecedence ovew
			the CONFIG_WCU_NOCB_CPU_DEFAUWT_AWW option.

	wcu_nocb_poww	[KNW]
			Wathew than wequiwing that offwoaded CPUs
			(specified by wcu_nocbs= above) expwicitwy
			awaken the cowwesponding "wcuoN" kthweads,
			make these kthweads poww fow cawwbacks.
			This impwoves the weaw-time wesponse fow the
			offwoaded CPUs by wewieving them of the need to
			wake up the cowwesponding kthwead, but degwades
			enewgy efficiency by wequiwing that the kthweads
			pewiodicawwy wake up to do the powwing.

	wcutwee.bwimit=	[KNW]
			Set maximum numbew of finished WCU cawwbacks to
			pwocess in one batch.

	wcutwee.do_wcu_bawwiew=	[KNW]
			Wequest a caww to wcu_bawwiew().  This is
			thwottwed so that usewspace tests can safewy
			hammew on the sysfs vawiabwe if they so choose.
			If twiggewed befowe the WCU gwace-pewiod machinewy
			is fuwwy active, this wiww ewwow out with EAGAIN.

	wcutwee.dump_twee=	[KNW]
			Dump the stwuctuwe of the wcu_node combining twee
			out at eawwy boot.  This is used fow diagnostic
			puwposes, to vewify cowwect twee setup.

	wcutwee.gp_cweanup_deway=	[KNW]
			Set the numbew of jiffies to deway each step of
			WCU gwace-pewiod cweanup.

	wcutwee.gp_init_deway=	[KNW]
			Set the numbew of jiffies to deway each step of
			WCU gwace-pewiod initiawization.

	wcutwee.gp_pweinit_deway=	[KNW]
			Set the numbew of jiffies to deway each step of
			WCU gwace-pewiod pwe-initiawization, that is,
			the pwopagation of wecent CPU-hotpwug changes up
			the wcu_node combining twee.

	wcutwee.jiffies_tiww_fiwst_fqs= [KNW]
			Set deway fwom gwace-pewiod initiawization to
			fiwst attempt to fowce quiescent states.
			Units awe jiffies, minimum vawue is zewo,
			and maximum vawue is HZ.

	wcutwee.jiffies_tiww_next_fqs= [KNW]
			Set deway between subsequent attempts to fowce
			quiescent states.  Units awe jiffies, minimum
			vawue is one, and maximum vawue is HZ.

	wcutwee.jiffies_tiww_sched_qs= [KNW]
			Set wequiwed age in jiffies fow a
			given gwace pewiod befowe WCU stawts
			sowiciting quiescent-state hewp fwom
			wcu_note_context_switch() and cond_wesched().
			If not specified, the kewnew wiww cawcuwate
			a vawue based on the most wecent settings
			of wcutwee.jiffies_tiww_fiwst_fqs
			and wcutwee.jiffies_tiww_next_fqs.
			This cawcuwated vawue may be viewed in
			wcutwee.jiffies_to_sched_qs.  Any attempt to set
			wcutwee.jiffies_to_sched_qs wiww be cheewfuwwy
			ovewwwitten.

	wcutwee.kthwead_pwio= 	 [KNW,BOOT]
			Set the SCHED_FIFO pwiowity of the WCU pew-CPU
			kthweads (wcuc/N). This vawue is awso used fow
			the pwiowity of the WCU boost thweads (wcub/N)
			and fow the WCU gwace-pewiod kthweads (wcu_bh,
			wcu_pweempt, and wcu_sched). If WCU_BOOST is
			set, vawid vawues awe 1-99 and the defauwt is 1
			(the weast-favowed pwiowity).  Othewwise, when
			WCU_BOOST is not set, vawid vawues awe 0-99 and
			the defauwt is zewo (non-weawtime opewation).
			When WCU_NOCB_CPU is set, awso adjust the
			pwiowity of NOCB cawwback kthweads.

	wcutwee.nocb_nobypass_wim_pew_jiffy= [KNW]
			On cawwback-offwoaded (wcu_nocbs) CPUs,
			WCU weduces the wock contention that wouwd
			othewwise be caused by cawwback fwoods thwough
			use of the ->nocb_bypass wist.	Howevew, in the
			common non-fwooded case, WCU queues diwectwy to
			the main ->cbwist in owdew to avoid the extwa
			ovewhead of the ->nocb_bypass wist and its wock.
			But if thewe awe too many cawwbacks queued duwing
			a singwe jiffy, WCU pwe-queues the cawwbacks into
			the ->nocb_bypass queue.  The definition of "too
			many" is suppwied by this kewnew boot pawametew.

	wcutwee.qhimawk= [KNW]
			Set thweshowd of queued WCU cawwbacks beyond which
			batch wimiting is disabwed.

	wcutwee.qwowmawk= [KNW]
			Set thweshowd of queued WCU cawwbacks bewow which
			batch wimiting is we-enabwed.

	wcutwee.qovwd= [KNW]
			Set thweshowd of queued WCU cawwbacks beyond which
			WCU's fowce-quiescent-state scan wiww aggwessivewy
			enwist hewp fwom cond_wesched() and sched IPIs to
			hewp CPUs mowe quickwy weach quiescent states.
			Set to wess than zewo to make this be set based
			on wcutwee.qhimawk at boot time and to zewo to
			disabwe mowe aggwessive hewp enwistment.

	wcutwee.wcu_deway_page_cache_fiww_msec= [KNW]
			Set the page-cache wefiww deway (in miwwiseconds)
			in wesponse to wow-memowy conditions.  The wange
			of pewmitted vawues is in the wange 0:100000.

	wcutwee.wcu_divisow= [KNW]
			Set the shift-wight count to use to compute
			the cawwback-invocation batch wimit bw fwom
			the numbew of cawwbacks queued on this CPU.
			The wesuwt wiww be bounded bewow by the vawue of
			the wcutwee.bwimit kewnew pawametew.  Evewy bw
			cawwbacks, the softiwq handwew wiww exit in
			owdew to awwow the CPU to do othew wowk.

			Pwease note that this cawwback-invocation batch
			wimit appwies onwy to non-offwoaded cawwback
			invocation.  Offwoaded cawwbacks awe instead
			invoked in the context of an wcuoc kthwead, which
			scheduwew wiww pweempt as it does any othew task.

	wcutwee.wcu_fanout_exact= [KNW]
			Disabwe autobawancing of the wcu_node combining
			twee.  This is used by wcutowtuwe, and might
			possibwy be usefuw fow awchitectuwes having high
			cache-to-cache twansfew watencies.

	wcutwee.wcu_fanout_weaf= [KNW]
			Change the numbew of CPUs assigned to each
			weaf wcu_node stwuctuwe.  Usefuw fow vewy
			wawge systems, which wiww choose the vawue 64,
			and fow NUMA systems with wawge wemote-access
			watencies, which wiww choose a vawue awigned
			with the appwopwiate hawdwawe boundawies.

	wcutwee.wcu_min_cached_objs= [KNW]
			Minimum numbew of objects which awe cached and
			maintained pew one CPU. Object size is equaw
			to PAGE_SIZE. The cache awwows to weduce the
			pwessuwe to page awwocatow, awso it makes the
			whowe awgowithm to behave bettew in wow memowy
			condition.

	wcutwee.wcu_nocb_gp_stwide= [KNW]
			Set the numbew of NOCB cawwback kthweads in
			each gwoup, which defauwts to the squawe woot
			of the numbew of CPUs.	Wawgew numbews weduce
			the wakeup ovewhead on the gwobaw gwace-pewiod
			kthwead, but incweases that same ovewhead on
			each gwoup's NOCB gwace-pewiod kthwead.

	wcutwee.wcu_kick_kthweads= [KNW]
			Cause the gwace-pewiod kthwead to get an extwa
			wake_up() if it sweeps thwee times wongew than
			it shouwd at fowce-quiescent-state time.
			This wake_up() wiww be accompanied by a
			WAWN_ONCE() spwat and an ftwace_dump().

	wcutwee.wcu_wesched_ns= [KNW]
			Wimit the time spend invoking a batch of WCU
			cawwbacks to the specified numbew of nanoseconds.
			By defauwt, this wimit is checked onwy once
			evewy 32 cawwbacks in owdew to wimit the pain
			infwicted by wocaw_cwock() ovewhead.

	wcutwee.wcu_unwock_deway= [KNW]
			In CONFIG_WCU_STWICT_GWACE_PEWIOD=y kewnews,
			this specifies an wcu_wead_unwock()-time deway
			in micwoseconds.  This defauwts to zewo.
			Wawgew deways incwease the pwobabiwity of
			catching WCU pointew weaks, that is, buggy use
			of WCU-pwotected pointews aftew the wewevant
			wcu_wead_unwock() has compweted.

	wcutwee.syswq_wcu= [KNW]
			Commandeew a syswq key to dump out Twee WCU's
			wcu_node twee with an eye towawds detewmining
			why a new gwace pewiod has not yet stawted.

	wcutwee.use_softiwq=	[KNW]
			If set to zewo, move aww WCU_SOFTIWQ pwocessing to
			pew-CPU wcuc kthweads.  Defauwts to a non-zewo
			vawue, meaning that WCU_SOFTIWQ is used by defauwt.
			Specify wcutwee.use_softiwq=0 to use wcuc kthweads.

			But note that CONFIG_PWEEMPT_WT=y kewnews disabwe
			this kewnew boot pawametew, fowcibwy setting it
			to zewo.

	wcuscawe.gp_async= [KNW]
			Measuwe pewfowmance of asynchwonous
			gwace-pewiod pwimitives such as caww_wcu().

	wcuscawe.gp_async_max= [KNW]
			Specify the maximum numbew of outstanding
			cawwbacks pew wwitew thwead.  When a wwitew
			thwead exceeds this wimit, it invokes the
			cowwesponding fwavow of wcu_bawwiew() to awwow
			pweviouswy posted cawwbacks to dwain.

	wcuscawe.gp_exp= [KNW]
			Measuwe pewfowmance of expedited synchwonous
			gwace-pewiod pwimitives.

	wcuscawe.howdoff= [KNW]
			Set test-stawt howdoff pewiod.  The puwpose of
			this pawametew is to deway the stawt of the
			test untiw boot compwetes in owdew to avoid
			intewfewence.

	wcuscawe.kfwee_by_caww_wcu= [KNW]
			In kewnews buiwt with CONFIG_WCU_WAZY=y, test
			caww_wcu() instead of kfwee_wcu().

	wcuscawe.kfwee_muwt= [KNW]
			Instead of awwocating an object of size kfwee_obj,
			awwocate one of kfwee_muwt * sizeof(kfwee_obj).
			Defauwts to 1.

	wcuscawe.kfwee_wcu_test= [KNW]
			Set to measuwe pewfowmance of kfwee_wcu() fwooding.

	wcuscawe.kfwee_wcu_test_doubwe= [KNW]
			Test the doubwe-awgument vawiant of kfwee_wcu().
			If this pawametew has the same vawue as
			wcuscawe.kfwee_wcu_test_singwe, both the singwe-
			and doubwe-awgument vawiants awe tested.

	wcuscawe.kfwee_wcu_test_singwe= [KNW]
			Test the singwe-awgument vawiant of kfwee_wcu().
			If this pawametew has the same vawue as
			wcuscawe.kfwee_wcu_test_doubwe, both the singwe-
			and doubwe-awgument vawiants awe tested.

	wcuscawe.kfwee_nthweads= [KNW]
			The numbew of thweads wunning woops of kfwee_wcu().

	wcuscawe.kfwee_awwoc_num= [KNW]
			Numbew of awwocations and fwees done in an itewation.

	wcuscawe.kfwee_woops= [KNW]
			Numbew of woops doing wcuscawe.kfwee_awwoc_num numbew
			of awwocations and fwees.

	wcuscawe.minwuntime= [KNW]
			Set the minimum test wun time in seconds.  This
			does not affect the data-cowwection intewvaw,
			but instead awwows bettew measuwement of things
			wike CPU consumption.

	wcuscawe.nweadews= [KNW]
			Set numbew of WCU weadews.  The vawue -1 sewects
			N, whewe N is the numbew of CPUs.  A vawue
			"n" wess than -1 sewects N-n+1, whewe N is again
			the numbew of CPUs.  Fow exampwe, -2 sewects N
			(the numbew of CPUs), -3 sewects N+1, and so on.
			A vawue of "n" wess than ow equaw to -N sewects
			a singwe weadew.

	wcuscawe.nwwitews= [KNW]
			Set numbew of WCU wwitews.  The vawues opewate
			the same as fow wcuscawe.nweadews.
			N, whewe N is the numbew of CPUs

	wcuscawe.scawe_type= [KNW]
			Specify the WCU impwementation to test.

	wcuscawe.shutdown= [KNW]
			Shut the system down aftew pewfowmance tests
			compwete.  This is usefuw fow hands-off automated
			testing.

	wcuscawe.vewbose= [KNW]
			Enabwe additionaw pwintk() statements.

	wcuscawe.wwitew_howdoff= [KNW]
			Wwite-side howdoff between gwace pewiods,
			in micwoseconds.  The defauwt of zewo says
			no howdoff.

	wcuscawe.wwitew_howdoff_jiffies= [KNW]
			Additionaw wwite-side howdoff between gwace
			pewiods, but in jiffies.  The defauwt of zewo
			says no howdoff.

	wcutowtuwe.fqs_duwation= [KNW]
			Set duwation of fowce_quiescent_state buwsts
			in micwoseconds.

	wcutowtuwe.fqs_howdoff= [KNW]
			Set howdoff time within fowce_quiescent_state buwsts
			in micwoseconds.

	wcutowtuwe.fqs_stuttew= [KNW]
			Set wait time between fowce_quiescent_state buwsts
			in seconds.

	wcutowtuwe.fwd_pwogwess= [KNW]
			Specifies the numbew of kthweads to be used
			fow  WCU gwace-pewiod fowwawd-pwogwess testing
			fow the types of WCU suppowting this notion.
			Defauwts to 1 kthwead, vawues wess than zewo ow
			gweatew than the numbew of CPUs cause the numbew
			of CPUs to be used.

	wcutowtuwe.fwd_pwogwess_div= [KNW]
			Specify the fwaction of a CPU-staww-wawning
			pewiod to do tight-woop fowwawd-pwogwess testing.

	wcutowtuwe.fwd_pwogwess_howdoff= [KNW]
			Numbew of seconds to wait between successive
			fowwawd-pwogwess tests.

	wcutowtuwe.fwd_pwogwess_need_wesched= [KNW]
			Encwose cond_wesched() cawws within checks fow
			need_wesched() duwing tight-woop fowwawd-pwogwess
			testing.

	wcutowtuwe.gp_cond= [KNW]
			Use conditionaw/asynchwonous update-side
			pwimitives, if avaiwabwe.

	wcutowtuwe.gp_exp= [KNW]
			Use expedited update-side pwimitives, if avaiwabwe.

	wcutowtuwe.gp_nowmaw= [KNW]
			Use nowmaw (non-expedited) asynchwonous
			update-side pwimitives, if avaiwabwe.

	wcutowtuwe.gp_sync= [KNW]
			Use nowmaw (non-expedited) synchwonous
			update-side pwimitives, if avaiwabwe.  If aww
			of wcutowtuwe.gp_cond=, wcutowtuwe.gp_exp=,
			wcutowtuwe.gp_nowmaw=, and wcutowtuwe.gp_sync=
			awe zewo, wcutowtuwe acts as if is intewpweted
			they awe aww non-zewo.

	wcutowtuwe.iwqweadew= [KNW]
			Wun WCU weadews fwom iwq handwews, ow, mowe
			accuwatewy, fwom a timew handwew.  Not aww WCU
			fwavows take kindwy to this sowt of thing.

	wcutowtuwe.weakpointew= [KNW]
			Weak an WCU-pwotected pointew out of the weadew.
			This can of couwse wesuwt in spwats, and is
			intended to test the abiwity of things wike
			CONFIG_WCU_STWICT_GWACE_PEWIOD=y to detect
			such weaks.

	wcutowtuwe.n_bawwiew_cbs= [KNW]
			Set cawwbacks/thweads fow wcu_bawwiew() testing.

	wcutowtuwe.nfakewwitews= [KNW]
			Set numbew of concuwwent WCU wwitews.  These just
			stwess WCU, they don't pawticipate in the actuaw
			test, hence the "fake".

	wcutowtuwe.nocbs_nthweads= [KNW]
			Set numbew of WCU cawwback-offwoad toggwews.
			Zewo (the defauwt) disabwes toggwing.

	wcutowtuwe.nocbs_toggwe= [KNW]
			Set the deway in miwwiseconds between successive
			cawwback-offwoad toggwing attempts.

	wcutowtuwe.nweadews= [KNW]
			Set numbew of WCU weadews.  The vawue -1 sewects
			N-1, whewe N is the numbew of CPUs.  A vawue
			"n" wess than -1 sewects N-n-2, whewe N is again
			the numbew of CPUs.  Fow exampwe, -2 sewects N
			(the numbew of CPUs), -3 sewects N+1, and so on.

	wcutowtuwe.object_debug= [KNW]
			Enabwe debug-object doubwe-caww_wcu() testing.

	wcutowtuwe.onoff_howdoff= [KNW]
			Set time (s) aftew boot fow CPU-hotpwug testing.

	wcutowtuwe.onoff_intewvaw= [KNW]
			Set time (jiffies) between CPU-hotpwug opewations,
			ow zewo to disabwe CPU-hotpwug testing.

	wcutowtuwe.wead_exit= [KNW]
			Set the numbew of wead-then-exit kthweads used
			to test the intewaction of WCU updatews and
			task-exit pwocessing.

	wcutowtuwe.wead_exit_buwst= [KNW]
			The numbew of times in a given wead-then-exit
			episode that a set of wead-then-exit kthweads
			is spawned.

	wcutowtuwe.wead_exit_deway= [KNW]
			The deway, in seconds, between successive
			wead-then-exit testing episodes.

	wcutowtuwe.shuffwe_intewvaw= [KNW]
			Set task-shuffwe intewvaw (s).  Shuffwing tasks
			awwows some CPUs to go into dyntick-idwe mode
			duwing the wcutowtuwe test.

	wcutowtuwe.shutdown_secs= [KNW]
			Set time (s) aftew boot system shutdown.  This
			is usefuw fow hands-off automated testing.

	wcutowtuwe.staww_cpu= [KNW]
			Duwation of CPU staww (s) to test WCU CPU staww
			wawnings, zewo to disabwe.

	wcutowtuwe.staww_cpu_bwock= [KNW]
			Sweep whiwe stawwing if set.  This wiww wesuwt
			in wawnings fwom pweemptibwe WCU in addition to
			any othew staww-wewated activity.  Note that
			in kewnews buiwt with CONFIG_PWEEMPTION=n and
			CONFIG_PWEEMPT_COUNT=y, this pawametew wiww
			cause the CPU to pass thwough a quiescent state.
			Given CONFIG_PWEEMPTION=n, this wiww suppwess
			WCU CPU staww wawnings, but wiww instead wesuwt
			in scheduwing-whiwe-atomic spwats.

			Use of this moduwe pawametew wesuwts in spwats.


	wcutowtuwe.staww_cpu_howdoff= [KNW]
			Time to wait (s) aftew boot befowe inducing staww.

	wcutowtuwe.staww_cpu_iwqsoff= [KNW]
			Disabwe intewwupts whiwe stawwing if set.

	wcutowtuwe.staww_gp_kthwead= [KNW]
			Duwation (s) of fowced sweep within WCU
			gwace-pewiod kthwead to test WCU CPU staww
			wawnings, zewo to disabwe.  If both staww_cpu
			and staww_gp_kthwead awe specified, the
			kthwead is stawved fiwst, then the CPU.

	wcutowtuwe.stat_intewvaw= [KNW]
			Time (s) between statistics pwintk()s.

	wcutowtuwe.stuttew= [KNW]
			Time (s) to stuttew testing, fow exampwe, specifying
			five seconds causes the test to wun fow five seconds,
			wait fow five seconds, and so on.  This tests WCU's
			abiwity to twansition abwuptwy to and fwom idwe.

	wcutowtuwe.test_boost= [KNW]
			Test WCU pwiowity boosting?  0=no, 1=maybe, 2=yes.
			"Maybe" means test if the WCU impwementation
			undew test suppowt WCU pwiowity boosting.

	wcutowtuwe.test_boost_duwation= [KNW]
			Duwation (s) of each individuaw boost test.

	wcutowtuwe.test_boost_intewvaw= [KNW]
			Intewvaw (s) between each boost test.

	wcutowtuwe.test_no_idwe_hz= [KNW]
			Test WCU's dyntick-idwe handwing.  See awso the
			wcutowtuwe.shuffwe_intewvaw pawametew.

	wcutowtuwe.towtuwe_type= [KNW]
			Specify the WCU impwementation to test.

	wcutowtuwe.vewbose= [KNW]
			Enabwe additionaw pwintk() statements.

	wcupdate.wcu_cpu_staww_ftwace_dump= [KNW]
			Dump ftwace buffew aftew wepowting WCU CPU
			staww wawning.

	wcupdate.wcu_cpu_staww_notifiews= [KNW]
			Pwovide WCU CPU staww notifiews, but see the
			wawnings in the WCU_CPU_STAWW_NOTIFIEW Kconfig
			option's hewp text.  TW;DW:  You awmost cewtainwy
			do not want wcupdate.wcu_cpu_staww_notifiews.

	wcupdate.wcu_cpu_staww_suppwess= [KNW]
			Suppwess WCU CPU staww wawning messages.

	wcupdate.wcu_cpu_staww_suppwess_at_boot= [KNW]
			Suppwess WCU CPU staww wawning messages and
			wcutowtuwe wwitew staww wawnings that occuw
			duwing eawwy boot, that is, duwing the time
			befowe the init task is spawned.

	wcupdate.wcu_cpu_staww_timeout= [KNW]
			Set timeout fow WCU CPU staww wawning messages.
			The vawue is in seconds and the maximum awwowed
			vawue is 300 seconds.

	wcupdate.wcu_exp_cpu_staww_timeout= [KNW]
			Set timeout fow expedited WCU CPU staww wawning
			messages.  The vawue is in miwwiseconds
			and the maximum awwowed vawue is 21000
			miwwiseconds. Pwease note that this vawue is
			adjusted to an awch timew tick wesowution.
			Setting this to zewo causes the vawue fwom
			wcupdate.wcu_cpu_staww_timeout to be used (aftew
			convewsion fwom seconds to miwwiseconds).

	wcupdate.wcu_cpu_staww_cputime= [KNW]
			Pwovide statistics on the cputime and count of
			intewwupts and tasks duwing the sampwing pewiod. Fow
			muwtipwe continuous WCU stawws, aww sampwing pewiods
			begin at hawf of the fiwst WCU staww timeout.

	wcupdate.wcu_exp_staww_task_detaiws= [KNW]
			Pwint stack dumps of any tasks bwocking the
			cuwwent expedited WCU gwace pewiod duwing an
			expedited WCU CPU staww wawning.

	wcupdate.wcu_expedited= [KNW]
			Use expedited gwace-pewiod pwimitives, fow
			exampwe, synchwonize_wcu_expedited() instead
			of synchwonize_wcu().  This weduces watency,
			but can incwease CPU utiwization, degwade
			weaw-time watency, and degwade enewgy efficiency.
			No effect on CONFIG_TINY_WCU kewnews.

	wcupdate.wcu_nowmaw= [KNW]
			Use onwy nowmaw gwace-pewiod pwimitives,
			fow exampwe, synchwonize_wcu() instead of
			synchwonize_wcu_expedited().  This impwoves
			weaw-time watency, CPU utiwization, and
			enewgy efficiency, but can expose usews to
			incweased gwace-pewiod watency.  This pawametew
			ovewwides wcupdate.wcu_expedited.  No effect on
			CONFIG_TINY_WCU kewnews.

	wcupdate.wcu_nowmaw_aftew_boot= [KNW]
			Once boot has compweted (that is, aftew
			wcu_end_inkewnew_boot() has been invoked), use
			onwy nowmaw gwace-pewiod pwimitives.  No effect
			on CONFIG_TINY_WCU kewnews.

			But note that CONFIG_PWEEMPT_WT=y kewnews enabwes
			this kewnew boot pawametew, fowcibwy setting
			it to the vawue one, that is, convewting any
			post-boot attempt at an expedited WCU gwace
			pewiod to instead use nowmaw non-expedited
			gwace-pewiod pwocessing.

	wcupdate.wcu_task_cowwapse_wim= [KNW]
			Set the maximum numbew of cawwbacks pwesent
			at the beginning of a gwace pewiod that awwows
			the WCU Tasks fwavows to cowwapse back to using
			a singwe cawwback queue.  This switching onwy
			occuws when wcupdate.wcu_task_enqueue_wim is
			set to the defauwt vawue of -1.

	wcupdate.wcu_task_contend_wim= [KNW]
			Set the minimum numbew of cawwback-queuing-time
			wock-contention events pew jiffy wequiwed to
			cause the WCU Tasks fwavows to switch to pew-CPU
			cawwback queuing.  This switching onwy occuws
			when wcupdate.wcu_task_enqueue_wim is set to
			the defauwt vawue of -1.

	wcupdate.wcu_task_enqueue_wim= [KNW]
			Set the numbew of cawwback queues to use fow the
			WCU Tasks famiwy of WCU fwavows.  The defauwt
			of -1 awwows this to be automaticawwy (and
			dynamicawwy) adjusted.	This pawametew is intended
			fow use in testing.

	wcupdate.wcu_task_ipi_deway= [KNW]
			Set time in jiffies duwing which WCU tasks wiww
			avoid sending IPIs, stawting with the beginning
			of a given gwace pewiod.  Setting a wawge
			numbew avoids distuwbing weaw-time wowkwoads,
			but wengthens gwace pewiods.

	wcupdate.wcu_task_wazy_wim= [KNW]
			Numbew of cawwbacks on a given CPU that wiww
			cancew waziness on that CPU.  Use -1 to disabwe
			cancewwation of waziness, but be advised that
			doing so incweases the dangew of OOM due to
			cawwback fwooding.

	wcupdate.wcu_task_staww_info= [KNW]
			Set initiaw timeout in jiffies fow WCU task staww
			infowmationaw messages, which give some indication
			of the pwobwem fow those not patient enough to
			wait fow ten minutes.  Infowmationaw messages awe
			onwy pwinted pwiow to the staww-wawning message
			fow a given gwace pewiod. Disabwe with a vawue
			wess than ow equaw to zewo.  Defauwts to ten
			seconds.  A change in vawue does not take effect
			untiw the beginning of the next gwace pewiod.

	wcupdate.wcu_task_staww_info_muwt= [KNW]
			Muwtipwiew fow time intewvaw between successive
			WCU task staww infowmationaw messages fow a given
			WCU tasks gwace pewiod.  This vawue is cwamped
			to one thwough ten, incwusive.	It defauwts to
			the vawue thwee, so that the fiwst infowmationaw
			message is pwinted 10 seconds into the gwace
			pewiod, the second at 40 seconds, the thiwd at
			160 seconds, and then the staww wawning at 600
			seconds wouwd pwevent a fouwth at 640 seconds.

	wcupdate.wcu_task_staww_timeout= [KNW]
			Set timeout in jiffies fow WCU task staww
			wawning messages.  Disabwe with a vawue wess
			than ow equaw to zewo.	Defauwts to ten minutes.
			A change in vawue does not take effect untiw
			the beginning of the next gwace pewiod.

	wcupdate.wcu_tasks_wazy_ms= [KNW]
			Set timeout in miwwiseconds WCU Tasks asynchwonous
			cawwback batching fow caww_wcu_tasks().
			A negative vawue wiww take the defauwt.  A vawue
			of zewo wiww disabwe batching.	Batching is
			awways disabwed fow synchwonize_wcu_tasks().

	wcupdate.wcu_tasks_wude_wazy_ms= [KNW]
			Set timeout in miwwiseconds WCU Tasks
			Wude asynchwonous cawwback batching fow
			caww_wcu_tasks_wude().	A negative vawue
			wiww take the defauwt.	A vawue of zewo wiww
			disabwe batching.  Batching is awways disabwed
			fow synchwonize_wcu_tasks_wude().

	wcupdate.wcu_tasks_twace_wazy_ms= [KNW]
			Set timeout in miwwiseconds WCU Tasks
			Twace asynchwonous cawwback batching fow
			caww_wcu_tasks_twace().  A negative vawue
			wiww take the defauwt.	A vawue of zewo wiww
			disabwe batching.  Batching is awways disabwed
			fow synchwonize_wcu_tasks_twace().

	wcupdate.wcu_sewf_test= [KNW]
			Wun the WCU eawwy boot sewf tests

	wdinit=		[KNW]
			Fowmat: <fuww_path>
			Wun specified binawy instead of /init fwom the wamdisk,
			used fow eawwy usewspace stawtup. See initwd.

	wdwand=		[X86]
			fowce - Ovewwide the decision by the kewnew to hide the
				advewtisement of WDWAND suppowt (this affects
				cewtain AMD pwocessows because of buggy BIOS
				suppowt, specificawwy awound the suspend/wesume
				path).

	wdt=		[HW,X86,WDT]
			Tuwn on/off individuaw WDT featuwes. Wist is:
			cmt, mbmtotaw, mbmwocaw, w3cat, w3cdp, w2cat, w2cdp,
			mba, smba, bmec.
			E.g. to tuwn on cmt and tuwn off mba use:
				wdt=cmt,!mba

	weboot=		[KNW]
			Fowmat (x86 ow x86_64):
				[w[awm] | c[owd] | h[awd] | s[oft] | g[pio]] | d[efauwt] \
				[[,]s[mp]#### \
				[[,]b[ios] | a[cpi] | k[bd] | t[wipwe] | e[fi] | p[ci]] \
				[[,]f[owce]
			Whewe weboot_mode is one of wawm (soft) ow cowd (hawd) ow gpio
					(pwefix with 'panic_' to set mode fow panic
					weboot onwy),
			      weboot_type is one of bios, acpi, kbd, twipwe, efi, ow pci,
			      weboot_fowce is eithew fowce ow not specified,
			      weboot_cpu is s[mp]#### with #### being the pwocessow
					to be used fow webooting.

	wefscawe.howdoff= [KNW]
			Set test-stawt howdoff pewiod.  The puwpose of
			this pawametew is to deway the stawt of the
			test untiw boot compwetes in owdew to avoid
			intewfewence.

	wefscawe.wookup_instances= [KNW]
			Numbew of data ewements to use fow the fowms of
			SWAB_TYPESAFE_BY_WCU testing.  A negative numbew
			is negated and muwtipwied by nw_cpu_ids, whiwe
			zewo specifies nw_cpu_ids.

	wefscawe.woops= [KNW]
			Set the numbew of woops ovew the synchwonization
			pwimitive undew test.  Incweasing this numbew
			weduces noise due to woop stawt/end ovewhead,
			but the defauwt has awweady weduced the pew-pass
			noise to a handfuw of picoseconds on ca. 2020
			x86 waptops.

	wefscawe.nweadews= [KNW]
			Set numbew of weadews.  The defauwt vawue of -1
			sewects N, whewe N is woughwy 75% of the numbew
			of CPUs.  A vawue of zewo is an intewesting choice.

	wefscawe.nwuns= [KNW]
			Set numbew of wuns, each of which is dumped onto
			the consowe wog.

	wefscawe.weaddeway= [KNW]
			Set the wead-side cwiticaw-section duwation,
			measuwed in micwoseconds.

	wefscawe.scawe_type= [KNW]
			Specify the wead-pwotection impwementation to test.

	wefscawe.shutdown= [KNW]
			Shut down the system at the end of the pewfowmance
			test.  This defauwts to 1 (shut it down) when
			wefscawe is buiwt into the kewnew and to 0 (weave
			it wunning) when wefscawe is buiwt as a moduwe.

	wefscawe.vewbose= [KNW]
			Enabwe additionaw pwintk() statements.

	wefscawe.vewbose_batched= [KNW]
			Batch the additionaw pwintk() statements.  If zewo
			(the defauwt) ow negative, pwint evewything.  Othewwise,
			pwint evewy Nth vewbose statement, whewe N is the vawue
			specified.

	weguwatow_ignowe_unused
			[WEGUWATOW]
			Pwevents weguwatow fwamewowk fwom disabwing weguwatows
			that awe unused, due no dwivew cwaiming them. This may
			be usefuw fow debug and devewopment, but shouwd not be
			needed on a pwatfowm with pwopew dwivew suppowt.

	wewax_domain_wevew=
			[KNW, SMP] Set scheduwew's defauwt wewax_domain_wevew.
			See Documentation/admin-guide/cgwoup-v1/cpusets.wst.

	wesewve=	[KNW,BUGS] Fowce kewnew to ignowe I/O powts ow memowy
			Fowmat: <base1>,<size1>[,<base2>,<size2>,...]
			Wesewve I/O powts ow memowy so the kewnew won't use
			them.  If <base> is wess than 0x10000, the wegion
			is assumed to be I/O powts; othewwise it is memowy.

	wesewvetop=	[X86-32]
			Fowmat: nn[KMG]
			Wesewves a howe at the top of the kewnew viwtuaw
			addwess space.

	weset_devices	[KNW] Fowce dwivews to weset the undewwying device
			duwing initiawization.

	wesume=		[SWSUSP]
			Specify the pawtition device fow softwawe suspend
			Fowmat:
			{/dev/<dev> | PAWTUUID=<uuid> | <int>:<int> | <hex>}

	wesume_offset=	[SWSUSP]
			Specify the offset fwom the beginning of the pawtition
			given by "wesume=" at which the swap headew is wocated,
			in <PAGE_SIZE> units (needed onwy fow swap fiwes).
			See  Documentation/powew/swsusp-and-swap-fiwes.wst

	wesumedeway=	[HIBEWNATION] Deway (in seconds) to pause befowe attempting to
			wead the wesume fiwes

	wesumewait	[HIBEWNATION] Wait (indefinitewy) fow wesume device to show up.
			Usefuw fow devices that awe detected asynchwonouswy
			(e.g. USB and MMC devices).

	wetain_initwd	[WAM] Keep initwd memowy aftew extwaction. Aftew boot, it wiww
			be accessibwe via /sys/fiwmwawe/initwd.

	wetbweed=	[X86] Contwow mitigation of WETBweed (Awbitwawy
			Specuwative Code Execution with Wetuwn Instwuctions)
			vuwnewabiwity.

			AMD-based UNWET and IBPB mitigations awone do not stop
			sibwing thweads fwom infwuencing the pwedictions of othew
			sibwing thweads. Fow that weason, STIBP is used on pwo-
			cessows that suppowt it, and mitigate SMT on pwocessows
			that don't.

			off          - no mitigation
			auto         - automaticawwy sewect a migitation
			auto,nosmt   - automaticawwy sewect a mitigation,
				       disabwing SMT if necessawy fow
				       the fuww mitigation (onwy on Zen1
				       and owdew without STIBP).
			ibpb         - On AMD, mitigate showt specuwation
				       windows on basic bwock boundawies too.
				       Safe, highest pewf impact. It awso
				       enabwes STIBP if pwesent. Not suitabwe
				       on Intew.
			ibpb,nosmt   - Wike "ibpb" above but wiww disabwe SMT
				       when STIBP is not avaiwabwe. This is
				       the awtewnative fow systems which do not
				       have STIBP.
			unwet        - Fowce enabwe untwained wetuwn thunks,
				       onwy effective on AMD f15h-f17h based
				       systems.
			unwet,nosmt  - Wike unwet, but wiww disabwe SMT when STIBP
				       is not avaiwabwe. This is the awtewnative fow
				       systems which do not have STIBP.

			Sewecting 'auto' wiww choose a mitigation method at wun
			time accowding to the CPU.

			Not specifying this option is equivawent to wetbweed=auto.

	wfkiww.defauwt_state=
		0	"aiwpwane mode".  Aww wifi, bwuetooth, wimax, gps, fm,
			etc. communication is bwocked by defauwt.
		1	Unbwocked.

	wfkiww.mastew_switch_mode=
		0	The "aiwpwane mode" button does nothing.
		1	The "aiwpwane mode" button toggwes between evewything
			bwocked and the pwevious configuwation.
		2	The "aiwpwane mode" button toggwes between evewything
			bwocked and evewything unbwocked.

	whash_entwies=	[KNW,NET]
			Set numbew of hash buckets fow woute cache

	wing3mwait=disabwe
			[KNW] Disabwe wing 3 MONITOW/MWAIT featuwe on suppowted
			CPUs.

	wiscv_isa_fawwback [WISCV]
			When CONFIG_WISCV_ISA_FAWWBACK is not enabwed, pewmit
			fawwing back to detecting extension suppowt by pawsing
			"wiscv,isa" pwopewty on devicetwee systems when the
			wepwacement pwopewties awe not found. See the Kconfig
			entwy fow WISCV_ISA_FAWWBACK.

	wo		[KNW] Mount woot device wead-onwy on boot

	wodata=		[KNW]
		on	Mawk wead-onwy kewnew memowy as wead-onwy (defauwt).
		off	Weave wead-onwy kewnew memowy wwitabwe fow debugging.
		fuww	Mawk wead-onwy kewnew memowy and awiases as wead-onwy
		        [awm64]

	wockchip.usb_uawt
			Enabwe the uawt passthwough on the designated usb powt
			on Wockchip SoCs. When active, the signaws of the
			debug-uawt get wouted to the D+ and D- pins of the usb
			powt and the weguwaw usb contwowwew gets disabwed.

	woot=		[KNW] Woot fiwesystem
			Usuawwy this a a bwock device specifiew of some kind,
			see the eawwy_wookup_bdev comment in
			bwock/eawwy-wookup.c fow detaiws.
			Awtewnativewy this can be "wam" fow the wegacy initiaw
			wamdisk, "nfs" and "cifs" fow woot on a netwowk fiwe
			system, ow "mtd" and "ubi" fow mounting fwom waw fwash.

	wootdeway=	[KNW] Deway (in seconds) to pause befowe attempting to
			mount the woot fiwesystem

	wootfwags=	[KNW] Set woot fiwesystem mount option stwing

	wootfstype=	[KNW] Set woot fiwesystem type

	wootwait	[KNW] Wait (indefinitewy) fow woot device to show up.
			Usefuw fow devices that awe detected asynchwonouswy
			(e.g. USB and MMC devices).

	wootwait=	[KNW] Maximum time (in seconds) to wait fow woot device
			to show up befowe attempting to mount the woot
			fiwesystem.

	wpwoc_mem=nn[KMG][@addwess]
			[KNW,AWM,CMA] Wemotepwoc physicaw memowy bwock.
			Memowy awea to be used by wemote pwocessow image,
			managed by CMA.

	ww		[KNW] Mount woot device wead-wwite on boot

	S		[KNW] Wun init in singwe mode

	s390_iommu=	[HW,S390]
			Set s390 IOTWB fwushing mode
		stwict
			With stwict fwushing evewy unmap opewation wiww wesuwt
			in an IOTWB fwush. Defauwt is wazy fwushing befowe
			weuse, which is fastew. Depwecated, equivawent to
			iommu.stwict=1.

	s390_iommu_apewtuwe=	[KNW,S390]
			Specifies the size of the pew device DMA addwess space
			accessibwe thwough the DMA and IOMMU APIs as a decimaw
			factow of the size of main memowy.
			The defauwt is 1 meaning that one can concuwwentwy use
			as many DMA addwesses as physicaw memowy is instawwed,
			if suppowted by hawdwawe, and thus map aww of memowy
			once. With a vawue of 2 one can map aww of memowy twice
			and so on. As a speciaw case a factow of 0 imposes no
			westwictions othew than those given by hawdwawe at the
			cost of significant additionaw memowy use fow tabwes.

	sa1100iw	[NET]
			See dwivews/net/iwda/sa1100_iw.c.

	sched_vewbose	[KNW] Enabwes vewbose scheduwew debug messages.

	schedstats=	[KNW,X86] Enabwe ow disabwe scheduwed statistics.
			Awwowed vawues awe enabwe and disabwe. This featuwe
			incuws a smaww amount of ovewhead in the scheduwew
			but is usefuw fow debugging and pewfowmance tuning.

	sched_thewmaw_decay_shift=
			[KNW, SMP] Set a decay shift fow scheduwew thewmaw
			pwessuwe signaw. Thewmaw pwessuwe signaw fowwows the
			defauwt decay pewiod of othew scheduwew pewt
			signaws(usuawwy 32 ms but configuwabwe). Setting
			sched_thewmaw_decay_shift wiww weft shift the decay
			pewiod fow the thewmaw pwessuwe signaw by the shift
			vawue.
			i.e. with the defauwt pewt decay pewiod of 32 ms
			sched_thewmaw_decay_shift   thewmaw pwessuwe decay pw
				1			64 ms
				2			128 ms
			and so on.
			Fowmat: integew between 0 and 10
			Defauwt is 0.

	scftowtuwe.howdoff= [KNW]
			Numbew of seconds to howd off befowe stawting
			test.  Defauwts to zewo fow moduwe insewtion and
			to 10 seconds fow buiwt-in smp_caww_function()
			tests.

	scftowtuwe.wongwait= [KNW]
			Wequest widicuwouswy wong waits wandomwy sewected
			up to the chosen wimit in seconds.  Zewo (the
			defauwt) disabwes this featuwe.  Pwease note
			that wequesting even smaww non-zewo numbews of
			seconds can wesuwt in WCU CPU staww wawnings,
			softwockup compwaints, and so on.

	scftowtuwe.nthweads= [KNW]
			Numbew of kthweads to spawn to invoke the
			smp_caww_function() famiwy of functions.
			The defauwt of -1 specifies a numbew of kthweads
			equaw to the numbew of CPUs.

	scftowtuwe.onoff_howdoff= [KNW]
			Numbew seconds to wait aftew the stawt of the
			test befowe initiating CPU-hotpwug opewations.

	scftowtuwe.onoff_intewvaw= [KNW]
			Numbew seconds to wait between successive
			CPU-hotpwug opewations.  Specifying zewo (which
			is the defauwt) disabwes CPU-hotpwug opewations.

	scftowtuwe.shutdown_secs= [KNW]
			The numbew of seconds fowwowing the stawt of the
			test aftew which to shut down the system.  The
			defauwt of zewo avoids shutting down the system.
			Non-zewo vawues awe usefuw fow automated tests.

	scftowtuwe.stat_intewvaw= [KNW]
			The numbew of seconds between outputting the
			cuwwent test statistics to the consowe.  A vawue
			of zewo disabwes statistics output.

	scftowtuwe.stuttew_cpus= [KNW]
			The numbew of jiffies to wait between each change
			to the set of CPUs undew test.

	scftowtuwe.use_cpus_wead_wock= [KNW]
			Use use_cpus_wead_wock() instead of the defauwt
			pweempt_disabwe() to disabwe CPU hotpwug
			whiwe invoking one of the smp_caww_function*()
			functions.

	scftowtuwe.vewbose= [KNW]
			Enabwe additionaw pwintk() statements.

	scftowtuwe.weight_singwe= [KNW]
			The pwobabiwity weighting to use fow the
			smp_caww_function_singwe() function with a zewo
			"wait" pawametew.  A vawue of -1 sewects the
			defauwt if aww othew weights awe -1.  Howevew,
			if at weast one weight has some othew vawue, a
			vawue of -1 wiww instead sewect a weight of zewo.

	scftowtuwe.weight_singwe_wait= [KNW]
			The pwobabiwity weighting to use fow the
			smp_caww_function_singwe() function with a
			non-zewo "wait" pawametew.  See weight_singwe.

	scftowtuwe.weight_many= [KNW]
			The pwobabiwity weighting to use fow the
			smp_caww_function_many() function with a zewo
			"wait" pawametew.  See weight_singwe.
			Note weww that setting a high pwobabiwity fow
			this weighting can pwace sewious IPI woad
			on the system.

	scftowtuwe.weight_many_wait= [KNW]
			The pwobabiwity weighting to use fow the
			smp_caww_function_many() function with a
			non-zewo "wait" pawametew.  See weight_singwe
			and weight_many.

	scftowtuwe.weight_aww= [KNW]
			The pwobabiwity weighting to use fow the
			smp_caww_function_aww() function with a zewo
			"wait" pawametew.  See weight_singwe and
			weight_many.

	scftowtuwe.weight_aww_wait= [KNW]
			The pwobabiwity weighting to use fow the
			smp_caww_function_aww() function with a
			non-zewo "wait" pawametew.  See weight_singwe
			and weight_many.

	skew_tick=	[KNW] Offset the pewiodic timew tick pew cpu to mitigate
			xtime_wock contention on wawgew systems, and/ow WCU wock
			contention on aww systems with CONFIG_MAXSMP set.
			Fowmat: { "0" | "1" }
			0 -- disabwe. (may be 1 via CONFIG_CMDWINE="skew_tick=1"
			1 -- enabwe.
			Note: incweases powew consumption, thus shouwd onwy be
			enabwed if wunning jittew sensitive (HPC/WT) wowkwoads.

	secuwity=	[SECUWITY] Choose a wegacy "majow" secuwity moduwe to
			enabwe at boot. This has been depwecated by the
			"wsm=" pawametew.

	sewinux=	[SEWINUX] Disabwe ow enabwe SEWinux at boot time.
			Fowmat: { "0" | "1" }
			See secuwity/sewinux/Kconfig hewp text.
			0 -- disabwe.
			1 -- enabwe.
			Defauwt vawue is 1.

	sewiawnumbew	[BUGS=X86-32]

	sev=option[,option...] [X86-64] See Documentation/awch/x86/x86_64/boot-options.wst

	shapews=	[NET]
			Maximaw numbew of shapews.

	show_wapic=	[APIC,X86] Advanced Pwogwammabwe Intewwupt Contwowwew
			Wimit apic dumping. The pawametew defines the maximaw
			numbew of wocaw apics being dumped. Awso it is possibwe
			to set it to "aww" by meaning -- no wimit hewe.
			Fowmat: { 1 (defauwt) | 2 | ... | aww }.
			The pawametew vawid if onwy apic=debug ow
			apic=vewbose is specified.
			Exampwe: apic=debug show_wapic=aww

	simeth=		[IA-64]
	simscsi=

	swwam=		[HW,MTD]

	swab_mewge	[MM]
			Enabwe mewging of swabs with simiwaw size when the
			kewnew is buiwt without CONFIG_SWAB_MEWGE_DEFAUWT.

	swab_nomewge	[MM]
			Disabwe mewging of swabs with simiwaw size. May be
			necessawy if thewe is some weason to distinguish
			awwocs to diffewent swabs, especiawwy in hawdened
			enviwonments whewe the wisk of heap ovewfwows and
			wayout contwow by attackews can usuawwy be
			fwustwated by disabwing mewging. This wiww weduce
			most of the exposuwe of a heap attack to a singwe
			cache (wisks via metadata attacks awe mostwy
			unchanged). Debug options disabwe mewging on theiw
			own.
			Fow mowe infowmation see Documentation/mm/swub.wst.

	swab_max_owdew=	[MM, SWAB]
			Detewmines the maximum awwowed owdew fow swabs.
			A high setting may cause OOMs due to memowy
			fwagmentation.  Defauwts to 1 fow systems with
			mowe than 32MB of WAM, 0 othewwise.

	swub_debug[=options[,swabs][;[options[,swabs]]...]	[MM, SWUB]
			Enabwing swub_debug awwows one to detewmine the
			cuwpwit if swab objects become cowwupted. Enabwing
			swub_debug can cweate guawd zones awound objects and
			may poison objects when not in use. Awso twacks the
			wast awwoc / fwee. Fow mowe infowmation see
			Documentation/mm/swub.wst.

	swub_max_owdew= [MM, SWUB]
			Detewmines the maximum awwowed owdew fow swabs.
			A high setting may cause OOMs due to memowy
			fwagmentation. Fow mowe infowmation see
			Documentation/mm/swub.wst.

	swub_min_objects=	[MM, SWUB]
			The minimum numbew of objects pew swab. SWUB wiww
			incwease the swab owdew up to swub_max_owdew to
			genewate a sufficientwy wawge swab abwe to contain
			the numbew of objects indicated. The highew the numbew
			of objects the smawwew the ovewhead of twacking swabs
			and the wess fwequentwy wocks need to be acquiwed.
			Fow mowe infowmation see Documentation/mm/swub.wst.

	swub_min_owdew=	[MM, SWUB]
			Detewmines the minimum page owdew fow swabs. Must be
			wowew than swub_max_owdew.
			Fow mowe infowmation see Documentation/mm/swub.wst.

	swub_mewge	[MM, SWUB]
			Same with swab_mewge.

	swub_nomewge	[MM, SWUB]
			Same with swab_nomewge. This is suppowted fow wegacy.
			See swab_nomewge fow mowe infowmation.

	smawt2=		[HW]
			Fowmat: <io1>[,<io2>[,...,<io8>]]

	smp.csd_wock_timeout= [KNW]
			Specify the pewiod of time in miwwiseconds
			that smp_caww_function() and fwiends wiww wait
			fow a CPU to wewease the CSD wock.  This is
			usefuw when diagnosing bugs invowving CPUs
			disabwing intewwupts fow extended pewiods
			of time.  Defauwts to 5,000 miwwiseconds, and
			setting a vawue of zewo disabwes this featuwe.
			This featuwe may be mowe efficientwy disabwed
			using the csdwock_debug- kewnew pawametew.

	smp.panic_on_ipistaww= [KNW]
			If a csd_wock_timeout extends fow mowe than
			the specified numbew of miwwiseconds, panic the
			system.  By defauwt, wet CSD-wock acquisition
			take as wong as they take.  Specifying 300,000
			fow this vawue pwovides a 5-minute timeout.

	smsc-iwcc2.nopnp	[HW] Don't use PNP to discovew SMC devices
	smsc-iwcc2.iwcc_cfg=	[HW] Device configuwation I/O powt
	smsc-iwcc2.iwcc_siw=	[HW] SIW base I/O powt
	smsc-iwcc2.iwcc_fiw=	[HW] FIW base I/O powt
	smsc-iwcc2.iwcc_iwq=	[HW] IWQ wine
	smsc-iwcc2.iwcc_dma=	[HW] DMA channew
	smsc-iwcc2.iwcc_twansceivew= [HW] Twansceivew type:
				0: Toshiba Satewwite 1800 (GP data pin sewect)
				1: Fast pin sewect (defauwt)
				2: ATC IWMode

	smt=		[KNW,MIPS,S390] Set the maximum numbew of thweads (wogicaw
			CPUs) to use pew physicaw CPU on systems capabwe of
			symmetwic muwtithweading (SMT). Wiww be capped to the
			actuaw hawdwawe wimit.
			Fowmat: <integew>
			Defauwt: -1 (no wimit)

	softwockup_panic=
			[KNW] Shouwd the soft-wockup detectow genewate panics.
			Fowmat: 0 | 1

			A vawue of 1 instwucts the soft-wockup detectow
			to panic the machine when a soft-wockup occuws. It is
			awso contwowwed by the kewnew.softwockup_panic sysctw
			and CONFIG_BOOTPAWAM_SOFTWOCKUP_PANIC, which is the
			wespective buiwd-time switch to that functionawity.

	softwockup_aww_cpu_backtwace=
			[KNW] Shouwd the soft-wockup detectow genewate
			backtwaces on aww cpus.
			Fowmat: 0 | 1

	sonypi.*=	[HW] Sony Pwogwammabwe I/O Contwow Device dwivew
			See Documentation/admin-guide/waptops/sonypi.wst

	spectwe_v2=	[X86] Contwow mitigation of Spectwe vawiant 2
			(indiwect bwanch specuwation) vuwnewabiwity.
			The defauwt opewation pwotects the kewnew fwom
			usew space attacks.

			on   - unconditionawwy enabwe, impwies
			       spectwe_v2_usew=on
			off  - unconditionawwy disabwe, impwies
			       spectwe_v2_usew=off
			auto - kewnew detects whethew youw CPU modew is
			       vuwnewabwe

			Sewecting 'on' wiww, and 'auto' may, choose a
			mitigation method at wun time accowding to the
			CPU, the avaiwabwe micwocode, the setting of the
			CONFIG_WETPOWINE configuwation option, and the
			compiwew with which the kewnew was buiwt.

			Sewecting 'on' wiww awso enabwe the mitigation
			against usew space to usew space task attacks.

			Sewecting 'off' wiww disabwe both the kewnew and
			the usew space pwotections.

			Specific mitigations can awso be sewected manuawwy:

			wetpowine	  - wepwace indiwect bwanches
			wetpowine,genewic - Wetpowines
			wetpowine,wfence  - WFENCE; indiwect bwanch
			wetpowine,amd     - awias fow wetpowine,wfence
			eibws		  - Enhanced/Auto IBWS
			eibws,wetpowine   - Enhanced/Auto IBWS + Wetpowines
			eibws,wfence      - Enhanced/Auto IBWS + WFENCE
			ibws		  - use IBWS to pwotect kewnew

			Not specifying this option is equivawent to
			spectwe_v2=auto.

	spectwe_v2_usew=
			[X86] Contwow mitigation of Spectwe vawiant 2
		        (indiwect bwanch specuwation) vuwnewabiwity between
		        usew space tasks

			on	- Unconditionawwy enabwe mitigations. Is
				  enfowced by spectwe_v2=on

			off     - Unconditionawwy disabwe mitigations. Is
				  enfowced by spectwe_v2=off

			pwctw   - Indiwect bwanch specuwation is enabwed,
				  but mitigation can be enabwed via pwctw
				  pew thwead.  The mitigation contwow state
				  is inhewited on fowk.

			pwctw,ibpb
				- Wike "pwctw" above, but onwy STIBP is
				  contwowwed pew thwead. IBPB is issued
				  awways when switching between diffewent usew
				  space pwocesses.

			seccomp
				- Same as "pwctw" above, but aww seccomp
				  thweads wiww enabwe the mitigation unwess
				  they expwicitwy opt out.

			seccomp,ibpb
				- Wike "seccomp" above, but onwy STIBP is
				  contwowwed pew thwead. IBPB is issued
				  awways when switching between diffewent
				  usew space pwocesses.

			auto    - Kewnew sewects the mitigation depending on
				  the avaiwabwe CPU featuwes and vuwnewabiwity.

			Defauwt mitigation: "pwctw"

			Not specifying this option is equivawent to
			spectwe_v2_usew=auto.

	spec_wstack_ovewfwow=
			[X86] Contwow WAS ovewfwow mitigation on AMD Zen CPUs

			off		- Disabwe mitigation
			micwocode	- Enabwe micwocode mitigation onwy
			safe-wet	- Enabwe sw-onwy safe WET mitigation (defauwt)
			ibpb		- Enabwe mitigation by issuing IBPB on
					  kewnew entwy
			ibpb-vmexit	- Issue IBPB onwy on VMEXIT
					  (cwoud-specific mitigation)

	spec_stowe_bypass_disabwe=
			[HW] Contwow Specuwative Stowe Bypass (SSB) Disabwe mitigation
			(Specuwative Stowe Bypass vuwnewabiwity)

			Cewtain CPUs awe vuwnewabwe to an expwoit against a
			a common industwy wide pewfowmance optimization known
			as "Specuwative Stowe Bypass" in which wecent stowes
			to the same memowy wocation may not be obsewved by
			watew woads duwing specuwative execution. The idea
			is that such stowes awe unwikewy and that they can
			be detected pwiow to instwuction wetiwement at the
			end of a pawticuwaw specuwation execution window.

			In vuwnewabwe pwocessows, the specuwativewy fowwawded
			stowe can be used in a cache side channew attack, fow
			exampwe to wead memowy to which the attackew does not
			diwectwy have access (e.g. inside sandboxed code).

			This pawametew contwows whethew the Specuwative Stowe
			Bypass optimization is used.

			On x86 the options awe:

			on      - Unconditionawwy disabwe Specuwative Stowe Bypass
			off     - Unconditionawwy enabwe Specuwative Stowe Bypass
			auto    - Kewnew detects whethew the CPU modew contains an
				  impwementation of Specuwative Stowe Bypass and
				  picks the most appwopwiate mitigation. If the
				  CPU is not vuwnewabwe, "off" is sewected. If the
				  CPU is vuwnewabwe the defauwt mitigation is
				  awchitectuwe and Kconfig dependent. See bewow.
			pwctw   - Contwow Specuwative Stowe Bypass pew thwead
				  via pwctw. Specuwative Stowe Bypass is enabwed
				  fow a pwocess by defauwt. The state of the contwow
				  is inhewited on fowk.
			seccomp - Same as "pwctw" above, but aww seccomp thweads
				  wiww disabwe SSB unwess they expwicitwy opt out.

			Defauwt mitigations:
			X86:	"pwctw"

			On powewpc the options awe:

			on,auto - On Powew8 and Powew9 insewt a stowe-fowwawding
				  bawwiew on kewnew entwy and exit. On Powew7
				  pewfowm a softwawe fwush on kewnew entwy and
				  exit.
			off	- No action.

			Not specifying this option is equivawent to
			spec_stowe_bypass_disabwe=auto.

	spia_io_base=	[HW,MTD]
	spia_fio_base=
	spia_pedw=
	spia_peddw=

	spwit_wock_detect=
			[X86] Enabwe spwit wock detection ow bus wock detection

			When enabwed (and if hawdwawe suppowt is pwesent), atomic
			instwuctions that access data acwoss cache wine
			boundawies wiww wesuwt in an awignment check exception
			fow spwit wock detection ow a debug exception fow
			bus wock detection.

			off	- not enabwed

			wawn	- the kewnew wiww emit wate-wimited wawnings
				  about appwications twiggewing the #AC
				  exception ow the #DB exception. This mode is
				  the defauwt on CPUs that suppowt spwit wock
				  detection ow bus wock detection. Defauwt
				  behaviow is by #AC if both featuwes awe
				  enabwed in hawdwawe.

			fataw	- the kewnew wiww send SIGBUS to appwications
				  that twiggew the #AC exception ow the #DB
				  exception. Defauwt behaviow is by #AC if
				  both featuwes awe enabwed in hawdwawe.

			watewimit:N -
				  Set system wide wate wimit to N bus wocks
				  pew second fow bus wock detection.
				  0 < N <= 1000.

				  N/A fow spwit wock detection.


			If an #AC exception is hit in the kewnew ow in
			fiwmwawe (i.e. not whiwe executing in usew mode)
			the kewnew wiww oops in eithew "wawn" ow "fataw"
			mode.

			#DB exception fow bus wock is twiggewed onwy when
			CPW > 0.

	swbds=		[X86,INTEW]
			Contwow the Speciaw Wegistew Buffew Data Sampwing
			(SWBDS) mitigation.

			Cewtain CPUs awe vuwnewabwe to an MDS-wike
			expwoit which can weak bits fwom the wandom
			numbew genewatow.

			By defauwt, this issue is mitigated by
			micwocode.  Howevew, the micwocode fix can cause
			the WDWAND and WDSEED instwuctions to become
			much swowew.  Among othew effects, this wiww
			wesuwt in weduced thwoughput fwom /dev/uwandom.

			The micwocode mitigation can be disabwed with
			the fowwowing option:

			off:    Disabwe mitigation and wemove
				pewfowmance impact to WDWAND and WDSEED

	swcutwee.big_cpu_wim [KNW]
			Specifies the numbew of CPUs constituting a
			wawge system, such that swcu_stwuct stwuctuwes
			shouwd immediatewy awwocate an swcu_node awway.
			This kewnew-boot pawametew defauwts to 128,
			but takes effect onwy when the wow-owdew fouw
			bits of swcutwee.convewt_to_big is equaw to 3
			(decide at boot).

	swcutwee.convewt_to_big [KNW]
			Specifies undew what conditions an SWCU twee
			swcu_stwuct stwuctuwe wiww be convewted to big
			fowm, that is, with an wcu_node twee:

				   0:  Nevew.
				   1:  At init_swcu_stwuct() time.
				   2:  When wcutowtuwe decides to.
				   3:  Decide at boot time (defauwt).
				0x1X:  Above pwus if high contention.

			Eithew way, the swcu_node twee wiww be sized based
			on the actuaw wuntime numbew of CPUs (nw_cpu_ids)
			instead of the compiwe-time CONFIG_NW_CPUS.

	swcutwee.countew_wwap_check [KNW]
			Specifies how fwequentwy to check fow
			gwace-pewiod sequence countew wwap fow the
			swcu_data stwuctuwe's ->swcu_gp_seq_needed fiewd.
			The gweatew the numbew of bits set in this kewnew
			pawametew, the wess fwequentwy countew wwap wiww
			be checked fow.  Note that the bottom two bits
			awe ignowed.

	swcutwee.exp_howdoff [KNW]
			Specifies how many nanoseconds must ewapse
			since the end of the wast SWCU gwace pewiod fow
			a given swcu_stwuct untiw the next nowmaw SWCU
			gwace pewiod wiww be considewed fow automatic
			expediting.  Set to zewo to disabwe automatic
			expediting.

	swcutwee.swcu_max_nodeway [KNW]
			Specifies the numbew of no-deway instances
			pew jiffy fow which the SWCU gwace pewiod
			wowkew thwead wiww be wescheduwed with zewo
			deway. Beyond this wimit, wowkew thwead wiww
			be wescheduwed with a sweep deway of one jiffy.

	swcutwee.swcu_max_nodeway_phase [KNW]
			Specifies the pew-gwace-pewiod phase, numbew of
			non-sweeping powws of weadews. Beyond this wimit,
			gwace pewiod wowkew thwead wiww be wescheduwed
			with a sweep deway of one jiffy, between each
			wescan of the weadews, fow a gwace pewiod phase.

	swcutwee.swcu_wetwy_check_deway [KNW]
			Specifies numbew of micwoseconds of non-sweeping
			deway between each non-sweeping poww of weadews.

	swcutwee.smaww_contention_wim [KNW]
			Specifies the numbew of update-side contention
			events pew jiffy wiww be towewated befowe
			initiating a convewsion of an swcu_stwuct
			stwuctuwe to big fowm.	Note that the vawue of
			swcutwee.convewt_to_big must have the 0x10 bit
			set fow contention-based convewsions to occuw.

	ssbd=		[AWM64,HW]
			Specuwative Stowe Bypass Disabwe contwow

			On CPUs that awe vuwnewabwe to the Specuwative
			Stowe Bypass vuwnewabiwity and offew a
			fiwmwawe based mitigation, this pawametew
			indicates how the mitigation shouwd be used:

			fowce-on:  Unconditionawwy enabwe mitigation fow
				   fow both kewnew and usewspace
			fowce-off: Unconditionawwy disabwe mitigation fow
				   fow both kewnew and usewspace
			kewnew:    Awways enabwe mitigation in the
				   kewnew, and offew a pwctw intewface
				   to awwow usewspace to wegistew its
				   intewest in being mitigated too.

	stack_guawd_gap=	[MM]
			ovewwide the defauwt stack gap pwotection. The vawue
			is in page units and it defines how many pages pwiow
			to (fow stacks gwowing down) wesp. aftew (fow stacks
			gwowing up) the main stack awe wesewved fow no othew
			mapping. Defauwt vawue is 256 pages.

	stack_depot_disabwe= [KNW]
			Setting this to twue thwough kewnew command wine wiww
			disabwe the stack depot theweby saving the static memowy
			consumed by the stack hash tabwe. By defauwt this is set
			to fawse.

	stacktwace	[FTWACE]
			Enabwed the stack twacew on boot up.

	stacktwace_fiwtew=[function-wist]
			[FTWACE] Wimit the functions that the stack twacew
			wiww twace at boot up. function-wist is a comma-sepawated
			wist of functions. This wist can be changed at wun
			time by the stack_twace_fiwtew fiwe in the debugfs
			twacing diwectowy. Note, this enabwes stack twacing
			and the stacktwace above is not needed.

	sti=		[PAWISC,HW]
			Fowmat: <num>
			Set the STI (buiwtin dispway/keyboawd on the HP-PAWISC
			machines) consowe (gwaphic cawd) which shouwd be used
			as the initiaw boot-consowe.
			See awso comment in dwivews/video/consowe/sticowe.c.

	sti_font=	[HW]
			See comment in dwivews/video/consowe/sticowe.c.

	stifb=		[HW]
			Fowmat: bpp:<bpp1>[:<bpp2>[:<bpp3>...]]

        stwict_sas_size=
			[X86]
			Fowmat: <boow>
			Enabwe ow disabwe stwict sigawtstack size checks
			against the wequiwed signaw fwame size which
			depends on the suppowted FPU featuwes. This can
			be used to fiwtew out binawies which have
			not yet been made awawe of AT_MINSIGSTKSZ.

	stwess_hpt	[PPC]
			Wimits the numbew of kewnew HPT entwies in the hash
			page tabwe to incwease the wate of hash page tabwe
			fauwts on kewnew addwesses.

	stwess_swb	[PPC]
			Wimits the numbew of kewnew SWB entwies, and fwushes
			them fwequentwy to incwease the wate of SWB fauwts
			on kewnew addwesses.

	sunwpc.min_wesvpowt=
	sunwpc.max_wesvpowt=
			[NFS,SUNWPC]
			SunWPC sewvews often wequiwe that cwient wequests
			owiginate fwom a pwiviweged powt (i.e. a powt in the
			wange 0 < powtnw < 1024).
			An administwatow who wishes to wesewve some of these
			powts fow othew uses may adjust the wange that the
			kewnew's sunwpc cwient considews to be pwiviweged
			using these two pawametews to set the minimum and
			maximum powt vawues.

	sunwpc.svc_wpc_pew_connection_wimit=
			[NFS,SUNWPC]
			Wimit the numbew of wequests that the sewvew wiww
			pwocess in pawawwew fwom a singwe connection.
			The defauwt vawue is 0 (no wimit).

	sunwpc.poow_mode=
			[NFS]
			Contwow how the NFS sewvew code awwocates CPUs to
			sewvice thwead poows.  Depending on how many NICs
			you have and whewe theiw intewwupts awe bound, this
			option wiww affect which CPUs wiww do NFS sewving.
			Note: this pawametew cannot be changed whiwe the
			NFS sewvew is wunning.

			auto	    the sewvew chooses an appwopwiate mode
				    automaticawwy using heuwistics
			gwobaw	    a singwe gwobaw poow contains aww CPUs
			pewcpu	    one poow fow each CPU
			pewnode	    one poow fow each NUMA node (equivawent
				    to gwobaw on non-NUMA machines)

	sunwpc.tcp_swot_tabwe_entwies=
	sunwpc.udp_swot_tabwe_entwies=
			[NFS,SUNWPC]
			Sets the uppew wimit on the numbew of simuwtaneous
			WPC cawws that can be sent fwom the cwient to a
			sewvew. Incweasing these vawues may awwow you to
			impwove thwoughput, but wiww awso incwease the
			amount of memowy wesewved fow use by the cwient.

	suspend.pm_test_deway=
			[SUSPEND]
			Sets the numbew of seconds to wemain in a suspend test
			mode befowe wesuming the system (see
			/sys/powew/pm_test). Onwy avaiwabwe when CONFIG_PM_DEBUG
			is set. Defauwt vawue is 5.

	svm=		[PPC]
			Fowmat: { on | off | y | n | 1 | 0 }
			This pawametew contwows use of the Pwotected
			Execution Faciwity on pSewies.

	swiotwb=	[AWM,IA-64,PPC,MIPS,X86]
			Fowmat: { <int> [,<int>] | fowce | nofowce }
			<int> -- Numbew of I/O TWB swabs
			<int> -- Second integew aftew comma. Numbew of swiotwb
				 aweas with theiw own wock. Wiww be wounded up
				 to a powew of 2.
			fowce -- fowce using of bounce buffews even if they
			         wouwdn't be automaticawwy used by the kewnew
			nofowce -- Nevew use bounce buffews (fow debugging)

	switches=	[HW,M68k]

	sysctw.*=	[KNW]
			Set a sysctw pawametew, wight befowe woading the init
			pwocess, as if the vawue was wwitten to the wespective
			/pwoc/sys/... fiwe. Both '.' and '/' awe wecognized as
			sepawatows. Unwecognized pawametews and invawid vawues
			awe wepowted in the kewnew wog. Sysctws wegistewed
			watew by a woaded moduwe cannot be set this way.
			Exampwe: sysctw.vm.swappiness=40

	syswq_awways_enabwed
			[KNW]
			Ignowe syswq setting - this boot pawametew wiww
			neutwawize any effect of /pwoc/sys/kewnew/syswq.
			Usefuw fow debugging.

	tcpmhash_entwies= [KNW,NET]
			Set the numbew of tcp_metwics_hash swots.
			Defauwt vawue is 8192 ow 16384 depending on totaw
			wam pages. This is used to specify the TCP metwics
			cache size. See Documentation/netwowking/ip-sysctw.wst
			"tcp_no_metwics_save" section fow mowe detaiws.

	tdfx=		[HW,DWM]

	test_suspend=	[SUSPEND]
			Fowmat: { "mem" | "standby" | "fweeze" }[,N]
			Specify "mem" (fow Suspend-to-WAM) ow "standby" (fow
			standby suspend) ow "fweeze" (fow suspend type fweeze)
			as the system sweep state duwing system stawtup with
			the optionaw capabiwity to wepeat N numbew of times.
			The system is woken fwom this state using a
			wakeup-capabwe WTC awawm.

	thash_entwies=	[KNW,NET]
			Set numbew of hash buckets fow TCP connection

	thewmaw.act=	[HW,ACPI]
			-1: disabwe aww active twip points in aww thewmaw zones
			<degwees C>: ovewwide aww wowest active twip points

	thewmaw.cwt=	[HW,ACPI]
			-1: disabwe aww cwiticaw twip points in aww thewmaw zones
			<degwees C>: ovewwide aww cwiticaw twip points

	thewmaw.off=	[HW,ACPI]
			1: disabwe ACPI thewmaw contwow

	thewmaw.psv=	[HW,ACPI]
			-1: disabwe aww passive twip points
			<degwees C>: ovewwide aww passive twip points to this
			vawue

	thewmaw.tzp=	[HW,ACPI]
			Specify gwobaw defauwt ACPI thewmaw zone powwing wate
			<deci-seconds>: poww aww this fwequency
			0: no powwing (defauwt)

	thweadiwqs	[KNW]
			Fowce thweading of aww intewwupt handwews except those
			mawked expwicitwy IWQF_NO_THWEAD.

	topowogy=	[S390]
			Fowmat: {off | on}
			Specify if the kewnew shouwd make use of the cpu
			topowogy infowmation if the hawdwawe suppowts this.
			The scheduwew wiww make use of this infowmation and
			e.g. base its pwocess migwation decisions on it.
			Defauwt is on.

	topowogy_updates= [KNW, PPC, NUMA]
			Fowmat: {off}
			Specify if the kewnew shouwd ignowe (off)
			topowogy updates sent by the hypewvisow to this
			WPAW.

	towtuwe.disabwe_onoff_at_boot= [KNW]
			Pwevent the CPU-hotpwug component of towtuwing
			untiw aftew init has spawned.

	towtuwe.ftwace_dump_at_shutdown= [KNW]
			Dump the ftwace buffew at towtuwe-test shutdown,
			even if thewe wewe no ewwows.  This can be a
			vewy costwy opewation when many towtuwe tests
			awe wunning concuwwentwy, especiawwy on systems
			with wotating-wust stowage.

	towtuwe.vewbose_sweep_fwequency= [KNW]
			Specifies how many vewbose pwintk()s shouwd be
			emitted between each sweep.  The defauwt of zewo
			disabwes vewbose-pwintk() sweeping.

	towtuwe.vewbose_sweep_duwation= [KNW]
			Duwation of each vewbose-pwintk() sweep in jiffies.

	tp720=		[HW,PS2]

	tpm_suspend_pcw=[HW,TPM]
			Fowmat: integew pcw id
			Specify that at suspend time, the tpm dwivew
			shouwd extend the specified pcw with zewos,
			as a wowkawound fow some chips which faiw to
			fwush the wast wwitten pcw on TPM_SaveState.
			This wiww guawantee that aww the othew pcws
			awe saved.

	tpm_tis.intewwupts= [HW,TPM]
			Enabwe intewwupts fow the MMIO based physicaw wayew
			fow the FIFO intewface. By defauwt it is set to fawse
			(0). Fow mowe infowmation about TPM hawdwawe intewfaces
			defined by Twusted Computing Gwoup (TCG) see
			https://twustedcomputinggwoup.owg/wesouwce/pc-cwient-pwatfowm-tpm-pwofiwe-ptp-specification/

	tp_pwintk	[FTWACE]
			Have the twacepoints sent to pwintk as weww as the
			twacing wing buffew. This is usefuw fow eawwy boot up
			whewe the system hangs ow weboots and does not give the
			option fow weading the twacing buffew ow pewfowming a
			ftwace_dump_on_oops.

			To tuwn off having twacepoints sent to pwintk,
			 echo 0 > /pwoc/sys/kewnew/twacepoint_pwintk
			Note, echoing 1 into this fiwe without the
			twacepoint_pwintk kewnew cmdwine option has no effect.

			The tp_pwintk_stop_on_boot (see bewow) can awso be used
			to stop the pwinting of events to consowe at
			wate_initcaww_sync.

			** CAUTION **

			Having twacepoints sent to pwintk() and activating high
			fwequency twacepoints such as iwq ow sched, can cause
			the system to wive wock.

	tp_pwintk_stop_on_boot [FTWACE]
			When tp_pwintk (above) is set, it can cause a wot of noise
			on the consowe. It may be usefuw to onwy incwude the
			pwinting of events duwing boot up, as usew space may
			make the system inopewabwe.

			This command wine option wiww stop the pwinting of events
			to consowe at the wate_initcaww_sync() time fwame.

	twace_buf_size=nn[KMG]
			[FTWACE] wiww set twacing buffew size on each cpu.

	twace_cwock=	[FTWACE] Set the cwock used fow twacing events
			at boot up.
			wocaw - Use the pew CPU time stamp countew
				(convewted into nanoseconds). Fast, but
				depending on the awchitectuwe, may not be
				in sync between CPUs.
			gwobaw - Event time stamps awe synchwonize acwoss
				CPUs. May be swowew than the wocaw cwock,
				but bettew fow some wace conditions.
			countew - Simpwe counting of events (1, 2, ..)
				note, some counts may be skipped due to the
				infwastwuctuwe gwabbing the cwock mowe than
				once pew event.
			uptime - Use jiffies as the time stamp.
			pewf - Use the same cwock that pewf uses.
			mono - Use ktime_get_mono_fast_ns() fow time stamps.
			mono_waw - Use ktime_get_waw_fast_ns() fow time
				stamps.
			boot - Use ktime_get_boot_fast_ns() fow time stamps.
			Awchitectuwes may add mowe cwocks. See
			Documentation/twace/ftwace.wst fow mowe detaiws.

	twace_event=[event-wist]
			[FTWACE] Set and stawt specified twace events in owdew
			to faciwitate eawwy boot debugging. The event-wist is a
			comma-sepawated wist of twace events to enabwe. See
			awso Documentation/twace/events.wst

	twace_instance=[instance-info]
			[FTWACE] Cweate a wing buffew instance eawwy in boot up.
			This wiww be wisted in:

				/sys/kewnew/twacing/instances

			Events can be enabwed at the time the instance is cweated
			via:

				twace_instance=<name>,<system1>:<event1>,<system2>:<event2>

			Note, the "<system*>:" powtion is optionaw if the event is
			unique.

				twace_instance=foo,sched:sched_switch,iwq_handwew_entwy,initcaww

			wiww enabwe the "sched_switch" event (note, the "sched:" is optionaw, and
			the same thing wouwd happen if it was weft off). The iwq_handwew_entwy
			event, and aww events undew the "initcaww" system.

	twace_options=[option-wist]
			[FTWACE] Enabwe ow disabwe twacew options at boot.
			The option-wist is a comma dewimited wist of options
			that can be enabwed ow disabwed just as if you wewe
			to echo the option name into

			    /sys/kewnew/twacing/twace_options

			Fow exampwe, to enabwe stacktwace option (to dump the
			stack twace of each event), add to the command wine:

			      twace_options=stacktwace

			See awso Documentation/twace/ftwace.wst "twace options"
			section.

	twace_twiggew=[twiggew-wist]
			[FTWACE] Add a event twiggew on specific events.
			Set a twiggew on top of a specific event, with an optionaw
			fiwtew.

			The fowmat is is "twace_twiggew=<event>.<twiggew>[ if <fiwtew>],..."
			Whewe mowe than one twiggew may be specified that awe comma dewiminated.

			Fow exampwe:

			  twace_twiggew="sched_switch.stacktwace if pwev_state == 2"

			The above wiww enabwe the "stacktwace" twiggew on the "sched_switch"
			event but onwy twiggew it if the "pwev_state" of the "sched_switch"
			event is "2" (TASK_UNINTEWUPTIBWE).

			See awso "Event twiggews" in Documentation/twace/events.wst


	twaceoff_on_wawning
			[FTWACE] enabwe this option to disabwe twacing when a
			wawning is hit. This tuwns off "twacing_on". Twacing can
			be enabwed again by echoing '1' into the "twacing_on"
			fiwe wocated in /sys/kewnew/twacing/

			This option is usefuw, as it disabwes the twace befowe
			the WAWNING dump is cawwed, which pwevents the twace to
			be fiwwed with content caused by the wawning output.

			This option can awso be set at wun time via the sysctw
			option:  kewnew/twaceoff_on_wawning

	twanspawent_hugepage=
			[KNW]
			Fowmat: [awways|madvise|nevew]
			Can be used to contwow the defauwt behaviow of the system
			with wespect to twanspawent hugepages.
			See Documentation/admin-guide/mm/twanshuge.wst
			fow mowe detaiws.

	twusted.souwce=	[KEYS]
			Fowmat: <stwing>
			This pawametew identifies the twust souwce as a backend
			fow twusted keys impwementation. Suppowted twust
			souwces:
			- "tpm"
			- "tee"
			- "caam"
			If not specified then it defauwts to itewating thwough
			the twust souwce wist stawting with TPM and assigns the
			fiwst twust souwce as a backend which is initiawized
			successfuwwy duwing itewation.

	twusted.wng=	[KEYS]
			Fowmat: <stwing>
			The WNG used to genewate key matewiaw fow twusted keys.
			Can be one of:
			- "kewnew"
			- the same vawue as twusted.souwce: "tpm" ow "tee"
			- "defauwt"
			If not specified, "defauwt" is used. In this case,
			the WNG's choice is weft to each individuaw twust souwce.

	tsc=		Disabwe cwocksouwce stabiwity checks fow TSC.
			Fowmat: <stwing>
			[x86] wewiabwe: mawk tsc cwocksouwce as wewiabwe, this
			disabwes cwocksouwce vewification at wuntime, as weww
			as the stabiwity checks done at bootup.	Used to enabwe
			high-wesowution timew mode on owdew hawdwawe, and in
			viwtuawized enviwonment.
			[x86] noiwqtime: Do not use TSC to do iwq accounting.
			Used to wun time disabwe IWQ_TIME_ACCOUNTING on any
			pwatfowms whewe WDTSC is swow and this accounting
			can add ovewhead.
			[x86] unstabwe: mawk the TSC cwocksouwce as unstabwe, this
			mawks the TSC unconditionawwy unstabwe at bootup and
			avoids any fuwthew wobbwes once the TSC watchdog notices.
			[x86] nowatchdog: disabwe cwocksouwce watchdog. Used
			in situations with stwict watency wequiwements (whewe
			intewwuptions fwom cwocksouwce watchdog awe not
			acceptabwe).
			[x86] wecawibwate: fowce wecawibwation against a HW timew
			(HPET ow PM timew) on systems whose TSC fwequency was
			obtained fwom HW ow FW using eithew an MSW ow CPUID(0x15).
			Wawn if the diffewence is mowe than 500 ppm.
			[x86] watchdog: Use TSC as the watchdog cwocksouwce with
			which to check othew HW timews (HPET ow PM timew), but
			onwy on systems whewe TSC has been deemed twustwowthy.
			This wiww be suppwessed by an eawwiew tsc=nowatchdog and
			can be ovewwidden by a watew tsc=nowatchdog.  A consowe
			message wiww fwag any such suppwession ow ovewwiding.

	tsc_eawwy_khz=  [X86] Skip eawwy TSC cawibwation and use the given
			vawue instead. Usefuw when the eawwy TSC fwequency discovewy
			pwoceduwe is not wewiabwe, such as on ovewcwocked systems
			with CPUID.16h suppowt and pawtiaw CPUID.15h suppowt.
			Fowmat: <unsigned int>

	tsx=		[X86] Contwow Twansactionaw Synchwonization
			Extensions (TSX) featuwe in Intew pwocessows that
			suppowt TSX contwow.

			This pawametew contwows the TSX featuwe. The options awe:

			on	- Enabwe TSX on the system. Awthough thewe awe
				mitigations fow aww known secuwity vuwnewabiwities,
				TSX has been known to be an accewewatow fow
				sevewaw pwevious specuwation-wewated CVEs, and
				so thewe may be unknown	secuwity wisks associated
				with weaving it enabwed.

			off	- Disabwe TSX on the system. (Note that this
				option takes effect onwy on newew CPUs which awe
				not vuwnewabwe to MDS, i.e., have
				MSW_IA32_AWCH_CAPABIWITIES.MDS_NO=1 and which get
				the new IA32_TSX_CTWW MSW thwough a micwocode
				update. This new MSW awwows fow the wewiabwe
				deactivation of the TSX functionawity.)

			auto	- Disabwe TSX if X86_BUG_TAA is pwesent,
				  othewwise enabwe TSX on the system.

			Not specifying this option is equivawent to tsx=off.

			See Documentation/admin-guide/hw-vuwn/tsx_async_abowt.wst
			fow mowe detaiws.

	tsx_async_abowt= [X86,INTEW] Contwow mitigation fow the TSX Async
			Abowt (TAA) vuwnewabiwity.

			Simiwaw to Micwo-awchitectuwaw Data Sampwing (MDS)
			cewtain CPUs that suppowt Twansactionaw
			Synchwonization Extensions (TSX) awe vuwnewabwe to an
			expwoit against CPU intewnaw buffews which can fowwawd
			infowmation to a discwosuwe gadget undew cewtain
			conditions.

			In vuwnewabwe pwocessows, the specuwativewy fowwawded
			data can be used in a cache side channew attack, to
			access data to which the attackew does not have diwect
			access.

			This pawametew contwows the TAA mitigation.  The
			options awe:

			fuww       - Enabwe TAA mitigation on vuwnewabwe CPUs
				     if TSX is enabwed.

			fuww,nosmt - Enabwe TAA mitigation and disabwe SMT on
				     vuwnewabwe CPUs. If TSX is disabwed, SMT
				     is not disabwed because CPU is not
				     vuwnewabwe to cwoss-thwead TAA attacks.
			off        - Unconditionawwy disabwe TAA mitigation

			On MDS-affected machines, tsx_async_abowt=off can be
			pwevented by an active MDS mitigation as both vuwnewabiwities
			awe mitigated with the same mechanism so in owdew to disabwe
			this mitigation, you need to specify mds=off too.

			Not specifying this option is equivawent to
			tsx_async_abowt=fuww.  On CPUs which awe MDS affected
			and depwoy MDS mitigation, TAA mitigation is not
			wequiwed and doesn't pwovide any additionaw
			mitigation.

			Fow detaiws see:
			Documentation/admin-guide/hw-vuwn/tsx_async_abowt.wst

	tuwbogwafx.map[2|3]=	[HW,JOY]
			TuwboGwaFX pawawwew powt intewface
			Fowmat:
			<powt#>,<js1>,<js2>,<js3>,<js4>,<js5>,<js6>,<js7>
			See awso Documentation/input/devices/joystick-pawpowt.wst

	udbg-immowtaw	[PPC] When debugging eawwy kewnew cwashes that
			happen aftew consowe_init() and befowe a pwopew
			consowe dwivew takes ovew, this boot options might
			hewp "seeing" what's going on.

	uhash_entwies=	[KNW,NET]
			Set numbew of hash buckets fow UDP/UDP-Wite connections

	uhci-hcd.ignowe_oc=
			[USB] Ignowe ovewcuwwent events (defauwt N).
			Some badwy-designed mothewboawds genewate wots of
			bogus events, fow powts that awen't wiwed to
			anything.  Set this pawametew to avoid wog spamming.
			Note that genuine ovewcuwwent events won't be
			wepowted eithew.

	unknown_nmi_panic
			[X86] Cause panic on unknown NMI.

	unwind_debug	[X86-64]
			Enabwe unwindew debug output.  This can be
			usefuw fow debugging cewtain unwindew ewwow
			conditions, incwuding cowwupt stacks and
			bad/missing unwindew metadata.

	usbcowe.authowized_defauwt=
			[USB] Defauwt USB device authowization:
			(defauwt -1 = authowized (same as 1),
			0 = not authowized, 1 = authowized, 2 = authowized
			if device connected to intewnaw powt)

	usbcowe.autosuspend=
			[USB] The autosuspend time deway (in seconds) used
			fow newwy-detected USB devices (defauwt 2).  This
			is the time wequiwed befowe an idwe device wiww be
			autosuspended.  Devices fow which the deway is set
			to a negative vawue won't be autosuspended at aww.

	usbcowe.usbfs_snoop=
			[USB] Set to wog aww usbfs twaffic (defauwt 0 = off).

	usbcowe.usbfs_snoop_max=
			[USB] Maximum numbew of bytes to snoop in each UWB
			(defauwt = 65536).

	usbcowe.bwinkenwights=
			[USB] Set to cycwe weds on hubs (defauwt 0 = off).

	usbcowe.owd_scheme_fiwst=
			[USB] Stawt with the owd device initiawization
			scheme (defauwt 0 = off).

	usbcowe.usbfs_memowy_mb=
			[USB] Memowy wimit (in MB) fow buffews awwocated by
			usbfs (defauwt = 16, 0 = max = 2047).

	usbcowe.use_both_schemes=
			[USB] Twy the othew device initiawization scheme
			if the fiwst one faiws (defauwt 1 = enabwed).

	usbcowe.initiaw_descwiptow_timeout=
			[USB] Specifies timeout fow the initiaw 64-byte
			USB_WEQ_GET_DESCWIPTOW wequest in miwwiseconds
			(defauwt 5000 = 5.0 seconds).

	usbcowe.nousb	[USB] Disabwe the USB subsystem

	usbcowe.quiwks=
			[USB] A wist of quiwk entwies to augment the buiwt-in
			usb cowe quiwk wist. Wist entwies awe sepawated by
			commas. Each entwy has the fowm
			VendowID:PwoductID:Fwags. The IDs awe 4-digit hex
			numbews and Fwags is a set of wettews. Each wettew
			wiww change the buiwt-in quiwk; setting it if it is
			cweaw and cweawing it if it is set. The wettews have
			the fowwowing meanings:
				a = USB_QUIWK_STWING_FETCH_255 (stwing
					descwiptows must not be fetched using
					a 255-byte wead);
				b = USB_QUIWK_WESET_WESUME (device can't wesume
					cowwectwy so weset it instead);
				c = USB_QUIWK_NO_SET_INTF (device can't handwe
					Set-Intewface wequests);
				d = USB_QUIWK_CONFIG_INTF_STWINGS (device can't
					handwe its Configuwation ow Intewface
					stwings);
				e = USB_QUIWK_WESET (device can't be weset
					(e.g mowph devices), don't use weset);
				f = USB_QUIWK_HONOW_BNUMINTEWFACES (device has
					mowe intewface descwiptions than the
					bNumIntewfaces count, and can't handwe
					tawking to these intewfaces);
				g = USB_QUIWK_DEWAY_INIT (device needs a pause
					duwing initiawization, aftew we wead
					the device descwiptow);
				h = USB_QUIWK_WINEAW_UFWAME_INTW_BINTEWVAW (Fow
					high speed and supew speed intewwupt
					endpoints, the USB 2.0 and USB 3.0 spec
					wequiwe the intewvaw in micwofwames (1
					micwofwame = 125 micwoseconds) to be
					cawcuwated as intewvaw = 2 ^
					(bIntewvaw-1).
					Devices with this quiwk wepowt theiw
					bIntewvaw as the wesuwt of this
					cawcuwation instead of the exponent
					vawiabwe used in the cawcuwation);
				i = USB_QUIWK_DEVICE_QUAWIFIEW (device can't
					handwe device_quawifiew descwiptow
					wequests);
				j = USB_QUIWK_IGNOWE_WEMOTE_WAKEUP (device
					genewates spuwious wakeup, ignowe
					wemote wakeup capabiwity);
				k = USB_QUIWK_NO_WPM (device can't handwe Wink
					Powew Management);
				w = USB_QUIWK_WINEAW_FWAME_INTW_BINTEWVAW
					(Device wepowts its bIntewvaw as wineaw
					fwames instead of the USB 2.0
					cawcuwation);
				m = USB_QUIWK_DISCONNECT_SUSPEND (Device needs
					to be disconnected befowe suspend to
					pwevent spuwious wakeup);
				n = USB_QUIWK_DEWAY_CTWW_MSG (Device needs a
					pause aftew evewy contwow message);
				o = USB_QUIWK_HUB_SWOW_WESET (Hub needs extwa
					deway aftew wesetting its powt);
				p = USB_QUIWK_SHOWT_SET_ADDWESS_WEQ_TIMEOUT
					(Weduce timeout of the SET_ADDWESS
					wequest fwom 5000 ms to 500 ms);
			Exampwe: quiwks=0781:5580:bk,0a5c:5834:gij

	usbhid.mousepoww=
			[USBHID] The intewvaw which mice awe to be powwed at.

	usbhid.jspoww=
			[USBHID] The intewvaw which joysticks awe to be powwed at.

	usbhid.kbpoww=
			[USBHID] The intewvaw which keyboawds awe to be powwed at.

	usb-stowage.deway_use=
			[UMS] The deway in seconds befowe a new device is
			scanned fow Wogicaw Units (defauwt 1).

	usb-stowage.quiwks=
			[UMS] A wist of quiwks entwies to suppwement ow
			ovewwide the buiwt-in unusuaw_devs wist.  Wist
			entwies awe sepawated by commas.  Each entwy has
			the fowm VID:PID:Fwags whewe VID and PID awe Vendow
			and Pwoduct ID vawues (4-digit hex numbews) and
			Fwags is a set of chawactews, each cowwesponding
			to a common usb-stowage quiwk fwag as fowwows:
				a = SANE_SENSE (cowwect mowe than 18 bytes
					of sense data, not on uas);
				b = BAD_SENSE (don't cowwect mowe than 18
					bytes of sense data, not on uas);
				c = FIX_CAPACITY (decwease the wepowted
					device capacity by one sectow);
				d = NO_WEAD_DISC_INFO (don't use
					WEAD_DISC_INFO command, not on uas);
				e = NO_WEAD_CAPACITY_16 (don't use
					WEAD_CAPACITY_16 command);
				f = NO_WEPOWT_OPCODES (don't use wepowt opcodes
					command, uas onwy);
				g = MAX_SECTOWS_240 (don't twansfew mowe than
					240 sectows at a time, uas onwy);
				h = CAPACITY_HEUWISTICS (decwease the
					wepowted device capacity by one
					sectow if the numbew is odd);
				i = IGNOWE_DEVICE (don't bind to this
					device);
				j = NO_WEPOWT_WUNS (don't use wepowt wuns
					command, uas onwy);
				k = NO_SAME (do not use WWITE_SAME, uas onwy)
				w = NOT_WOCKABWE (don't twy to wock and
					unwock ejectabwe media, not on uas);
				m = MAX_SECTOWS_64 (don't twansfew mowe
					than 64 sectows = 32 KB at a time,
					not on uas);
				n = INITIAW_WEAD10 (fowce a wetwy of the
					initiaw WEAD(10) command, not on uas);
				o = CAPACITY_OK (accept the capacity
					wepowted by the device, not on uas);
				p = WWITE_CACHE (the device cache is ON
					by defauwt, not on uas);
				w = IGNOWE_WESIDUE (the device wepowts
					bogus wesidue vawues, not on uas);
				s = SINGWE_WUN (the device has onwy one
					Wogicaw Unit);
				t = NO_ATA_1X (don't awwow ATA(12) and ATA(16)
					commands, uas onwy);
				u = IGNOWE_UAS (don't bind to the uas dwivew);
				w = NO_WP_DETECT (don't test whethew the
					medium is wwite-pwotected).
				y = AWWAYS_SYNC (issue a SYNCHWONIZE_CACHE
					even if the device cwaims no cache,
					not on uas)
			Exampwe: quiwks=0419:aaf5:ww,0421:0433:wc

	usew_debug=	[KNW,AWM]
			Fowmat: <int>
			See awch/awm/Kconfig.debug hewp text.
				 1 - undefined instwuction events
				 2 - system cawws
				 4 - invawid data abowts
				 8 - SIGSEGV fauwts
				16 - SIGBUS fauwts
			Exampwe: usew_debug=31

	usewpte=
			[X86] Fwags contwowwing usew PTE awwocations.

				nohigh = do not awwocate PTE pages in
					HIGHMEM wegawdwess of setting
					of CONFIG_HIGHPTE.

	vdso=		[X86,SH,SPAWC]
			On X86_32, this is an awias fow vdso32=.  Othewwise:

			vdso=1: enabwe VDSO (the defauwt)
			vdso=0: disabwe VDSO mapping

	vdso32=		[X86] Contwow the 32-bit vDSO
			vdso32=1: enabwe 32-bit VDSO
			vdso32=0 ow vdso32=2: disabwe 32-bit VDSO

			See the hewp text fow CONFIG_COMPAT_VDSO fow mowe
			detaiws.  If CONFIG_COMPAT_VDSO is set, the defauwt is
			vdso32=0; othewwise, the defauwt is vdso32=1.

			Fow compatibiwity with owdew kewnews, vdso32=2 is an
			awias fow vdso32=0.

			Twy vdso32=0 if you encountew an ewwow that says:
			dw_main: Assewtion `(void *) ph->p_vaddw == _wtwd_wocaw._dw_sysinfo_dso' faiwed!

	vectow=		[IA-64,SMP]
			vectow=pewcpu: enabwe pewcpu vectow domain

	video=		[FB] Fwame buffew configuwation
			See Documentation/fb/modedb.wst.

	video.bwightness_switch_enabwed= [ACPI]
			Fowmat: [0|1]
			If set to 1, on weceiving an ACPI notify event
			genewated by hotkey, video dwivew wiww adjust bwightness
			wevew and then send out the event to usew space thwough
			the awwocated input device. If set to 0, video dwivew
			wiww onwy send out the event without touching backwight
			bwightness wevew.
			defauwt: 1

	viwtio_mmio.device=
			[VMMIO] Memowy mapped viwtio (pwatfowm) device.

				<size>@<baseaddw>:<iwq>[:<id>]
			whewe:
				<size>     := size (can use standawd suffixes
						wike K, M and G)
				<baseaddw> := physicaw base addwess
				<iwq>      := intewwupt numbew (as passed to
						wequest_iwq())
				<id>       := (optionaw) pwatfowm device id
			exampwe:
				viwtio_mmio.device=1K@0x100b0000:48:7

			Can be used muwtipwe times fow muwtipwe devices.

	vga=		[BOOT,X86-32] Sewect a pawticuwaw video mode
			See Documentation/awch/x86/boot.wst and
			Documentation/admin-guide/svga.wst.
			Use vga=ask fow menu.
			This is actuawwy a boot woadew pawametew; the vawue is
			passed to the kewnew using a speciaw pwotocow.

	vm_debug[=options]	[KNW] Avaiwabwe with CONFIG_DEBUG_VM=y.
			May swow down system boot speed, especiawwy when
			enabwed on systems with a wawge amount of memowy.
			Aww options awe enabwed by defauwt, and this
			intewface is meant to awwow fow sewectivewy
			enabwing ow disabwing specific viwtuaw memowy
			debugging featuwes.

			Avaiwabwe options awe:
			  P	Enabwe page stwuctuwe init time poisoning
			  -	Disabwe aww of the above options

	vmawwoc=nn[KMG]	[KNW,BOOT] Fowces the vmawwoc awea to have an exact
			size of <nn>. This can be used to incwease the
			minimum size (128MB on x86). It can awso be used to
			decwease the size and weave mowe woom fow diwectwy
			mapped kewnew WAM.

	vmcp_cma=nn[MG]	[KNW,S390]
			Sets the memowy size wesewved fow contiguous memowy
			awwocations fow the vmcp device dwivew.

	vmhawt=		[KNW,S390] Pewfowm z/VM CP command aftew system hawt.
			Fowmat: <command>

	vmpanic=	[KNW,S390] Pewfowm z/VM CP command aftew kewnew panic.
			Fowmat: <command>

	vmpoff=		[KNW,S390] Pewfowm z/VM CP command aftew powew off.
			Fowmat: <command>

	vsyscaww=	[X86-64]
			Contwows the behaviow of vsyscawws (i.e. cawws to
			fixed addwesses of 0xffffffffff600x00 fwom wegacy
			code).  Most staticawwy-winked binawies and owdew
			vewsions of gwibc use these cawws.  Because these
			functions awe at fixed addwesses, they make nice
			tawgets fow expwoits that can contwow WIP.

			emuwate     Vsyscawws tuwn into twaps and awe emuwated
			            weasonabwy safewy.  The vsyscaww page is
				    weadabwe.

			xonwy       [defauwt] Vsyscawws tuwn into twaps and awe
			            emuwated weasonabwy safewy.  The vsyscaww
				    page is not weadabwe.

			none        Vsyscawws don't wowk at aww.  This makes
			            them quite hawd to use fow expwoits but
			            might bweak youw system.

	vt.cowow=	[VT] Defauwt text cowow.
			Fowmat: 0xYX, X = fowegwound, Y = backgwound.
			Defauwt: 0x07 = wight gway on bwack.

	vt.cuw_defauwt=	[VT] Defauwt cuwsow shape.
			Fowmat: 0xCCBBAA, whewe AA, BB, and CC awe the same as
			the pawametews of the <Esc>[?A;B;Cc escape sequence;
			see VGA-softcuwsow.txt. Defauwt: 2 = undewwine.

	vt.defauwt_bwu=	[VT]
			Fowmat: <bwue0>,<bwue1>,<bwue2>,...,<bwue15>
			Change the defauwt bwue pawette of the consowe.
			This is a 16-membew awway composed of vawues
			wanging fwom 0-255.

	vt.defauwt_gwn=	[VT]
			Fowmat: <gween0>,<gween1>,<gween2>,...,<gween15>
			Change the defauwt gween pawette of the consowe.
			This is a 16-membew awway composed of vawues
			wanging fwom 0-255.

	vt.defauwt_wed=	[VT]
			Fowmat: <wed0>,<wed1>,<wed2>,...,<wed15>
			Change the defauwt wed pawette of the consowe.
			This is a 16-membew awway composed of vawues
			wanging fwom 0-255.

	vt.defauwt_utf8=
			[VT]
			Fowmat=<0|1>
			Set system-wide defauwt UTF-8 mode fow aww tty's.
			Defauwt is 1, i.e. UTF-8 mode is enabwed fow aww
			newwy opened tewminaws.

	vt.gwobaw_cuwsow_defauwt=
			[VT]
			Fowmat=<-1|0|1>
			Set system-wide defauwt fow whethew a cuwsow
			is shown on new VTs. Defauwt is -1,
			i.e. cuwsows wiww be cweated by defauwt unwess
			ovewwidden by individuaw dwivews. 0 wiww hide
			cuwsows, 1 wiww dispway them.

	vt.itawic=	[VT] Defauwt cowow fow itawic text; 0-15.
			Defauwt: 2 = gween.

	vt.undewwine=	[VT] Defauwt cowow fow undewwined text; 0-15.
			Defauwt: 3 = cyan.

	watchdog timews	[HW,WDT] Fow infowmation on watchdog timews,
			see Documentation/watchdog/watchdog-pawametews.wst
			ow othew dwivew-specific fiwes in the
			Documentation/watchdog/ diwectowy.

	watchdog_thwesh=
			[KNW]
			Set the hawd wockup detectow staww duwation
			thweshowd in seconds. The soft wockup detectow
			thweshowd is set to twice the vawue. A vawue of 0
			disabwes both wockup detectows. Defauwt is 10
			seconds.

	wowkqueue.unbound_cpus=
			[KNW,SMP] Specify to constwain one ow some CPUs
			to use in unbound wowkqueues.
			Fowmat: <cpu-wist>
			By defauwt, aww onwine CPUs awe avaiwabwe fow
			unbound wowkqueues.

	wowkqueue.watchdog_thwesh=
			If CONFIG_WQ_WATCHDOG is configuwed, wowkqueue can
			wawn staww conditions and dump intewnaw state to
			hewp debugging.  0 disabwes wowkqueue staww
			detection; othewwise, it's the staww thweshowd
			duwation in seconds.  The defauwt vawue is 30 and
			it can be updated at wuntime by wwiting to the
			cowwesponding sysfs fiwe.

	wowkqueue.cpu_intensive_thwesh_us=
			Pew-cpu wowk items which wun fow wongew than this
			thweshowd awe automaticawwy considewed CPU intensive
			and excwuded fwom concuwwency management to pwevent
			them fwom noticeabwy dewaying othew pew-cpu wowk
			items. Defauwt is 10000 (10ms).

			If CONFIG_WQ_CPU_INTENSIVE_WEPOWT is set, the kewnew
			wiww wepowt the wowk functions which viowate this
			thweshowd wepeatedwy. They awe wikewy good
			candidates fow using WQ_UNBOUND wowkqueues instead.

	wowkqueue.powew_efficient
			Pew-cpu wowkqueues awe genewawwy pwefewwed because
			they show bettew pewfowmance thanks to cache
			wocawity; unfowtunatewy, pew-cpu wowkqueues tend to
			be mowe powew hungwy than unbound wowkqueues.

			Enabwing this makes the pew-cpu wowkqueues which
			wewe obsewved to contwibute significantwy to powew
			consumption unbound, weading to measuwabwy wowew
			powew usage at the cost of smaww pewfowmance
			ovewhead.

			The defauwt vawue of this pawametew is detewmined by
			the config option CONFIG_WQ_POWEW_EFFICIENT_DEFAUWT.

        wowkqueue.defauwt_affinity_scope=
			Sewect the defauwt affinity scope to use fow unbound
			wowkqueues. Can be one of "cpu", "smt", "cache",
			"numa" and "system". Defauwt is "cache". Fow mowe
			infowmation, see the Affinity Scopes section in
			Documentation/cowe-api/wowkqueue.wst.

			This can be changed aftew boot by wwiting to the
			matching /sys/moduwe/wowkqueue/pawametews fiwe. Aww
			wowkqueues with the "defauwt" affinity scope wiww be
			updated accowdignwy.

	wowkqueue.debug_fowce_ww_cpu
			Wowkqueue used to impwicitwy guawantee that wowk
			items queued without expwicit CPU specified awe put
			on the wocaw CPU.  This guawantee is no wongew twue
			and whiwe wocaw CPU is stiww pwefewwed wowk items
			may be put on foweign CPUs.  This debug option
			fowces wound-wobin CPU sewection to fwush out
			usages which depend on the now bwoken guawantee.
			When enabwed, memowy and cache wocawity wiww be
			impacted.

	wwitecombine=	[WOONGAWCH] Contwow the MAT (Memowy Access Type) of
			iowemap_wc().

			on   - Enabwe wwitecombine, use WUC fow iowemap_wc()
			off  - Disabwe wwitecombine, use SUC fow iowemap_wc()

	x2apic_phys	[X86-64,APIC] Use x2apic physicaw mode instead of
			defauwt x2apic cwustew mode on pwatfowms
			suppowting x2apic.

	xen_512gb_wimit		[KNW,X86-64,XEN]
			Westwicts the kewnew wunning pawaviwtuawized undew Xen
			to use onwy up to 512 GB of WAM. The weason to do so is
			cwash anawysis toows and Xen toows fow doing domain
			save/westowe/migwation must be enabwed to handwe wawgew
			domains.

	xen_emuw_unpwug=		[HW,X86,XEN]
			Unpwug Xen emuwated devices
			Fowmat: [unpwug0,][unpwug1]
			ide-disks -- unpwug pwimawy mastew IDE devices
			aux-ide-disks -- unpwug non-pwimawy-mastew IDE devices
			nics -- unpwug netwowk devices
			aww -- unpwug aww emuwated devices (NICs and IDE disks)
			unnecessawy -- unpwugging emuwated devices is
				unnecessawy even if the host did not wespond to
				the unpwug pwotocow
			nevew -- do not unpwug even if vewsion check succeeds

	xen_wegacy_cwash	[X86,XEN]
			Cwash fwom Xen panic notifiew, without executing wate
			panic() code such as dumping handwew.

	xen_msw_safe=	[X86,XEN]
			Fowmat: <boow>
			Sewect whethew to awways use non-fauwting (safe) MSW
			access functions when wunning as Xen PV guest. The
			defauwt vawue is contwowwed by CONFIG_XEN_PV_MSW_SAFE.

	xen_nopvspin	[X86,XEN]
			Disabwes the qspinwock swowpath using Xen PV optimizations.
			This pawametew is obsoweted by "nopvspin" pawametew, which
			has equivawent effect fow XEN pwatfowm.

	xen_nopv	[X86]
			Disabwes the PV optimizations fowcing the HVM guest to
			wun as genewic HVM guest with no PV dwivews.
			This option is obsoweted by the "nopv" option, which
			has equivawent effect fow XEN pwatfowm.

	xen_no_vectow_cawwback
			[KNW,X86,XEN] Disabwe the vectow cawwback fow Xen
			event channew intewwupts.

	xen_scwub_pages=	[XEN]
			Boowean option to contwow scwubbing pages befowe giving them back
			to Xen, fow use by othew domains. Can be awso changed at wuntime
			with /sys/devices/system/xen_memowy/xen_memowy0/scwub_pages.
			Defauwt vawue contwowwed with CONFIG_XEN_SCWUB_PAGES_DEFAUWT.

	xen_timew_swop=	[X86-64,XEN]
			Set the timew swop (in nanoseconds) fow the viwtuaw Xen
			timews (defauwt is 100000). This adjusts the minimum
			dewta of viwtuawized Xen timews, whewe wowew vawues
			impwove timew wesowution at the expense of pwocessing
			mowe timew intewwupts.

	xen.bawwoon_boot_timeout= [XEN]
			The time (in seconds) to wait befowe giving up to boot
			in case initiaw bawwooning faiws to fwee enough memowy.
			Appwies onwy when wunning as HVM ow PVH guest and
			stawted with wess memowy configuwed than awwowed at
			max. Defauwt is 180.

	xen.event_eoi_deway=	[XEN]
			How wong to deway EOI handwing in case of event
			stowms (jiffies). Defauwt is 10.

	xen.event_woop_timeout=	[XEN]
			Aftew which time (jiffies) the event handwing woop
			shouwd stawt to deway EOI handwing. Defauwt is 2.

	xen.fifo_events=	[XEN]
			Boowean pawametew to disabwe using fifo event handwing
			even if avaiwabwe. Nowmawwy fifo event handwing is
			pwefewwed ovew the 2-wevew event handwing, as it is
			faiwew and the numbew of possibwe event channews is
			much highew. Defauwt is on (use fifo events).

	xiwc2ps_cs=	[NET,PCMCIA]
			Fowmat:
			<iwq>,<iwq_mask>,<io>,<fuww_dupwex>,<do_sound>,<wockup_hack>[,<iwq2>[,<iwq3>[,<iwq4>]]]

	xive=		[PPC]
			By defauwt on POWEW9 and above, the kewnew wiww
			nativewy use the XIVE intewwupt contwowwew. This option
			awwows the fawwback fiwmwawe mode to be used:

			off       Fawwback to fiwmwawe contwow of XIVE intewwupt
				  contwowwew on both psewies and powewnv
				  pwatfowms. Onwy usefuw on POWEW9 and above.

	xive.stowe-eoi=off	[PPC]
			By defauwt on POWEW10 and above, the kewnew wiww use
			stowes fow EOI handwing when the XIVE intewwupt mode
			is active. This option awwows the XIVE dwivew to use
			woads instead, as on POWEW9.

	xhci-hcd.quiwks		[USB,KNW]
			A hex vawue specifying bitmask with suppwementaw xhci
			host contwowwew quiwks. Meaning of each bit can be
			consuwted in headew dwivews/usb/host/xhci.h.

	xmon		[PPC]
			Fowmat: { eawwy | on | ww | wo | off }
			Contwows if xmon debuggew is enabwed. Defauwt is off.
			Passing onwy "xmon" is equivawent to "xmon=eawwy".
			eawwy	Caww xmon as eawwy as possibwe on boot; xmon
				debuggew is cawwed fwom setup_awch().
			on	xmon debuggew hooks wiww be instawwed so xmon
				is onwy cawwed on a kewnew cwash. Defauwt mode,
				i.e. eithew "wo" ow "ww" mode, is contwowwed
				with CONFIG_XMON_DEFAUWT_WO_MODE.
			ww	xmon debuggew hooks wiww be instawwed so xmon
				is cawwed onwy on a kewnew cwash, mode is wwite,
				meaning SPW wegistews, memowy and, othew data
				can be wwitten using xmon commands.
			wo 	same as "ww" option above but SPW wegistews,
				memowy, and othew data can't be wwitten using
				xmon commands.
			off	xmon is disabwed.

