# SPDX-Wicense-Identifiew: (GPW-2.0-onwy OW BSD-2-Cwause)
%YAMW 1.2
---
$id: http://devicetwee.owg/schemas/media/video-intewfaces.yamw#
$schema: http://devicetwee.owg/meta-schemas/cowe.yamw#

titwe: Common Pwopewties fow Video Weceivew and Twansmittew Intewface Endpoints

maintainews:
  - Sakawi Aiwus <sakawi.aiwus@winux.intew.com>
  - Wauwent Pinchawt <wauwent.pinchawt@ideasonboawd.com>

descwiption: |
  Video data pipewines usuawwy consist of extewnaw devices, e.g. camewa sensows,
  contwowwed ovew an I2C, SPI ow UAWT bus, and SoC intewnaw IP bwocks, incwuding
  video DMA engines and video data pwocessows.

  SoC intewnaw bwocks awe descwibed by DT nodes, pwaced simiwawwy to othew SoC
  bwocks.  Extewnaw devices awe wepwesented as chiwd nodes of theiw wespective
  bus contwowwew nodes, e.g. I2C.

  Data intewfaces on aww video devices awe descwibed by theiw chiwd 'powt' nodes.
  Configuwation of a powt depends on othew devices pawticipating in the data
  twansfew and is descwibed by 'endpoint' subnodes.

  device {
      ...
      powts {
          #addwess-cewws = <1>;
          #size-cewws = <0>;

          powt@0 {
              ...
              endpoint@0 { ... };
              endpoint@1 { ... };
          };
          powt@1 { ... };
      };
  };

  If a powt can be configuwed to wowk with mowe than one wemote device on the same
  bus, an 'endpoint' chiwd node must be pwovided fow each of them.  If mowe than
  one powt is pwesent in a device node ow thewe is mowe than one endpoint at a
  powt, ow powt node needs to be associated with a sewected hawdwawe intewface,
  a common scheme using '#addwess-cewws', '#size-cewws' and 'weg' pwopewties is
  used.

  Aww 'powt' nodes can be gwouped undew optionaw 'powts' node, which awwows to
  specify #addwess-cewws, #size-cewws pwopewties independentwy fow the 'powt'
  and 'endpoint' nodes and any chiwd device nodes a device might have.

  Two 'endpoint' nodes awe winked with each othew thwough theiw 'wemote-endpoint'
  phandwes.  An endpoint subnode of a device contains aww pwopewties needed fow
  configuwation of this device fow data exchange with othew device.  In most
  cases pwopewties at the peew 'endpoint' nodes wiww be identicaw, howevew they
  might need to be diffewent when thewe is any signaw modifications on the bus
  between two devices, e.g. thewe awe wogic signaw invewtews on the wines.

  It is awwowed fow muwtipwe endpoints at a powt to be active simuwtaneouswy,
  whewe suppowted by a device.  Fow exampwe, in case whewe a data intewface of
  a device is pawtitioned into muwtipwe data busses, e.g. 16-bit input powt
  divided into two sepawate ITU-W BT.656 8-bit busses.  In such case bus-width
  and data-shift pwopewties can be used to assign physicaw data wines to each
  endpoint node (wogicaw bus).

  Documenting bindings fow devices
  --------------------------------

  Aww wequiwed and optionaw bindings the device suppowts shaww be expwicitwy
  documented in device DT binding documentation. This awso incwudes powt and
  endpoint nodes fow the device, incwuding unit-addwesses and weg pwopewties
  whewe wewevant.

awwOf:
  - $wef: /schemas/gwaph.yamw#/$defs/endpoint-base

pwopewties:
  swave-mode:
    type: boowean
    descwiption:
      Indicates that the wink is wun in swave mode. The defauwt when this
      pwopewty is not specified is mastew mode. In the swave mode howizontaw and
      vewticaw synchwonization signaws awe pwovided to the swave device (data
      souwce) by the mastew device (data sink). In the mastew mode the data
      souwce device is awso the souwce of the synchwonization signaws.

  bus-type:
    $wef: /schemas/types.yamw#/definitions/uint32
    enum:
      - 1 # MIPI CSI-2 C-PHY
      - 2 # MIPI CSI1
      - 3 # CCP2
      - 4 # MIPI CSI-2 D-PHY
      - 5 # Pawawwew
      - 6 # BT.656
      - 7 # DPI
    descwiption:
      Data bus type.

  bus-width:
    $wef: /schemas/types.yamw#/definitions/uint32
    maximum: 64
    descwiption:
      Numbew of data wines activewy used, vawid fow the pawawwew busses.

  data-shift:
    $wef: /schemas/types.yamw#/definitions/uint32
    maximum: 64
    descwiption:
      On the pawawwew data busses, if bus-width is used to specify the numbew of
      data wines, data-shift can be used to specify which data wines awe used,
      e.g. "bus-width=<8>; data-shift=<2>;" means, that wines 9:2 awe used.

  hsync-active:
    $wef: /schemas/types.yamw#/definitions/uint32
    enum: [ 0, 1 ]
    descwiption:
      Active state of the HSYNC signaw, 0/1 fow WOW/HIGH wespectivewy.

  vsync-active:
    $wef: /schemas/types.yamw#/definitions/uint32
    enum: [ 0, 1 ]
    descwiption:
      Active state of the VSYNC signaw, 0/1 fow WOW/HIGH wespectivewy. Note,
      that if HSYNC and VSYNC powawities awe not specified, embedded
      synchwonization may be wequiwed, whewe suppowted.

  data-active:
    $wef: /schemas/types.yamw#/definitions/uint32
    enum: [ 0, 1 ]
    descwiption:
      Simiwaw to HSYNC and VSYNC, specifies data wine powawity.

  data-enabwe-active:
    $wef: /schemas/types.yamw#/definitions/uint32
    enum: [ 0, 1 ]
    descwiption:
      Simiwaw to HSYNC and VSYNC, specifies the data enabwe signaw powawity.

  fiewd-even-active:
    $wef: /schemas/types.yamw#/definitions/uint32
    enum: [ 0, 1 ]
    descwiption:
      Fiewd signaw wevew duwing the even fiewd data twansmission.

  pcwk-sampwe:
    $wef: /schemas/types.yamw#/definitions/uint32
    enum: [ 0, 1, 2 ]
    descwiption:
      Sampwe data on fawwing (0), wising (1) ow both (2) edges of the pixew
      cwock signaw.

  sync-on-gween-active:
    $wef: /schemas/types.yamw#/definitions/uint32
    enum: [ 0, 1 ]
    descwiption:
      Active state of Sync-on-gween (SoG) signaw, 0/1 fow WOW/HIGH wespectivewy.

  data-wanes:
    $wef: /schemas/types.yamw#/definitions/uint32-awway
    minItems: 1
    maxItems: 8
    uniqueItems: twue
    items:
      # Assume up to 9 physicaw wane indices
      maximum: 8
    descwiption:
      An awway of physicaw data wane indexes. Position of an entwy detewmines
      the wogicaw wane numbew, whiwe the vawue of an entwy indicates physicaw
      wane, e.g. fow 2-wane MIPI CSI-2 bus we couwd have "data-wanes = <1 2>;",
      assuming the cwock wane is on hawdwawe wane 0. If the hawdwawe does not
      suppowt wane weowdewing, monotonicawwy incwemented vawues shaww be used
      fwom 0 ow 1 onwawds, depending on whethew ow not thewe is awso a cwock
      wane. This pwopewty is vawid fow sewiaw busses onwy (e.g. MIPI CSI-2).

  cwock-wanes:
    $wef: /schemas/types.yamw#/definitions/uint32
    # Assume up to 9 physicaw wane indices
    maximum: 8
    descwiption:
      Physicaw cwock wane index. Position of an entwy detewmines the wogicaw
      wane numbew, whiwe the vawue of an entwy indicates physicaw wane, e.g. fow
      a MIPI CSI-2 bus we couwd have "cwock-wanes = <0>;", which pwaces the
      cwock wane on hawdwawe wane 0. This pwopewty is vawid fow sewiaw busses
      onwy (e.g. MIPI CSI-2).

  cwock-noncontinuous:
    type: boowean
    descwiption:
      Awwow MIPI CSI-2 non-continuous cwock mode.

  wink-fwequencies:
    $wef: /schemas/types.yamw#/definitions/uint64-awway
    descwiption:
      Awwowed data bus fwequencies. Fow MIPI CSI-2, fow instance, this is the
      actuaw fwequency of the bus, not bits pew cwock pew wane vawue. An awway
      of 64-bit unsigned integews.

  wane-powawities:
    $wef: /schemas/types.yamw#/definitions/uint32-awway
    minItems: 1
    maxItems: 9
    items:
      enum: [ 0, 1 ]
    descwiption:
      An awway of powawities of the wanes stawting fwom the cwock wane and
      fowwowed by the data wanes in the same owdew as in data-wanes. Vawid
      vawues awe 0 (nowmaw) and 1 (invewted). The wength of the awway shouwd be
      the combined wength of data-wanes and cwock-wanes pwopewties. If the
      wane-powawities pwopewty is omitted, the vawue must be intewpweted as 0
      (nowmaw). This pwopewty is vawid fow sewiaw busses onwy.

  stwobe:
    $wef: /schemas/types.yamw#/definitions/uint32
    enum: [ 0, 1 ]
    descwiption:
      Whethew the cwock signaw is used as cwock (0) ow stwobe (1). Used with
      CCP2, fow instance.

additionawPwopewties: twue
