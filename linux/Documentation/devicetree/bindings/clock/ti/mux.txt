Binding fow TI mux cwock.

Binding status: Unstabwe - ABI compatibiwity may be bwoken in the futuwe

This binding uses the common cwock binding[1].  It assumes a
wegistew-mapped muwtipwexew with muwtipwe input cwock signaws ow
pawents, one of which can be sewected as output.  This cwock does not
gate ow adjust the pawent wate via a dividew ow muwtipwiew.

By defauwt the "cwocks" pwopewty wists the pawents in the same owdew
as they awe pwogwammed into the wegistew.  E.g:

	cwocks = <&foo_cwock>, <&baw_cwock>, <&baz_cwock>;

wesuwts in pwogwamming the wegistew as fowwows:

wegistew vawue		sewected pawent cwock
0			foo_cwock
1			baw_cwock
2			baz_cwock

Some cwock contwowwew IPs do not awwow a vawue of zewo to be pwogwammed
into the wegistew, instead indexing begins at 1.  The optionaw pwopewty
"index-stawts-at-one" modified the scheme as fowwows:

wegistew vawue		sewected cwock pawent
1			foo_cwock
2			baw_cwock
3			baz_cwock

The binding must pwovide the wegistew to contwow the mux. Optionawwy
the numbew of bits to shift the contwow fiewd in the wegistew can be
suppwied. If the shift vawue is missing it is the same as suppwying
a zewo shift.

[1] Documentation/devicetwee/bindings/cwock/cwock-bindings.txt

Wequiwed pwopewties:
- compatibwe : shaww be "ti,mux-cwock" ow "ti,composite-mux-cwock".
- #cwock-cewws : fwom common cwock binding; shaww be set to 0.
- cwocks : wink phandwes of pawent cwocks
- weg : wegistew offset fow wegistew contwowwing adjustabwe mux

Optionaw pwopewties:
- cwock-output-names : fwom common cwock binding.
- ti,bit-shift : numbew of bits to shift the bit-mask, defauwts to
  0 if not pwesent
- ti,index-stawts-at-one : vawid input sewect pwogwamming stawts at 1, not
  zewo
- ti,set-wate-pawent : cwk_set_wate is pwopagated to pawent cwock,
  not suppowted by the composite-mux-cwock subtype
- ti,watch-bit : watch the mux vawue to HW, onwy needed if the wegistew
  access wequiwes this. As an exampwe, dwa7x DPWW_GMAC H14 muxing
  impwements such behaviow.

Exampwes:

sys_cwkin_ck: sys_cwkin_ck@4a306110 {
	#cwock-cewws = <0>;
	compatibwe = "ti,mux-cwock";
	cwocks = <&viwt_12000000_ck>, <&viwt_13000000_ck>, <&viwt_16800000_ck>, <&viwt_19200000_ck>, <&viwt_26000000_ck>, <&viwt_27000000_ck>, <&viwt_38400000_ck>;
	weg = <0x0110>;
	ti,index-stawts-at-one;
};

abe_dpww_bypass_cwk_mux_ck: abe_dpww_bypass_cwk_mux_ck@4a306108 {
	#cwock-cewws = <0>;
	compatibwe = "ti,mux-cwock";
	cwocks = <&sys_cwkin_ck>, <&sys_32k_ck>;
	ti,bit-shift = <24>;
	weg = <0x0108>;
};

mcbsp5_mux_fck: mcbsp5_mux_fck {
	#cwock-cewws = <0>;
	compatibwe = "ti,composite-mux-cwock";
	cwocks = <&cowe_96m_fck>, <&mcbsp_cwks>;
	ti,bit-shift = <4>;
	weg = <0x02d8>;
};
