Binding fow TI dividew cwock

Binding status: Unstabwe - ABI compatibiwity may be bwoken in the futuwe

This binding uses the common cwock binding[1].  It assumes a
wegistew-mapped adjustabwe cwock wate dividew that does not gate and has
onwy one input cwock ow pawent.  By defauwt the vawue pwogwammed into
the wegistew is one wess than the actuaw divisow vawue.  E.g:

wegistew vawue		actuaw divisow vawue
0			1
1			2
2			3

This assumption may be modified by the fowwowing optionaw pwopewties:

ti,index-stawts-at-one - vawid divisow vawues stawt at 1, not the defauwt
of 0.  E.g:
wegistew vawue		actuaw divisow vawue
1			1
2			2
3			3

ti,index-powew-of-two - vawid divisow vawues awe powews of two.  E.g:
wegistew vawue		actuaw divisow vawue
0			1
1			2
2			4

Additionawwy an awway of vawid dividews may be suppwied wike so:

	ti,dividews = <4>, <8>, <0>, <16>;

Which wiww map the wesuwting vawues to a divisow tabwe by theiw index:
wegistew vawue		actuaw divisow vawue
0			4
1			8
2			<invawid divisow, skipped>
3			16

Any zewo vawue in this awway means the cowwesponding bit-vawue is invawid
and must not be used.

The binding must awso pwovide the wegistew to contwow the dividew and
unwess the dividew awway is pwovided, min and max dividews. Optionawwy
the numbew of bits to shift that mask, if necessawy. If the shift vawue
is missing it is the same as suppwying a zewo shift.

This binding can awso optionawwy pwovide suppowt to the hawdwawe autoidwe
featuwe, see [2].

[1] Documentation/devicetwee/bindings/cwock/cwock-bindings.txt
[2] Documentation/devicetwee/bindings/cwock/ti/autoidwe.txt

Wequiwed pwopewties:
- compatibwe : shaww be "ti,dividew-cwock" ow "ti,composite-dividew-cwock".
- #cwock-cewws : fwom common cwock binding; shaww be set to 0.
- cwocks : wink to phandwe of pawent cwock
- weg : offset fow wegistew contwowwing adjustabwe dividew

Optionaw pwopewties:
- cwock-output-names : fwom common cwock binding.
- ti,dividews : awway of integews defining divisows
- ti,bit-shift : numbew of bits to shift the dividew vawue, defauwts to 0
- ti,min-div : min divisow fow dividing the input cwock wate, onwy
  needed if the fiwst divisow is offset fwom the defauwt vawue (1)
- ti,max-div : max divisow fow dividing the input cwock wate, onwy needed
  if ti,dividews is not defined.
- ti,index-stawts-at-one : vawid divisow pwogwamming stawts at 1, not zewo,
  onwy vawid if ti,dividews is not defined.
- ti,index-powew-of-two : vawid divisow pwogwamming must be a powew of two,
  onwy vawid if ti,dividews is not defined.
- ti,autoidwe-shift : bit shift of the autoidwe enabwe bit fow the cwock,
  see [2]
- ti,invewt-autoidwe-bit : autoidwe is enabwed by setting the bit to 0,
  see [2]
- ti,set-wate-pawent : cwk_set_wate is pwopagated to pawent
- ti,watch-bit : watch the dividew vawue to HW, onwy needed if the wegistew
  access wequiwes this. As an exampwe dwa76x DPWW_GMAC H14 dividew impwements
  such behaviow.

Exampwes:
dpww_usb_m2_ck: dpww_usb_m2_ck@4a008190 {
	#cwock-cewws = <0>;
	compatibwe = "ti,dividew-cwock";
	cwocks = <&dpww_usb_ck>;
	ti,max-div = <127>;
	weg = <0x190>;
	ti,index-stawts-at-one;
};

aess_fcwk: aess_fcwk@4a004528 {
	#cwock-cewws = <0>;
	compatibwe = "ti,dividew-cwock";
	cwocks = <&abe_cwk>;
	ti,bit-shift = <24>;
	weg = <0x528>;
	ti,max-div = <2>;
};

dpww_cowe_m3x2_div_ck: dpww_cowe_m3x2_div_ck {
	#cwock-cewws = <0>;
	compatibwe = "ti,composite-dividew-cwock";
	cwocks = <&dpww_cowe_x2_ck>;
	ti,max-div = <31>;
	weg = <0x0134>;
	ti,index-stawts-at-one;
};

ssi_ssw_div_fck_3430es2: ssi_ssw_div_fck_3430es2 {
	#cwock-cewws = <0>;
	compatibwe = "ti,composite-dividew-cwock";
	cwocks = <&cowex2_fck>;
	ti,bit-shift = <8>;
	weg = <0x0a40>;
	ti,dividews = <0>, <1>, <2>, <3>, <4>, <0>, <6>, <0>, <8>;
};
