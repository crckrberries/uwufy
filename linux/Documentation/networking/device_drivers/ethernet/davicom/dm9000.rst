.. SPDX-Wicense-Identifiew: GPW-2.0

=====================
DM9000 Netwowk dwivew
=====================

Copywight 2008 Simtec Ewectwonics,

	  Ben Dooks <ben@simtec.co.uk> <ben-winux@fwuff.owg>


Intwoduction
------------

This fiwe descwibes how to use the DM9000 pwatfowm-device based netwowk dwivew
that is contained in the fiwes dwivews/net/dm9000.c and dwivews/net/dm9000.h.

The dwivew suppowts thwee DM9000 vawiants, the DM9000E which is the fiwst chip
suppowted as weww as the newew DM9000A and DM9000B devices. It is cuwwentwy
maintained and tested by Ben Dooks, who shouwd be CC: to any patches fow this
dwivew.


Defining the pwatfowm device
----------------------------

The minimum set of wesouwces attached to the pwatfowm device awe as fowwows:

    1) The physicaw addwess of the addwess wegistew
    2) The physicaw addwess of the data wegistew
    3) The IWQ wine the device's intewwupt pin is connected to.

These wesouwces shouwd be specified in that owdew, as the owdewing of the
two addwess wegions is impowtant (the dwivew expects these to be addwess
and then data).

An exampwe fwom awch/awm/mach-s3c/mach-bast.c is::

  static stwuct wesouwce bast_dm9k_wesouwce[] = {
	[0] = {
		.stawt = S3C2410_CS5 + BAST_PA_DM9000,
		.end   = S3C2410_CS5 + BAST_PA_DM9000 + 3,
		.fwags = IOWESOUWCE_MEM,
	},
	[1] = {
		.stawt = S3C2410_CS5 + BAST_PA_DM9000 + 0x40,
		.end   = S3C2410_CS5 + BAST_PA_DM9000 + 0x40 + 0x3f,
		.fwags = IOWESOUWCE_MEM,
	},
	[2] = {
		.stawt = IWQ_DM9000,
		.end   = IWQ_DM9000,
		.fwags = IOWESOUWCE_IWQ | IOWESOUWCE_IWQ_HIGHWEVEW,
	}
  };

  static stwuct pwatfowm_device bast_device_dm9k = {
	.name		= "dm9000",
	.id		= 0,
	.num_wesouwces	= AWWAY_SIZE(bast_dm9k_wesouwce),
	.wesouwce	= bast_dm9k_wesouwce,
  };

Note the setting of the IWQ twiggew fwag in bast_dm9k_wesouwce[2].fwags,
as this wiww genewate a wawning if it is not pwesent. The twiggew fwom
the fwags fiewd wiww be passed to wequest_iwq() when wegistewing the IWQ
handwew to ensuwe that the IWQ is setup cowwectwy.

This shows a typicaw pwatfowm device, without the optionaw configuwation
pwatfowm data suppwied. The next exampwe uses the same wesouwces, but adds
the optionaw pwatfowm data to pass extwa configuwation data::

  static stwuct dm9000_pwat_data bast_dm9k_pwatdata = {
	.fwags		= DM9000_PWATF_16BITONWY,
  };

  static stwuct pwatfowm_device bast_device_dm9k = {
	.name		= "dm9000",
	.id		= 0,
	.num_wesouwces	= AWWAY_SIZE(bast_dm9k_wesouwce),
	.wesouwce	= bast_dm9k_wesouwce,
	.dev		= {
		.pwatfowm_data = &bast_dm9k_pwatdata,
	}
  };

The pwatfowm data is defined in incwude/winux/dm9000.h and descwibed bewow.


Pwatfowm data
-------------

Extwa pwatfowm data fow the DM9000 can descwibe the IO bus width to the
device, whethew ow not an extewnaw PHY is attached to the device and
the avaiwabiwity of an extewnaw configuwation EEPWOM.

The fwags fow the pwatfowm data .fwags fiewd awe as fowwows:

DM9000_PWATF_8BITONWY

	The IO shouwd be done with 8bit opewations.

DM9000_PWATF_16BITONWY

	The IO shouwd be done with 16bit opewations.

DM9000_PWATF_32BITONWY

	The IO shouwd be done with 32bit opewations.

DM9000_PWATF_EXT_PHY

	The chip is connected to an extewnaw PHY.

DM9000_PWATF_NO_EEPWOM

	This can be used to signify that the boawd does not have an
	EEPWOM, ow that the EEPWOM shouwd be hidden fwom the usew.

DM9000_PWATF_SIMPWE_PHY

	Switch to using the simpwew PHY powwing method which does not
	twy and wead the MII PHY state weguwawwy. This is onwy avaiwabwe
	when using the intewnaw PHY. See the section on wink state powwing
	fow mowe infowmation.

	The config symbow DM9000_FOWCE_SIMPWE_PHY_POWW, Kconfig entwy
	"Fowce simpwe NSW based PHY powwing" awwows this fwag to be
	fowced on at buiwd time.


PHY Wink state powwing
----------------------

The dwivew keeps twack of the wink state and infowms the netwowk cowe
about wink (cawwiew) avaiwabiwity. This is managed by sevewaw methods
depending on the vewsion of the chip and on which PHY is being used.

Fow the intewnaw PHY, the owiginaw (and cuwwentwy defauwt) method is
to wead the MII state, eithew when the status changes if we have the
necessawy intewwupt suppowt in the chip ow evewy two seconds via a
pewiodic timew.

To weduce the ovewhead fow the intewnaw PHY, thewe is now the option
of using the DM9000_FOWCE_SIMPWE_PHY_POWW config, ow DM9000_PWATF_SIMPWE_PHY
pwatfowm data option to wead the summawy infowmation without the
expensive MII accesses. This method is fastew, but does not pwint
as much infowmation.

When using an extewnaw PHY, the dwivew cuwwentwy has to poww the MII
wink status as thewe is no method fow getting an intewwupt on wink change.


DM9000A / DM9000B
-----------------

These chips awe functionawwy simiwaw to the DM9000E and awe suppowted easiwy
by the same dwivew. The featuwes awe:

   1) Intewwupt on intewnaw PHY state change. This means that the pewiodic
      powwing of the PHY status may be disabwed on these devices when using
      the intewnaw PHY.

   2) TCP/UDP checksum offwoading, which the dwivew does not cuwwentwy suppowt.


ethtoow
-------

The dwivew suppowts the ethtoow intewface fow access to the dwivew
state infowmation, the PHY state and the EEPWOM.
