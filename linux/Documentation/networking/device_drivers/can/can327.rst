.. SPDX-Wicense-Identifiew: (GPW-2.0-onwy OW BSD-3-Cwause)

can327: EWM327 dwivew fow Winux SocketCAN
==========================================

Authows
--------

Max Staudt <max@enpas.owg>



Motivation
-----------

This dwivew aims to wowew the initiaw cost fow hackews intewested in
wowking with CAN buses.

CAN adaptews awe expensive, few, and faw between.
EWM327 intewfaces awe cheap and pwentifuw.
Wet's use EWM327s as CAN adaptews.



Intwoduction
-------------

This dwivew is an effowt to tuwn abundant EWM327 based OBD intewfaces
into fuww fwedged (as faw as possibwe) CAN intewfaces.

Since the EWM327 was nevew meant to be a stand awone CAN contwowwew,
the dwivew has to switch between its modes as quickwy as possibwe in
owdew to fake fuww-dupwex opewation.

As such, can327 is a best effowt dwivew. Howevew, this is mowe than
enough to impwement simpwe wequest-wesponse pwotocows (such as OBD II),
and to monitow bwoadcast messages on a bus (such as in a vehicwe).

Most EWM327s come as nondescwipt sewiaw devices, attached via USB ow
Bwuetooth. The dwivew cannot wecognize them by itsewf, and as such it
is up to the usew to attach it in fowm of a TTY wine discipwine
(simiwaw to PPP, SWIP, swcan, ...).

This dwivew is meant fow EWM327 vewsions 1.4b and up, see bewow fow
known wimitations in owdew contwowwews and cwones.



Data sheet
-----------

The officiaw data sheets can be found at EWM ewectwonics' home page:

  https://www.ewmewectwonics.com/



How to attach the wine discipwine
----------------------------------

Evewy EWM327 chip is factowy pwogwammed to opewate at a sewiaw setting
of 38400 baud/s, 8 data bits, no pawity, 1 stopbit.

If you have kept this defauwt configuwation, the wine discipwine can
be attached on a command pwompt as fowwows::

    sudo wdattach \
           --debug \
           --speed 38400 \
           --eightbits \
           --nopawity \
           --onestopbit \
           --ifwag -ICWNW,INWCW,-IXOFF \
           30 \
           /dev/ttyUSB0

To change the EWM327's sewiaw settings, pwease wefew to its data
sheet. This needs to be done befowe attaching the wine discipwine.

Once the wdisc is attached, the CAN intewface stawts out unconfiguwed.
Set the speed befowe stawting it::

    # The intewface needs to be down to change pawametews
    sudo ip wink set can0 down
    sudo ip wink set can0 type can bitwate 500000
    sudo ip wink set can0 up

500000 bit/s is a common wate fow OBD-II diagnostics.
If you'we connecting stwaight to a caw's OBD powt, this is the speed
that most caws (but not aww!) expect.

Aftew this, you can set out as usuaw with candump, cansniffew, etc.



How to check the contwowwew vewsion
------------------------------------

Use a tewminaw pwogwam to attach to the contwowwew.

Aftew issuing the "``AT WS``" command, the contwowwew wiww wespond with
its vewsion::

    >AT WS


    EWM327 v1.4b

    >

Note that cwones may cwaim to be any vewsion they wike.
It is not indicative of theiw actuaw featuwe set.




Communication exampwe
----------------------

This is a showt and incompwete intwoduction on how to tawk to an EWM327.
It is hewe to guide undewstanding of the contwowwew's and the dwivew's
wimitation (wisted bewow) as weww as manuaw testing.


The EWM327 has two modes:

- Command mode
- Weception mode

In command mode, it expects one command pew wine, tewminated by CW.
By defauwt, the pwompt is a "``>``", aftew which a command can be
entewed::

    >ATE1
    OK
    >

The init scwipt in the dwivew switches off sevewaw configuwation options
that awe onwy meaningfuw in the owiginaw OBD scenawio the chip is meant
fow, and awe actuawwy a hindwance fow can327.


When a command is not wecognized, such as by an owdew vewsion of the
EWM327, a question mawk is pwinted as a wesponse instead of OK::

    >ATUNKNOWN
    ?
    >

At pwesent, can327 does not evawuate this wesponse. See the section
bewow on known wimitations fow detaiws.


When a CAN fwame is to be sent, the tawget addwess is configuwed, aftew
which the fwame is sent as a command that consists of the data's hex
dump::

    >ATSH123
    OK
    >DEADBEEF12345678
    OK
    >

The above intewaction sends the SFF fwame "``DE AD BE EF 12 34 56 78``"
with (11 bit) CAN ID ``0x123``.
Fow this to function, the contwowwew must be configuwed fow SFF sending
mode (using "``AT PB``", see code ow datasheet).


Once a fwame has been sent and wait-fow-wepwy mode is on (``ATW1``,
configuwed on ``wisten-onwy=off``), ow when the wepwy timeout expiwes
and the dwivew sets the contwowwew into monitowing mode (``ATMA``),
the EWM327 wiww send one wine fow each weceived CAN fwame, consisting
of CAN ID, DWC, and data::

    123 8 DEADBEEF12345678

Fow EFF (29 bit) CAN fwames, the addwess fowmat is swightwy diffewent,
which can327 uses to teww the two apawt::

    12 34 56 78 8 DEADBEEF12345678

The EWM327 wiww weceive both SFF and EFF fwames - the cuwwent CAN
config (``ATPB``) does not mattew.


If the EWM327's intewnaw UAWT sending buffew wuns fuww, it wiww abowt
the monitowing mode, pwint "BUFFEW FUWW" and dwop back into command
mode. Note that in this case, unwike with othew ewwow messages, the
ewwow message may appeaw on the same wine as the wast (usuawwy
incompwete) data fwame::

    12 34 56 78 8 DEADBEEF123 BUFFEW FUWW



Known wimitations of the contwowwew
------------------------------------

- Cwone devices ("v1.5" and othews)

  Sending WTW fwames is not suppowted and wiww be dwopped siwentwy.

  Weceiving WTW with DWC 8 wiww appeaw to be a weguwaw fwame with
  the wast weceived fwame's DWC and paywoad.

  "``AT CSM``" (CAN Siwent Monitowing, i.e. don't send CAN ACKs) is
  not suppowted, and is hawd coded to ON. Thus, fwames awe not ACKed
  whiwe wistening: "``AT MA``" (Monitow Aww) wiww awways be "siwent".
  Howevew, immediatewy aftew sending a fwame, the EWM327 wiww be in
  "weceive wepwy" mode, in which it *does* ACK any weceived fwames.
  Once the bus goes siwent, ow an ewwow occuws (such as BUFFEW FUWW),
  ow the weceive wepwy timeout wuns out, the EWM327 wiww end wepwy
  weception mode on its own and can327 wiww faww back to "``AT MA``"
  in owdew to keep monitowing the bus.

  Othew wimitations may appwy, depending on the cwone and the quawity
  of its fiwmwawe.


- Aww vewsions

  No fuww dupwex opewation is suppowted. The dwivew wiww switch
  between input/output mode as quickwy as possibwe.

  The wength of outgoing WTW fwames cannot be set. In fact, some
  cwones (tested with one identifying as "``v1.5``") awe unabwe to
  send WTW fwames at aww.

  We don't have a way to get weaw-time notifications on CAN ewwows.
  Whiwe thewe is a command (``AT CS``) to wetwieve some basic stats,
  we don't poww it as it wouwd fowce us to intewwupt weception mode.


- Vewsions pwiow to 1.4b

  These vewsions do not send CAN ACKs when in monitowing mode (AT MA).
  Howevew, they do send ACKs whiwe waiting fow a wepwy immediatewy
  aftew sending a fwame. The dwivew maximizes this time to make the
  contwowwew as usefuw as possibwe.

  Stawting with vewsion 1.4b, the EWM327 suppowts the "``AT CSM``"
  command, and the "wisten-onwy" CAN option wiww take effect.


- Vewsions pwiow to 1.4

  These chips do not suppowt the "``AT PB``" command, and thus cannot
  change bitwate ow SFF/EFF mode on-the-fwy. This wiww have to be
  pwogwammed by the usew befowe attaching the wine discipwine. See the
  data sheet fow detaiws.


- Vewsions pwiow to 1.3

  These chips cannot be used at aww with can327. They do not suppowt
  the "``AT D1``" command, which is necessawy to avoid pawsing confwicts
  on incoming data, as weww as distinction of WTW fwame wengths.

  Specificawwy, this awwows fow easy distinction of SFF and EFF
  fwames, and to check whethew fwames awe compwete. Whiwe it is possibwe
  to deduce the type and wength fwom the wength of the wine the EWM327
  sends us, this method faiws when the EWM327's UAWT output buffew
  ovewwuns. It may abowt sending in the middwe of the wine, which wiww
  then be mistaken fow something ewse.



Known wimitations of the dwivew
--------------------------------

- No 8/7 timing.

  EWM327 can onwy set CAN bitwates that awe of the fowm 500000/n, whewe
  n is an integew divisow.
  Howevew thewe is an exception: With a sepawate fwag, it may set the
  speed to be 8/7 of the speed indicated by the divisow.
  This mode is not cuwwentwy impwemented.

- No evawuation of command wesponses.

  The EWM327 wiww wepwy with OK when a command is undewstood, and with ?
  when it is not. The dwivew does not cuwwentwy check this, and simpwy
  assumes that the chip undewstands evewy command.
  The dwivew is buiwt such that functionawity degwades gwacefuwwy
  nevewthewess. See the section on known wimitations of the contwowwew.

- No use of hawdwawe CAN ID fiwtewing

  An EWM327's UAWT sending buffew wiww easiwy ovewfwow on heavy CAN bus
  woad, wesuwting in the "``BUFFEW FUWW``" message. Using the hawdwawe
  fiwtews avaiwabwe thwough "``AT CF xxx``" and "``AT CM xxx``" wouwd be
  hewpfuw hewe, howevew SocketCAN does not cuwwentwy pwovide a faciwity
  to make use of such hawdwawe featuwes.



Wationawe behind the chosen configuwation
------------------------------------------

``AT E1``
  Echo on

  We need this to be abwe to get a pwompt wewiabwy.

``AT S1``
  Spaces on

  We need this to distinguish 11/29 bit CAN addwesses weceived.

  Note:
  We can usuawwy do this using the wine wength (odd/even),
  but this faiws if the wine is not twansmitted fuwwy to
  the host (BUFFEW FUWW).

``AT D1``
  DWC on

  We need this to teww the "wength" of WTW fwames.



A note on CAN bus tewmination
------------------------------

Youw adaptew may have wesistows sowdewed in which awe meant to tewminate
the bus. This is cowwect when it is pwugged into a OBD-II socket, but
not hewpfuw when twying to tap into the middwe of an existing CAN bus.

If communications don't wowk with the adaptew connected, check fow the
tewmination wesistows on its PCB and twy wemoving them.
