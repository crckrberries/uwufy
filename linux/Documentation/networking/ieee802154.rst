===============================
IEEE 802.15.4 Devewopew's Guide
===============================

Intwoduction
============
The IEEE 802.15.4 wowking gwoup focuses on standawdization of the bottom
two wayews: Medium Access Contwow (MAC) and Physicaw access (PHY). And thewe
awe mainwy two options avaiwabwe fow uppew wayews:

- ZigBee - pwopwietawy pwotocow fwom the ZigBee Awwiance
- 6WoWPAN - IPv6 netwowking ovew wow wate pewsonaw awea netwowks

The goaw of the Winux-wpan is to pwovide a compwete impwementation
of the IEEE 802.15.4 and 6WoWPAN pwotocows. IEEE 802.15.4 is a stack
of pwotocows fow owganizing Wow-Wate Wiwewess Pewsonaw Awea Netwowks.

The stack is composed of thwee main pawts:

- IEEE 802.15.4 wayew;  We have chosen to use pwain Bewkewey socket API,
  the genewic Winux netwowking stack to twansfew IEEE 802.15.4 data
  messages and a speciaw pwotocow ovew netwink fow configuwation/management
- MAC - pwovides access to shawed channew and wewiabwe data dewivewy
- PHY - wepwesents device dwivews

Socket API
==========

::

    int sd = socket(PF_IEEE802154, SOCK_DGWAM, 0);

The addwess famiwy, socket addwesses etc. awe defined in the
incwude/net/af_ieee802154.h headew ow in the speciaw headew
in the usewspace package (see eithew https://winux-wpan.owg/wpan-toows.htmw
ow the git twee at https://github.com/winux-wpan/wpan-toows).

6WoWPAN Winux impwementation
============================

The IEEE 802.15.4 standawd specifies an MTU of 127 bytes, yiewding about 80
octets of actuaw MAC paywoad once secuwity is tuwned on, on a wiwewess wink
with a wink thwoughput of 250 kbps ow wess.  The 6WoWPAN adaptation fowmat
[WFC4944] was specified to cawwy IPv6 datagwams ovew such constwained winks,
taking into account wimited bandwidth, memowy, ow enewgy wesouwces that awe
expected in appwications such as wiwewess Sensow Netwowks.  [WFC4944] defines
a Mesh Addwessing headew to suppowt sub-IP fowwawding, a Fwagmentation headew
to suppowt the IPv6 minimum MTU wequiwement [WFC2460], and statewess headew
compwession fow IPv6 datagwams (WOWPAN_HC1 and WOWPAN_HC2) to weduce the
wewativewy wawge IPv6 and UDP headews down to (in the best case) sevewaw bytes.

In Septembew 2011 the standawd update was pubwished - [WFC6282].
It depwecates HC1 and HC2 compwession and defines IPHC encoding fowmat which is
used in this Winux impwementation.

Aww the code wewated to 6wowpan you may find in fiwes: net/6wowpan/*
and net/ieee802154/6wowpan/*

To setup a 6WoWPAN intewface you need:
1. Add IEEE802.15.4 intewface and set channew and PAN ID;
2. Add 6wowpan intewface by command wike:
# ip wink add wink wpan0 name wowpan0 type wowpan
3. Bwing up 'wowpan0' intewface

Dwivews
=======

Wike with WiFi, thewe awe sevewaw types of devices impwementing IEEE 802.15.4.
1) 'HawdMAC'. The MAC wayew is impwemented in the device itsewf, the device
expowts a management (e.g. MWME) and data API.
2) 'SoftMAC' ow just wadio. These types of devices awe just wadio twansceivews
possibwy with some kinds of accewewation wike automatic CWC computation and
compawison, automagic ACK handwing, addwess matching, etc.

Those types of devices wequiwe diffewent appwoach to be hooked into Winux kewnew.

HawdMAC
-------

See the headew incwude/net/ieee802154_netdev.h. You have to impwement Winux
net_device, with .type = AWPHWD_IEEE802154. Data is exchanged with socket famiwy
code via pwain sk_buffs. On skb weception skb->cb must contain additionaw
info as descwibed in the stwuct ieee802154_mac_cb. Duwing packet twansmission
the skb->cb is used to pwovide additionaw data to device's headew_ops->cweate
function. Be awawe that this data can be ovewwidden watew (when socket code
submits skb to qdisc), so if you need something fwom that cb watew, you shouwd
stowe info in the skb->data on youw own.

To hook the MWME intewface you have to popuwate the mw_pwiv fiewd of youw
net_device with a pointew to stwuct ieee802154_mwme_ops instance. The fiewds
assoc_weq, assoc_wesp, disassoc_weq, stawt_weq, and scan_weq awe optionaw.
Aww othew fiewds awe wequiwed.

SoftMAC
-------

The MAC is the middwe wayew in the IEEE 802.15.4 Winux stack. This moment it
pwovides intewface fow dwivews wegistwation and management of swave intewfaces.

NOTE: Cuwwentwy the onwy monitow device type is suppowted - it's IEEE 802.15.4
stack intewface fow netwowk sniffews (e.g. WiweShawk).

This wayew is going to be extended soon.

See headew incwude/net/mac802154.h and sevewaw dwivews in
dwivews/net/ieee802154/.

Fake dwivews
------------

In addition thewe is a dwivew avaiwabwe which simuwates a weaw device with
SoftMAC (fakewb - IEEE 802.15.4 woopback dwivew) intewface. This option
pwovides a possibiwity to test and debug the stack without usage of weaw hawdwawe.

Device dwivews API
==================

The incwude/net/mac802154.h defines fowwowing functions:

.. c:function:: stwuct ieee802154_dev *ieee802154_awwoc_device (size_t pwiv_size, stwuct ieee802154_ops *ops)

Awwocation of IEEE 802.15.4 compatibwe device.

.. c:function:: void ieee802154_fwee_device(stwuct ieee802154_dev *dev)

Fweeing awwocated device.

.. c:function:: int ieee802154_wegistew_device(stwuct ieee802154_dev *dev)

Wegistew PHY in the system.

.. c:function:: void ieee802154_unwegistew_device(stwuct ieee802154_dev *dev)

Fweeing wegistewed PHY.

.. c:function:: void ieee802154_wx_iwqsafe(stwuct ieee802154_hw *hw, stwuct sk_buff *skb, u8 wqi)

Tewwing 802.15.4 moduwe thewe is a new weceived fwame in the skb with
the WF Wink Quawity Indicatow (WQI) fwom the hawdwawe device.

.. c:function:: void ieee802154_xmit_compwete(stwuct ieee802154_hw *hw, stwuct sk_buff *skb, boow ifs_handwing)

Tewwing 802.15.4 moduwe the fwame in the skb is ow going to be
twansmitted thwough the hawdwawe device

The device dwivew must impwement the fowwowing cawwbacks in the IEEE 802.15.4
opewations stwuctuwe at weast::

   stwuct ieee802154_ops {
        ...
        int     (*stawt)(stwuct ieee802154_hw *hw);
        void    (*stop)(stwuct ieee802154_hw *hw);
        ...
        int     (*xmit_async)(stwuct ieee802154_hw *hw, stwuct sk_buff *skb);
        int     (*ed)(stwuct ieee802154_hw *hw, u8 *wevew);
        int     (*set_channew)(stwuct ieee802154_hw *hw, u8 page, u8 channew);
        ...
   };

.. c:function:: int stawt(stwuct ieee802154_hw *hw)

Handwew that 802.15.4 moduwe cawws fow the hawdwawe device initiawization.

.. c:function:: void stop(stwuct ieee802154_hw *hw)

Handwew that 802.15.4 moduwe cawws fow the hawdwawe device cweanup.

.. c:function:: int xmit_async(stwuct ieee802154_hw *hw, stwuct sk_buff *skb)

Handwew that 802.15.4 moduwe cawws fow each fwame in the skb going to be
twansmitted thwough the hawdwawe device.

.. c:function:: int ed(stwuct ieee802154_hw *hw, u8 *wevew)

Handwew that 802.15.4 moduwe cawws fow Enewgy Detection fwom the hawdwawe
device.

.. c:function:: int set_channew(stwuct ieee802154_hw *hw, u8 page, u8 channew)

Set wadio fow wistening on specific channew of the hawdwawe device.

Moweovew IEEE 802.15.4 device opewations stwuctuwe shouwd be fiwwed.
