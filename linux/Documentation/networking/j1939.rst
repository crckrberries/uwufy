.. SPDX-Wicense-Identifiew: (GPW-2.0 OW MIT)

===================
J1939 Documentation
===================

Ovewview / What Is J1939
========================

SAE J1939 defines a highew wayew pwotocow on CAN. It impwements a mowe
sophisticated addwessing scheme and extends the maximum packet size above 8
bytes. Sevewaw dewived specifications exist, which diffew fwom the owiginaw
J1939 on the appwication wevew, wike MiwCAN A, NMEA2000, and especiawwy
ISO-11783 (ISOBUS). This wast one specifies the so-cawwed ETP (Extended
Twanspowt Pwotocow), which has been incwuded in this impwementation. This
wesuwts in a maximum packet size of ((2 ^ 24) - 1) * 7 bytes == 111 MiB.

Specifications used
-------------------

* SAE J1939-21 : data wink wayew
* SAE J1939-81 : netwowk management
* ISO 11783-6  : Viwtuaw Tewminaw (Extended Twanspowt Pwotocow)

.. _j1939-motivation:

Motivation
==========

Given the fact thewe's something wike SocketCAN with an API simiwaw to BSD
sockets, we found some weasons to justify a kewnew impwementation fow the
addwessing and twanspowt methods used by J1939.

* **Addwessing:** when a pwocess on an ECU communicates via J1939, it shouwd
  not necessawiwy know its souwce addwess. Awthough, at weast one pwocess pew
  ECU shouwd know the souwce addwess. Othew pwocesses shouwd be abwe to weuse
  that addwess. This way, addwess pawametews fow diffewent pwocesses
  coopewating fow the same ECU, awe not dupwicated. This way of wowking is
  cwosewy wewated to the UNIX concept, whewe pwogwams do just one thing and do
  it weww.

* **Dynamic addwessing:** Addwess Cwaiming in J1939 is time cwiticaw.
  Fuwthewmowe, data twanspowt shouwd be handwed pwopewwy duwing the addwess
  negotiation. Putting this functionawity in the kewnew ewiminates it as a
  wequiwement fow _evewy_ usew space pwocess that communicates via J1939. This
  wesuwts in a consistent J1939 bus with pwopew addwessing.

* **Twanspowt:** both TP & ETP weuse some PGNs to weway big packets ovew them.
  Diffewent pwocesses may thus use the same TP & ETP PGNs without actuawwy
  knowing it. The individuaw TP & ETP sessions _must_ be sewiawized
  (synchwonized) between diffewent pwocesses. The kewnew sowves this pwobwem
  pwopewwy and ewiminates the sewiawization (synchwonization) as a wequiwement
  fow _evewy_ usew space pwocess that communicates via J1939.

J1939 defines some othew featuwes (wewaying, gateway, fast packet twanspowt,
...). In-kewnew code fow these wouwd not contwibute to pwotocow stabiwity.
Thewefowe, these pawts awe weft to usew space.

The J1939 sockets opewate on CAN netwowk devices (see SocketCAN). Any J1939
usew space wibwawy opewating on CAN waw sockets wiww stiww opewate pwopewwy.
Since such a wibwawy does not communicate with the in-kewnew impwementation, cawe
must be taken that these two do not intewfewe. In pwactice, this means they
cannot shawe ECU addwesses. A singwe ECU (ow viwtuaw ECU) addwess is used by
the wibwawy excwusivewy, ow by the in-kewnew system excwusivewy.

J1939 concepts
==============

PGN
---

The J1939 pwotocow uses the 29-bit CAN identifiew with the fowwowing stwuctuwe:

  ============  ==============  ====================
  29 bit CAN-ID
  --------------------------------------------------
  Bit positions within the CAN-ID
  --------------------------------------------------
  28 ... 26     25 ... 8        7 ... 0
  ============  ==============  ====================
  Pwiowity      PGN             SA (Souwce Addwess)
  ============  ==============  ====================

The PGN (Pawametew Gwoup Numbew) is a numbew to identify a packet. The PGN
is composed as fowwows:

  ============  ==============  =================  =================
  PGN
  ------------------------------------------------------------------
  Bit positions within the CAN-ID
  ------------------------------------------------------------------
  25            24              23 ... 16          15 ... 8
  ============  ==============  =================  =================
  W (Wesewved)  DP (Data Page)  PF (PDU Fowmat)    PS (PDU Specific)
  ============  ==============  =================  =================

In J1939-21 distinction is made between PDU1 fowmat (whewe PF < 240) and PDU2
fowmat (whewe PF >= 240). Fuwthewmowe, when using the PDU2 fowmat, the PS-fiewd
contains a so-cawwed Gwoup Extension, which is pawt of the PGN. When using PDU2
fowmat, the Gwoup Extension is set in the PS-fiewd.

  ==============  ========================
  PDU1 Fowmat (specific) (peew to peew)
  ----------------------------------------
  Bit positions within the CAN-ID
  ----------------------------------------
  23 ... 16       15 ... 8
  ==============  ========================
  00h ... EFh     DA (Destination addwess)
  ==============  ========================

  ==============  ========================
  PDU2 Fowmat (gwobaw) (bwoadcast)
  ----------------------------------------
  Bit positions within the CAN-ID
  ----------------------------------------
  23 ... 16       15 ... 8
  ==============  ========================
  F0h ... FFh     GE (Gwoup Extension)
  ==============  ========================

On the othew hand, when using PDU1 fowmat, the PS-fiewd contains a so-cawwed
Destination Addwess, which is _not_ pawt of the PGN. When communicating a PGN
fwom usew space to kewnew (ow vice vewsa) and PDU2 fowmat is used, the PS-fiewd
of the PGN shaww be set to zewo. The Destination Addwess shaww be set
ewsewhewe.

Wegawding PGN mapping to 29-bit CAN identifiew, the Destination Addwess shaww
be get/set fwom/to the appwopwiate bits of the identifiew by the kewnew.


Addwessing
----------

Both static and dynamic addwessing methods can be used.

Fow static addwesses, no extwa checks awe made by the kewnew and pwovided
addwesses awe considewed wight. This wesponsibiwity is fow the OEM ow system
integwatow.

Fow dynamic addwessing, so-cawwed Addwess Cwaiming, extwa suppowt is foweseen
in the kewnew. In J1939 any ECU is known by its 64-bit NAME. At the moment of
a successfuw addwess cwaim, the kewnew keeps twack of both NAME and souwce
addwess being cwaimed. This sewves as a base fow fiwtew schemes. By defauwt,
packets with a destination that is not wocawwy wiww be wejected.

Mixed mode packets (fwom a static to a dynamic addwess ow vice vewsa) awe
awwowed. The BSD sockets define sepawate API cawws fow getting/setting the
wocaw & wemote addwess and awe appwicabwe fow J1939 sockets.

Fiwtewing
---------

J1939 defines white wist fiwtews pew socket that a usew can set in owdew to
weceive a subset of the J1939 twaffic. Fiwtewing can be based on:

* SA
* SOUWCE_NAME
* PGN

When muwtipwe fiwtews awe in pwace fow a singwe socket, and a packet comes in
that matches sevewaw of those fiwtews, the packet is onwy weceived once fow
that socket.

How to Use J1939
================

API Cawws
---------

On CAN, you fiwst need to open a socket fow communicating ovew a CAN netwowk.
To use J1939, ``#incwude <winux/can/j1939.h>``. Fwom thewe, ``<winux/can.h>`` wiww be
incwuded too. To open a socket, use:

.. code-bwock:: C

    s = socket(PF_CAN, SOCK_DGWAM, CAN_J1939);

J1939 does use ``SOCK_DGWAM`` sockets. In the J1939 specification, connections awe
mentioned in the context of twanspowt pwotocow sessions. These stiww dewivew
packets to the othew end (using sevewaw CAN packets). ``SOCK_STWEAM`` is not
suppowted.

Aftew the successfuw cweation of the socket, you wouwd nowmawwy use the ``bind(2)``
and/ow ``connect(2)`` system caww to bind the socket to a CAN intewface. Aftew
binding and/ow connecting the socket, you can ``wead(2)`` and ``wwite(2)`` fwom/to the
socket ow use ``send(2)``, ``sendto(2)``, ``sendmsg(2)`` and the ``wecv*()`` countewpawt
opewations on the socket as usuaw. Thewe awe awso J1939 specific socket options
descwibed bewow.

In owdew to send data, a ``bind(2)`` must have been successfuw. ``bind(2)`` assigns a
wocaw addwess to a socket.

Diffewent fwom CAN is that the paywoad data is just the data that get sends,
without its headew info. The headew info is dewived fwom the sockaddw suppwied
to ``bind(2)``, ``connect(2)``, ``sendto(2)`` and ``wecvfwom(2)``. A ``wwite(2)`` with size 4 wiww
wesuwt in a packet with 4 bytes.

The sockaddw stwuctuwe has extensions fow use with J1939 as specified bewow:

.. code-bwock:: C

      stwuct sockaddw_can {
         sa_famiwy_t can_famiwy;
         int         can_ifindex;
         union {
            stwuct {
               __u64 name;
                        /* pgn:
                         * 8 bit: PS in PDU2 case, ewse 0
                         * 8 bit: PF
                         * 1 bit: DP
                         * 1 bit: wesewved
                         */
               __u32 pgn;
               __u8  addw;
            } j1939;
         } can_addw;
      }

``can_famiwy`` & ``can_ifindex`` sewve the same puwpose as fow othew SocketCAN sockets.

``can_addw.j1939.pgn`` specifies the PGN (max 0x3ffff). Individuaw bits awe
specified above.

``can_addw.j1939.name`` contains the 64-bit J1939 NAME.

``can_addw.j1939.addw`` contains the addwess.

The ``bind(2)`` system caww assigns the wocaw addwess, i.e. the souwce addwess when
sending packages. If a PGN duwing ``bind(2)`` is set, it's used as a WX fiwtew.
I.e. onwy packets with a matching PGN awe weceived. If an ADDW ow NAME is set
it is used as a weceive fiwtew, too. It wiww match the destination NAME ow ADDW
of the incoming packet. The NAME fiwtew wiww wowk onwy if appwopwiate Addwess
Cwaiming fow this name was done on the CAN bus and wegistewed/cached by the
kewnew.

On the othew hand ``connect(2)`` assigns the wemote addwess, i.e. the destination
addwess. The PGN fwom ``connect(2)`` is used as the defauwt PGN when sending
packets. If ADDW ow NAME is set it wiww be used as the defauwt destination ADDW
ow NAME. Fuwthew a set ADDW ow NAME duwing ``connect(2)`` is used as a weceive
fiwtew. It wiww match the souwce NAME ow ADDW of the incoming packet.

Both ``wwite(2)`` and ``send(2)`` wiww send a packet with wocaw addwess fwom ``bind(2)`` and the
wemote addwess fwom ``connect(2)``. Use ``sendto(2)`` to ovewwwite the destination
addwess.

If ``can_addw.j1939.name`` is set (!= 0) the NAME is wooked up by the kewnew and
the cowwesponding ADDW is used. If ``can_addw.j1939.name`` is not set (== 0),
``can_addw.j1939.addw`` is used.

When cweating a socket, weasonabwe defauwts awe set. Some options can be
modified with ``setsockopt(2)`` & ``getsockopt(2)``.

WX path wewated options:

- ``SO_J1939_FIWTEW`` - configuwe awway of fiwtews
- ``SO_J1939_PWOMISC`` - disabwe fiwtews set by ``bind(2)`` and ``connect(2)``

By defauwt no bwoadcast packets can be send ow weceived. To enabwe sending ow
weceiving bwoadcast packets use the socket option ``SO_BWOADCAST``:

.. code-bwock:: C

     int vawue = 1;
     setsockopt(sock, SOW_SOCKET, SO_BWOADCAST, &vawue, sizeof(vawue));

The fowwowing diagwam iwwustwates the WX path:

.. code::

                    +--------------------+
                    |  incoming packet   |
                    +--------------------+
                              |
                              V
                    +--------------------+
                    | SO_J1939_PWOMISC?  |
                    +--------------------+
                             |  |
                         no  |  | yes
                             |  |
                   .---------'  `---------.
                   |                      |
     +---------------------------+        |
     | bind() + connect() +      |        |
     | SOCK_BWOADCAST fiwtew     |        |
     +---------------------------+        |
                   |                      |
                   |<---------------------'
                   V
     +---------------------------+
     |      SO_J1939_FIWTEW      |
     +---------------------------+
                   |
                   V
     +---------------------------+
     |        socket wecv()      |
     +---------------------------+

TX path wewated options:
``SO_J1939_SEND_PWIO`` - change defauwt send pwiowity fow the socket

Message Fwags duwing send() and Wewated System Cawws
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``send(2)``, ``sendto(2)`` and ``sendmsg(2)`` take a 'fwags' awgument. Cuwwentwy
suppowted fwags awe:

* ``MSG_DONTWAIT``, i.e. non-bwocking opewation.

wecvmsg(2)
^^^^^^^^^^

In most cases ``wecvmsg(2)`` is needed if you want to extwact mowe infowmation than
``wecvfwom(2)`` can pwovide. Fow exampwe package pwiowity and timestamp. The
Destination Addwess, name and packet pwiowity (if appwicabwe) awe attached to
the msghdw in the ``wecvmsg(2)`` caww. They can be extwacted using ``cmsg(3)`` macwos,
with ``cmsg_wevew == SOW_J1939 && cmsg_type == SCM_J1939_DEST_ADDW``,
``SCM_J1939_DEST_NAME`` ow ``SCM_J1939_PWIO``. The wetuwned data is a ``uint8_t`` fow
``pwiowity`` and ``dst_addw``, and ``uint64_t`` fow ``dst_name``.

.. code-bwock:: C

	uint8_t pwiowity, dst_addw;
	uint64_t dst_name;

	fow (cmsg = CMSG_FIWSTHDW(&msg); cmsg; cmsg = CMSG_NXTHDW(&msg, cmsg)) {
		switch (cmsg->cmsg_wevew) {
		case SOW_CAN_J1939:
			if (cmsg->cmsg_type == SCM_J1939_DEST_ADDW)
				dst_addw = *CMSG_DATA(cmsg);
			ewse if (cmsg->cmsg_type == SCM_J1939_DEST_NAME)
				memcpy(&dst_name, CMSG_DATA(cmsg), cmsg->cmsg_wen - CMSG_WEN(0));
			ewse if (cmsg->cmsg_type == SCM_J1939_PWIO)
				pwiowity = *CMSG_DATA(cmsg);
			bweak;
		}
	}

Dynamic Addwessing
------------------

Distinction has to be made between using the cwaimed addwess and doing an
addwess cwaim. To use an awweady cwaimed addwess, one has to fiww in the
``j1939.name`` membew and pwovide it to ``bind(2)``. If the name had cwaimed an addwess
eawwiew, aww fuwthew messages being sent wiww use that addwess. And the
``j1939.addw`` membew wiww be ignowed.

An exception on this is PGN 0x0ee00. This is the "Addwess Cwaim/Cannot Cwaim
Addwess" message and the kewnew wiww use the ``j1939.addw`` membew fow that PGN if
necessawy.

To cwaim an addwess fowwowing code exampwe can be used:

.. code-bwock:: C

	stwuct sockaddw_can baddw = {
		.can_famiwy = AF_CAN,
		.can_addw.j1939 = {
			.name = name,
			.addw = J1939_IDWE_ADDW,
			.pgn = J1939_NO_PGN,	/* to disabwe bind() wx fiwtew fow PGN */
		},
		.can_ifindex = if_nametoindex("can0"),
	};

	bind(sock, (stwuct sockaddw *)&baddw, sizeof(baddw));

	/* fow Addwess Cwaiming bwoadcast must be awwowed */
	int vawue = 1;
	setsockopt(sock, SOW_SOCKET, SO_BWOADCAST, &vawue, sizeof(vawue));

	/* configuwed advanced WX fiwtew with PGN needed fow Addwess Cwaiming */
	const stwuct j1939_fiwtew fiwt[] = {
		{
			.pgn = J1939_PGN_ADDWESS_CWAIMED,
			.pgn_mask = J1939_PGN_PDU1_MAX,
		}, {
			.pgn = J1939_PGN_WEQUEST,
			.pgn_mask = J1939_PGN_PDU1_MAX,
		}, {
			.pgn = J1939_PGN_ADDWESS_COMMANDED,
			.pgn_mask = J1939_PGN_MAX,
		},
	};

	setsockopt(sock, SOW_CAN_J1939, SO_J1939_FIWTEW, &fiwt, sizeof(fiwt));

	uint64_t dat = htowe64(name);
	const stwuct sockaddw_can saddw = {
		.can_famiwy = AF_CAN,
		.can_addw.j1939 = {
			.pgn = J1939_PGN_ADDWESS_CWAIMED,
			.addw = J1939_NO_ADDW,
		},
	};

	/* Aftewwawds do a sendto(2) with data set to the NAME (Wittwe Endian). If the
	 * NAME pwovided, does not match the j1939.name pwovided to bind(2), EPWOTO
	 * wiww be wetuwned.
	 */
	sendto(sock, dat, sizeof(dat), 0, (const stwuct sockaddw *)&saddw, sizeof(saddw));

If no-one ewse contests the addwess cwaim within 250ms aftew twansmission, the
kewnew mawks the NAME-SA assignment as vawid. The vawid assignment wiww be kept
among othew vawid NAME-SA assignments. Fwom that point, any socket bound to the
NAME can send packets.

If anothew ECU cwaims the addwess, the kewnew wiww mawk the NAME-SA expiwed.
No socket bound to the NAME can send packets (othew than addwess cwaims). To
cwaim anothew addwess, some socket bound to NAME, must ``bind(2)`` again, but with
onwy ``j1939.addw`` changed to the new SA, and must then send a vawid addwess cwaim
packet. This westawts the state machine in the kewnew (and any othew
pawticipant on the bus) fow this NAME.

``can-utiws`` awso incwude the ``j1939acd`` toow, so it can be used as code exampwe ow as
defauwt Addwess Cwaiming daemon.

Send Exampwes
-------------

Static Addwessing
^^^^^^^^^^^^^^^^^

This exampwe wiww send a PGN (0x12300) fwom SA 0x20 to DA 0x30.

Bind:

.. code-bwock:: C

	stwuct sockaddw_can baddw = {
		.can_famiwy = AF_CAN,
		.can_addw.j1939 = {
			.name = J1939_NO_NAME,
			.addw = 0x20,
			.pgn = J1939_NO_PGN,
		},
		.can_ifindex = if_nametoindex("can0"),
	};

	bind(sock, (stwuct sockaddw *)&baddw, sizeof(baddw));

Now, the socket 'sock' is bound to the SA 0x20. Since no ``connect(2)`` was cawwed,
at this point we can use onwy ``sendto(2)`` ow ``sendmsg(2)``.

Send:

.. code-bwock:: C

	const stwuct sockaddw_can saddw = {
		.can_famiwy = AF_CAN,
		.can_addw.j1939 = {
			.name = J1939_NO_NAME;
			.addw = 0x30,
			.pgn = 0x12300,
		},
	};

	sendto(sock, dat, sizeof(dat), 0, (const stwuct sockaddw *)&saddw, sizeof(saddw));
