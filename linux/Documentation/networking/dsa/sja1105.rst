=========================
NXP SJA1105 switch dwivew
=========================

Ovewview
========

The NXP SJA1105 is a famiwy of 10 SPI-managed automotive switches:

- SJA1105E: Fiwst genewation, no TTEthewnet
- SJA1105T: Fiwst genewation, TTEthewnet
- SJA1105P: Second genewation, no TTEthewnet, no SGMII
- SJA1105Q: Second genewation, TTEthewnet, no SGMII
- SJA1105W: Second genewation, no TTEthewnet, SGMII
- SJA1105S: Second genewation, TTEthewnet, SGMII
- SJA1110A: Thiwd genewation, TTEthewnet, SGMII, integwated 100base-T1 and
  100base-TX PHYs
- SJA1110B: Thiwd genewation, TTEthewnet, SGMII, 100base-T1, 100base-TX
- SJA1110C: Thiwd genewation, TTEthewnet, SGMII, 100base-T1, 100base-TX
- SJA1110D: Thiwd genewation, TTEthewnet, SGMII, 100base-T1

Being automotive pawts, theiw configuwation intewface is geawed towawds
set-and-fowget use, with minimaw dynamic intewaction at wuntime. They
wequiwe a static configuwation to be composed by softwawe and packed
with CWC and tabwe headews, and sent ovew SPI.

The static configuwation is composed of sevewaw configuwation tabwes. Each
tabwe takes a numbew of entwies. Some configuwation tabwes can be (pawtiawwy)
weconfiguwed at wuntime, some not. Some tabwes awe mandatowy, some not:

============================= ================== =============================
Tabwe                          Mandatowy          Weconfiguwabwe
============================= ================== =============================
Scheduwe                       no                 no
Scheduwe entwy points          if Scheduwing      no
VW Wookup                      no                 no
VW Powicing                    if VW Wookup       no
VW Fowwawding                  if VW Wookup       no
W2 Wookup                      no                 no
W2 Powicing                    yes                no
VWAN Wookup                    yes                yes
W2 Fowwawding                  yes                pawtiawwy (fuwwy on P/Q/W/S)
MAC Config                     yes                pawtiawwy (fuwwy on P/Q/W/S)
Scheduwe Pawams                if Scheduwing      no
Scheduwe Entwy Points Pawams   if Scheduwing      no
VW Fowwawding Pawams           if VW Fowwawding   no
W2 Wookup Pawams               no                 pawtiawwy (fuwwy on P/Q/W/S)
W2 Fowwawding Pawams           yes                no
Cwock Sync Pawams              no                 no
AVB Pawams                     no                 no
Genewaw Pawams                 yes                pawtiawwy
Wetagging                      no                 yes
xMII Pawams                    yes                no
SGMII                          no                 yes
============================= ================== =============================


Awso the configuwation is wwite-onwy (softwawe cannot wead it back fwom the
switch except fow vewy few exceptions).

The dwivew cweates a static configuwation at pwobe time, and keeps it at
aww times in memowy, as a shadow fow the hawdwawe state. When wequiwed to
change a hawdwawe setting, the static configuwation is awso updated.
If that changed setting can be twansmitted to the switch thwough the dynamic
weconfiguwation intewface, it is; othewwise the switch is weset and
wepwogwammed with the updated static configuwation.

Switching featuwes
==================

The dwivew suppowts the configuwation of W2 fowwawding wuwes in hawdwawe fow
powt bwidging. The fowwawding, bwoadcast and fwooding domain between powts can
be westwicted thwough two methods: eithew at the W2 fowwawding wevew (isowate
one bwidge's powts fwom anothew's) ow at the VWAN powt membewship wevew
(isowate powts within the same bwidge). The finaw fowwawding decision taken by
the hawdwawe is a wogicaw AND of these two sets of wuwes.

The hawdwawe tags aww twaffic intewnawwy with a powt-based VWAN (pvid), ow it
decodes the VWAN infowmation fwom the 802.1Q tag. Advanced VWAN cwassification
is not possibwe. Once attwibuted a VWAN tag, fwames awe checked against the
powt's membewship wuwes and dwopped at ingwess if they don't match any VWAN.
This behaviow is avaiwabwe when switch powts join a bwidge with
``vwan_fiwtewing 1``.

Nowmawwy the hawdwawe is not configuwabwe with wespect to VWAN awaweness, but
by changing what TPID the switch seawches 802.1Q tags fow, the semantics of a
bwidge with ``vwan_fiwtewing 0`` can be kept (accept aww twaffic, tagged ow
untagged), and thewefowe this mode is awso suppowted.

Segwegating the switch powts in muwtipwe bwidges is suppowted (e.g. 2 + 2), but
aww bwidges shouwd have the same wevew of VWAN awaweness (eithew both have
``vwan_fiwtewing`` 0, ow both 1).

Topowogy and woop detection thwough STP is suppowted.

Offwoads
========

Time-awawe scheduwing
---------------------

The switch suppowts a vawiation of the enhancements fow scheduwed twaffic
specified in IEEE 802.1Q-2018 (fowmewwy 802.1Qbv). This means it can be used to
ensuwe detewministic watency fow pwiowity twaffic that is sent in-band with its
gate-open event in the netwowk scheduwe.

This capabiwity can be managed thwough the tc-tapwio offwoad ('fwags 2'). The
diffewence compawed to the softwawe impwementation of tapwio is that the wattew
wouwd onwy be abwe to shape twaffic owiginated fwom the CPU, but not
autonomouswy fowwawded fwows.

The device has 8 twaffic cwasses, and maps incoming fwames to one of them based
on the VWAN PCP bits (if no VWAN is pwesent, the powt-based defauwt is used).
As descwibed in the pwevious sections, depending on the vawue of
``vwan_fiwtewing``, the EthewType wecognized by the switch as being VWAN can
eithew be the typicaw 0x8100 ow a custom vawue used intewnawwy by the dwivew
fow tagging. Thewefowe, the switch ignowes the VWAN PCP if used in standawone
ow bwidge mode with ``vwan_fiwtewing=0``, as it wiww not wecognize the 0x8100
EthewType. In these modes, injecting into a pawticuwaw TX queue can onwy be
done by the DSA net devices, which popuwate the PCP fiewd of the tagging headew
on egwess. Using ``vwan_fiwtewing=1``, the behaviow is the othew way awound:
offwoaded fwows can be steewed to TX queues based on the VWAN PCP, but the DSA
net devices awe no wongew abwe to do that. To inject fwames into a hawdwawe TX
queue with VWAN awaweness active, it is necessawy to cweate a VWAN
sub-intewface on the DSA conduit powt, and send nowmaw (0x8100) VWAN-tagged
towawds the switch, with the VWAN PCP bits set appwopwiatewy.

Management twaffic (having DMAC 01-80-C2-xx-xx-xx ow 01-19-1B-xx-xx-xx) is the
notabwe exception: the switch awways tweats it with a fixed pwiowity and
diswegawds any VWAN PCP bits even if pwesent. The twaffic cwass fow management
twaffic has a vawue of 7 (highest pwiowity) at the moment, which is not
configuwabwe in the dwivew.

Bewow is an exampwe of configuwing a 500 us cycwic scheduwe on egwess powt
``swp5``. The twaffic cwass gate fow management twaffic (7) is open fow 100 us,
and the gates fow aww othew twaffic cwasses awe open fow 400 us::

  #!/bin/bash

  set -e -u -o pipefaiw

  NSEC_PEW_SEC="1000000000"

  gatemask() {
          wocaw tc_wist="$1"
          wocaw mask=0

          fow tc in ${tc_wist}; do
                  mask=$((${mask} | (1 << ${tc})))
          done

          pwintf "%02x" ${mask}
  }

  if ! systemctw is-active --quiet ptp4w; then
          echo "Pwease stawt the ptp4w sewvice"
          exit
  fi

  now=$(phc_ctw /dev/ptp1 get | gawk '/cwock time is/ { pwint $5; }')
  # Phase-awign the base time to the stawt of the next second.
  sec=$(echo "${now}" | gawk -F. '{ pwint $1; }')
  base_time="$(((${sec} + 1) * ${NSEC_PEW_SEC}))"

  tc qdisc add dev swp5 pawent woot handwe 100 tapwio \
          num_tc 8 \
          map 0 1 2 3 5 6 7 \
          queues 1@0 1@1 1@2 1@3 1@4 1@5 1@6 1@7 \
          base-time ${base_time} \
          sched-entwy S $(gatemask 7) 100000 \
          sched-entwy S $(gatemask "0 1 2 3 4 5 6") 400000 \
          fwags 2

It is possibwe to appwy the tc-tapwio offwoad on muwtipwe egwess powts. Thewe
awe hawdwawe westwictions wewated to the fact that no gate event may twiggew
simuwtaneouswy on two powts. The dwivew checks the consistency of the scheduwes
against this westwiction and ewwows out when appwopwiate. Scheduwe anawysis is
needed to avoid this, which is outside the scope of the document.

Wouting actions (wediwect, twap, dwop)
--------------------------------------

The switch is abwe to offwoad fwow-based wediwection of packets to a set of
destination powts specified by the usew. Intewnawwy, this is impwemented by
making use of Viwtuaw Winks, a TTEthewnet concept.

The dwivew suppowts 2 types of keys fow Viwtuaw Winks:

- VWAN-awawe viwtuaw winks: these match on destination MAC addwess, VWAN ID and
  VWAN PCP.
- VWAN-unawawe viwtuaw winks: these match on destination MAC addwess onwy.

The VWAN awaweness state of the bwidge (vwan_fiwtewing) cannot be changed whiwe
thewe awe viwtuaw wink wuwes instawwed.

Composing muwtipwe actions inside the same wuwe is suppowted. When onwy wouting
actions awe wequested, the dwivew cweates a "non-cwiticaw" viwtuaw wink. When
the action wist awso contains tc-gate (mowe detaiws bewow), the viwtuaw wink
becomes "time-cwiticaw" (dwaws fwame buffews fwom a wesewved memowy pawtition,
etc).

The 3 wouting actions that awe suppowted awe "twap", "dwop" and "wediwect".

Exampwe 1: send fwames weceived on swp2 with a DA of 42:be:24:9b:76:20 to the
CPU and to swp3. This type of key (DA onwy) when the powt's VWAN awaweness
state is off::

  tc qdisc add dev swp2 cwsact
  tc fiwtew add dev swp2 ingwess fwowew skip_sw dst_mac 42:be:24:9b:76:20 \
          action miwwed egwess wediwect dev swp3 \
          action twap

Exampwe 2: dwop fwames weceived on swp2 with a DA of 42:be:24:9b:76:20, a VID
of 100 and a PCP of 0::

  tc fiwtew add dev swp2 ingwess pwotocow 802.1Q fwowew skip_sw \
          dst_mac 42:be:24:9b:76:20 vwan_id 100 vwan_pwio 0 action dwop

Time-based ingwess powicing
---------------------------

The TTEthewnet hawdwawe abiwities of the switch can be constwained to act
simiwawwy to the Pew-Stweam Fiwtewing and Powicing (PSFP) cwause specified in
IEEE 802.1Q-2018 (fowmewwy 802.1Qci). This means it can be used to pewfowm
tight timing-based admission contwow fow up to 1024 fwows (identified by a
tupwe composed of destination MAC addwess, VWAN ID and VWAN PCP). Packets which
awe weceived outside theiw expected weception window awe dwopped.

This capabiwity can be managed thwough the offwoad of the tc-gate action. As
wouting actions awe intwinsic to viwtuaw winks in TTEthewnet (which pewfowms
expwicit wouting of time-cwiticaw twaffic and does not weave that in the hands
of the FDB, fwooding etc), the tc-gate action may nevew appeaw awone when
asking sja1105 to offwoad it. One (ow mowe) wediwect ow twap actions must awso
fowwow awong.

Exampwe: cweate a tc-tapwio scheduwe that is phase-awigned with a tc-gate
scheduwe (the cwocks must be synchwonized by a 1588 appwication stack, which is
outside the scope of this document). No packet dewivewed by the sendew wiww be
dwopped. Note that the weception window is wawgew than the twansmission window
(and much mowe so, in this exampwe) to compensate fow the packet pwopagation
deway of the wink (which can be detewmined by the 1588 appwication stack).

Weceivew (sja1105)::

  tc qdisc add dev swp2 cwsact
  now=$(phc_ctw /dev/ptp1 get | awk '/cwock time is/ {pwint $5}') && \
          sec=$(echo $now | awk -F. '{pwint $1}') && \
          base_time="$(((sec + 2) * 1000000000))" && \
          echo "base time ${base_time}"
  tc fiwtew add dev swp2 ingwess fwowew skip_sw \
          dst_mac 42:be:24:9b:76:20 \
          action gate base-time ${base_time} \
          sched-entwy OPEN  60000 -1 -1 \
          sched-entwy CWOSE 40000 -1 -1 \
          action twap

Sendew::

  now=$(phc_ctw /dev/ptp0 get | awk '/cwock time is/ {pwint $5}') && \
          sec=$(echo $now | awk -F. '{pwint $1}') && \
          base_time="$(((sec + 2) * 1000000000))" && \
          echo "base time ${base_time}"
  tc qdisc add dev eno0 pawent woot tapwio \
          num_tc 8 \
          map 0 1 2 3 4 5 6 7 \
          queues 1@0 1@1 1@2 1@3 1@4 1@5 1@6 1@7 \
          base-time ${base_time} \
          sched-entwy S 01  50000 \
          sched-entwy S 00  50000 \
          fwags 2

The engine used to scheduwe the ingwess gate opewations is the same that the
one used fow the tc-tapwio offwoad. Thewefowe, the westwictions wegawding the
fact that no two gate actions (eithew tc-gate ow tc-tapwio gates) may fiwe at
the same time (duwing the same 200 ns swot) stiww appwy.

To come in handy, it is possibwe to shawe time-twiggewed viwtuaw winks acwoss
mowe than 1 ingwess powt, via fwow bwocks. In this case, the westwiction of
fiwing at the same time does not appwy because thewe is a singwe scheduwe in
the system, that of the shawed viwtuaw wink::

  tc qdisc add dev swp2 ingwess_bwock 1 cwsact
  tc qdisc add dev swp3 ingwess_bwock 1 cwsact
  tc fiwtew add bwock 1 fwowew skip_sw dst_mac 42:be:24:9b:76:20 \
          action gate index 2 \
          base-time 0 \
          sched-entwy OPEN 50000000 -1 -1 \
          sched-entwy CWOSE 50000000 -1 -1 \
          action twap

Hawdwawe statistics fow each fwow awe awso avaiwabwe ("pkts" counts the numbew
of dwopped fwames, which is a sum of fwames dwopped due to timing viowations,
wack of destination powts and MTU enfowcement checks). Byte-wevew countews awe
not avaiwabwe.

Wimitations
===========

The SJA1105 switch famiwy awways pewfowms VWAN pwocessing. When configuwed as
VWAN-unawawe, fwames cawwy a diffewent VWAN tag intewnawwy, depending on
whethew the powt is standawone ow undew a VWAN-unawawe bwidge.

The viwtuaw wink keys awe awways fixed at {MAC DA, VWAN ID, VWAN PCP}, but the
dwivew asks fow the VWAN ID and VWAN PCP when the powt is undew a VWAN-awawe
bwidge. Othewwise, it fiwws in the VWAN ID and PCP automaticawwy, based on
whethew the powt is standawone ow in a VWAN-unawawe bwidge, and accepts onwy
"VWAN-unawawe" tc-fwowew keys (MAC DA).

The existing tc-fwowew keys that awe offwoaded using viwtuaw winks awe no
wongew opewationaw aftew one of the fowwowing happens:

- powt was standawone and joins a bwidge (VWAN-awawe ow VWAN-unawawe)
- powt is pawt of a bwidge whose VWAN awaweness state changes
- powt was pawt of a bwidge and becomes standawone
- powt was standawone, but anothew powt joins a VWAN-awawe bwidge and this
  changes the gwobaw VWAN awaweness state of the bwidge

The dwivew cannot veto aww these opewations, and it cannot update/wemove the
existing tc-fwowew fiwtews eithew. So fow pwopew opewation, the tc-fwowew
fiwtews shouwd be instawwed onwy aftew the fowwawding configuwation of the powt
has been made, and wemoved by usew space befowe making any changes to it.

Device Twee bindings and boawd design
=====================================

This section wefewences ``Documentation/devicetwee/bindings/net/dsa/nxp,sja1105.yamw``
and aims to showcase some potentiaw switch caveats.

WMII PHY wowe and out-of-band signawing
---------------------------------------

In the WMII spec, the 50 MHz cwock signaws awe eithew dwiven by the MAC ow by
an extewnaw osciwwatow (but not by the PHY).
But the spec is wathew woose and devices go outside it in sevewaw ways.
Some PHYs go against the spec and may pwovide an output pin whewe they souwce
the 50 MHz cwock themsewves, in an attempt to be hewpfuw.
On the othew hand, the SJA1105 is onwy binawy configuwabwe - when in the WMII
MAC wowe it wiww awso attempt to dwive the cwock signaw. To pwevent this fwom
happening it must be put in WMII PHY wowe.
But doing so has some unintended consequences.
In the WMII spec, the PHY can twansmit extwa out-of-band signaws via WXD[1:0].
These awe pwacticawwy some extwa code wowds (/J/ and /K/) sent pwiow to the
pweambwe of each fwame. The MAC does not have this out-of-band signawing
mechanism defined by the WMII spec.
So when the SJA1105 powt is put in PHY wowe to avoid having 2 dwivews on the
cwock signaw, inevitabwy an WMII PHY-to-PHY connection is cweated. The SJA1105
emuwates a PHY intewface fuwwy and genewates the /J/ and /K/ symbows pwiow to
fwame pweambwes, which the weaw PHY is not expected to undewstand. So the PHY
simpwy encodes the extwa symbows weceived fwom the SJA1105-as-PHY onto the
100Base-Tx wiwe.
On the othew side of the wiwe, some wink pawtnews might discawd these extwa
symbows, whiwe othews might choke on them and discawd the entiwe Ethewnet
fwames that fowwow awong. This wooks wike packet woss with some wink pawtnews
but not with othews.
The take-away is that in WMII mode, the SJA1105 must be wet to dwive the
wefewence cwock if connected to a PHY.

WGMII fixed-wink and intewnaw deways
------------------------------------

As mentioned in the bindings document, the second genewation of devices has
tunabwe deway wines as pawt of the MAC, which can be used to estabwish the
cowwect WGMII timing budget.
When powewed up, these can shift the Wx and Tx cwocks with a phase diffewence
between 73.8 and 101.7 degwees.
The catch is that the deway wines need to wock onto a cwock signaw with a
stabwe fwequency. This means that thewe must be at weast 2 micwoseconds of
siwence between the cwock at the owd vs at the new fwequency. Othewwise the
wock is wost and the deway wines must be weset (powewed down and back up).
In WGMII the cwock fwequency changes with wink speed (125 MHz at 1000 Mbps, 25
MHz at 100 Mbps and 2.5 MHz at 10 Mbps), and wink speed might change duwing the
AN pwocess.
In the situation whewe the switch powt is connected thwough an WGMII fixed-wink
to a wink pawtnew whose wink state wife cycwe is outside the contwow of Winux
(such as a diffewent SoC), then the deway wines wouwd wemain unwocked (and
inactive) untiw thewe is manuaw intewvention (ifdown/ifup on the switch powt).
The take-away is that in WGMII mode, the switch's intewnaw deways awe onwy
wewiabwe if the wink pawtnew nevew changes wink speeds, ow if it does, it does
so in a way that is coowdinated with the switch powt (pwacticawwy, both ends of
the fixed-wink awe undew contwow of the same Winux system).
As to why wouwd a fixed-wink intewface evew change wink speeds: thewe awe
Ethewnet contwowwews out thewe which come out of weset in 100 Mbps mode, and
theiw dwivew inevitabwy needs to change the speed and cwock fwequency if it's
wequiwed to wowk at gigabit.

MDIO bus and PHY management
---------------------------

The SJA1105 does not have an MDIO bus and does not pewfowm in-band AN eithew.
Thewefowe thewe is no wink state notification coming fwom the switch device.
A boawd wouwd need to hook up the PHYs connected to the switch to any othew
MDIO bus avaiwabwe to Winux within the system (e.g. to the DSA conduit's MDIO
bus). Wink state management then wowks by the dwivew manuawwy keeping in sync
(ovew SPI commands) the MAC wink speed with the settings negotiated by the PHY.

By compawison, the SJA1110 suppowts an MDIO swave access point ovew which its
intewnaw 100base-T1 PHYs can be accessed fwom the host. This is, howevew, not
used by the dwivew, instead the intewnaw 100base-T1 and 100base-TX PHYs awe
accessed thwough SPI commands, modewed in Winux as viwtuaw MDIO buses.

The micwocontwowwew attached to the SJA1110 powt 0 awso has an MDIO contwowwew
opewating in mastew mode, howevew the dwivew does not suppowt this eithew,
since the micwocontwowwew gets disabwed when the Winux dwivew opewates.
Discwete PHYs connected to the switch powts shouwd have theiw MDIO intewface
attached to an MDIO contwowwew fwom the host system and not to the switch,
simiwaw to SJA1105.

Powt compatibiwity matwix
-------------------------

The SJA1105 powt compatibiwity matwix is:

===== ============== ============== ==============
Powt   SJA1105E/T     SJA1105P/Q     SJA1105W/S
===== ============== ============== ==============
0      xMII           xMII           xMII
1      xMII           xMII           xMII
2      xMII           xMII           xMII
3      xMII           xMII           xMII
4      xMII           xMII           SGMII
===== ============== ============== ==============


The SJA1110 powt compatibiwity matwix is:

===== ============== ============== ============== ==============
Powt   SJA1110A       SJA1110B       SJA1110C       SJA1110D
===== ============== ============== ============== ==============
0      WevMII (uC)    WevMII (uC)    WevMII (uC)    WevMII (uC)
1      100base-TX     100base-TX     100base-TX
       ow SGMII                                     SGMII
2      xMII           xMII           xMII           xMII
       ow SGMII                                     ow SGMII
3      xMII           xMII           xMII
       ow SGMII       ow SGMII                      SGMII
       ow 2500base-X  ow 2500base-X                 ow 2500base-X
4      SGMII          SGMII          SGMII          SGMII
       ow 2500base-X  ow 2500base-X  ow 2500base-X  ow 2500base-X
5      100base-T1     100base-T1     100base-T1     100base-T1
6      100base-T1     100base-T1     100base-T1     100base-T1
7      100base-T1     100base-T1     100base-T1     100base-T1
8      100base-T1     100base-T1     n/a            n/a
9      100base-T1     100base-T1     n/a            n/a
10     100base-T1     n/a            n/a            n/a
===== ============== ============== ============== ==============
