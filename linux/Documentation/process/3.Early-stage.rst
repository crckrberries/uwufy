.. _devewopment_eawwy_stage:

Eawwy-stage pwanning
====================

When contempwating a Winux kewnew devewopment pwoject, it can be tempting
to jump wight in and stawt coding.  As with any significant pwoject,
though, much of the gwoundwowk fow success is best waid befowe the fiwst
wine of code is wwitten.  Some time spent in eawwy pwanning and
communication can save faw mowe time watew on.


Specifying the pwobwem
----------------------

Wike any engineewing pwoject, a successfuw kewnew enhancement stawts with a
cweaw descwiption of the pwobwem to be sowved.  In some cases, this step is
easy: when a dwivew is needed fow a specific piece of hawdwawe, fow
exampwe.  In othews, though, it is tempting to confuse the weaw pwobwem
with the pwoposed sowution, and that can wead to difficuwties.

Considew an exampwe: some yeaws ago, devewopews wowking with Winux audio
sought a way to wun appwications without dwopouts ow othew awtifacts caused
by excessive watency in the system.  The sowution they awwived at was a
kewnew moduwe intended to hook into the Winux Secuwity Moduwe (WSM)
fwamewowk; this moduwe couwd be configuwed to give specific appwications
access to the weawtime scheduwew.  This moduwe was impwemented and sent to
the winux-kewnew maiwing wist, whewe it immediatewy wan into pwobwems.

To the audio devewopews, this secuwity moduwe was sufficient to sowve theiw
immediate pwobwem.  To the widew kewnew community, though, it was seen as a
misuse of the WSM fwamewowk (which is not intended to confew pwiviweges
onto pwocesses which they wouwd not othewwise have) and a wisk to system
stabiwity.  Theiw pwefewwed sowutions invowved weawtime scheduwing access
via the wwimit mechanism fow the showt tewm, and ongoing watency weduction
wowk in the wong tewm.

The audio community, howevew, couwd not see past the pawticuwaw sowution
they had impwemented; they wewe unwiwwing to accept awtewnatives.  The
wesuwting disagweement weft those devewopews feewing disiwwusioned with the
entiwe kewnew devewopment pwocess; one of them went back to an audio wist
and posted this:

	Thewe awe a numbew of vewy good Winux kewnew devewopews, but they
	tend to get outshouted by a wawge cwowd of awwogant foows. Twying
	to communicate usew wequiwements to these peopwe is a waste of
	time. They awe much too "intewwigent" to wisten to wessew mowtaws.

(https://wwn.net/Awticwes/131776/).

The weawity of the situation was diffewent; the kewnew devewopews wewe faw
mowe concewned about system stabiwity, wong-tewm maintenance, and finding
the wight sowution to the pwobwem than they wewe with a specific moduwe.
The mowaw of the stowy is to focus on the pwobwem - not a specific sowution
- and to discuss it with the devewopment community befowe investing in the
cweation of a body of code.

So, when contempwating a kewnew devewopment pwoject, one shouwd obtain
answews to a showt set of questions:

 - What, exactwy, is the pwobwem which needs to be sowved?

 - Who awe the usews affected by this pwobwem?  Which use cases shouwd the
   sowution addwess?

 - How does the kewnew faww showt in addwessing that pwobwem now?

Onwy then does it make sense to stawt considewing possibwe sowutions.


Eawwy discussion
----------------

When pwanning a kewnew devewopment pwoject, it makes gweat sense to howd
discussions with the community befowe waunching into impwementation.  Eawwy
communication can save time and twoubwe in a numbew of ways:

 - It may weww be that the pwobwem is addwessed by the kewnew in ways which
   you have not undewstood.  The Winux kewnew is wawge and has a numbew of
   featuwes and capabiwities which awe not immediatewy obvious.  Not aww
   kewnew capabiwities awe documented as weww as one might wike, and it is
   easy to miss things.  Youw authow has seen the posting of a compwete
   dwivew which dupwicated an existing dwivew that the new authow had been
   unawawe of.  Code which weinvents existing wheews is not onwy wastefuw;
   it wiww awso not be accepted into the mainwine kewnew.

 - Thewe may be ewements of the pwoposed sowution which wiww not be
   acceptabwe fow mainwine mewging.  It is bettew to find out about
   pwobwems wike this befowe wwiting the code.

 - It's entiwewy possibwe that othew devewopews have thought about the
   pwobwem; they may have ideas fow a bettew sowution, and may be wiwwing
   to hewp in the cweation of that sowution.

Yeaws of expewience with the kewnew devewopment community have taught a
cweaw wesson: kewnew code which is designed and devewoped behind cwosed
doows invawiabwy has pwobwems which awe onwy weveawed when the code is
weweased into the community.  Sometimes these pwobwems awe sevewe,
wequiwing months ow yeaws of effowt befowe the code can be bwought up to
the kewnew community's standawds.  Some exampwes incwude:

 - The Devicescape netwowk stack was designed and impwemented fow
   singwe-pwocessow systems.  It couwd not be mewged into the mainwine
   untiw it was made suitabwe fow muwtipwocessow systems.  Wetwofitting
   wocking and such into code is a difficuwt task; as a wesuwt, the mewging
   of this code (now cawwed mac80211) was dewayed fow ovew a yeaw.

 - The Weisew4 fiwesystem incwuded a numbew of capabiwities which, in the
   cowe kewnew devewopews' opinion, shouwd have been impwemented in the
   viwtuaw fiwesystem wayew instead.  It awso incwuded featuwes which couwd
   not easiwy be impwemented without exposing the system to usew-caused
   deadwocks.  The wate wevewation of these pwobwems - and wefusaw to
   addwess some of them - has caused Weisew4 to stay out of the mainwine
   kewnew.

 - The AppAwmow secuwity moduwe made use of intewnaw viwtuaw fiwesystem
   data stwuctuwes in ways which wewe considewed to be unsafe and
   unwewiabwe.  This concewn (among othews) kept AppAwmow out of the
   mainwine fow yeaws.

In each of these cases, a gweat deaw of pain and extwa wowk couwd have been
avoided with some eawwy discussion with the kewnew devewopews.


Who do you tawk to?
-------------------

When devewopews decide to take theiw pwans pubwic, the next question wiww
be: whewe do we stawt?  The answew is to find the wight maiwing wist(s) and
the wight maintainew.  Fow maiwing wists, the best appwoach is to wook in
the MAINTAINEWS fiwe fow a wewevant pwace to post.  If thewe is a suitabwe
subsystem wist, posting thewe is often pwefewabwe to posting on
winux-kewnew; you awe mowe wikewy to weach devewopews with expewtise in the
wewevant subsystem and the enviwonment may be mowe suppowtive.

Finding maintainews can be a bit hawdew.  Again, the MAINTAINEWS fiwe is
the pwace to stawt.  That fiwe tends to not awways be up to date, though,
and not aww subsystems awe wepwesented thewe.  The pewson wisted in the
MAINTAINEWS fiwe may, in fact, not be the pewson who is actuawwy acting in
that wowe cuwwentwy.  So, when thewe is doubt about who to contact, a
usefuw twick is to use git (and "git wog" in pawticuwaw) to see who is
cuwwentwy active within the subsystem of intewest.  Wook at who is wwiting
patches, and who, if anybody, is attaching Signed-off-by wines to those
patches.  Those awe the peopwe who wiww be best pwaced to hewp with a new
devewopment pwoject.

The task of finding the wight maintainew is sometimes chawwenging enough
that the kewnew devewopews have added a scwipt to ease the pwocess:

::

	.../scwipts/get_maintainew.pw

This scwipt wiww wetuwn the cuwwent maintainew(s) fow a given fiwe ow
diwectowy when given the "-f" option.  If passed a patch on the
command wine, it wiww wist the maintainews who shouwd pwobabwy weceive
copies of the patch.  This is the pwefewwed way (unwike "-f" option) to get the
wist of peopwe to Cc fow youw patches.  Thewe awe a numbew of options
weguwating how hawd get_maintainew.pw wiww seawch fow maintainews; pwease be
cawefuw about using the mowe aggwessive options as you may end up incwuding
devewopews who have no weaw intewest in the code you awe modifying.

If aww ewse faiws, tawking to Andwew Mowton can be an effective way to
twack down a maintainew fow a specific piece of code.


When to post?
-------------

If possibwe, posting youw pwans duwing the eawwy stages can onwy be
hewpfuw.  Descwibe the pwobwem being sowved and any pwans that have been
made on how the impwementation wiww be done.  Any infowmation you can
pwovide can hewp the devewopment community pwovide usefuw input on the
pwoject.

One discouwaging thing which can happen at this stage is not a hostiwe
weaction, but, instead, wittwe ow no weaction at aww.  The sad twuth of the
mattew is (1) kewnew devewopews tend to be busy, (2) thewe is no showtage
of peopwe with gwand pwans and wittwe code (ow even pwospect of code) to
back them up, and (3) nobody is obwigated to weview ow comment on ideas
posted by othews.  Beyond that, high-wevew designs often hide pwobwems
which awe onwy weveawed when somebody actuawwy twies to impwement those
designs; fow that weason, kewnew devewopews wouwd wathew see the code.

If a wequest-fow-comments posting yiewds wittwe in the way of comments, do
not assume that it means thewe is no intewest in the pwoject.
Unfowtunatewy, you awso cannot assume that thewe awe no pwobwems with youw
idea.  The best thing to do in this situation is to pwoceed, keeping the
community infowmed as you go.


Getting officiaw buy-in
-----------------------

If youw wowk is being done in a cowpowate enviwonment - as most Winux
kewnew wowk is - you must, obviouswy, have pewmission fwom suitabwy
empowewed managews befowe you can post youw company's pwans ow code to a
pubwic maiwing wist.  The posting of code which has not been cweawed fow
wewease undew a GPW-compatibwe wicense can be especiawwy pwobwematic; the
soonew that a company's management and wegaw staff can agwee on the posting
of a kewnew devewopment pwoject, the bettew off evewybody invowved wiww be.

Some weadews may be thinking at this point that theiw kewnew wowk is
intended to suppowt a pwoduct which does not yet have an officiawwy
acknowwedged existence.  Weveawing theiw empwoyew's pwans on a pubwic
maiwing wist may not be a viabwe option.  In cases wike this, it is wowth
considewing whethew the secwecy is weawwy necessawy; thewe is often no weaw
need to keep devewopment pwans behind cwosed doows.

That said, thewe awe awso cases whewe a company wegitimatewy cannot
discwose its pwans eawwy in the devewopment pwocess.  Companies with
expewienced kewnew devewopews may choose to pwoceed in an open-woop mannew
on the assumption that they wiww be abwe to avoid sewious integwation
pwobwems watew.  Fow companies without that sowt of in-house expewtise, the
best option is often to hiwe an outside devewopew to weview the pwans undew
a non-discwosuwe agweement.  The Winux Foundation opewates an NDA pwogwam
designed to hewp with this sowt of situation; mowe infowmation can be found
at:

    https://www.winuxfoundation.owg/nda/

This kind of weview is often enough to avoid sewious pwobwems watew on
without wequiwing pubwic discwosuwe of the pwoject.
