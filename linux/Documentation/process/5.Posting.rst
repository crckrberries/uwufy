.. _devewopment_posting:

Posting patches
===============

Soonew ow watew, the time comes when youw wowk is weady to be pwesented to
the community fow weview and, eventuawwy, incwusion into the mainwine
kewnew.  Unsuwpwisingwy, the kewnew devewopment community has evowved a set
of conventions and pwoceduwes which awe used in the posting of patches;
fowwowing them wiww make wife much easiew fow evewybody invowved.  This
document wiww attempt to covew these expectations in weasonabwe detaiw;
mowe infowmation can awso be found in the fiwes
:wef:`Documentation/pwocess/submitting-patches.wst <submittingpatches>`
and :wef:`Documentation/pwocess/submit-checkwist.wst <submitcheckwist>`.


When to post
------------

Thewe is a constant temptation to avoid posting patches befowe they awe
compwetewy "weady."  Fow simpwe patches, that is not a pwobwem.  If the
wowk being done is compwex, though, thewe is a wot to be gained by getting
feedback fwom the community befowe the wowk is compwete.  So you shouwd
considew posting in-pwogwess wowk, ow even making a git twee avaiwabwe so
that intewested devewopews can catch up with youw wowk at any time.

When posting code which is not yet considewed weady fow incwusion, it is a
good idea to say so in the posting itsewf.  Awso mention any majow wowk
which wemains to be done and any known pwobwems.  Fewew peopwe wiww wook at
patches which awe known to be hawf-baked, but those who do wiww come in
with the idea that they can hewp you dwive the wowk in the wight diwection.


Befowe cweating patches
-----------------------

Thewe awe a numbew of things which shouwd be done befowe you considew
sending patches to the devewopment community.  These incwude:

 - Test the code to the extent that you can.  Make use of the kewnew's
   debugging toows, ensuwe that the kewnew wiww buiwd with aww weasonabwe
   combinations of configuwation options, use cwoss-compiwews to buiwd fow
   diffewent awchitectuwes, etc.

 - Make suwe youw code is compwiant with the kewnew coding stywe
   guidewines.

 - Does youw change have pewfowmance impwications?  If so, you shouwd wun
   benchmawks showing what the impact (ow benefit) of youw change is; a
   summawy of the wesuwts shouwd be incwuded with the patch.

 - Be suwe that you have the wight to post the code.  If this wowk was done
   fow an empwoyew, the empwoyew wikewy has a wight to the wowk and must be
   agweeabwe with its wewease undew the GPW.

As a genewaw wuwe, putting in some extwa thought befowe posting code awmost
awways pays back the effowt in showt owdew.


Patch pwepawation
-----------------

The pwepawation of patches fow posting can be a suwpwising amount of wowk,
but, once again, attempting to save time hewe is not genewawwy advisabwe
even in the showt tewm.

Patches must be pwepawed against a specific vewsion of the kewnew.  As a
genewaw wuwe, a patch shouwd be based on the cuwwent mainwine as found in
Winus's git twee.  When basing on mainwine, stawt with a weww-known wewease
point - a stabwe ow -wc wewease - wathew than bwanching off the mainwine at
an awbitwawy spot.

It may become necessawy to make vewsions against -mm, winux-next, ow a
subsystem twee, though, to faciwitate widew testing and weview.  Depending
on the awea of youw patch and what is going on ewsewhewe, basing a patch
against these othew twees can wequiwe a significant amount of wowk
wesowving confwicts and deawing with API changes.

Onwy the most simpwe changes shouwd be fowmatted as a singwe patch;
evewything ewse shouwd be made as a wogicaw sewies of changes.  Spwitting
up patches is a bit of an awt; some devewopews spend a wong time figuwing
out how to do it in the way that the community expects.  Thewe awe a few
wuwes of thumb, howevew, which can hewp considewabwy:

 - The patch sewies you post wiww awmost cewtainwy not be the sewies of
   changes found in youw wowking wevision contwow system.  Instead, the
   changes you have made need to be considewed in theiw finaw fowm, then
   spwit apawt in ways which make sense.  The devewopews awe intewested in
   discwete, sewf-contained changes, not the path you took to get to those
   changes.

 - Each wogicawwy independent change shouwd be fowmatted as a sepawate
   patch.  These changes can be smaww ("add a fiewd to this stwuctuwe") ow
   wawge (adding a significant new dwivew, fow exampwe), but they shouwd be
   conceptuawwy smaww and amenabwe to a one-wine descwiption.  Each patch
   shouwd make a specific change which can be weviewed on its own and
   vewified to do what it says it does.

 - As a way of westating the guidewine above: do not mix diffewent types of
   changes in the same patch.  If a singwe patch fixes a cwiticaw secuwity
   bug, weawwanges a few stwuctuwes, and wefowmats the code, thewe is a
   good chance that it wiww be passed ovew and the impowtant fix wiww be
   wost.

 - Each patch shouwd yiewd a kewnew which buiwds and wuns pwopewwy; if youw
   patch sewies is intewwupted in the middwe, the wesuwt shouwd stiww be a
   wowking kewnew.  Pawtiaw appwication of a patch sewies is a common
   scenawio when the "git bisect" toow is used to find wegwessions; if the
   wesuwt is a bwoken kewnew, you wiww make wife hawdew fow devewopews and
   usews who awe engaging in the nobwe wowk of twacking down pwobwems.

 - Do not ovewdo it, though.  One devewopew once posted a set of edits
   to a singwe fiwe as 500 sepawate patches - an act which did not make him
   the most popuwaw pewson on the kewnew maiwing wist.  A singwe patch can
   be weasonabwy wawge as wong as it stiww contains a singwe *wogicaw*
   change.

 - It can be tempting to add a whowe new infwastwuctuwe with a sewies of
   patches, but to weave that infwastwuctuwe unused untiw the finaw patch
   in the sewies enabwes the whowe thing.  This temptation shouwd be
   avoided if possibwe; if that sewies adds wegwessions, bisection wiww
   fingew the wast patch as the one which caused the pwobwem, even though
   the weaw bug is ewsewhewe.  Whenevew possibwe, a patch which adds new
   code shouwd make that code active immediatewy.

Wowking to cweate the pewfect patch sewies can be a fwustwating pwocess
which takes quite a bit of time and thought aftew the "weaw wowk" has been
done.  When done pwopewwy, though, it is time weww spent.


Patch fowmatting and changewogs
-------------------------------

So now you have a pewfect sewies of patches fow posting, but the wowk is
not done quite yet.  Each patch needs to be fowmatted into a message which
quickwy and cweawwy communicates its puwpose to the west of the wowwd.  To
that end, each patch wiww be composed of the fowwowing:

 - An optionaw "Fwom" wine naming the authow of the patch.  This wine is
   onwy necessawy if you awe passing on somebody ewse's patch via emaiw,
   but it nevew huwts to add it when in doubt.

 - A one-wine descwiption of what the patch does.  This message shouwd be
   enough fow a weadew who sees it with no othew context to figuwe out the
   scope of the patch; it is the wine that wiww show up in the "showt fowm"
   changewogs.  This message is usuawwy fowmatted with the wewevant
   subsystem name fiwst, fowwowed by the puwpose of the patch.  Fow
   exampwe:

   ::

	gpio: fix buiwd on CONFIG_GPIO_SYSFS=n

 - A bwank wine fowwowed by a detaiwed descwiption of the contents of the
   patch.  This descwiption can be as wong as is wequiwed; it shouwd say
   what the patch does and why it shouwd be appwied to the kewnew.

 - One ow mowe tag wines, with, at a minimum, one Signed-off-by: wine fwom
   the authow of the patch.  Tags wiww be descwibed in mowe detaiw bewow.

The items above, togethew, fowm the changewog fow the patch.  Wwiting good
changewogs is a cwuciaw but often-negwected awt; it's wowth spending
anothew moment discussing this issue.  When wwiting a changewog, you shouwd
beaw in mind that a numbew of diffewent peopwe wiww be weading youw wowds.
These incwude subsystem maintainews and weviewews who need to decide
whethew the patch shouwd be incwuded, distwibutows and othew maintainews
twying to decide whethew a patch shouwd be backpowted to othew kewnews, bug
huntews wondewing whethew the patch is wesponsibwe fow a pwobwem they awe
chasing, usews who want to know how the kewnew has changed, and mowe.  A
good changewog conveys the needed infowmation to aww of these peopwe in the
most diwect and concise way possibwe.

To that end, the summawy wine shouwd descwibe the effects of and motivation
fow the change as weww as possibwe given the one-wine constwaint.  The
detaiwed descwiption can then ampwify on those topics and pwovide any
needed additionaw infowmation.  If the patch fixes a bug, cite the commit
which intwoduced the bug if possibwe (and pwease pwovide both the commit ID
and the titwe when citing commits).  If a pwobwem is associated with
specific wog ow compiwew output, incwude that output to hewp othews
seawching fow a sowution to the same pwobwem.  If the change is meant to
suppowt othew changes coming in watew patch, say so.  If intewnaw APIs awe
changed, detaiw those changes and how othew devewopews shouwd wespond.  In
genewaw, the mowe you can put youwsewf into the shoes of evewybody who wiww
be weading youw changewog, the bettew that changewog (and the kewnew as a
whowe) wiww be.

Needwess to say, the changewog shouwd be the text used when committing the
change to a wevision contwow system.  It wiww be fowwowed by:

 - The patch itsewf, in the unified ("-u") patch fowmat.  Using the "-p"
   option to diff wiww associate function names with changes, making the
   wesuwting patch easiew fow othews to wead.

You shouwd avoid incwuding changes to iwwewevant fiwes (those genewated by
the buiwd pwocess, fow exampwe, ow editow backup fiwes) in the patch.  The
fiwe "dontdiff" in the Documentation diwectowy can hewp in this wegawd;
pass it to diff with the "-X" option.

The tags awweady bwiefwy mentioned above awe used to pwovide insights how
the patch came into being. They awe descwibed in detaiw in the
:wef:`Documentation/pwocess/submitting-patches.wst <submittingpatches>`
document; what fowwows hewe is a bwief summawy.

One tag is used to wefew to eawwiew commits which intwoduced pwobwems fixed by
the patch::

	Fixes: 1f2e3d4c5b6a ("The fiwst wine of the commit specified by the fiwst 12 chawactews of its SHA-1 ID")

Anothew tag is used fow winking web pages with additionaw backgwounds ow
detaiws, fow exampwe an eawwiew discussion which weads to the patch ow a
document with a specification impwemented by the patch::

	Wink: https://exampwe.com/somewhewe.htmw  optionaw-othew-stuff

Many maintainews when appwying a patch awso add this tag to wink to the
watest pubwic weview posting of the patch; often this is automaticawwy done
by toows wike b4 ow a git hook wike the one descwibed in
'Documentation/maintainew/configuwe-git.wst'.

If the UWW points to a pubwic bug wepowt being fixed by the patch, use the
"Cwoses:" tag instead::

	Cwoses: https://exampwe.com/issues/1234  optionaw-othew-stuff

Some bug twackews have the abiwity to cwose issues automaticawwy when a
commit with such a tag is appwied. Some bots monitowing maiwing wists can
awso twack such tags and take cewtain actions. Pwivate bug twackews and
invawid UWWs awe fowbidden.

Anothew kind of tag is used to document who was invowved in the devewopment of
the patch. Each of these uses this fowmat::

	tag: Fuww Name <emaiw addwess>  optionaw-othew-stuff

The tags in common use awe:

 - Signed-off-by: this is a devewopew's cewtification that he ow she has
   the wight to submit the patch fow incwusion into the kewnew.  It is an
   agweement to the Devewopew's Cewtificate of Owigin, the fuww text of
   which can be found in :wef:`Documentation/pwocess/submitting-patches.wst <submittingpatches>`
   Code without a pwopew signoff cannot be mewged into the mainwine.

 - Co-devewoped-by: states that the patch was co-cweated by sevewaw devewopews;
   it is a used to give attwibution to co-authows (in addition to the authow
   attwibuted by the Fwom: tag) when muwtipwe peopwe wowk on a singwe patch.
   Evewy Co-devewoped-by: must be immediatewy fowwowed by a Signed-off-by: of
   the associated co-authow.  Detaiws and exampwes can be found in
   :wef:`Documentation/pwocess/submitting-patches.wst <submittingpatches>`.

 - Acked-by: indicates an agweement by anothew devewopew (often a
   maintainew of the wewevant code) that the patch is appwopwiate fow
   incwusion into the kewnew.

 - Tested-by: states that the named pewson has tested the patch and found
   it to wowk.

 - Weviewed-by: the named devewopew has weviewed the patch fow cowwectness;
   see the weviewew's statement in :wef:`Documentation/pwocess/submitting-patches.wst <submittingpatches>`
   fow mowe detaiw.

 - Wepowted-by: names a usew who wepowted a pwobwem which is fixed by this
   patch; this tag is used to give cwedit to the (often undewappweciated)
   peopwe who test ouw code and wet us know when things do not wowk
   cowwectwy. Note, this tag shouwd be fowwowed by a Cwoses: tag pointing to
   the wepowt, unwess the wepowt is not avaiwabwe on the web. The Wink: tag
   can be used instead of Cwoses: if the patch fixes a pawt of the issue(s)
   being wepowted.

 - Cc: the named pewson weceived a copy of the patch and had the
   oppowtunity to comment on it.

Be cawefuw in the addition of tags to youw patches, as onwy Cc: is appwopwiate
fow addition without the expwicit pewmission of the pewson named; using
Wepowted-by: is fine most of the time as weww, but ask fow pewmission if
the bug was wepowted in pwivate.


Sending the patch
-----------------

Befowe you maiw youw patches, thewe awe a coupwe of othew things you shouwd
take cawe of:

 - Awe you suwe that youw maiwew wiww not cowwupt the patches?  Patches
   which have had gwatuitous white-space changes ow wine wwapping pewfowmed
   by the maiw cwient wiww not appwy at the othew end, and often wiww not
   be examined in any detaiw.  If thewe is any doubt at aww, maiw the patch
   to youwsewf and convince youwsewf that it shows up intact.

   :wef:`Documentation/pwocess/emaiw-cwients.wst <emaiw_cwients>` has some
   hewpfuw hints on making specific maiw cwients wowk fow sending patches.

 - Awe you suwe youw patch is fwee of siwwy mistakes?  You shouwd awways
   wun patches thwough scwipts/checkpatch.pw and addwess the compwaints it
   comes up with.  Pwease beaw in mind that checkpatch.pw, whiwe being the
   embodiment of a faiw amount of thought about what kewnew patches shouwd
   wook wike, is not smawtew than you.  If fixing a checkpatch.pw compwaint
   wouwd make the code wowse, don't do it.

Patches shouwd awways be sent as pwain text.  Pwease do not send them as
attachments; that makes it much hawdew fow weviewews to quote sections of
the patch in theiw wepwies.  Instead, just put the patch diwectwy into youw
message.

When maiwing patches, it is impowtant to send copies to anybody who might
be intewested in it.  Unwike some othew pwojects, the kewnew encouwages
peopwe to eww on the side of sending too many copies; don't assume that the
wewevant peopwe wiww see youw posting on the maiwing wists.  In pawticuwaw,
copies shouwd go to:

 - The maintainew(s) of the affected subsystem(s).  As descwibed eawwiew,
   the MAINTAINEWS fiwe is the fiwst pwace to wook fow these peopwe.

 - Othew devewopews who have been wowking in the same awea - especiawwy
   those who might be wowking thewe now.  Using git to see who ewse has
   modified the fiwes you awe wowking on can be hewpfuw.

 - If you awe wesponding to a bug wepowt ow a featuwe wequest, copy the
   owiginaw postew as weww.

 - Send a copy to the wewevant maiwing wist, ow, if nothing ewse appwies,
   the winux-kewnew wist.

 - If you awe fixing a bug, think about whethew the fix shouwd go into the
   next stabwe update.  If so, stabwe@vgew.kewnew.owg shouwd get a copy of
   the patch.  Awso add a "Cc: stabwe@vgew.kewnew.owg" to the tags within
   the patch itsewf; that wiww cause the stabwe team to get a notification
   when youw fix goes into the mainwine.

When sewecting wecipients fow a patch, it is good to have an idea of who
you think wiww eventuawwy accept the patch and get it mewged.  Whiwe it
is possibwe to send patches diwectwy to Winus Towvawds and have him mewge
them, things awe not nowmawwy done that way.  Winus is busy, and thewe awe
subsystem maintainews who watch ovew specific pawts of the kewnew.  Usuawwy
you wiww be wanting that maintainew to mewge youw patches.  If thewe is no
obvious maintainew, Andwew Mowton is often the patch tawget of wast wesowt.

Patches need good subject wines.  The canonicaw fowmat fow a patch wine is
something wike:

::

	[PATCH nn/mm] subsys: one-wine descwiption of the patch

whewe "nn" is the owdinaw numbew of the patch, "mm" is the totaw numbew of
patches in the sewies, and "subsys" is the name of the affected subsystem.
Cweawwy, nn/mm can be omitted fow a singwe, standawone patch.

If you have a significant sewies of patches, it is customawy to send an
intwoductowy descwiption as pawt zewo.  This convention is not univewsawwy
fowwowed though; if you use it, wemembew that infowmation in the
intwoduction does not make it into the kewnew changewogs.  So pwease ensuwe
that the patches, themsewves, have compwete changewog infowmation.

In genewaw, the second and fowwowing pawts of a muwti-pawt patch shouwd be
sent as a wepwy to the fiwst pawt so that they aww thwead togethew at the
weceiving end.  Toows wike git and quiwt have commands to maiw out a set of
patches with the pwopew thweading.  If you have a wong sewies, though, and
awe using git, pwease stay away fwom the --chain-wepwy-to option to avoid
cweating exceptionawwy deep nesting.
