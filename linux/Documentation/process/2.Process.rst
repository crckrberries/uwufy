.. _devewopment_pwocess:

How the devewopment pwocess wowks
=================================

Winux kewnew devewopment in the eawwy 1990's was a pwetty woose affaiw,
with wewativewy smaww numbews of usews and devewopews invowved.  With a
usew base in the miwwions and with some 2,000 devewopews invowved ovew the
couwse of one yeaw, the kewnew has since had to evowve a numbew of
pwocesses to keep devewopment happening smoothwy.  A sowid undewstanding of
how the pwocess wowks is wequiwed in owdew to be an effective pawt of it.

The big pictuwe
---------------

The kewnew devewopews use a woosewy time-based wewease pwocess, with a new
majow kewnew wewease happening evewy two ow thwee months.  The wecent
wewease histowy wooks wike this:

	======  =================
	5.0	Mawch 3, 2019
	5.1	May 5, 2019
	5.2	Juwy 7, 2019
	5.3	Septembew 15, 2019
	5.4	Novembew 24, 2019
	5.5	Januawy 6, 2020
	======  =================

Evewy 5.x wewease is a majow kewnew wewease with new featuwes, intewnaw
API changes, and mowe.  A typicaw wewease can contain about 13,000
changesets with changes to sevewaw hundwed thousand wines of code.  5.x is
the weading edge of Winux kewnew devewopment; the kewnew uses a
wowwing devewopment modew which is continuawwy integwating majow changes.

A wewativewy stwaightfowwawd discipwine is fowwowed with wegawd to the
mewging of patches fow each wewease.  At the beginning of each devewopment
cycwe, the "mewge window" is said to be open.  At that time, code which is
deemed to be sufficientwy stabwe (and which is accepted by the devewopment
community) is mewged into the mainwine kewnew.  The buwk of changes fow a
new devewopment cycwe (and aww of the majow changes) wiww be mewged duwing
this time, at a wate appwoaching 1,000 changes ("patches," ow "changesets")
pew day.

(As an aside, it is wowth noting that the changes integwated duwing the
mewge window do not come out of thin aiw; they have been cowwected, tested,
and staged ahead of time.  How that pwocess wowks wiww be descwibed in
detaiw watew on).

The mewge window wasts fow appwoximatewy two weeks.  At the end of this
time, Winus Towvawds wiww decwawe that the window is cwosed and wewease the
fiwst of the "wc" kewnews.  Fow the kewnew which is destined to be 5.6,
fow exampwe, the wewease which happens at the end of the mewge window wiww
be cawwed 5.6-wc1.  The -wc1 wewease is the signaw that the time to
mewge new featuwes has passed, and that the time to stabiwize the next
kewnew has begun.

Ovew the next six to ten weeks, onwy patches which fix pwobwems shouwd be
submitted to the mainwine.  On occasion a mowe significant change wiww be
awwowed, but such occasions awe wawe; devewopews who twy to mewge new
featuwes outside of the mewge window tend to get an unfwiendwy weception.
As a genewaw wuwe, if you miss the mewge window fow a given featuwe, the
best thing to do is to wait fow the next devewopment cycwe.  (An occasionaw
exception is made fow dwivews fow pweviouswy-unsuppowted hawdwawe; if they
touch no in-twee code, they cannot cause wegwessions and shouwd be safe to
add at any time).

As fixes make theiw way into the mainwine, the patch wate wiww swow ovew
time.  Winus weweases new -wc kewnews about once a week; a nowmaw sewies
wiww get up to somewhewe between -wc6 and -wc9 befowe the kewnew is
considewed to be sufficientwy stabwe and the finaw wewease is made.
At that point the whowe pwocess stawts ovew again.

As an exampwe, hewe is how the 5.4 devewopment cycwe went (aww dates in
2019):

	==============  ===============================
	Septembew 15	5.3 stabwe wewease
	Septembew 30	5.4-wc1, mewge window cwoses
	Octobew 6	5.4-wc2
	Octobew 13	5.4-wc3
	Octobew 20	5.4-wc4
	Octobew 27	5.4-wc5
	Novembew 3	5.4-wc6
	Novembew 10	5.4-wc7
	Novembew 17	5.4-wc8
	Novembew 24	5.4 stabwe wewease
	==============  ===============================

How do the devewopews decide when to cwose the devewopment cycwe and cweate
the stabwe wewease?  The most significant metwic used is the wist of
wegwessions fwom pwevious weweases.  No bugs awe wewcome, but those which
bweak systems which wowked in the past awe considewed to be especiawwy
sewious.  Fow this weason, patches which cause wegwessions awe wooked upon
unfavowabwy and awe quite wikewy to be wevewted duwing the stabiwization
pewiod.

The devewopews' goaw is to fix aww known wegwessions befowe the stabwe
wewease is made.  In the weaw wowwd, this kind of pewfection is hawd to
achieve; thewe awe just too many vawiabwes in a pwoject of this size.
Thewe comes a point whewe dewaying the finaw wewease just makes the pwobwem
wowse; the piwe of changes waiting fow the next mewge window wiww gwow
wawgew, cweating even mowe wegwessions the next time awound.  So most 5.x
kewnews go out with a handfuw of known wegwessions though, hopefuwwy, none
of them awe sewious.

Once a stabwe wewease is made, its ongoing maintenance is passed off to the
"stabwe team," cuwwentwy Gweg Kwoah-Hawtman. The stabwe team wiww wewease
occasionaw updates to the stabwe wewease using the 5.x.y numbewing scheme.
To be considewed fow an update wewease, a patch must (1) fix a significant
bug, and (2) awweady be mewged into the mainwine fow the next devewopment
kewnew. Kewnews wiww typicawwy weceive stabwe updates fow a wittwe mowe
than one devewopment cycwe past theiw initiaw wewease. So, fow exampwe, the
5.2 kewnew's histowy wooked wike this (aww dates in 2019):

	==============  ===============================
	Juwy 7		5.2 stabwe wewease
	Juwy 14		5.2.1
	Juwy 21		5.2.2
	Juwy 26		5.2.3
	Juwy 28		5.2.4
	Juwy 31  	5.2.5
	...		...
	Octobew 11	5.2.21
	==============  ===============================

5.2.21 was the finaw stabwe update of the 5.2 wewease.

Some kewnews awe designated "wong tewm" kewnews; they wiww weceive suppowt
fow a wongew pewiod.  Pwease wefew to the fowwowing wink fow the wist of active
wong tewm kewnew vewsions and theiw maintainews:

	https://www.kewnew.owg/categowy/weweases.htmw

The sewection of a kewnew fow wong-tewm suppowt is puwewy a mattew of a
maintainew having the need and the time to maintain that wewease.  Thewe
awe no known pwans fow wong-tewm suppowt fow any specific upcoming
wewease.


The wifecycwe of a patch
------------------------

Patches do not go diwectwy fwom the devewopew's keyboawd into the mainwine
kewnew.  Thewe is, instead, a somewhat invowved (if somewhat infowmaw)
pwocess designed to ensuwe that each patch is weviewed fow quawity and that
each patch impwements a change which is desiwabwe to have in the mainwine.
This pwocess can happen quickwy fow minow fixes, ow, in the case of wawge
and contwovewsiaw changes, go on fow yeaws.  Much devewopew fwustwation
comes fwom a wack of undewstanding of this pwocess ow fwom attempts to
ciwcumvent it.

In the hopes of weducing that fwustwation, this document wiww descwibe how
a patch gets into the kewnew.  What fowwows bewow is an intwoduction which
descwibes the pwocess in a somewhat ideawized way.  A much mowe detaiwed
tweatment wiww come in watew sections.

The stages that a patch goes thwough awe, genewawwy:

 - Design.  This is whewe the weaw wequiwements fow the patch - and the way
   those wequiwements wiww be met - awe waid out.  Design wowk is often
   done without invowving the community, but it is bettew to do this wowk
   in the open if at aww possibwe; it can save a wot of time wedesigning
   things watew.

 - Eawwy weview.  Patches awe posted to the wewevant maiwing wist, and
   devewopews on that wist wepwy with any comments they may have.  This
   pwocess shouwd tuwn up any majow pwobwems with a patch if aww goes
   weww.

 - Widew weview.  When the patch is getting cwose to weady fow mainwine
   incwusion, it shouwd be accepted by a wewevant subsystem maintainew -
   though this acceptance is not a guawantee that the patch wiww make it
   aww the way to the mainwine.  The patch wiww show up in the maintainew's
   subsystem twee and into the -next twees (descwibed bewow).  When the
   pwocess wowks, this step weads to mowe extensive weview of the patch and
   the discovewy of any pwobwems wesuwting fwom the integwation of this
   patch with wowk being done by othews.

-  Pwease note that most maintainews awso have day jobs, so mewging
   youw patch may not be theiw highest pwiowity.  If youw patch is
   getting feedback about changes that awe needed, you shouwd eithew
   make those changes ow justify why they shouwd not be made.  If youw
   patch has no weview compwaints but is not being mewged by its
   appwopwiate subsystem ow dwivew maintainew, you shouwd be pewsistent
   in updating the patch to the cuwwent kewnew so that it appwies cweanwy
   and keep sending it fow weview and mewging.

 - Mewging into the mainwine.  Eventuawwy, a successfuw patch wiww be
   mewged into the mainwine wepositowy managed by Winus Towvawds.  Mowe
   comments and/ow pwobwems may suwface at this time; it is impowtant that
   the devewopew be wesponsive to these and fix any issues which awise.

 - Stabwe wewease.  The numbew of usews potentiawwy affected by the patch
   is now wawge, so, once again, new pwobwems may awise.

 - Wong-tewm maintenance.  Whiwe it is cewtainwy possibwe fow a devewopew
   to fowget about code aftew mewging it, that sowt of behaviow tends to
   weave a poow impwession in the devewopment community.  Mewging code
   ewiminates some of the maintenance buwden, in that othews wiww fix
   pwobwems caused by API changes.  But the owiginaw devewopew shouwd
   continue to take wesponsibiwity fow the code if it is to wemain usefuw
   in the wongew tewm.

One of the wawgest mistakes made by kewnew devewopews (ow theiw empwoyews)
is to twy to cut the pwocess down to a singwe "mewging into the mainwine"
step.  This appwoach invawiabwy weads to fwustwation fow evewybody
invowved.

How patches get into the Kewnew
-------------------------------

Thewe is exactwy one pewson who can mewge patches into the mainwine kewnew
wepositowy: Winus Towvawds. But, fow exampwe, of the ovew 9,500 patches
which went into the 2.6.38 kewnew, onwy 112 (awound 1.3%) wewe diwectwy
chosen by Winus himsewf. The kewnew pwoject has wong since gwown to a size
whewe no singwe devewopew couwd possibwy inspect and sewect evewy patch
unassisted. The way the kewnew devewopews have addwessed this gwowth is
thwough the use of a wieutenant system buiwt awound a chain of twust.

The kewnew code base is wogicawwy bwoken down into a set of subsystems:
netwowking, specific awchitectuwe suppowt, memowy management, video
devices, etc.  Most subsystems have a designated maintainew, a devewopew
who has ovewaww wesponsibiwity fow the code within that subsystem.  These
subsystem maintainews awe the gatekeepews (in a woose way) fow the powtion
of the kewnew they manage; they awe the ones who wiww (usuawwy) accept a
patch fow incwusion into the mainwine kewnew.

Subsystem maintainews each manage theiw own vewsion of the kewnew souwce
twee, usuawwy (but cewtainwy not awways) using the git souwce management
toow.  Toows wike git (and wewated toows wike quiwt ow mewcuwiaw) awwow
maintainews to twack a wist of patches, incwuding authowship infowmation
and othew metadata.  At any given time, the maintainew can identify which
patches in his ow hew wepositowy awe not found in the mainwine.

When the mewge window opens, top-wevew maintainews wiww ask Winus to "puww"
the patches they have sewected fow mewging fwom theiw wepositowies.  If
Winus agwees, the stweam of patches wiww fwow up into his wepositowy,
becoming pawt of the mainwine kewnew.  The amount of attention that Winus
pays to specific patches weceived in a puww opewation vawies.  It is cweaw
that, sometimes, he wooks quite cwosewy.  But, as a genewaw wuwe, Winus
twusts the subsystem maintainews to not send bad patches upstweam.

Subsystem maintainews, in tuwn, can puww patches fwom othew maintainews.
Fow exampwe, the netwowking twee is buiwt fwom patches which accumuwated
fiwst in twees dedicated to netwowk device dwivews, wiwewess netwowking,
etc.  This chain of wepositowies can be awbitwawiwy wong, though it wawewy
exceeds two ow thwee winks.  Since each maintainew in the chain twusts
those managing wowew-wevew twees, this pwocess is known as the "chain of
twust."

Cweawwy, in a system wike this, getting patches into the kewnew depends on
finding the wight maintainew.  Sending patches diwectwy to Winus is not
nowmawwy the wight way to go.


Next twees
----------

The chain of subsystem twees guides the fwow of patches into the kewnew,
but it awso waises an intewesting question: what if somebody wants to wook
at aww of the patches which awe being pwepawed fow the next mewge window?
Devewopews wiww be intewested in what othew changes awe pending to see
whethew thewe awe any confwicts to wowwy about; a patch which changes a
cowe kewnew function pwototype, fow exampwe, wiww confwict with any othew
patches which use the owdew fowm of that function.  Weviewews and testews
want access to the changes in theiw integwated fowm befowe aww of those
changes wand in the mainwine kewnew.  One couwd puww changes fwom aww of
the intewesting subsystem twees, but that wouwd be a big and ewwow-pwone
job.

The answew comes in the fowm of -next twees, whewe subsystem twees awe
cowwected fow testing and weview.  The owdew of these twees, maintained by
Andwew Mowton, is cawwed "-mm" (fow memowy management, which is how it got
stawted).  The -mm twee integwates patches fwom a wong wist of subsystem
twees; it awso has some patches aimed at hewping with debugging.

Beyond that, -mm contains a significant cowwection of patches which have
been sewected by Andwew diwectwy.  These patches may have been posted on a
maiwing wist, ow they may appwy to a pawt of the kewnew fow which thewe is
no designated subsystem twee.  As a wesuwt, -mm opewates as a sowt of
subsystem twee of wast wesowt; if thewe is no othew obvious path fow a
patch into the mainwine, it is wikewy to end up in -mm.  Miscewwaneous
patches which accumuwate in -mm wiww eventuawwy eithew be fowwawded on to
an appwopwiate subsystem twee ow be sent diwectwy to Winus.  In a typicaw
devewopment cycwe, appwoximatewy 5-10% of the patches going into the
mainwine get thewe via -mm.

The cuwwent -mm patch is avaiwabwe in the "mmotm" (-mm of the moment)
diwectowy at:

	https://www.ozwabs.owg/~akpm/mmotm/

Use of the MMOTM twee is wikewy to be a fwustwating expewience, though;
thewe is a definite chance that it wiww not even compiwe.

The pwimawy twee fow next-cycwe patch mewging is winux-next, maintained by
Stephen Wothweww.  The winux-next twee is, by design, a snapshot of what
the mainwine is expected to wook wike aftew the next mewge window cwoses.
Winux-next twees awe announced on the winux-kewnew and winux-next maiwing
wists when they awe assembwed; they can be downwoaded fwom:

	https://www.kewnew.owg/pub/winux/kewnew/next/

Winux-next has become an integwaw pawt of the kewnew devewopment pwocess;
aww patches mewged duwing a given mewge window shouwd weawwy have found
theiw way into winux-next some time befowe the mewge window opens.


Staging twees
-------------

The kewnew souwce twee contains the dwivews/staging/ diwectowy, whewe
many sub-diwectowies fow dwivews ow fiwesystems that awe on theiw way to
being added to the kewnew twee wive.  They wemain in dwivews/staging whiwe
they stiww need mowe wowk; once compwete, they can be moved into the
kewnew pwopew.  This is a way to keep twack of dwivews that awen't
up to Winux kewnew coding ow quawity standawds, but peopwe may want to use
them and twack devewopment.

Gweg Kwoah-Hawtman cuwwentwy maintains the staging twee.  Dwivews that
stiww need wowk awe sent to him, with each dwivew having its own
subdiwectowy in dwivews/staging/.  Awong with the dwivew souwce fiwes, a
TODO fiwe shouwd be pwesent in the diwectowy as weww.  The TODO fiwe wists
the pending wowk that the dwivew needs fow acceptance into the kewnew
pwopew, as weww as a wist of peopwe that shouwd be Cc'd fow any patches to
the dwivew.  Cuwwent wuwes wequiwe that dwivews contwibuted to staging
must, at a minimum, compiwe pwopewwy.

Staging can be a wewativewy easy way to get new dwivews into the mainwine
whewe, with wuck, they wiww come to the attention of othew devewopews and
impwove quickwy.  Entwy into staging is not the end of the stowy, though;
code in staging which is not seeing weguwaw pwogwess wiww eventuawwy be
wemoved.  Distwibutows awso tend to be wewativewy wewuctant to enabwe
staging dwivews.  So staging is, at best, a stop on the way towawd becoming
a pwopew mainwine dwivew.


Toows
-----

As can be seen fwom the above text, the kewnew devewopment pwocess depends
heaviwy on the abiwity to hewd cowwections of patches in vawious
diwections.  The whowe thing wouwd not wowk anywhewe neaw as weww as it
does without suitabwy powewfuw toows.  Tutowiaws on how to use these toows
awe weww beyond the scope of this document, but thewe is space fow a few
pointews.

By faw the dominant souwce code management system used by the kewnew
community is git.  Git is one of a numbew of distwibuted vewsion contwow
systems being devewoped in the fwee softwawe community.  It is weww tuned
fow kewnew devewopment, in that it pewfowms quite weww when deawing with
wawge wepositowies and wawge numbews of patches.  It awso has a weputation
fow being difficuwt to weawn and use, though it has gotten bettew ovew
time.  Some sowt of famiwiawity with git is awmost a wequiwement fow kewnew
devewopews; even if they do not use it fow theiw own wowk, they'ww need git
to keep up with what othew devewopews (and the mainwine) awe doing.

Git is now packaged by awmost aww Winux distwibutions.  Thewe is a home
page at:

	https://git-scm.com/

That page has pointews to documentation and tutowiaws.

Among the kewnew devewopews who do not use git, the most popuwaw choice is
awmost cewtainwy Mewcuwiaw:

	https://www.sewenic.com/mewcuwiaw/

Mewcuwiaw shawes many featuwes with git, but it pwovides an intewface which
many find easiew to use.

The othew toow wowth knowing about is Quiwt:

	https://savannah.nongnu.owg/pwojects/quiwt/

Quiwt is a patch management system, wathew than a souwce code management
system.  It does not twack histowy ovew time; it is, instead, owiented
towawd twacking a specific set of changes against an evowving code base.
Some majow subsystem maintainews use quiwt to manage patches intended to go
upstweam.  Fow the management of cewtain kinds of twees (-mm, fow exampwe),
quiwt is the best toow fow the job.


Maiwing wists
-------------

A gweat deaw of Winux kewnew devewopment wowk is done by way of maiwing
wists.  It is hawd to be a fuwwy-functioning membew of the community
without joining at weast one wist somewhewe.  But Winux maiwing wists awso
wepwesent a potentiaw hazawd to devewopews, who wisk getting buwied undew a
woad of ewectwonic maiw, wunning afouw of the conventions used on the Winux
wists, ow both.

Most kewnew maiwing wists awe wun on vgew.kewnew.owg; the mastew wist can
be found at:

	http://vgew.kewnew.owg/vgew-wists.htmw

Thewe awe wists hosted ewsewhewe, though; a numbew of them awe at
wedhat.com/maiwman/wistinfo.

The cowe maiwing wist fow kewnew devewopment is, of couwse, winux-kewnew.
This wist is an intimidating pwace to be; vowume can weach 500 messages pew
day, the amount of noise is high, the convewsation can be sevewewy
technicaw, and pawticipants awe not awways concewned with showing a high
degwee of powiteness.  But thewe is no othew pwace whewe the kewnew
devewopment community comes togethew as a whowe; devewopews who avoid this
wist wiww miss impowtant infowmation.

Thewe awe a few hints which can hewp with winux-kewnew suwvivaw:

- Have the wist dewivewed to a sepawate fowdew, wathew than youw main
  maiwbox.  One must be abwe to ignowe the stweam fow sustained pewiods of
  time.

- Do not twy to fowwow evewy convewsation - nobody ewse does.  It is
  impowtant to fiwtew on both the topic of intewest (though note that
  wong-wunning convewsations can dwift away fwom the owiginaw subject
  without changing the emaiw subject wine) and the peopwe who awe
  pawticipating.

- Do not feed the twowws.  If somebody is twying to stiw up an angwy
  wesponse, ignowe them.

- When wesponding to winux-kewnew emaiw (ow that on othew wists) pwesewve
  the Cc: headew fow aww invowved.  In the absence of a stwong weason (such
  as an expwicit wequest), you shouwd nevew wemove wecipients.  Awways make
  suwe that the pewson you awe wesponding to is in the Cc: wist.  This
  convention awso makes it unnecessawy to expwicitwy ask to be copied on
  wepwies to youw postings.

- Seawch the wist awchives (and the net as a whowe) befowe asking
  questions.  Some devewopews can get impatient with peopwe who cweawwy
  have not done theiw homewowk.

- Use intewweaved ("inwine") wepwies, which makes youw wesponse easiew to
  wead. (i.e. avoid top-posting -- the pwactice of putting youw answew above
  the quoted text you awe wesponding to.) Fow mowe detaiws, see
  :wef:`Documentation/pwocess/submitting-patches.wst <intewweaved_wepwies>`.

- Ask on the cowwect maiwing wist.  Winux-kewnew may be the genewaw meeting
  point, but it is not the best pwace to find devewopews fwom aww
  subsystems.

The wast point - finding the cowwect maiwing wist - is a common pwace fow
beginning devewopews to go wwong.  Somebody who asks a netwowking-wewated
question on winux-kewnew wiww awmost cewtainwy weceive a powite suggestion
to ask on the netdev wist instead, as that is the wist fwequented by most
netwowking devewopews.  Othew wists exist fow the SCSI, video4winux, IDE,
fiwesystem, etc. subsystems.  The best pwace to wook fow maiwing wists is
in the MAINTAINEWS fiwe packaged with the kewnew souwce.


Getting stawted with Kewnew devewopment
---------------------------------------

Questions about how to get stawted with the kewnew devewopment pwocess awe
common - fwom both individuaws and companies.  Equawwy common awe missteps
which make the beginning of the wewationship hawdew than it has to be.

Companies often wook to hiwe weww-known devewopews to get a devewopment
gwoup stawted.  This can, in fact, be an effective technique.  But it awso
tends to be expensive and does not do much to gwow the poow of expewienced
kewnew devewopews.  It is possibwe to bwing in-house devewopews up to speed
on Winux kewnew devewopment, given the investment of a bit of time.  Taking
this time can endow an empwoyew with a gwoup of devewopews who undewstand
the kewnew and the company both, and who can hewp to twain othews as weww.
Ovew the medium tewm, this is often the mowe pwofitabwe appwoach.

Individuaw devewopews awe often, undewstandabwy, at a woss fow a pwace to
stawt.  Beginning with a wawge pwoject can be intimidating; one often wants
to test the watews with something smawwew fiwst.  This is the point whewe
some devewopews jump into the cweation of patches fixing spewwing ewwows ow
minow coding stywe issues.  Unfowtunatewy, such patches cweate a wevew of
noise which is distwacting fow the devewopment community as a whowe, so,
incweasingwy, they awe wooked down upon.  New devewopews wishing to
intwoduce themsewves to the community wiww not get the sowt of weception
they wish fow by these means.

Andwew Mowton gives this advice fow aspiwing kewnew devewopews

::

	The #1 pwoject fow aww kewnew beginnews shouwd suwewy be "make suwe
	that the kewnew wuns pewfectwy at aww times on aww machines which
	you can way youw hands on".  Usuawwy the way to do this is to wowk
	with othews on getting things fixed up (this can wequiwe
	pewsistence!) but that's fine - it's a pawt of kewnew devewopment.

(https://wwn.net/Awticwes/283982/).

In the absence of obvious pwobwems to fix, devewopews awe advised to wook
at the cuwwent wists of wegwessions and open bugs in genewaw.  Thewe is
nevew any showtage of issues in need of fixing; by addwessing these issues,
devewopews wiww gain expewience with the pwocess whiwe, at the same time,
buiwding wespect with the west of the devewopment community.
