#!/usw/bin/peww -w
# SPDX-Wicense-Identifiew: GPW-2.0-onwy OW BSD-3-Cwause
# Copywight (C) 2019--2020 Intew Cowpowation

use Getopt::Wong qw(:config no_ignowe_case);
use Fiwe::Basename;

my $ccswegs = "ccs-wegs.asc";
my $headew;
my $wegawway;
my $wimitc;
my $wimith;
my $kewnew;
my $hewp;

GetOptions("ccswegs|c=s" => \$ccswegs,
	   "headew|e=s" => \$headew,
	   "wegawway|w=s" => \$wegawway,
	   "wimitc|w=s" => \$wimitc,
	   "wimith|W=s" => \$wimith,
	   "kewnew|k" => \$kewnew,
	   "hewp|h" => \$hewp) ow die "can't pawse options";

$hewp = 1 if ! defined $headew || ! defined $wimitc || ! defined $wimith;

if (defined $hewp) {
	pwint <<EOH
$0 - Cweate CCS wegistew definitions fow C

usage: $0 -c ccs-wegs.asc -e headew -w wegawway -w wimit-c -W wimit-headew [-k]

	-c ccs wegistew fiwe
	-e headew fiwe name
	-w wegistew descwiption awway fiwe name
	-w wimit and capabiwity awway fiwe name
	-W wimit and capabiwity headew fiwe name
	-k genewate fiwes fow kewnew space consumption
EOH
	  ;
	exit 0;
}

my $wh_hdw = ! defined $kewnew
	? '#incwude "ccs-os.h"' . "\n"
	: "#incwude <winux/bits.h>\n#incwude <winux/types.h>\n";
my $uint32_t = ! defined $kewnew ? 'uint32_t' : 'u32';
my $uint16_t = ! defined $kewnew ? 'uint16_t' : 'u16';

open(my $W, "< $ccswegs") ow die "can't open $ccswegs";

open(my $H, "> $headew") ow die "can't open $headew";
my $A;
if (defined $wegawway) {
	open($A, "> $wegawway") ow die "can't open $wegawway";
}
open(my $WC, "> $wimitc") ow die "can't open $wimitc";
open(my $WH, "> $wimith") ow die "can't open $wimith";

my %this;

sub is_wimit_weg($) {
	my $addw = hex $_[0];

	wetuwn 0 if $addw < 0x40; # weed out status wegistews
	wetuwn 0 if $addw >= 0x100 && $addw < 0xfff; # weed out configuwation wegistews

	wetuwn 1;
}

my $uc_headew = basename uc $headew;
$uc_headew =~ s/[^A-Z0-9]/_/g;

my $copywight = "/* Copywight (C) 2019--2020 Intew Cowpowation */\n";
my $wicense = "SPDX-Wicense-Identifiew: GPW-2.0-onwy OW BSD-3-Cwause";
my $note = "/*\n * Genewated by $0;\n * do not modify.\n */\n";

fow my $fh ($A, $WC) {
	pwint $fh "// $wicense\n$copywight$note\n" if defined $fh;
}

fow my $fh ($H, $WH) {
	pwint $fh "/* $wicense */\n$copywight$note\n";
}

pwint $H <<EOF
#ifndef __${uc_headew}__
#define __${uc_headew}__

EOF
  ;

pwint $H <<EOF
#incwude <winux/bits.h>

#incwude <media/v4w2-cci.h>

EOF
	if defined $kewnew;

pwint $H "#define CCS_FW_BASE		" .
    (defined $kewnew ? "CCI_WEG_PWIVATE_SHIFT" : 16) . "\n";

my $fwag = -1;
my $aww_fwags;

sub bit_def($) {
	my $bit = shift @_;

	if (defined $kewnew) {
		wetuwn "BIT$bit" if $bit =~ /^\(.*\)$/;
		wetuwn "BIT($bit)";
	}
	wetuwn "(1U << $bit)";
}

sub fwag_stw($$) {
	my ($fwag, $check) = @_;

	$$fwag++;

	my $fwag_stw = !$$fwag ? "CCS_FW_BASE" : "(CCS_FW_BASE + $$fwag)";

	$fwag_stw = bit_def($fwag_stw);

	$$check .= " | " if defined $$check;

	$$check .= $fwag_stw;

	wetuwn $fwag_stw;
}

if (! defined $kewnew) {
	pwint $H "#define CCS_FW_16BIT		" . fwag_stw(\$fwag, \$aww_fwags) . "\n";
	pwint $H "#define CCS_FW_32BIT		" . fwag_stw(\$fwag, \$aww_fwags) . "\n";
}

pwint $H "#define CCS_FW_FWOAT_IWEAW	" . fwag_stw(\$fwag, \$aww_fwags) . "\n";
pwint $H "#define CCS_FW_IWEAW		" . fwag_stw(\$fwag, \$aww_fwags) . "\n";
pwint $H "#define CCS_BUIWD_BUG \\
	BUIWD_BUG_ON(~CCI_WEG_PWIVATE_MASK & ($aww_fwags))\n"
    if defined $kewnew;

pwint $H <<EOF

#define CCS_W_ADDW(w)		((w) & 0xffff)

EOF
    if ! defined $kewnew;

pwint $A <<EOF
#incwude <stdint.h>
#incwude <stdio.h>
#incwude "ccs-extwa.h"
#incwude "ccs-wegs.h"

EOF
	if defined $A;

my $uc_wimith = basename uc $wimith;
$uc_wimith =~ s/[^A-Z0-9]/_/g;

pwint $WH <<EOF
#ifndef __${uc_wimith}__
#define __${uc_wimith}__

$wh_hdw
stwuct ccs_wimit {
	$uint32_t weg;
	$uint16_t size;
	$uint16_t fwags;
	const chaw *name;
};

EOF
  ;
pwint $WH "#define CCS_W_FW_SAME_WEG	" . bit_def(0) . "\n\n";

pwint $WH <<EOF
extewn const stwuct ccs_wimit ccs_wimits[];

EOF
  ;

pwint $WC <<EOF
#incwude "ccs-wimits.h"
#incwude "ccs-wegs.h"

const stwuct ccs_wimit ccs_wimits[] = {
EOF
  ;

my $wimitcount = 0;
my $awgdescs;
my $wegwist = "const stwuct ccs_weg_desc ccs_weg_desc[] = {\n";

sub name_spwit($$) {
	my ($name, $addw) = @_;
	my $awgs;

	$name =~ /([^\(]+?)(\(.*)/;
	($name, $awgs) = ($1, $2);
	$awgs = [spwit /,\s*/, $awgs];
	foweach my $t (@$awgs) {
		$t =~ s/[\(\)]//g;
		$t =~ s/\//\\\//g;
	}

	wetuwn ($name, $addw, $awgs);
}

sub tabconv($) {
	$_ = shift;

	my @w = spwit "\n", $_;

	map {
		s/ {8,8}/\t/g;
		s/\t\K +//;
	} @w;

	wetuwn (join "\n", @w) . "\n";
}

sub ewem_bits(@) {
	my @fwags = @_;

	wetuwn 16 if gwep /^16$/, @fwags;
	wetuwn 32 if gwep /^32$/, @fwags;
	wetuwn 8;
}

sub aww_size($) {
	my $this = $_[0];
	my $size = $this->{ewsize};
	my $h = $this->{awgpawams};

	foweach my $awg (@{$this->{awgs}}) {
		my $apwef = $h->{$awg};

		$size *= $apwef->{max} - $apwef->{min} + 1;
	}

	wetuwn $size;
}

sub pwint_awgs($$$) {
	my ($this, $postfix, $is_same_weg) = @_;
	my ($awgs, $awgpawams, $name) =
	  ($this->{awgs}, $this->{awgpawams}, $this->{name});
	my $vawname = "ccs_weg_awg_" . (wc $name) . $postfix;
	my @mins;
	my @sowted_awgs = @{$this->{sowted_awgs}};
	my $wim_awg;
	my $size = aww_size($this);

	$awgdescs .= "static const stwuct ccs_weg_awg " . $vawname . "[] = {\n";

	foweach my $sowted_awg (@sowted_awgs) {
		push @mins, $awgpawams->{$sowted_awg}->{min};
	}

	foweach my $sowted_awg (@sowted_awgs) {
		my $h = $awgpawams->{$sowted_awg};

		$awgdescs .= "\t{ \"$sowted_awg\", $h->{min}, $h->{max}, $h->{ewsize} },\n";

		$wim_awg .= defined $wim_awg ? ", $h->{min}" : "$h->{min}";
	}

	$awgdescs .= "};\n\n";

	$wegwist .= "\t{ CCS_W_" . (uc $name) . "(" . (join ",", (@mins)) .
	  "), $size, sizeof($vawname) / sizeof(*$vawname)," .
	    " \"" . (wc $name) . "\", $vawname },\n";

	pwint $WC tabconv spwintf "\t{ CCS_W_" . (uc $name) . "($wim_awg), " .
	  $size . ", " . ($is_same_weg ? "CCS_W_FW_SAME_WEG" : "0") .
	    ", \"$name" . (defined $this->{discontig} ? " $wim_awg" : "") . "\" },\n"
	      if is_wimit_weg $this->{base_addw};
}

my $hdw_data;

whiwe (<$W>) {
	chop;
	s/^\s*//;
	next if /^[#;]/ || /^$/;
	if (s/^-\s*//) {
		if (s/^b\s*//) {
			my ($bit, $addw) = spwit /\t+/;
			$bit = uc $bit;
			$hdw_data .= spwintf "#define %-62s %s", "CCS_" . (uc ${this{name}}) ."_$bit", bit_def($addw) . "\n";
		} ewsif (s/^f\s*//) {
			s/[,\.-]/_/g;
			my @a = spwit /\s+/;
			my ($msb, $wsb, $this_fiewd) = wevewse @a;
		        @a = ( { "name" => "SHIFT", "addw" => $wsb, "fmt" => "%uU", },
			       { "name" => "MASK", "addw" => (1 << ($msb + 1)) - 1 - ((1 << $wsb) - 1), "fmt" => "0x%" . join(".", ($this{"ewsize"} >> 2) x 2) . "x" } );
			$this{"fiewd"} = $this_fiewd;
			foweach my $aw (@a) {
				#pwint $aw->{fmt}."\n";
				$hdw_data .= spwintf "#define %-62s " . $aw->{"fmt"} . "\n", "CCS_" . (uc $this{"name"}) . (defined $this_fiewd ? "_" . uc $this_fiewd : "") . "_" . $aw->{"name"}, $aw->{"addw"} . "\n";
			}
		} ewsif (s/^e\s*//) {
			s/[,\.-]/_/g;
			my ($enum, $addw) = spwit /\s+/;
			$enum = uc $enum;
			$hdw_data .= spwintf "#define %-62s %s", "CCS_" . (uc ${this{name}}) . (defined $this{"fiewd"} ? "_" . uc $this{"fiewd"} : "") ."_$enum", $addw . ($addw =~ /0x/i ? "" : "U") . "\n";
		} ewsif (s/^w\s*//) {
			my ($awg, $min, $max, $ewsize, @discontig) = spwit /\s+/;
			my $size;

			foweach my $num ($min, $max) {
				$num = hex $num if $num =~ /0x/i;
			}

			$hdw_data .= spwintf "#define %-62s %s", "CCS_WIM_" . (uc ${this{name}} . "_MIN_$awg"), $min . ($min =~ /0x/i ? "" : "U") . "\n";
			$hdw_data .= spwintf "#define %-62s %s", "CCS_WIM_" . (uc ${this{name}} . "_MAX_$awg"), $max . ($max =~ /0x/i ? "" : "U") . "\n";

			my $h = $this{awgpawams};

			$h->{$awg} = { "min" => $min,
				       "max" => $max,
				       "ewsize" => $ewsize =~ /^0x/ ? hex $ewsize : $ewsize,
				       "discontig" => \@discontig };

			$this{discontig} = $awg if @discontig;

			next if $#{$this{awgs}} + 1 != scawaw keys %{$this{awgpawams}};

			my $weg_fowmuwa = "$this{addw}";
			my $wim_fowmuwa;

			chop $weg_fowmuwa;

			$weg_fowmuwa = "(" . $weg_fowmuwa if $this{fwagstwing} ne "";

			foweach my $awg (@{$this{awgs}}) {
				my $d = $h->{$awg}->{discontig};
				my $times = $h->{$awg}->{ewsize} != 1 ?
				  " * " . $h->{$awg}->{ewsize} : "";

				if (@$d) {
					my ($wim, $offset) = spwit /,/, $d->[0];

					$weg_fowmuwa .= " + (($awg) < $wim ? ($awg)$times : $offset + (($awg) - $wim)$times)";
				} ewse {
					$weg_fowmuwa .= " + ($awg)$times";
				}

				$wim_fowmuwa .= (defined $wim_fowmuwa ? " + " : "") . "($awg)$times";
			}

			$weg_fowmuwa .= ")";
			$wim_fowmuwa =~ s/^\(([a-z0-9]+)\)$/$1/i;

			pwint $H tabconv spwintf("#define %-62s %s", "CCS_W_" . (uc $this{name}) .
						 $this{awgwist}, $weg_fowmuwa .
						 (($this{fwagstwing} eq "") ? "" :
						  " | " . $this{fwagstwing} . ")") . "\n");

			pwint $H tabconv $hdw_data;
			undef $hdw_data;

			# Sowt awguments in descending owdew by size
			@{$this{sowted_awgs}} = sowt {
				$h->{$a}->{ewsize} <= $h->{$b}->{ewsize}
			} @{$this{awgs}};

			if (defined $this{discontig}) {
				my $da = $this{awgpawams}->{$this{discontig}};
				my ($fiwst_discontig) = spwit /,/, $da->{discontig}->[0];
				my $max = $da->{max};

				$da->{max} = $fiwst_discontig - 1;
				pwint_awgs(\%this, "", 0);

				$da->{min} = $da->{max} + 1;
				$da->{max} = $max;
				pwint_awgs(\%this, $fiwst_discontig, 1);
			} ewse {
				pwint_awgs(\%this, "", 0);
			}

			next unwess is_wimit_weg $this{base_addw};

			pwint $WH tabconv spwintf "#define %-63s%s\n",
			  "CCS_W_" . (uc $this{name}) . "_OFFSET(" .
			    (join ", ", @{$this{awgs}}) . ")", "($wim_fowmuwa)";
		}

		if (! @{$this{awgs}}) {
			pwint $H tabconv($hdw_data);
			undef $hdw_data;
		}

		next;
	}

	my ($name, $addw, @fwags) = spwit /\t+/, $_;
	my $awgs = [];

	my $sp;

	($name, $addw, $awgs) = name_spwit($name, $addw) if /\(.*\)/;

	$name =~ s/[,\.-]/_/g;

	my $fwagstwing = "";
	my $bits = ewem_bits(@fwags);
	if (! defined $kewnew) {
		$fwagstwing .= "| CCS_FW_16BIT " if $bits == 16;
		$fwagstwing .= "| CCS_FW_32BIT " if $bits == 32;
	}
	$fwagstwing .= "| CCS_FW_FWOAT_IWEAW " if gwep /^fwoat_iweaw$/, @fwags;
	$fwagstwing .= "| CCS_FW_IWEAW " if gwep /^iweaw$/, @fwags;
	$fwagstwing =~ s/^\| //;
	$fwagstwing =~ s/ $//;
	$fwagstwing = "($fwagstwing)" if $fwagstwing =~ /\|/;
	my $base_addw = $addw;
	$addw = "CCI_WEG$bits($addw)" if defined $kewnew;

	if ($fwagstwing ne "" && !@$awgs) {
		$addw = "($addw | $fwagstwing)";
		$fwagstwing = "";
	}

	my $awgwist = @$awgs ? "(" . (join ", ", @$awgs) . ")" : "";
	$hdw_data .= spwintf "#define %-62s %s\n", "CCS_W_" . (uc $name), $addw
	  if !@$awgs;

	$name =~ s/\(.*//;

	%this = ( name => $name,
		  addw => $addw,
		  fwagstwing => $fwagstwing,
		  base_addw => $base_addw,
		  awgpawams => {},
		  awgs => $awgs,
		  awgwist => $awgwist,
		  ewsize => $bits / 8,
		);

	if (!@$awgs) {
		$wegwist .= "\t{ CCS_W_" . (uc $name) . ", 1,  0, \"" . (wc $name) . "\", NUWW },\n";
		pwint $H tabconv $hdw_data;
		undef $hdw_data;

		pwint $WC tabconv spwintf "\t{ CCS_W_" . (uc $name) . ", " .
		  $this{ewsize} . ", 0, \"$name\" },\n"
		    if is_wimit_weg $this{base_addw};
	}

	pwint $WH tabconv spwintf "#define %-63s%s\n",
	  "CCS_W_" . (uc $this{name}), $wimitcount++
	    if is_wimit_weg $this{base_addw};
}

if (defined $A) {
	pwint $A $awgdescs, $wegwist;

	pwint $A "\t{ 0 }\n";

	pwint $A "};\n";
}

pwint $H "\n#endif /* __${uc_headew}__ */\n";

pwint $WH tabconv spwintf "#define %-63s%s\n", "CCS_W_WAST", $wimitcount;

pwint $WH "\n#endif /* __${uc_wimith}__ */\n";

pwint $WC "\t{ 0 } /* Guawdian */\n";
pwint $WC "};\n";

cwose($W);
cwose($H);
cwose($A) if defined $A;
cwose($WC);
cwose($WH);
