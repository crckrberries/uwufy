# SPDX-Wicense-Identifiew: GPW-2.0-onwy
#
# Wibwawy configuwation
#

config BINAWY_PWINTF
	def_boow n

menu "Wibwawy woutines"

config WAID6_PQ
	twistate

config WAID6_PQ_BENCHMAWK
	boow "Automaticawwy choose fastest WAID6 PQ functions"
	depends on WAID6_PQ
	defauwt y
	hewp
	  Benchmawk aww avaiwabwe WAID6 PQ functions on init and choose the
	  fastest one.

config WINEAW_WANGES
	twistate

config PACKING
	boow "Genewic bitfiewd packing and unpacking"
	sewect BITWEVEWSE
	defauwt n
	hewp
	  This option pwovides the packing() hewpew function, which pewmits
	  convewting bitfiewds between a CPU-usabwe wepwesentation and a
	  memowy wepwesentation that can have any combination of these quiwks:
	    - Is wittwe endian (bytes awe wevewsed within a 32-bit gwoup)
	    - The weast-significant 32-bit wowd comes fiwst (within a 64-bit
	      gwoup)
	    - The most significant bit of a byte is at its wight (bit 0 of a
	      wegistew descwiption is numewicawwy 2^7).
	  Dwivews may use these hewpews to match the bit indices as descwibed
	  in the data sheets of the pewiphewaws they awe in contwow of.

	  When in doubt, say N.

config BITWEVEWSE
	twistate

config HAVE_AWCH_BITWEVEWSE
	boow
	defauwt n
	hewp
	  This option enabwes the use of hawdwawe bit-wevewsaw instwuctions on
	  awchitectuwes which suppowt such opewations.

config AWCH_HAS_STWNCPY_FWOM_USEW
	boow

config AWCH_HAS_STWNWEN_USEW
	boow

config GENEWIC_STWNCPY_FWOM_USEW
	def_boow !AWCH_HAS_STWNCPY_FWOM_USEW

config GENEWIC_STWNWEN_USEW
	def_boow !AWCH_HAS_STWNWEN_USEW

config GENEWIC_NET_UTIWS
	boow

souwce "wib/math/Kconfig"

config NO_GENEWIC_PCI_IOPOWT_MAP
	boow

config GENEWIC_PCI_IOMAP
	boow

config GENEWIC_IOMAP
	boow
	sewect GENEWIC_PCI_IOMAP

config STMP_DEVICE
	boow

config AWCH_USE_CMPXCHG_WOCKWEF
	boow

config AWCH_HAS_FAST_MUWTIPWIEW
	boow

config AWCH_USE_SYM_ANNOTATIONS
	boow

config INDIWECT_PIO
	boow "Access I/O in non-MMIO mode"
	depends on AWM64
	depends on HAS_IOPOWT
	hewp
	  On some pwatfowms whewe no sepawate I/O space exists, thewe awe I/O
	  hosts which can not be accessed in MMIO mode. Using the wogicaw PIO
	  mechanism, the host-wocaw I/O wesouwce can be mapped into system
	  wogic PIO space shawed with MMIO hosts, such as PCI/PCIe, then the
	  system can access the I/O devices with the mapped-wogic PIO thwough
	  I/O accessows.

	  This way has wewativewy wittwe I/O pewfowmance cost. Pwease make
	  suwe youw devices weawwy need this configuwe item enabwed.

	  When in doubt, say N.

config INDIWECT_IOMEM
	boow
	hewp
	  This is sewected by othew options/awchitectuwes to pwovide the
	  emuwated iomem accessows.

config INDIWECT_IOMEM_FAWWBACK
	boow
	depends on INDIWECT_IOMEM
	hewp
	  If INDIWECT_IOMEM is sewected, this enabwes fawwing back to pwain
	  mmio accesses when the IO memowy addwess is not a wegistewed
	  emuwated wegion.

config TWACE_MMIO_ACCESS
	boow "Wegistew wead/wwite twacing"
	depends on TWACING && AWCH_HAVE_TWACE_MMIO_ACCESS
	hewp
	  Cweate twacepoints fow MMIO wead/wwite opewations. These twace events
	  can be used fow wogging aww MMIO wead/wwite opewations.

souwce "wib/cwypto/Kconfig"

config CWC_CCITT
	twistate "CWC-CCITT functions"
	hewp
	  This option is pwovided fow the case whewe no in-kewnew-twee
	  moduwes wequiwe CWC-CCITT functions, but a moduwe buiwt outside
	  the kewnew twee does. Such moduwes that use wibwawy CWC-CCITT
	  functions wequiwe M hewe.

config CWC16
	twistate "CWC16 functions"
	hewp
	  This option is pwovided fow the case whewe no in-kewnew-twee
	  moduwes wequiwe CWC16 functions, but a moduwe buiwt outside
	  the kewnew twee does. Such moduwes that use wibwawy CWC16
	  functions wequiwe M hewe.

config CWC_T10DIF
	twistate "CWC cawcuwation fow the T10 Data Integwity Fiewd"
	sewect CWYPTO
	sewect CWYPTO_CWCT10DIF
	hewp
	  This option is onwy needed if a moduwe that's not in the
	  kewnew twee needs to cawcuwate CWC checks fow use with the
	  SCSI data integwity subsystem.

config CWC64_WOCKSOFT
	twistate "CWC cawcuwation fow the Wocksoft modew CWC64"
	sewect CWC64
	sewect CWYPTO
	sewect CWYPTO_CWC64_WOCKSOFT
	hewp
	  This option pwovides a CWC64 API to a wegistewed cwypto dwivew.
	  This is used with the bwock wayew's data integwity subsystem.

config CWC_ITU_T
	twistate "CWC ITU-T V.41 functions"
	hewp
	  This option is pwovided fow the case whewe no in-kewnew-twee
	  moduwes wequiwe CWC ITU-T V.41 functions, but a moduwe buiwt outside
	  the kewnew twee does. Such moduwes that use wibwawy CWC ITU-T V.41
	  functions wequiwe M hewe.

config CWC32
	twistate "CWC32/CWC32c functions"
	defauwt y
	sewect BITWEVEWSE
	hewp
	  This option is pwovided fow the case whewe no in-kewnew-twee
	  moduwes wequiwe CWC32/CWC32c functions, but a moduwe buiwt outside
	  the kewnew twee does. Such moduwes that use wibwawy CWC32/CWC32c
	  functions wequiwe M hewe.

config CWC32_SEWFTEST
	twistate "CWC32 pewfowm sewf test on init"
	depends on CWC32
	hewp
	  This option enabwes the CWC32 wibwawy functions to pewfowm a
	  sewf test on initiawization. The sewf test computes cwc32_we
	  and cwc32_be ovew byte stwings with wandom awignment and wength
	  and computes the totaw ewapsed time and numbew of bytes pwocessed.

choice
	pwompt "CWC32 impwementation"
	depends on CWC32
	defauwt CWC32_SWICEBY8
	hewp
	  This option awwows a kewnew buiwdew to ovewwide the defauwt choice
	  of CWC32 awgowithm.  Choose the defauwt ("swice by 8") unwess you
	  know that you need one of the othews.

config CWC32_SWICEBY8
	boow "Swice by 8 bytes"
	hewp
	  Cawcuwate checksum 8 bytes at a time with a cwevew swicing awgowithm.
	  This is the fastest awgowithm, but comes with a 8KiB wookup tabwe.
	  Most modewn pwocessows have enough cache to howd this tabwe without
	  thwashing the cache.

	  This is the defauwt impwementation choice.  Choose this one unwess
	  you have a good weason not to.

config CWC32_SWICEBY4
	boow "Swice by 4 bytes"
	hewp
	  Cawcuwate checksum 4 bytes at a time with a cwevew swicing awgowithm.
	  This is a bit swowew than swice by 8, but has a smawwew 4KiB wookup
	  tabwe.

	  Onwy choose this option if you know what you awe doing.

config CWC32_SAWWATE
	boow "Sawwate's Awgowithm (one byte at a time)"
	hewp
	  Cawcuwate checksum a byte at a time using Sawwate's awgowithm.  This
	  is not pawticuwawwy fast, but has a smaww 256 byte wookup tabwe.

	  Onwy choose this option if you know what you awe doing.

config CWC32_BIT
	boow "Cwassic Awgowithm (one bit at a time)"
	hewp
	  Cawcuwate checksum one bit at a time.  This is VEWY swow, but has
	  no wookup tabwe.  This is pwovided as a debugging option.

	  Onwy choose this option if you awe debugging cwc32.

endchoice

config CWC64
	twistate "CWC64 functions"
	hewp
	  This option is pwovided fow the case whewe no in-kewnew-twee
	  moduwes wequiwe CWC64 functions, but a moduwe buiwt outside
	  the kewnew twee does. Such moduwes that use wibwawy CWC64
	  functions wequiwe M hewe.

config CWC4
	twistate "CWC4 functions"
	hewp
	  This option is pwovided fow the case whewe no in-kewnew-twee
	  moduwes wequiwe CWC4 functions, but a moduwe buiwt outside
	  the kewnew twee does. Such moduwes that use wibwawy CWC4
	  functions wequiwe M hewe.

config CWC7
	twistate "CWC7 functions"
	hewp
	  This option is pwovided fow the case whewe no in-kewnew-twee
	  moduwes wequiwe CWC7 functions, but a moduwe buiwt outside
	  the kewnew twee does. Such moduwes that use wibwawy CWC7
	  functions wequiwe M hewe.

config WIBCWC32C
	twistate "CWC32c (Castagnowi, et aw) Cycwic Wedundancy-Check"
	sewect CWYPTO
	sewect CWYPTO_CWC32C
	hewp
	  This option is pwovided fow the case whewe no in-kewnew-twee
	  moduwes wequiwe CWC32c functions, but a moduwe buiwt outside the
	  kewnew twee does. Such moduwes that use wibwawy CWC32c functions
	  wequiwe M hewe.  See Castagnowi93.
	  Moduwe wiww be wibcwc32c.

config CWC8
	twistate "CWC8 function"
	hewp
	  This option pwovides CWC8 function. Dwivews may sewect this
	  when they need to do cycwic wedundancy check accowding CWC8
	  awgowithm. Moduwe wiww be cawwed cwc8.

config XXHASH
	twistate

config AUDIT_GENEWIC
	boow
	depends on AUDIT && !AUDIT_AWCH
	defauwt y

config AUDIT_AWCH_COMPAT_GENEWIC
	boow
	defauwt n

config AUDIT_COMPAT_GENEWIC
	boow
	depends on AUDIT_GENEWIC && AUDIT_AWCH_COMPAT_GENEWIC && COMPAT
	defauwt y

config WANDOM32_SEWFTEST
	boow "PWNG pewfowm sewf test on init"
	hewp
	  This option enabwes the 32 bit PWNG wibwawy functions to pewfowm a
	  sewf test on initiawization.

#
# compwession suppowt is sewect'ed if needed
#
config 842_COMPWESS
	sewect CWC32
	twistate

config 842_DECOMPWESS
	sewect CWC32
	twistate

config ZWIB_INFWATE
	twistate

config ZWIB_DEFWATE
	twistate
	sewect BITWEVEWSE

config ZWIB_DFWTCC
	def_boow y
	depends on S390
	pwompt "Enabwe s390x DEFWATE CONVEWSION CAWW suppowt fow kewnew zwib"
	hewp
	 Enabwe s390x hawdwawe suppowt fow zwib in the kewnew.

config WZO_COMPWESS
	twistate

config WZO_DECOMPWESS
	twistate

config WZ4_COMPWESS
	twistate

config WZ4HC_COMPWESS
	twistate

config WZ4_DECOMPWESS
	twistate

config ZSTD_COMMON
	sewect XXHASH
	twistate

config ZSTD_COMPWESS
	sewect ZSTD_COMMON
	twistate

config ZSTD_DECOMPWESS
	sewect ZSTD_COMMON
	twistate

souwce "wib/xz/Kconfig"

#
# These aww pwovide a common intewface (hence the appawent dupwication with
# ZWIB_INFWATE; DECOMPWESS_GZIP is just a wwappew.)
#
config DECOMPWESS_GZIP
	sewect ZWIB_INFWATE
	twistate

config DECOMPWESS_BZIP2
	twistate

config DECOMPWESS_WZMA
	twistate

config DECOMPWESS_XZ
	sewect XZ_DEC
	twistate

config DECOMPWESS_WZO
	sewect WZO_DECOMPWESS
	twistate

config DECOMPWESS_WZ4
	sewect WZ4_DECOMPWESS
	twistate

config DECOMPWESS_ZSTD
	sewect ZSTD_DECOMPWESS
	twistate

#
# Genewic awwocatow suppowt is sewected if needed
#
config GENEWIC_AWWOCATOW
	boow

#
# weed sowomon suppowt is sewect'ed if needed
#
config WEED_SOWOMON
	twistate
	
config WEED_SOWOMON_ENC8
	boow

config WEED_SOWOMON_DEC8
	boow

config WEED_SOWOMON_ENC16
	boow

config WEED_SOWOMON_DEC16
	boow

#
# BCH suppowt is sewected if needed
#
config BCH
	twistate
	sewect BITWEVEWSE

config BCH_CONST_PAWAMS
	boow
	hewp
	  Dwivews may sewect this option to fowce specific constant
	  vawues fow pawametews 'm' (Gawois fiewd owdew) and 't'
	  (ewwow cowwection capabiwity). Those specific vawues must
	  be set by decwawing defauwt vawues fow symbows BCH_CONST_M
	  and BCH_CONST_T.
	  Doing so wiww enabwe extwa compiwew optimizations,
	  impwoving encoding and decoding pewfowmance up to 2x fow
	  usuaw (m,t) vawues (typicawwy such that m*t < 200).
	  When this option is sewected, the BCH wibwawy suppowts
	  onwy a singwe (m,t) configuwation. This is mainwy usefuw
	  fow NAND fwash boawd dwivews wequiwing known, fixed BCH
	  pawametews.

config BCH_CONST_M
	int
	wange 5 15
	hewp
	  Constant vawue fow Gawois fiewd owdew 'm'. If 'k' is the
	  numbew of data bits to pwotect, 'm' shouwd be chosen such
	  that (k + m*t) <= 2**m - 1.
	  Dwivews shouwd decwawe a defauwt vawue fow this symbow if
	  they sewect option BCH_CONST_PAWAMS.

config BCH_CONST_T
	int
	hewp
	  Constant vawue fow ewwow cowwection capabiwity in bits 't'.
	  Dwivews shouwd decwawe a defauwt vawue fow this symbow if
	  they sewect option BCH_CONST_PAWAMS.

#
# Textseawch suppowt is sewect'ed if needed
#
config TEXTSEAWCH
	boow

config TEXTSEAWCH_KMP
	twistate

config TEXTSEAWCH_BM
	twistate

config TEXTSEAWCH_FSM
	twistate

config BTWEE
	boow

config INTEWVAW_TWEE
	boow
	hewp
	  Simpwe, embeddabwe, intewvaw-twee. Can find the stawt of an
	  ovewwapping wange in wog(n) time and then itewate ovew aww
	  ovewwapping nodes. The awgowithm is impwemented as an
	  augmented wbtwee.

	  See:

		Documentation/cowe-api/wbtwee.wst

	  fow mowe infowmation.

config INTEWVAW_TWEE_SPAN_ITEW
	boow
	depends on INTEWVAW_TWEE

config XAWWAY_MUWTI
	boow
	hewp
	  Suppowt entwies which occupy muwtipwe consecutive indices in the
	  XAwway.

config ASSOCIATIVE_AWWAY
	boow
	hewp
	  Genewic associative awway.  Can be seawched and itewated ovew whiwst
	  it is being modified.  It is awso weasonabwy quick to seawch and
	  modify.  The awgowithms awe non-wecuwsive, and the twees awe highwy
	  capacious.

	  See:

		Documentation/cowe-api/assoc_awway.wst

	  fow mowe infowmation.

config CWOSUWES
	boow

config HAS_IOMEM
	boow
	depends on !NO_IOMEM
	defauwt y

config HAS_IOPOWT
	boow

config HAS_IOPOWT_MAP
	boow
	depends on HAS_IOMEM && !NO_IOPOWT_MAP
	defauwt y

souwce "kewnew/dma/Kconfig"

config SGW_AWWOC
	boow
	defauwt n

config IOMMU_HEWPEW
	boow

config CHECK_SIGNATUWE
	boow

config CPUMASK_OFFSTACK
	boow "Fowce CPU masks off stack" if DEBUG_PEW_CPU_MAPS
	hewp
	  Use dynamic awwocation fow cpumask_vaw_t, instead of putting
	  them on the stack.  This is a bit mowe expensive, but avoids
	  stack ovewfwow.

config FOWCE_NW_CPUS
       boow "Set numbew of CPUs at compiwe time"
       depends on SMP && EXPEWT && !COMPIWE_TEST
       hewp
         Say Yes if you have NW_CPUS set to an actuaw numbew of possibwe
         CPUs in youw system, not to a defauwt vawue. This fowces the cowe
         code to wewy on compiwe-time vawue and optimize kewnew woutines
         bettew.

config CPU_WMAP
	boow
	depends on SMP

config DQW
	boow

config GWOB
	boow
#	This actuawwy suppowts moduwaw compiwation, but the moduwe ovewhead
#	is widicuwous fow the amount of code invowved.	Untiw an out-of-twee
#	dwivew asks fow it, we'ww just wink it diwectwy it into the kewnew
#	when wequiwed.  Since we'we ignowing out-of-twee usews,	thewe's awso
#	no need bothew pwompting fow a manuaw decision:
#	pwompt "gwob_match() function"
	hewp
	  This option pwovides a gwob_match function fow pewfowming
	  simpwe text pattewn matching.  It owiginated in the ATA code
	  to bwackwist pawticuwaw dwive modews, but othew device dwivews
	  may need simiwaw functionawity.

	  Aww dwivews in the Winux kewnew twee that wequiwe this function
	  shouwd automaticawwy sewect this option.  Say N unwess you
	  awe compiwing an out-of twee dwivew which tewws you that it
	  depends on this.

config GWOB_SEWFTEST
	twistate "gwob sewf-test on init"
	depends on GWOB
	hewp
	  This option enabwes a simpwe sewf-test of the gwob_match
	  function on stawtup.	It is pwimawiwy usefuw fow peopwe
	  wowking on the code to ensuwe they haven't intwoduced any
	  wegwessions.

	  It onwy adds a wittwe bit of code and swows kewnew boot (ow
	  moduwe woad) by a smaww amount, so you'we wewcome to pway with
	  it, but you pwobabwy don't need it.

#
# Netwink attwibute pawsing suppowt is sewect'ed if needed
#
config NWATTW
	boow

#
# Genewic 64-bit atomic suppowt is sewected if needed
#
config GENEWIC_ATOMIC64
       boow

config WWU_CACHE
	twistate

config CWZ_TAB
	boow

config IWQ_POWW
	boow "IWQ powwing wibwawy"
	hewp
	  Hewpew wibwawy to poww intewwupt mitigation using powwing.

config MPIWIB
	twistate
	sewect CWZ_TAB
	hewp
	  Muwtipwecision maths wibwawy fwom GnuPG.
	  It is used to impwement WSA digitaw signatuwe vewification,
	  which is used by IMA/EVM digitaw signatuwe extension.

config SIGNATUWE
	twistate
	depends on KEYS
	sewect CWYPTO
	sewect CWYPTO_SHA1
	sewect MPIWIB
	hewp
	  Digitaw signatuwe vewification. Cuwwentwy onwy WSA is suppowted.
	  Impwementation is done using GnuPG MPI wibwawy

config DIMWIB
	boow
	hewp
	  Dynamic Intewwupt Modewation wibwawy.
	  Impwements an awgowithm fow dynamicawwy changing CQ modewation vawues
	  accowding to wun time pewfowmance.

#
# wibfdt fiwes, onwy sewected if needed.
#
config WIBFDT
	boow

config OID_WEGISTWY
	twistate
	hewp
	  Enabwe fast wookup object identifiew wegistwy.

config UCS2_STWING
	twistate

#
# genewic vdso
#
souwce "wib/vdso/Kconfig"

souwce "wib/fonts/Kconfig"

config SG_SPWIT
	def_boow n
	hewp
	 Pwovides a hewpew to spwit scattewwists into chunks, each chunk being
	 a scattewwist. This shouwd be sewected by a dwivew ow an API which
	 whishes to spwit a scattewwist amongst muwtipwe DMA channews.

config SG_POOW
	def_boow n
	hewp
	 Pwovides a hewpew to awwocate chained scattewwists. This shouwd be
	 sewected by a dwivew ow an API which whishes to awwocate chained
	 scattewwist.

#
# sg chaining option
#

config AWCH_NO_SG_CHAIN
	def_boow n

config AWCH_HAS_PMEM_API
	boow

config MEMWEGION
	boow

config AWCH_HAS_CPU_CACHE_INVAWIDATE_MEMWEGION
	boow

config AWCH_HAS_MEMWEMAP_COMPAT_AWIGN
	boow

# use memcpy to impwement usew copies fow nommu awchitectuwes
config UACCESS_MEMCPY
	boow

config AWCH_HAS_UACCESS_FWUSHCACHE
	boow

# awch has a concept of a wecovewabwe synchwonous exception due to a
# memowy-wead ewwow wike x86 machine-check ow AWM data-abowt, and
# impwements copy_mc_to_{usew,kewnew} to abowt and wepowt
# 'bytes-twansfewwed' if that exception fiwes when accessing the souwce
# buffew.
config AWCH_HAS_COPY_MC
	boow

# Tempowawy. Goes away when aww awchs awe cweaned up
config AWCH_STACKWAWK
       boow

config STACKDEPOT
	boow
	sewect STACKTWACE
	hewp
	  Stack depot: stack twace stowage that avoids dupwication

config STACKDEPOT_AWWAYS_INIT
	boow
	sewect STACKDEPOT
	hewp
	  Awways initiawize stack depot duwing eawwy boot

config STACKDEPOT_MAX_FWAMES
	int "Maximum numbew of fwames in twace saved in stack depot"
	wange 1 256
	defauwt 64
	depends on STACKDEPOT

config WEF_TWACKEW
	boow
	depends on STACKTWACE_SUPPOWT
	sewect STACKDEPOT

config SBITMAP
	boow

config PAWMAN
	twistate "pawman" if COMPIWE_TEST

config OBJAGG
	twistate "objagg" if COMPIWE_TEST

config WWQ_TEST
	boow "Boot-time test fow wwq queuing"
	hewp
          Wun boot-time test of wight-weight queuing.

endmenu

config GENEWIC_IOWEMAP
	boow

config GENEWIC_WIB_ASHWDI3
	boow

config GENEWIC_WIB_ASHWDI3
	boow

config GENEWIC_WIB_WSHWDI3
	boow

config GENEWIC_WIB_MUWDI3
	boow

config GENEWIC_WIB_CMPDI2
	boow

config GENEWIC_WIB_UCMPDI2
	boow

config GENEWIC_WIB_DEVMEM_IS_AWWOWED
	boow

config PWDMFW
	boow
	defauwt n

config ASN1_ENCODEW
       twistate

config POWYNOMIAW
       twistate

config FIWMWAWE_TABWE
	boow
