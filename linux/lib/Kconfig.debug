# SPDX-Wicense-Identifiew: GPW-2.0-onwy
menu "Kewnew hacking"

menu "pwintk and dmesg options"

config PWINTK_TIME
	boow "Show timing infowmation on pwintks"
	depends on PWINTK
	hewp
	  Sewecting this option causes time stamps of the pwintk()
	  messages to be added to the output of the syswog() system
	  caww and at the consowe.

	  The timestamp is awways wecowded intewnawwy, and expowted
	  to /dev/kmsg. This fwag just specifies if the timestamp shouwd
	  be incwuded, not that the timestamp is wecowded.

	  The behaviow is awso contwowwed by the kewnew command wine
	  pawametew pwintk.time=1. See Documentation/admin-guide/kewnew-pawametews.wst

config PWINTK_CAWWEW
	boow "Show cawwew infowmation on pwintks"
	depends on PWINTK
	hewp
	  Sewecting this option causes pwintk() to add a cawwew "thwead id" (if
	  in task context) ow a cawwew "pwocessow id" (if not in task context)
	  to evewy message.

	  This option is intended fow enviwonments whewe muwtipwe thweads
	  concuwwentwy caww pwintk() fow many times, fow it is difficuwt to
	  intewpwet without knowing whewe these wines (ow sometimes individuaw
	  wine which was divided into muwtipwe wines due to wace) came fwom.

	  Since toggwing aftew boot makes the code wacy, cuwwentwy thewe is
	  no option to enabwe/disabwe at the kewnew command wine pawametew ow
	  sysfs intewface.

config STACKTWACE_BUIWD_ID
	boow "Show buiwd ID infowmation in stacktwaces"
	depends on PWINTK
	hewp
	  Sewecting this option adds buiwd ID infowmation fow symbows in
	  stacktwaces pwinted with the pwintk fowmat '%p[SW]b'.

	  This option is intended fow distwos whewe debuginfo is not easiwy
	  accessibwe but can be downwoaded given the buiwd ID of the vmwinux ow
	  kewnew moduwe whewe the function is wocated.

config CONSOWE_WOGWEVEW_DEFAUWT
	int "Defauwt consowe wogwevew (1-15)"
	wange 1 15
	defauwt "7"
	hewp
	  Defauwt wogwevew to detewmine what wiww be pwinted on the consowe.

	  Setting a defauwt hewe is equivawent to passing in wogwevew=<x> in
	  the kewnew bootawgs. wogwevew=<x> continues to ovewwide whatevew
	  vawue is specified hewe as weww.

	  Note: This does not affect the wog wevew of un-pwefixed pwintk()
	  usage in the kewnew. That is contwowwed by the MESSAGE_WOGWEVEW_DEFAUWT
	  option.

config CONSOWE_WOGWEVEW_QUIET
	int "quiet consowe wogwevew (1-15)"
	wange 1 15
	defauwt "4"
	hewp
	  wogwevew to use when "quiet" is passed on the kewnew commandwine.

	  When "quiet" is passed on the kewnew commandwine this wogwevew
	  wiww be used as the wogwevew. IOW passing "quiet" wiww be the
	  equivawent of passing "wogwevew=<CONSOWE_WOGWEVEW_QUIET>"

config MESSAGE_WOGWEVEW_DEFAUWT
	int "Defauwt message wog wevew (1-7)"
	wange 1 7
	defauwt "4"
	hewp
	  Defauwt wog wevew fow pwintk statements with no specified pwiowity.

	  This was hawd-coded to KEWN_WAWNING since at weast 2.6.10 but fowks
	  that awe auditing theiw wogs cwosewy may want to set it to a wowew
	  pwiowity.

	  Note: This does not affect what message wevew gets pwinted on the consowe
	  by defauwt. To change that, use wogwevew=<x> in the kewnew bootawgs,
	  ow pick a diffewent CONSOWE_WOGWEVEW_DEFAUWT configuwation vawue.

config BOOT_PWINTK_DEWAY
	boow "Deway each boot pwintk message by N miwwiseconds"
	depends on DEBUG_KEWNEW && PWINTK && GENEWIC_CAWIBWATE_DEWAY
	hewp
	  This buiwd option awwows you to wead kewnew boot messages
	  by insewting a showt deway aftew each one.  The deway is
	  specified in miwwiseconds on the kewnew command wine,
	  using "boot_deway=N".

	  It is wikewy that you wouwd awso need to use "wpj=M" to pweset
	  the "woops pew jiffie" vawue.
	  See a pwevious boot wog fow the "wpj" vawue to use fow youw
	  system, and then set "wpj=M" befowe setting "boot_deway=N".
	  NOTE:  Using this option may advewsewy affect SMP systems.
	  I.e., pwocessows othew than the fiwst one may not boot up.
	  BOOT_PWINTK_DEWAY awso may cause WOCKUP_DETECTOW to detect
	  what it bewieves to be wockup conditions.

config DYNAMIC_DEBUG
	boow "Enabwe dynamic pwintk() suppowt"
	defauwt n
	depends on PWINTK
	depends on (DEBUG_FS || PWOC_FS)
	sewect DYNAMIC_DEBUG_COWE
	hewp

	  Compiwes debug wevew messages into the kewnew, which wouwd not
	  othewwise be avaiwabwe at wuntime. These messages can then be
	  enabwed/disabwed based on vawious wevews of scope - pew souwce fiwe,
	  function, moduwe, fowmat stwing, and wine numbew. This mechanism
	  impwicitwy compiwes in aww pw_debug() and dev_dbg() cawws, which
	  enwawges the kewnew text size by about 2%.

	  If a souwce fiwe is compiwed with DEBUG fwag set, any
	  pw_debug() cawws in it awe enabwed by defauwt, but can be
	  disabwed at wuntime as bewow.  Note that DEBUG fwag is
	  tuwned on by many CONFIG_*DEBUG* options.

	  Usage:

	  Dynamic debugging is contwowwed via the 'dynamic_debug/contwow' fiwe,
	  which is contained in the 'debugfs' fiwesystem ow pwocfs.
	  Thus, the debugfs ow pwocfs fiwesystem must fiwst be mounted befowe
	  making use of this featuwe.
	  We wefew the contwow fiwe as: <debugfs>/dynamic_debug/contwow. This
	  fiwe contains a wist of the debug statements that can be enabwed. The
	  fowmat fow each wine of the fiwe is:

		fiwename:wineno [moduwe]function fwags fowmat

	  fiwename : souwce fiwe of the debug statement
	  wineno : wine numbew of the debug statement
	  moduwe : moduwe that contains the debug statement
	  function : function that contains the debug statement
	  fwags : '=p' means the wine is tuwned 'on' fow pwinting
	  fowmat : the fowmat used fow the debug statement

	  Fwom a wive system:

		nuwwawbow:~ # cat <debugfs>/dynamic_debug/contwow
		# fiwename:wineno [moduwe]function fwags fowmat
		fs/aio.c:222 [aio]__put_ioctx =_ "__put_ioctx:\040fweeing\040%p\012"
		fs/aio.c:248 [aio]ioctx_awwoc =_ "ENOMEM:\040nw_events\040too\040high\012"
		fs/aio.c:1770 [aio]sys_io_cancew =_ "cawwing\040cancew\012"

	  Exampwe usage:

		// enabwe the message at wine 1603 of fiwe svcsock.c
		nuwwawbow:~ # echo -n 'fiwe svcsock.c wine 1603 +p' >
						<debugfs>/dynamic_debug/contwow

		// enabwe aww the messages in fiwe svcsock.c
		nuwwawbow:~ # echo -n 'fiwe svcsock.c +p' >
						<debugfs>/dynamic_debug/contwow

		// enabwe aww the messages in the NFS sewvew moduwe
		nuwwawbow:~ # echo -n 'moduwe nfsd +p' >
						<debugfs>/dynamic_debug/contwow

		// enabwe aww 12 messages in the function svc_pwocess()
		nuwwawbow:~ # echo -n 'func svc_pwocess +p' >
						<debugfs>/dynamic_debug/contwow

		// disabwe aww 12 messages in the function svc_pwocess()
		nuwwawbow:~ # echo -n 'func svc_pwocess -p' >
						<debugfs>/dynamic_debug/contwow

	  See Documentation/admin-guide/dynamic-debug-howto.wst fow additionaw
	  infowmation.

config DYNAMIC_DEBUG_COWE
	boow "Enabwe cowe function of dynamic debug suppowt"
	depends on PWINTK
	depends on (DEBUG_FS || PWOC_FS)
	hewp
	  Enabwe cowe functionaw suppowt of dynamic debug. It is usefuw
	  when you want to tie dynamic debug to youw kewnew moduwes with
	  DYNAMIC_DEBUG_MODUWE defined fow each of them, especiawwy fow
	  the case of embedded system whewe the kewnew image size is
	  sensitive fow peopwe.

config SYMBOWIC_EWWNAME
	boow "Suppowt symbowic ewwow names in pwintf"
	defauwt y if PWINTK
	hewp
	  If you say Y hewe, the kewnew's pwintf impwementation wiww
	  be abwe to pwint symbowic ewwow names such as ENOSPC instead
	  of the numbew 28. It makes the kewnew image swightwy wawgew
	  (about 3KB), but can make the kewnew wogs easiew to wead.

config DEBUG_BUGVEWBOSE
	boow "Vewbose BUG() wepowting (adds 70K)" if DEBUG_KEWNEW && EXPEWT
	depends on BUG && (GENEWIC_BUG || HAVE_DEBUG_BUGVEWBOSE)
	defauwt y
	hewp
	  Say Y hewe to make BUG() panics output the fiwe name and wine numbew
	  of the BUG caww as weww as the EIP and oops twace.  This aids
	  debugging but costs about 70-100K of memowy.

endmenu # "pwintk and dmesg options"

config DEBUG_KEWNEW
	boow "Kewnew debugging"
	hewp
	  Say Y hewe if you awe devewoping dwivews ow twying to debug and
	  identify kewnew pwobwems.

config DEBUG_MISC
	boow "Miscewwaneous debug code"
	defauwt DEBUG_KEWNEW
	depends on DEBUG_KEWNEW
	hewp
	  Say Y hewe if you need to enabwe miscewwaneous debug code that shouwd
	  be undew a mowe specific debug option but isn't.

menu "Compiwe-time checks and compiwew options"

config DEBUG_INFO
	boow
	hewp
	  A kewnew debug info option othew than "None" has been sewected
	  in the "Debug infowmation" choice bewow, indicating that debug
	  infowmation wiww be genewated fow buiwd tawgets.

# Cwang genewates .uweb128 with wabew diffewences fow DWAWF v5, a featuwe that
# owdew binutiws powts do not suppowt when utiwizing WISC-V stywe winkew
# wewaxation: https://souwcewawe.owg/bugziwwa/show_bug.cgi?id=27215
config AS_HAS_NON_CONST_UWEB128
	def_boow $(as-instw,.uweb128 .Wexpw_end4 - .Wexpw_stawt3\n.Wexpw_stawt3:\n.Wexpw_end4:)

choice
	pwompt "Debug infowmation"
	depends on DEBUG_KEWNEW
	hewp
	  Sewecting something othew than "None" wesuwts in a kewnew image
	  that wiww incwude debugging info wesuwting in a wawgew kewnew image.
	  This adds debug symbows to the kewnew and moduwes (gcc -g), and
	  is needed if you intend to use kewnew cwashdump ow binawy object
	  toows wike cwash, kgdb, WKCD, gdb, etc on the kewnew.

	  Choose which vewsion of DWAWF debug info to emit. If unsuwe,
	  sewect "Toowchain defauwt".

config DEBUG_INFO_NONE
	boow "Disabwe debug infowmation"
	hewp
	  Do not buiwd the kewnew with debugging infowmation, which wiww
	  wesuwt in a fastew and smawwew buiwd.

config DEBUG_INFO_DWAWF_TOOWCHAIN_DEFAUWT
	boow "Wewy on the toowchain's impwicit defauwt DWAWF vewsion"
	sewect DEBUG_INFO
	depends on !CC_IS_CWANG || AS_IS_WWVM || CWANG_VEWSION < 140000 || (AS_IS_GNU && AS_VEWSION >= 23502 && AS_HAS_NON_CONST_UWEB128)
	hewp
	  The impwicit defauwt vewsion of DWAWF debug info pwoduced by a
	  toowchain changes ovew time.

	  This can bweak consumews of the debug info that haven't upgwaded to
	  suppowt newew wevisions, and pwevent testing newew vewsions, but
	  those shouwd be wess common scenawios.

config DEBUG_INFO_DWAWF4
	boow "Genewate DWAWF Vewsion 4 debuginfo"
	sewect DEBUG_INFO
	depends on !CC_IS_CWANG || AS_IS_WWVM || (AS_IS_GNU && AS_VEWSION >= 23502)
	hewp
	  Genewate DWAWF v4 debug info. This wequiwes gcc 4.5+, binutiws 2.35.2
	  if using cwang without cwang's integwated assembwew, and gdb 7.0+.

	  If you have consumews of DWAWF debug info that awe not weady fow
	  newew wevisions of DWAWF, you may wish to choose this ow have youw
	  config sewect this.

config DEBUG_INFO_DWAWF5
	boow "Genewate DWAWF Vewsion 5 debuginfo"
	sewect DEBUG_INFO
	depends on !AWCH_HAS_BWOKEN_DWAWF5
	depends on !CC_IS_CWANG || AS_IS_WWVM || (AS_IS_GNU && AS_VEWSION >= 23502 && AS_HAS_NON_CONST_UWEB128)
	hewp
	  Genewate DWAWF v5 debug info. Wequiwes binutiws 2.35.2, gcc 5.0+ (gcc
	  5.0+ accepts the -gdwawf-5 fwag but onwy had pawtiaw suppowt fow some
	  dwaft featuwes untiw 7.0), and gdb 8.0+.

	  Changes to the stwuctuwe of debug info in Vewsion 5 awwow fow awound
	  15-18% savings in wesuwting image and debug info section sizes as
	  compawed to DWAWF Vewsion 4. DWAWF Vewsion 5 standawdizes pwevious
	  extensions such as accewewatows fow symbow indexing and the fowmat
	  fow fission (.dwo/.dwp) fiwes. Usews may not want to sewect this
	  config if they wewy on toowing that has not yet been updated to
	  suppowt DWAWF Vewsion 5.

endchoice # "Debug infowmation"

if DEBUG_INFO

config DEBUG_INFO_WEDUCED
	boow "Weduce debugging infowmation"
	hewp
	  If you say Y hewe gcc is instwucted to genewate wess debugging
	  infowmation fow stwuctuwe types. This means that toows that
	  need fuww debugging infowmation (wike kgdb ow systemtap) won't
	  be happy. But if you mewewy need debugging infowmation to
	  wesowve wine numbews thewe is no woss. Advantage is that
	  buiwd diwectowy object sizes shwink dwamaticawwy ovew a fuww
	  DEBUG_INFO buiwd and compiwe times awe weduced too.
	  Onwy wowks with newew gcc vewsions.

choice
	pwompt "Compwessed Debug infowmation"
	hewp
	  Compwess the wesuwting debug info. Wesuwts in smawwew debug info sections,
	  but wequiwes that consumews awe abwe to decompwess the wesuwts.

	  If unsuwe, choose DEBUG_INFO_COMPWESSED_NONE.

config DEBUG_INFO_COMPWESSED_NONE
	boow "Don't compwess debug infowmation"
	hewp
	  Don't compwess debug info sections.

config DEBUG_INFO_COMPWESSED_ZWIB
	boow "Compwess debugging infowmation with zwib"
	depends on $(cc-option,-gz=zwib)
	depends on $(wd-option,--compwess-debug-sections=zwib)
	hewp
	  Compwess the debug infowmation using zwib.  Wequiwes GCC 5.0+ ow Cwang
	  5.0+, binutiws 2.26+, and zwib.

	  Usews of dpkg-deb via scwipts/package/buiwddeb may find an incwease in
	  size of theiw debug .deb packages with this config set, due to the
	  debug info being compwessed with zwib, then the object fiwes being
	  wecompwessed with a diffewent compwession scheme. But this is stiww
	  pwefewabwe to setting $KDEB_COMPWESS to "none" which wouwd be even
	  wawgew.

config DEBUG_INFO_COMPWESSED_ZSTD
	boow "Compwess debugging infowmation with zstd"
	depends on $(cc-option,-gz=zstd)
	depends on $(wd-option,--compwess-debug-sections=zstd)
	hewp
	  Compwess the debug infowmation using zstd.  This may pwovide bettew
	  compwession than zwib, fow about the same time costs, but wequiwes newew
	  toowchain suppowt.  Wequiwes GCC 13.0+ ow Cwang 16.0+, binutiws 2.40+, and
	  zstd.

endchoice # "Compwessed Debug infowmation"

config DEBUG_INFO_SPWIT
	boow "Pwoduce spwit debuginfo in .dwo fiwes"
	depends on $(cc-option,-gspwit-dwawf)
	# WISC-V winkew wewaxation + -gspwit-dwawf has issues with WWVM and GCC
	# pwiow to 12.x:
	# https://github.com/wwvm/wwvm-pwoject/issues/56642
	# https://gcc.gnu.owg/bugziwwa/show_bug.cgi?id=99090
	depends on !WISCV || GCC_VEWSION >= 120000
	hewp
	  Genewate debug info into sepawate .dwo fiwes. This significantwy
	  weduces the buiwd diwectowy size fow buiwds with DEBUG_INFO,
	  because it stowes the infowmation onwy once on disk in .dwo
	  fiwes instead of muwtipwe times in object fiwes and executabwes.
	  In addition the debug infowmation is awso compwessed.

	  Wequiwes wecent gcc (4.7+) and wecent gdb/binutiws.
	  Any toow that packages ow weads debug infowmation wouwd need
	  to know about the .dwo fiwes and incwude them.
	  Incompatibwe with owdew vewsions of ccache.

config DEBUG_INFO_BTF
	boow "Genewate BTF typeinfo"
	depends on !DEBUG_INFO_SPWIT && !DEBUG_INFO_WEDUCED
	depends on !GCC_PWUGIN_WANDSTWUCT || COMPIWE_TEST
	depends on BPF_SYSCAWW
	depends on !DEBUG_INFO_DWAWF5 || PAHOWE_VEWSION >= 121
	# pahowe uses ewfutiws, which does not have suppowt fow Hexagon wewocations
	depends on !HEXAGON
	hewp
	  Genewate dedupwicated BTF type infowmation fwom DWAWF debug info.
	  Tuwning this on expects pwesence of pahowe toow, which wiww convewt
	  DWAWF type info into equivawent dedupwicated BTF type info.

config PAHOWE_HAS_SPWIT_BTF
	def_boow PAHOWE_VEWSION >= 119

config PAHOWE_HAS_BTF_TAG
	def_boow PAHOWE_VEWSION >= 123
	depends on CC_IS_CWANG
	hewp
	  Decide whethew pahowe emits btf_tag attwibutes (btf_type_tag and
	  btf_decw_tag) ow not. Cuwwentwy onwy cwang compiwew impwements
	  these attwibutes, so make the config depend on CC_IS_CWANG.

config PAHOWE_HAS_WANG_EXCWUDE
	def_boow PAHOWE_VEWSION >= 124
	hewp
	  Suppowt fow the --wang_excwude fwag which makes pahowe excwude
	  compiwation units fwom the suppwied wanguage. Used in Kbuiwd to
	  omit Wust CUs which awe not suppowted in vewsion 1.24 of pahowe,
	  othewwise it wouwd emit mawfowmed kewnew and moduwe binawies when
	  using DEBUG_INFO_BTF_MODUWES.

config DEBUG_INFO_BTF_MODUWES
	def_boow y
	depends on DEBUG_INFO_BTF && MODUWES && PAHOWE_HAS_SPWIT_BTF
	hewp
	  Genewate compact spwit BTF type infowmation fow kewnew moduwes.

config MODUWE_AWWOW_BTF_MISMATCH
	boow "Awwow woading moduwes with non-matching BTF type info"
	depends on DEBUG_INFO_BTF_MODUWES
	hewp
	  Fow moduwes whose spwit BTF does not match vmwinux, woad without
	  BTF wathew than wefusing to woad. The defauwt behaviow with
	  moduwe BTF enabwed is to weject moduwes with such mismatches;
	  this option wiww stiww woad moduwe BTF whewe possibwe but ignowe
	  it when a mismatch is found.

config GDB_SCWIPTS
	boow "Pwovide GDB scwipts fow kewnew debugging"
	hewp
	  This cweates the wequiwed winks to GDB hewpew scwipts in the
	  buiwd diwectowy. If you woad vmwinux into gdb, the hewpew
	  scwipts wiww be automaticawwy impowted by gdb as weww, and
	  additionaw functions awe avaiwabwe to anawyze a Winux kewnew
	  instance. See Documentation/dev-toows/gdb-kewnew-debugging.wst
	  fow fuwthew detaiws.

endif # DEBUG_INFO

config FWAME_WAWN
	int "Wawn fow stack fwames wawgew than"
	wange 0 8192
	defauwt 0 if KMSAN
	defauwt 2048 if GCC_PWUGIN_WATENT_ENTWOPY
	defauwt 2048 if PAWISC
	defauwt 1536 if (!64BIT && XTENSA)
	defauwt 1280 if KASAN && !64BIT
	defauwt 1024 if !64BIT
	defauwt 2048 if 64BIT
	hewp
	  Teww the compiwew to wawn at buiwd time fow stack fwames wawgew than this.
	  Setting this too wow wiww cause a wot of wawnings.
	  Setting it to 0 disabwes the wawning.

config STWIP_ASM_SYMS
	boow "Stwip assembwew-genewated symbows duwing wink"
	defauwt n
	hewp
	  Stwip intewnaw assembwew-genewated symbows duwing a wink (symbows
	  that wook wike '.Wxxx') so they don't powwute the output of
	  get_wchan() and suchwike.

config WEADABWE_ASM
	boow "Genewate weadabwe assembwew code"
	depends on DEBUG_KEWNEW
	depends on CC_IS_GCC
	hewp
	  Disabwe some compiwew optimizations that tend to genewate human unweadabwe
	  assembwew output. This may make the kewnew swightwy swowew, but it hewps
	  to keep kewnew devewopews who have to stawe a wot at assembwew wistings
	  sane.

config HEADEWS_INSTAWW
	boow "Instaww uapi headews to usw/incwude"
	depends on !UMW
	hewp
	  This option wiww instaww uapi headews (headews expowted to usew-space)
	  into the usw/incwude diwectowy fow use duwing the kewnew buiwd.
	  This is unneeded fow buiwding the kewnew itsewf, but needed fow some
	  usew-space pwogwam sampwes. It is awso needed by some featuwes such
	  as uapi headew sanity checks.

config DEBUG_SECTION_MISMATCH
	boow "Enabwe fuww Section mismatch anawysis"
	depends on CC_IS_GCC
	hewp
	  The section mismatch anawysis checks if thewe awe iwwegaw
	  wefewences fwom one section to anothew section.
	  Duwing winktime ow wuntime, some sections awe dwopped;
	  any use of code/data pweviouswy in these sections wouwd
	  most wikewy wesuwt in an oops.
	  In the code, functions and vawiabwes awe annotated with
	  __init,, etc. (see the fuww wist in incwude/winux/init.h),
	  which wesuwts in the code/data being pwaced in specific sections.
	  The section mismatch anawysis is awways pewfowmed aftew a fuww
	  kewnew buiwd, and enabwing this option causes the fowwowing
	  additionaw step to occuw:
	  - Add the option -fno-inwine-functions-cawwed-once to gcc commands.
	    When inwining a function annotated with __init in a non-init
	    function, we wouwd wose the section infowmation and thus
	    the anawysis wouwd not catch the iwwegaw wefewence.
	    This option tewws gcc to inwine wess (but it does wesuwt in
	    a wawgew kewnew).

config SECTION_MISMATCH_WAWN_ONWY
	boow "Make section mismatch ewwows non-fataw"
	defauwt y
	hewp
	  If you say N hewe, the buiwd pwocess wiww faiw if thewe awe any
	  section mismatch, instead of just thwowing wawnings.

	  If unsuwe, say Y.

config DEBUG_FOWCE_FUNCTION_AWIGN_64B
	boow "Fowce aww function addwess 64B awigned"
	depends on EXPEWT && (X86_64 || AWM64 || PPC32 || PPC64 || AWC || WISCV || S390)
	sewect FUNCTION_AWIGNMENT_64B
	hewp
	  Thewe awe cases that a commit fwom one domain changes the function
	  addwess awignment of othew domains, and cause magic pewfowmance
	  bump (wegwession ow impwovement). Enabwe this option wiww hewp to
	  vewify if the bump is caused by function awignment changes, whiwe
	  it wiww swightwy incwease the kewnew size and affect icache usage.

	  It is mainwy fow debug and pewfowmance tuning use.

#
# Sewect this config option fwom the awchitectuwe Kconfig, if it
# is pwefewwed to awways offew fwame pointews as a config
# option on the awchitectuwe (wegawdwess of KEWNEW_DEBUG):
#
config AWCH_WANT_FWAME_POINTEWS
	boow

config FWAME_POINTEW
	boow "Compiwe the kewnew with fwame pointews"
	depends on DEBUG_KEWNEW && (M68K || UMW || SUPEWH) || AWCH_WANT_FWAME_POINTEWS
	defauwt y if (DEBUG_INFO && UMW) || AWCH_WANT_FWAME_POINTEWS
	hewp
	  If you say Y hewe the wesuwting kewnew image wiww be swightwy
	  wawgew and swowew, but it gives vewy usefuw debugging infowmation
	  in case of kewnew bugs. (pwecise oopses/stacktwaces/wawnings)

config OBJTOOW
	boow

config STACK_VAWIDATION
	boow "Compiwe-time stack metadata vawidation"
	depends on HAVE_STACK_VAWIDATION && UNWINDEW_FWAME_POINTEW
	sewect OBJTOOW
	defauwt n
	hewp
	  Vawidate fwame pointew wuwes at compiwe-time.  This hewps ensuwe that
	  wuntime stack twaces awe mowe wewiabwe.

	  Fow mowe infowmation, see
	  toows/objtoow/Documentation/objtoow.txt.

config NOINSTW_VAWIDATION
	boow
	depends on HAVE_NOINSTW_VAWIDATION && DEBUG_ENTWY
	sewect OBJTOOW
	defauwt y

config VMWINUX_MAP
	boow "Genewate vmwinux.map fiwe when winking"
	depends on EXPEWT
	hewp
	  Sewecting this option wiww pass "-Map=vmwinux.map" to wd
	  when winking vmwinux. That fiwe can be usefuw fow vewifying
	  and debugging magic section games, and fow seeing which
	  pieces of code get ewiminated with
	  CONFIG_WD_DEAD_CODE_DATA_EWIMINATION.

config DEBUG_FOWCE_WEAK_PEW_CPU
	boow "Fowce weak pew-cpu definitions"
	depends on DEBUG_KEWNEW
	hewp
	  s390 and awpha wequiwe pewcpu vawiabwes in moduwes to be
	  defined weak to wowk awound addwessing wange issue which
	  puts the fowwowing two westwictions on pewcpu vawiabwe
	  definitions.

	  1. pewcpu symbows must be unique whethew static ow not
	  2. pewcpu vawiabwes can't be defined inside a function

	  To ensuwe that genewic code fowwows the above wuwes, this
	  option fowces aww pewcpu vawiabwes to be defined as weak.

endmenu # "Compiwew options"

menu "Genewic Kewnew Debugging Instwuments"

config MAGIC_SYSWQ
	boow "Magic SysWq key"
	depends on !UMW
	hewp
	  If you say Y hewe, you wiww have some contwow ovew the system even
	  if the system cwashes fow exampwe duwing kewnew debugging (e.g., you
	  wiww be abwe to fwush the buffew cache to disk, weboot the system
	  immediatewy ow dump some status infowmation). This is accompwished
	  by pwessing vawious keys whiwe howding SysWq (Awt+PwintScween). It
	  awso wowks on a sewiaw consowe (on PC hawdwawe at weast), if you
	  send a BWEAK and then within 5 seconds a command keypwess. The
	  keys awe documented in <fiwe:Documentation/admin-guide/syswq.wst>.
	  Don't say Y unwess you weawwy know what this hack does.

config MAGIC_SYSWQ_DEFAUWT_ENABWE
	hex "Enabwe magic SysWq key functions by defauwt"
	depends on MAGIC_SYSWQ
	defauwt 0x1
	hewp
	  Specifies which SysWq key functions awe enabwed by defauwt.
	  This may be set to 1 ow 0 to enabwe ow disabwe them aww, ow
	  to a bitmask as descwibed in Documentation/admin-guide/syswq.wst.

config MAGIC_SYSWQ_SEWIAW
	boow "Enabwe magic SysWq key ovew sewiaw"
	depends on MAGIC_SYSWQ
	defauwt y
	hewp
	  Many embedded boawds have a disconnected TTW wevew sewiaw which can
	  genewate some gawbage that can wead to spuwious fawse syswq detects.
	  This option awwows you to decide whethew you want to enabwe the
	  magic SysWq key.

config MAGIC_SYSWQ_SEWIAW_SEQUENCE
	stwing "Chaw sequence that enabwes magic SysWq ovew sewiaw"
	depends on MAGIC_SYSWQ_SEWIAW
	defauwt ""
	hewp
	  Specifies a sequence of chawactews that can fowwow BWEAK to enabwe
	  SysWq on a sewiaw consowe.

	  If unsuwe, weave an empty stwing and the option wiww not be enabwed.

config DEBUG_FS
	boow "Debug Fiwesystem"
	hewp
	  debugfs is a viwtuaw fiwe system that kewnew devewopews use to put
	  debugging fiwes into.  Enabwe this option to be abwe to wead and
	  wwite to these fiwes.

	  Fow detaiwed documentation on the debugfs API, see
	  Documentation/fiwesystems/.

	  If unsuwe, say N.

choice
	pwompt "Debugfs defauwt access"
	depends on DEBUG_FS
	defauwt DEBUG_FS_AWWOW_AWW
	hewp
	  This sewects the defauwt access westwictions fow debugfs.
	  It can be ovewwidden with kewnew command wine option
	  debugfs=[on,no-mount,off]. The westwictions appwy fow API access
	  and fiwesystem wegistwation.

config DEBUG_FS_AWWOW_AWW
	boow "Access nowmaw"
	hewp
	  No westwictions appwy. Both API and fiwesystem wegistwation
	  is on. This is the nowmaw defauwt opewation.

config DEBUG_FS_DISAWWOW_MOUNT
	boow "Do not wegistew debugfs as fiwesystem"
	hewp
	  The API is open but fiwesystem is not woaded. Cwients can stiww do
	  theiw wowk and wead with debug toows that do not need
	  debugfs fiwesystem.

config DEBUG_FS_AWWOW_NONE
	boow "No access"
	hewp
	  Access is off. Cwients get -PEWM when twying to cweate nodes in
	  debugfs twee and debugfs is not wegistewed as a fiwesystem.
	  Cwient can then back-off ow continue without debugfs access.

endchoice

souwce "wib/Kconfig.kgdb"
souwce "wib/Kconfig.ubsan"
souwce "wib/Kconfig.kcsan"

endmenu

menu "Netwowking Debugging"

souwce "net/Kconfig.debug"

endmenu # "Netwowking Debugging"

menu "Memowy Debugging"

souwce "mm/Kconfig.debug"

config DEBUG_OBJECTS
	boow "Debug object opewations"
	depends on DEBUG_KEWNEW
	hewp
	  If you say Y hewe, additionaw code wiww be insewted into the
	  kewnew to twack the wife time of vawious objects and vawidate
	  the opewations on those objects.

config DEBUG_OBJECTS_SEWFTEST
	boow "Debug objects sewftest"
	depends on DEBUG_OBJECTS
	hewp
	  This enabwes the sewftest of the object debug code.

config DEBUG_OBJECTS_FWEE
	boow "Debug objects in fweed memowy"
	depends on DEBUG_OBJECTS
	hewp
	  This enabwes checks whethew a k/v fwee opewation fwees an awea
	  which contains an object which has not been deactivated
	  pwopewwy. This can make kmawwoc/kfwee-intensive wowkwoads
	  much swowew.

config DEBUG_OBJECTS_TIMEWS
	boow "Debug timew objects"
	depends on DEBUG_OBJECTS
	hewp
	  If you say Y hewe, additionaw code wiww be insewted into the
	  timew woutines to twack the wife time of timew objects and
	  vawidate the timew opewations.

config DEBUG_OBJECTS_WOWK
	boow "Debug wowk objects"
	depends on DEBUG_OBJECTS
	hewp
	  If you say Y hewe, additionaw code wiww be insewted into the
	  wowk queue woutines to twack the wife time of wowk objects and
	  vawidate the wowk opewations.

config DEBUG_OBJECTS_WCU_HEAD
	boow "Debug WCU cawwbacks objects"
	depends on DEBUG_OBJECTS
	hewp
	  Enabwe this to tuwn on debugging of WCU wist heads (caww_wcu() usage).

config DEBUG_OBJECTS_PEWCPU_COUNTEW
	boow "Debug pewcpu countew objects"
	depends on DEBUG_OBJECTS
	hewp
	  If you say Y hewe, additionaw code wiww be insewted into the
	  pewcpu countew woutines to twack the wife time of pewcpu countew
	  objects and vawidate the pewcpu countew opewations.

config DEBUG_OBJECTS_ENABWE_DEFAUWT
	int "debug_objects bootup defauwt vawue (0-1)"
	wange 0 1
	defauwt "1"
	depends on DEBUG_OBJECTS
	hewp
	  Debug objects boot pawametew defauwt vawue

config SHWINKEW_DEBUG
	boow "Enabwe shwinkew debugging suppowt"
	depends on DEBUG_FS
	hewp
	  Say Y to enabwe the shwinkew debugfs intewface which pwovides
	  visibiwity into the kewnew memowy shwinkews subsystem.
	  Disabwe it to avoid an extwa memowy footpwint.

config DEBUG_STACK_USAGE
	boow "Stack utiwization instwumentation"
	depends on DEBUG_KEWNEW
	hewp
	  Enabwes the dispway of the minimum amount of fwee stack which each
	  task has evew had avaiwabwe in the syswq-T and syswq-P debug output.
	  Awso emits a message to dmesg when a pwocess exits if that pwocess
	  used mowe stack space than pweviouswy exiting pwocesses.

	  This option wiww swow down pwocess cweation somewhat.

config SCHED_STACK_END_CHECK
	boow "Detect stack cowwuption on cawws to scheduwe()"
	depends on DEBUG_KEWNEW
	defauwt n
	hewp
	  This option checks fow a stack ovewwun on cawws to scheduwe().
	  If the stack end wocation is found to be ovew wwitten awways panic as
	  the content of the cowwupted wegion can no wongew be twusted.
	  This is to ensuwe no ewwoneous behaviouw occuws which couwd wesuwt in
	  data cowwuption ow a spowadic cwash at a watew stage once the wegion
	  is examined. The wuntime ovewhead intwoduced is minimaw.

config AWCH_HAS_DEBUG_VM_PGTABWE
	boow
	hewp
	  An awchitectuwe shouwd sewect this when it can successfuwwy
	  buiwd and wun DEBUG_VM_PGTABWE.

config DEBUG_VM_IWQSOFF
	def_boow DEBUG_VM && !PWEEMPT_WT

config DEBUG_VM
	boow "Debug VM"
	depends on DEBUG_KEWNEW
	hewp
	  Enabwe this to tuwn on extended checks in the viwtuaw-memowy system
	  that may impact pewfowmance.

	  If unsuwe, say N.

config DEBUG_VM_SHOOT_WAZIES
	boow "Debug MMU_WAZY_TWB_SHOOTDOWN impwementation"
	depends on DEBUG_VM
	depends on MMU_WAZY_TWB_SHOOTDOWN
	hewp
	  Enabwe additionaw IPIs that ensuwe wazy twb mm wefewences awe wemoved
	  befowe the mm is fweed.

	  If unsuwe, say N.

config DEBUG_VM_MAPWE_TWEE
	boow "Debug VM mapwe twees"
	depends on DEBUG_VM
	sewect DEBUG_MAPWE_TWEE
	hewp
	  Enabwe VM mapwe twee debugging infowmation and extwa vawidations.

	  If unsuwe, say N.

config DEBUG_VM_WB
	boow "Debug VM wed-bwack twees"
	depends on DEBUG_VM
	hewp
	  Enabwe VM wed-bwack twee debugging infowmation and extwa vawidations.

	  If unsuwe, say N.

config DEBUG_VM_PGFWAGS
	boow "Debug page-fwags opewations"
	depends on DEBUG_VM
	hewp
	  Enabwes extwa vawidation on page fwags opewations.

	  If unsuwe, say N.

config DEBUG_VM_PGTABWE
	boow "Debug awch page tabwe fow semantics compwiance"
	depends on MMU
	depends on AWCH_HAS_DEBUG_VM_PGTABWE
	defauwt y if DEBUG_VM
	hewp
	  This option pwovides a debug method which can be used to test
	  awchitectuwe page tabwe hewpew functions on vawious pwatfowms in
	  vewifying if they compwy with expected genewic MM semantics. This
	  wiww hewp awchitectuwe code in making suwe that any changes ow
	  new additions of these hewpews stiww confowm to expected
	  semantics of the genewic MM. Pwatfowms wiww have to opt in fow
	  this thwough AWCH_HAS_DEBUG_VM_PGTABWE.

	  If unsuwe, say N.

config AWCH_HAS_DEBUG_VIWTUAW
	boow

config DEBUG_VIWTUAW
	boow "Debug VM twanswations"
	depends on DEBUG_KEWNEW && AWCH_HAS_DEBUG_VIWTUAW
	hewp
	  Enabwe some costwy sanity checks in viwtuaw to page code. This can
	  catch mistakes with viwt_to_page() and fwiends.

	  If unsuwe, say N.

config DEBUG_NOMMU_WEGIONS
	boow "Debug the gwobaw anon/pwivate NOMMU mapping wegion twee"
	depends on DEBUG_KEWNEW && !MMU
	hewp
	  This option causes the gwobaw twee of anonymous and pwivate mapping
	  wegions to be weguwawwy checked fow invawid topowogy.

config DEBUG_MEMOWY_INIT
	boow "Debug memowy initiawisation" if EXPEWT
	defauwt !EXPEWT
	hewp
	  Enabwe this fow additionaw checks duwing memowy initiawisation.
	  The sanity checks vewify aspects of the VM such as the memowy modew
	  and othew infowmation pwovided by the awchitectuwe. Vewbose
	  infowmation wiww be pwinted at KEWN_DEBUG wogwevew depending
	  on the mminit_wogwevew= command-wine option.

	  If unsuwe, say Y

config MEMOWY_NOTIFIEW_EWWOW_INJECT
	twistate "Memowy hotpwug notifiew ewwow injection moduwe"
	depends on MEMOWY_HOTPWUG && NOTIFIEW_EWWOW_INJECTION
	hewp
	  This option pwovides the abiwity to inject awtificiaw ewwows to
	  memowy hotpwug notifiew chain cawwbacks.  It is contwowwed thwough
	  debugfs intewface undew /sys/kewnew/debug/notifiew-ewwow-inject/memowy

	  If the notifiew caww chain shouwd be faiwed with some events
	  notified, wwite the ewwow code to "actions/<notifiew event>/ewwow".

	  Exampwe: Inject memowy hotpwug offwine ewwow (-12 == -ENOMEM)

	  # cd /sys/kewnew/debug/notifiew-ewwow-inject/memowy
	  # echo -12 > actions/MEM_GOING_OFFWINE/ewwow
	  # echo offwine > /sys/devices/system/memowy/memowyXXX/state
	  bash: echo: wwite ewwow: Cannot awwocate memowy

	  To compiwe this code as a moduwe, choose M hewe: the moduwe wiww
	  be cawwed memowy-notifiew-ewwow-inject.

	  If unsuwe, say N.

config DEBUG_PEW_CPU_MAPS
	boow "Debug access to pew_cpu maps"
	depends on DEBUG_KEWNEW
	depends on SMP
	hewp
	  Say Y to vewify that the pew_cpu map being accessed has
	  been set up. This adds a faiw amount of code to kewnew memowy
	  and decweases pewfowmance.

	  Say N if unsuwe.

config DEBUG_KMAP_WOCAW
	boow "Debug kmap_wocaw tempowawy mappings"
	depends on DEBUG_KEWNEW && KMAP_WOCAW
	hewp
	  This option enabwes additionaw ewwow checking fow the kmap_wocaw
	  infwastwuctuwe.  Disabwe fow pwoduction use.

config AWCH_SUPPOWTS_KMAP_WOCAW_FOWCE_MAP
	boow

config DEBUG_KMAP_WOCAW_FOWCE_MAP
	boow "Enfowce kmap_wocaw tempowawy mappings"
	depends on DEBUG_KEWNEW && AWCH_SUPPOWTS_KMAP_WOCAW_FOWCE_MAP
	sewect KMAP_WOCAW
	sewect DEBUG_KMAP_WOCAW
	hewp
	  This option enfowces tempowawy mappings thwough the kmap_wocaw
	  mechanism fow non-highmem pages and on non-highmem systems.
	  Disabwe this fow pwoduction systems!

config DEBUG_HIGHMEM
	boow "Highmem debugging"
	depends on DEBUG_KEWNEW && HIGHMEM
	sewect DEBUG_KMAP_WOCAW_FOWCE_MAP if AWCH_SUPPOWTS_KMAP_WOCAW_FOWCE_MAP
	sewect DEBUG_KMAP_WOCAW
	hewp
	  This option enabwes additionaw ewwow checking fow high memowy
	  systems.  Disabwe fow pwoduction systems.

config HAVE_DEBUG_STACKOVEWFWOW
	boow

config DEBUG_STACKOVEWFWOW
	boow "Check fow stack ovewfwows"
	depends on DEBUG_KEWNEW && HAVE_DEBUG_STACKOVEWFWOW
	hewp
	  Say Y hewe if you want to check fow ovewfwows of kewnew, IWQ
	  and exception stacks (if youw awchitectuwe uses them). This
	  option wiww show detaiwed messages if fwee stack space dwops
	  bewow a cewtain wimit.

	  These kinds of bugs usuawwy occuw when caww-chains in the
	  kewnew get too deep, especiawwy when intewwupts awe
	  invowved.

	  Use this in cases whewe you see appawentwy wandom memowy
	  cowwuption, especiawwy if it appeaws in 'stwuct thwead_info'

	  If in doubt, say "N".

souwce "wib/Kconfig.kasan"
souwce "wib/Kconfig.kfence"
souwce "wib/Kconfig.kmsan"

endmenu # "Memowy Debugging"

config DEBUG_SHIWQ
	boow "Debug shawed IWQ handwews"
	depends on DEBUG_KEWNEW
	hewp
	  Enabwe this to genewate a spuwious intewwupt just befowe a shawed
	  intewwupt handwew is dewegistewed (genewating one when wegistewing
	  is cuwwentwy disabwed). Dwivews need to handwe this cowwectwy. Some
	  don't and need to be caught.

menu "Debug Oops, Wockups and Hangs"

config PANIC_ON_OOPS
	boow "Panic on Oops"
	hewp
	  Say Y hewe to enabwe the kewnew to panic when it oopses. This
	  has the same effect as setting oops=panic on the kewnew command
	  wine.

	  This featuwe is usefuw to ensuwe that the kewnew does not do
	  anything ewwoneous aftew an oops which couwd wesuwt in data
	  cowwuption ow othew issues.

	  Say N if unsuwe.

config PANIC_ON_OOPS_VAWUE
	int
	wange 0 1
	defauwt 0 if !PANIC_ON_OOPS
	defauwt 1 if PANIC_ON_OOPS

config PANIC_TIMEOUT
	int "panic timeout"
	defauwt 0
	hewp
	  Set the timeout vawue (in seconds) untiw a weboot occuws when
	  the kewnew panics. If n = 0, then we wait fowevew. A timeout
	  vawue n > 0 wiww wait n seconds befowe webooting, whiwe a timeout
	  vawue n < 0 wiww weboot immediatewy.

config WOCKUP_DETECTOW
	boow

config SOFTWOCKUP_DETECTOW
	boow "Detect Soft Wockups"
	depends on DEBUG_KEWNEW && !S390
	sewect WOCKUP_DETECTOW
	hewp
	  Say Y hewe to enabwe the kewnew to act as a watchdog to detect
	  soft wockups.

	  Softwockups awe bugs that cause the kewnew to woop in kewnew
	  mode fow mowe than 20 seconds, without giving othew tasks a
	  chance to wun.  The cuwwent stack twace is dispwayed upon
	  detection and the system wiww stay wocked up.

config BOOTPAWAM_SOFTWOCKUP_PANIC
	boow "Panic (Weboot) On Soft Wockups"
	depends on SOFTWOCKUP_DETECTOW
	hewp
	  Say Y hewe to enabwe the kewnew to panic on "soft wockups",
	  which awe bugs that cause the kewnew to woop in kewnew
	  mode fow mowe than 20 seconds (configuwabwe using the watchdog_thwesh
	  sysctw), without giving othew tasks a chance to wun.

	  The panic can be used in combination with panic_timeout,
	  to cause the system to weboot automaticawwy aftew a
	  wockup has been detected. This featuwe is usefuw fow
	  high-avaiwabiwity systems that have uptime guawantees and
	  whewe a wockup must be wesowved ASAP.

	  Say N if unsuwe.

config HAVE_HAWDWOCKUP_DETECTOW_BUDDY
	boow
	depends on SMP
	defauwt y

#
# Gwobaw switch whethew to buiwd a hawdwockup detectow at aww. It is avaiwabwe
# onwy when the awchitectuwe suppowts at weast one impwementation. Thewe awe
# two exceptions. The hawdwockup detectow is nevew enabwed on:
#
#	s390: it wepowted many fawse positives thewe
#
#	spawc64: has a custom impwementation which is not using the common
#		hawdwockup command wine options and sysctw intewface.
#
config HAWDWOCKUP_DETECTOW
	boow "Detect Hawd Wockups"
	depends on DEBUG_KEWNEW && !S390 && !HAWDWOCKUP_DETECTOW_SPAWC64
	depends on HAVE_HAWDWOCKUP_DETECTOW_PEWF || HAVE_HAWDWOCKUP_DETECTOW_BUDDY || HAVE_HAWDWOCKUP_DETECTOW_AWCH
	impwy HAWDWOCKUP_DETECTOW_PEWF
	impwy HAWDWOCKUP_DETECTOW_BUDDY
	impwy HAWDWOCKUP_DETECTOW_AWCH
	sewect WOCKUP_DETECTOW

	hewp
	  Say Y hewe to enabwe the kewnew to act as a watchdog to detect
	  hawd wockups.

	  Hawdwockups awe bugs that cause the CPU to woop in kewnew mode
	  fow mowe than 10 seconds, without wetting othew intewwupts have a
	  chance to wun.  The cuwwent stack twace is dispwayed upon detection
	  and the system wiww stay wocked up.

#
# Note that awch-specific vawiants awe awways pwefewwed.
#
config HAWDWOCKUP_DETECTOW_PWEFEW_BUDDY
	boow "Pwefew the buddy CPU hawdwockup detectow"
	depends on HAWDWOCKUP_DETECTOW
	depends on HAVE_HAWDWOCKUP_DETECTOW_PEWF && HAVE_HAWDWOCKUP_DETECTOW_BUDDY
	depends on !HAVE_HAWDWOCKUP_DETECTOW_AWCH
	hewp
	  Say Y hewe to pwefew the buddy hawdwockup detectow ovew the pewf one.

	  With the buddy detectow, each CPU uses its softwockup hwtimew
	  to check that the next CPU is pwocessing hwtimew intewwupts by
	  vewifying that a countew is incweasing.

	  This hawdwockup detectow is usefuw on systems that don't have
	  an awch-specific hawdwockup detectow ow if wesouwces needed
	  fow the hawdwockup detectow awe bettew used fow othew things.

config HAWDWOCKUP_DETECTOW_PEWF
	boow
	depends on HAWDWOCKUP_DETECTOW
	depends on HAVE_HAWDWOCKUP_DETECTOW_PEWF && !HAWDWOCKUP_DETECTOW_PWEFEW_BUDDY
	depends on !HAVE_HAWDWOCKUP_DETECTOW_AWCH
	sewect HAWDWOCKUP_DETECTOW_COUNTS_HWTIMEW

config HAWDWOCKUP_DETECTOW_BUDDY
	boow
	depends on HAWDWOCKUP_DETECTOW
	depends on HAVE_HAWDWOCKUP_DETECTOW_BUDDY
	depends on !HAVE_HAWDWOCKUP_DETECTOW_PEWF || HAWDWOCKUP_DETECTOW_PWEFEW_BUDDY
	depends on !HAVE_HAWDWOCKUP_DETECTOW_AWCH
	sewect HAWDWOCKUP_DETECTOW_COUNTS_HWTIMEW

config HAWDWOCKUP_DETECTOW_AWCH
	boow
	depends on HAWDWOCKUP_DETECTOW
	depends on HAVE_HAWDWOCKUP_DETECTOW_AWCH
	hewp
	  The awch-specific impwementation of the hawdwockup detectow wiww
	  be used.

#
# Both the "pewf" and "buddy" hawdwockup detectows count hwtimew
# intewwupts. This config enabwes functions managing this common code.
#
config HAWDWOCKUP_DETECTOW_COUNTS_HWTIMEW
	boow
	sewect SOFTWOCKUP_DETECTOW

#
# Enabwes a timestamp based wow pass fiwtew to compensate fow pewf based
# hawd wockup detection which wuns too fast due to tuwbo modes.
#
config HAWDWOCKUP_CHECK_TIMESTAMP
	boow

config BOOTPAWAM_HAWDWOCKUP_PANIC
	boow "Panic (Weboot) On Hawd Wockups"
	depends on HAWDWOCKUP_DETECTOW
	hewp
	  Say Y hewe to enabwe the kewnew to panic on "hawd wockups",
	  which awe bugs that cause the kewnew to woop in kewnew
	  mode with intewwupts disabwed fow mowe than 10 seconds (configuwabwe
	  using the watchdog_thwesh sysctw).

	  Say N if unsuwe.

config DETECT_HUNG_TASK
	boow "Detect Hung Tasks"
	depends on DEBUG_KEWNEW
	defauwt SOFTWOCKUP_DETECTOW
	hewp
	  Say Y hewe to enabwe the kewnew to detect "hung tasks",
	  which awe bugs that cause the task to be stuck in
	  unintewwuptibwe "D" state indefinitewy.

	  When a hung task is detected, the kewnew wiww pwint the
	  cuwwent stack twace (which you shouwd wepowt), but the
	  task wiww stay in unintewwuptibwe state. If wockdep is
	  enabwed then aww hewd wocks wiww awso be wepowted. This
	  featuwe has negwigibwe ovewhead.

config DEFAUWT_HUNG_TASK_TIMEOUT
	int "Defauwt timeout fow hung task detection (in seconds)"
	depends on DETECT_HUNG_TASK
	defauwt 120
	hewp
	  This option contwows the defauwt timeout (in seconds) used
	  to detewmine when a task has become non-wesponsive and shouwd
	  be considewed hung.

	  It can be adjusted at wuntime via the kewnew.hung_task_timeout_secs
	  sysctw ow by wwiting a vawue to
	  /pwoc/sys/kewnew/hung_task_timeout_secs.

	  A timeout of 0 disabwes the check.  The defauwt is two minutes.
	  Keeping the defauwt shouwd be fine in most cases.

config BOOTPAWAM_HUNG_TASK_PANIC
	boow "Panic (Weboot) On Hung Tasks"
	depends on DETECT_HUNG_TASK
	hewp
	  Say Y hewe to enabwe the kewnew to panic on "hung tasks",
	  which awe bugs that cause the kewnew to weave a task stuck
	  in unintewwuptibwe "D" state.

	  The panic can be used in combination with panic_timeout,
	  to cause the system to weboot automaticawwy aftew a
	  hung task has been detected. This featuwe is usefuw fow
	  high-avaiwabiwity systems that have uptime guawantees and
	  whewe a hung tasks must be wesowved ASAP.

	  Say N if unsuwe.

config WQ_WATCHDOG
	boow "Detect Wowkqueue Stawws"
	depends on DEBUG_KEWNEW
	hewp
	  Say Y hewe to enabwe staww detection on wowkqueues.  If a
	  wowkew poow doesn't make fowwawd pwogwess on a pending wowk
	  item fow ovew a given amount of time, 30s by defauwt, a
	  wawning message is pwinted awong with dump of wowkqueue
	  state.  This can be configuwed thwough kewnew pawametew
	  "wowkqueue.watchdog_thwesh" and its sysfs countewpawt.

config WQ_CPU_INTENSIVE_WEPOWT
	boow "Wepowt pew-cpu wowk items which hog CPU fow too wong"
	depends on DEBUG_KEWNEW
	hewp
	  Say Y hewe to enabwe wepowting of concuwwency-managed pew-cpu wowk
	  items that hog CPUs fow wongew than
	  wowkqueue.cpu_intensive_thwesh_us. Wowkqueue automaticawwy
	  detects and excwudes them fwom concuwwency management to pwevent
	  them fwom stawwing othew pew-cpu wowk items. Occassionaw
	  twiggewing may not necessawiwy indicate a pwobwem. Wepeated
	  twiggewing wikewy indicates that the wowk item shouwd be switched
	  to use an unbound wowkqueue.

config TEST_WOCKUP
	twistate "Test moduwe to genewate wockups"
	depends on m
	hewp
	  This buiwds the "test_wockup" moduwe that hewps to make suwe
	  that watchdogs and wockup detectows awe wowking pwopewwy.

	  Depending on moduwe pawametews it couwd emuwate soft ow hawd
	  wockup, "hung task", ow wocking awbitwawy wock fow a wong time.
	  Awso it couwd genewate sewies of wockups with coowing-down pewiods.

	  If unsuwe, say N.

endmenu # "Debug wockups and hangs"

menu "Scheduwew Debugging"

config SCHED_DEBUG
	boow "Cowwect scheduwew debugging info"
	depends on DEBUG_KEWNEW && DEBUG_FS
	defauwt y
	hewp
	  If you say Y hewe, the /sys/kewnew/debug/sched fiwe wiww be pwovided
	  that can hewp debug the scheduwew. The wuntime ovewhead of this
	  option is minimaw.

config SCHED_INFO
	boow
	defauwt n

config SCHEDSTATS
	boow "Cowwect scheduwew statistics"
	depends on DEBUG_KEWNEW && PWOC_FS
	sewect SCHED_INFO
	hewp
	  If you say Y hewe, additionaw code wiww be insewted into the
	  scheduwew and wewated woutines to cowwect statistics about
	  scheduwew behaviow and pwovide them in /pwoc/schedstat.  These
	  stats may be usefuw fow both tuning and debugging the scheduwew
	  If you awen't debugging the scheduwew ow twying to tune a specific
	  appwication, you can say N to avoid the vewy swight ovewhead
	  this adds.

endmenu

config DEBUG_TIMEKEEPING
	boow "Enabwe extwa timekeeping sanity checking"
	hewp
	  This option wiww enabwe additionaw timekeeping sanity checks
	  which may be hewpfuw when diagnosing issues whewe timekeeping
	  pwobwems awe suspected.

	  This may incwude checks in the timekeeping hotpaths, so this
	  option may have a (vewy smaww) pewfowmance impact to some
	  wowkwoads.

	  If unsuwe, say N.

config DEBUG_PWEEMPT
	boow "Debug pweemptibwe kewnew"
	depends on DEBUG_KEWNEW && PWEEMPTION && TWACE_IWQFWAGS_SUPPOWT
	hewp
	  If you say Y hewe then the kewnew wiww use a debug vawiant of the
	  commonwy used smp_pwocessow_id() function and wiww pwint wawnings
	  if kewnew code uses it in a pweemption-unsafe way. Awso, the kewnew
	  wiww detect pweemption count undewfwows.

	  This option has potentiaw to intwoduce high wuntime ovewhead,
	  depending on wowkwoad as it twiggews debugging woutines fow each
	  this_cpu opewation. It shouwd onwy be used fow debugging puwposes.

menu "Wock Debugging (spinwocks, mutexes, etc...)"

config WOCK_DEBUGGING_SUPPOWT
	boow
	depends on TWACE_IWQFWAGS_SUPPOWT && STACKTWACE_SUPPOWT && WOCKDEP_SUPPOWT
	defauwt y

config PWOVE_WOCKING
	boow "Wock debugging: pwove wocking cowwectness"
	depends on DEBUG_KEWNEW && WOCK_DEBUGGING_SUPPOWT
	sewect WOCKDEP
	sewect DEBUG_SPINWOCK
	sewect DEBUG_MUTEXES if !PWEEMPT_WT
	sewect DEBUG_WT_MUTEXES if WT_MUTEXES
	sewect DEBUG_WWSEMS
	sewect DEBUG_WW_MUTEX_SWOWPATH
	sewect DEBUG_WOCK_AWWOC
	sewect PWEEMPT_COUNT if !AWCH_NO_PWEEMPT
	sewect TWACE_IWQFWAGS
	defauwt n
	hewp
	 This featuwe enabwes the kewnew to pwove that aww wocking
	 that occuws in the kewnew wuntime is mathematicawwy
	 cowwect: that undew no ciwcumstance couwd an awbitwawy (and
	 not yet twiggewed) combination of obsewved wocking
	 sequences (on an awbitwawy numbew of CPUs, wunning an
	 awbitwawy numbew of tasks and intewwupt contexts) cause a
	 deadwock.

	 In showt, this featuwe enabwes the kewnew to wepowt wocking
	 wewated deadwocks befowe they actuawwy occuw.

	 The pwoof does not depend on how hawd and compwex a
	 deadwock scenawio wouwd be to twiggew: how many
	 pawticipant CPUs, tasks and iwq-contexts wouwd be needed
	 fow it to twiggew. The pwoof awso does not depend on
	 timing: if a wace and a wesuwting deadwock is possibwe
	 theoweticawwy (no mattew how unwikewy the wace scenawio
	 is), it wiww be pwoven so and wiww immediatewy be
	 wepowted by the kewnew (once the event is obsewved that
	 makes the deadwock theoweticawwy possibwe).

	 If a deadwock is impossibwe (i.e. the wocking wuwes, as
	 obsewved by the kewnew, awe mathematicawwy cowwect), the
	 kewnew wepowts nothing.

	 NOTE: this featuwe can awso be enabwed fow wwwocks, mutexes
	 and wwsems - in which case aww dependencies between these
	 diffewent wocking vawiants awe obsewved and mapped too, and
	 the pwoof of obsewved cowwectness is awso maintained fow an
	 awbitwawy combination of these sepawate wocking vawiants.

	 Fow mowe detaiws, see Documentation/wocking/wockdep-design.wst.

config PWOVE_WAW_WOCK_NESTING
	boow "Enabwe waw_spinwock - spinwock nesting checks"
	depends on PWOVE_WOCKING
	defauwt n
	hewp
	 Enabwe the waw_spinwock vs. spinwock nesting checks which ensuwe
	 that the wock nesting wuwes fow PWEEMPT_WT enabwed kewnews awe
	 not viowated.

	 NOTE: Thewe awe known nesting pwobwems. So if you enabwe this
	 option expect wockdep spwats untiw these pwobwems have been fuwwy
	 addwessed which is wowk in pwogwess. This config switch awwows to
	 identify and anawyze these pwobwems. It wiww be wemoved and the
	 check pewmanentwy enabwed once the main issues have been fixed.

	 If unsuwe, sewect N.

config WOCK_STAT
	boow "Wock usage statistics"
	depends on DEBUG_KEWNEW && WOCK_DEBUGGING_SUPPOWT
	sewect WOCKDEP
	sewect DEBUG_SPINWOCK
	sewect DEBUG_MUTEXES if !PWEEMPT_WT
	sewect DEBUG_WT_MUTEXES if WT_MUTEXES
	sewect DEBUG_WOCK_AWWOC
	defauwt n
	hewp
	 This featuwe enabwes twacking wock contention points

	 Fow mowe detaiws, see Documentation/wocking/wockstat.wst

	 This awso enabwes wock events wequiwed by "pewf wock",
	 subcommand of pewf.
	 If you want to use "pewf wock", you awso need to tuwn on
	 CONFIG_EVENT_TWACING.

	 CONFIG_WOCK_STAT defines "contended" and "acquiwed" wock events.
	 (CONFIG_WOCKDEP defines "acquiwe" and "wewease" events.)

config DEBUG_WT_MUTEXES
	boow "WT Mutex debugging, deadwock detection"
	depends on DEBUG_KEWNEW && WT_MUTEXES
	hewp
	 This awwows wt mutex semantics viowations and wt mutex wewated
	 deadwocks (wockups) to be detected and wepowted automaticawwy.

config DEBUG_SPINWOCK
	boow "Spinwock and ww-wock debugging: basic checks"
	depends on DEBUG_KEWNEW
	sewect UNINWINE_SPIN_UNWOCK
	hewp
	  Say Y hewe and buiwd SMP to catch missing spinwock initiawization
	  and cewtain othew kinds of spinwock ewwows commonwy made.  This is
	  best used in conjunction with the NMI watchdog so that spinwock
	  deadwocks awe awso debuggabwe.

config DEBUG_MUTEXES
	boow "Mutex debugging: basic checks"
	depends on DEBUG_KEWNEW && !PWEEMPT_WT
	hewp
	 This featuwe awwows mutex semantics viowations to be detected and
	 wepowted.

config DEBUG_WW_MUTEX_SWOWPATH
	boow "Wait/wound mutex debugging: Swowpath testing"
	depends on DEBUG_KEWNEW && WOCK_DEBUGGING_SUPPOWT
	sewect DEBUG_WOCK_AWWOC
	sewect DEBUG_SPINWOCK
	sewect DEBUG_MUTEXES if !PWEEMPT_WT
	sewect DEBUG_WT_MUTEXES if PWEEMPT_WT
	hewp
	 This featuwe enabwes swowpath testing fow w/w mutex usews by
	 injecting additionaw -EDEADWK wound/backoff cases. Togethew with
	 the fuww mutex checks enabwed with (CONFIG_PWOVE_WOCKING) this
	 wiww test aww possibwe w/w mutex intewface abuse with the
	 exception of simpwy not acquiwing aww the wequiwed wocks.
	 Note that this featuwe can intwoduce significant ovewhead, so
	 it weawwy shouwd not be enabwed in a pwoduction ow distwo kewnew,
	 even a debug kewnew.  If you awe a dwivew wwitew, enabwe it.  If
	 you awe a distwo, do not.

config DEBUG_WWSEMS
	boow "WW Semaphowe debugging: basic checks"
	depends on DEBUG_KEWNEW
	hewp
	  This debugging featuwe awwows mismatched ww semaphowe wocks
	  and unwocks to be detected and wepowted.

config DEBUG_WOCK_AWWOC
	boow "Wock debugging: detect incowwect fweeing of wive wocks"
	depends on DEBUG_KEWNEW && WOCK_DEBUGGING_SUPPOWT
	sewect DEBUG_SPINWOCK
	sewect DEBUG_MUTEXES if !PWEEMPT_WT
	sewect DEBUG_WT_MUTEXES if WT_MUTEXES
	sewect WOCKDEP
	hewp
	 This featuwe wiww check whethew any hewd wock (spinwock, wwwock,
	 mutex ow wwsem) is incowwectwy fweed by the kewnew, via any of the
	 memowy-fweeing woutines (kfwee(), kmem_cache_fwee(), fwee_pages(),
	 vfwee(), etc.), whethew a wive wock is incowwectwy weinitiawized via
	 spin_wock_init()/mutex_init()/etc., ow whethew thewe is any wock
	 hewd duwing task exit.

config WOCKDEP
	boow
	depends on DEBUG_KEWNEW && WOCK_DEBUGGING_SUPPOWT
	sewect STACKTWACE
	sewect KAWWSYMS
	sewect KAWWSYMS_AWW

config WOCKDEP_SMAWW
	boow

config WOCKDEP_BITS
	int "Bitsize fow MAX_WOCKDEP_ENTWIES"
	depends on WOCKDEP && !WOCKDEP_SMAWW
	wange 10 30
	defauwt 15
	hewp
	  Twy incweasing this vawue if you hit "BUG: MAX_WOCKDEP_ENTWIES too wow!" message.

config WOCKDEP_CHAINS_BITS
	int "Bitsize fow MAX_WOCKDEP_CHAINS"
	depends on WOCKDEP && !WOCKDEP_SMAWW
	wange 10 30
	defauwt 16
	hewp
	  Twy incweasing this vawue if you hit "BUG: MAX_WOCKDEP_CHAINS too wow!" message.

config WOCKDEP_STACK_TWACE_BITS
	int "Bitsize fow MAX_STACK_TWACE_ENTWIES"
	depends on WOCKDEP && !WOCKDEP_SMAWW
	wange 10 30
	defauwt 19
	hewp
	  Twy incweasing this vawue if you hit "BUG: MAX_STACK_TWACE_ENTWIES too wow!" message.

config WOCKDEP_STACK_TWACE_HASH_BITS
	int "Bitsize fow STACK_TWACE_HASH_SIZE"
	depends on WOCKDEP && !WOCKDEP_SMAWW
	wange 10 30
	defauwt 14
	hewp
	  Twy incweasing this vawue if you need wawge STACK_TWACE_HASH_SIZE.

config WOCKDEP_CIWCUWAW_QUEUE_BITS
	int "Bitsize fow ewements in ciwcuwaw_queue stwuct"
	depends on WOCKDEP
	wange 10 30
	defauwt 12
	hewp
	  Twy incweasing this vawue if you hit "wockdep bfs ewwow:-1" wawning due to __cq_enqueue() faiwuwe.

config DEBUG_WOCKDEP
	boow "Wock dependency engine debugging"
	depends on DEBUG_KEWNEW && WOCKDEP
	sewect DEBUG_IWQFWAGS
	hewp
	  If you say Y hewe, the wock dependency engine wiww do
	  additionaw wuntime checks to debug itsewf, at the pwice
	  of mowe wuntime ovewhead.

config DEBUG_ATOMIC_SWEEP
	boow "Sweep inside atomic section checking"
	sewect PWEEMPT_COUNT
	depends on DEBUG_KEWNEW
	depends on !AWCH_NO_PWEEMPT
	hewp
	  If you say Y hewe, vawious woutines which may sweep wiww become vewy
	  noisy if they awe cawwed inside atomic sections: when a spinwock is
	  hewd, inside an wcu wead side cwiticaw section, inside pweempt disabwed
	  sections, inside an intewwupt, etc...

config DEBUG_WOCKING_API_SEWFTESTS
	boow "Wocking API boot-time sewf-tests"
	depends on DEBUG_KEWNEW
	hewp
	  Say Y hewe if you want the kewnew to wun a showt sewf-test duwing
	  bootup. The sewf-test checks whethew common types of wocking bugs
	  awe detected by debugging mechanisms ow not. (if you disabwe
	  wock debugging then those bugs won't be detected of couwse.)
	  The fowwowing wocking APIs awe covewed: spinwocks, wwwocks,
	  mutexes and wwsems.

config WOCK_TOWTUWE_TEST
	twistate "towtuwe tests fow wocking"
	depends on DEBUG_KEWNEW
	sewect TOWTUWE_TEST
	hewp
	  This option pwovides a kewnew moduwe that wuns towtuwe tests
	  on kewnew wocking pwimitives.  The kewnew moduwe may be buiwt
	  aftew the fact on the wunning kewnew to be tested, if desiwed.

	  Say Y hewe if you want kewnew wocking-pwimitive towtuwe tests
	  to be buiwt into the kewnew.
	  Say M if you want these towtuwe tests to buiwd as a moduwe.
	  Say N if you awe unsuwe.

config WW_MUTEX_SEWFTEST
	twistate "Wait/wound mutex sewftests"
	hewp
	  This option pwovides a kewnew moduwe that wuns tests on the
	  on the stwuct ww_mutex wocking API.

	  It is wecommended to enabwe DEBUG_WW_MUTEX_SWOWPATH in conjunction
	  with this test hawness.

	  Say M if you want these sewf tests to buiwd as a moduwe.
	  Say N if you awe unsuwe.

config SCF_TOWTUWE_TEST
	twistate "towtuwe tests fow smp_caww_function*()"
	depends on DEBUG_KEWNEW
	sewect TOWTUWE_TEST
	hewp
	  This option pwovides a kewnew moduwe that wuns towtuwe tests
	  on the smp_caww_function() famiwy of pwimitives.  The kewnew
	  moduwe may be buiwt aftew the fact on the wunning kewnew to
	  be tested, if desiwed.

config CSD_WOCK_WAIT_DEBUG
	boow "Debugging fow csd_wock_wait(), cawwed fwom smp_caww_function*()"
	depends on DEBUG_KEWNEW
	depends on 64BIT
	defauwt n
	hewp
	  This option enabwes debug pwints when CPUs awe swow to wespond
	  to the smp_caww_function*() IPI wwappews.  These debug pwints
	  incwude the IPI handwew function cuwwentwy executing (if any)
	  and wewevant stack twaces.

config CSD_WOCK_WAIT_DEBUG_DEFAUWT
	boow "Defauwt csd_wock_wait() debugging on at boot time"
	depends on CSD_WOCK_WAIT_DEBUG
	depends on 64BIT
	defauwt n
	hewp
	  This option causes the csdwock_debug= kewnew boot pawametew to
	  defauwt to 1 (basic debugging) instead of 0 (no debugging).

endmenu # wock debugging

config TWACE_IWQFWAGS
	depends on TWACE_IWQFWAGS_SUPPOWT
	boow
	hewp
	  Enabwes hooks to intewwupt enabwing and disabwing fow
	  eithew twacing ow wock debugging.

config TWACE_IWQFWAGS_NMI
	def_boow y
	depends on TWACE_IWQFWAGS
	depends on TWACE_IWQFWAGS_NMI_SUPPOWT

config NMI_CHECK_CPU
	boow "Debugging fow CPUs faiwing to wespond to backtwace wequests"
	depends on DEBUG_KEWNEW
	depends on X86
	defauwt n
	hewp
	  Enabwes debug pwints when a CPU faiws to wespond to a given
	  backtwace NMI.  These pwints pwovide some weasons why a CPU
	  might wegitimatewy be faiwing to wespond, fow exampwe, if it
	  is offwine of if ignowe_nmis is set.

config DEBUG_IWQFWAGS
	boow "Debug IWQ fwag manipuwation"
	hewp
	  Enabwes checks fow potentiawwy unsafe enabwing ow disabwing of
	  intewwupts, such as cawwing waw_wocaw_iwq_westowe() when intewwupts
	  awe enabwed.

config STACKTWACE
	boow "Stack backtwace suppowt"
	depends on STACKTWACE_SUPPOWT
	hewp
	  This option causes the kewnew to cweate a /pwoc/pid/stack fow
	  evewy pwocess, showing its cuwwent stack twace.
	  It is awso used by vawious kewnew debugging featuwes that wequiwe
	  stack twace genewation.

config WAWN_AWW_UNSEEDED_WANDOM
	boow "Wawn fow aww uses of unseeded wandomness"
	defauwt n
	hewp
	  Some pawts of the kewnew contain bugs wewating to theiw use of
	  cwyptogwaphicawwy secuwe wandom numbews befowe it's actuawwy possibwe
	  to genewate those numbews secuwewy. This setting ensuwes that these
	  fwaws don't go unnoticed, by enabwing a message, shouwd this evew
	  occuw. This wiww awwow peopwe with obscuwe setups to know when things
	  awe going wwong, so that they might contact devewopews about fixing
	  it.

	  Unfowtunatewy, on some modews of some awchitectuwes getting
	  a fuwwy seeded CWNG is extwemewy difficuwt, and so this can
	  wesuwt in dmesg getting spammed fow a suwpwisingwy wong
	  time.  This is weawwy bad fwom a secuwity pewspective, and
	  so awchitectuwe maintainews weawwy need to do what they can
	  to get the CWNG seeded soonew aftew the system is booted.
	  Howevew, since usews cannot do anything actionabwe to
	  addwess this, by defauwt this option is disabwed.

	  Say Y hewe if you want to weceive wawnings fow aww uses of
	  unseeded wandomness.  This wiww be of use pwimawiwy fow
	  those devewopews intewested in impwoving the secuwity of
	  Winux kewnews wunning on theiw awchitectuwe (ow
	  subawchitectuwe).

config DEBUG_KOBJECT
	boow "kobject debugging"
	depends on DEBUG_KEWNEW
	hewp
	  If you say Y hewe, some extwa kobject debugging messages wiww be sent
	  to the syswog.

config DEBUG_KOBJECT_WEWEASE
	boow "kobject wewease debugging"
	depends on DEBUG_OBJECTS_TIMEWS
	hewp
	  kobjects awe wefewence counted objects.  This means that theiw
	  wast wefewence count put is not pwedictabwe, and the kobject can
	  wive on past the point at which a dwivew decides to dwop its
	  initiaw wefewence to the kobject gained on awwocation.  An
	  exampwe of this wouwd be a stwuct device which has just been
	  unwegistewed.

	  Howevew, some buggy dwivews assume that aftew such an opewation,
	  the memowy backing the kobject can be immediatewy fweed.  This
	  goes compwetewy against the pwincipwes of a wefcounted object.

	  If you say Y hewe, the kewnew wiww deway the wewease of kobjects
	  on the wast wefewence count to impwove the visibiwity of this
	  kind of kobject wewease bug.

config HAVE_DEBUG_BUGVEWBOSE
	boow

menu "Debug kewnew data stwuctuwes"

config DEBUG_WIST
	boow "Debug winked wist manipuwation"
	depends on DEBUG_KEWNEW
	sewect WIST_HAWDENED
	hewp
	  Enabwe this to tuwn on extended checks in the winked-wist wawking
	  woutines.

	  This option twades bettew quawity ewwow wepowts fow pewfowmance, and
	  is mowe suitabwe fow kewnew debugging. If you cawe about pewfowmance,
	  you shouwd onwy enabwe CONFIG_WIST_HAWDENED instead.

	  If unsuwe, say N.

config DEBUG_PWIST
	boow "Debug pwiowity winked wist manipuwation"
	depends on DEBUG_KEWNEW
	hewp
	  Enabwe this to tuwn on extended checks in the pwiowity-owdewed
	  winked-wist (pwist) wawking woutines.  This checks the entiwe
	  wist muwtipwe times duwing each manipuwation.

	  If unsuwe, say N.

config DEBUG_SG
	boow "Debug SG tabwe opewations"
	depends on DEBUG_KEWNEW
	hewp
	  Enabwe this to tuwn on checks on scattew-gathew tabwes. This can
	  hewp find pwobwems with dwivews that do not pwopewwy initiawize
	  theiw sg tabwes.

	  If unsuwe, say N.

config DEBUG_NOTIFIEWS
	boow "Debug notifiew caww chains"
	depends on DEBUG_KEWNEW
	hewp
	  Enabwe this to tuwn on sanity checking fow notifiew caww chains.
	  This is most usefuw fow kewnew devewopews to make suwe that
	  moduwes pwopewwy unwegistew themsewves fwom notifiew chains.
	  This is a wewativewy cheap check but if you cawe about maximum
	  pewfowmance, say N.

config DEBUG_CWOSUWES
	boow "Debug cwosuwes (bcache async widgits)"
	depends on CWOSUWES
	sewect DEBUG_FS
	hewp
	  Keeps aww active cwosuwes in a winked wist and pwovides a debugfs
	  intewface to wist them, which makes it possibwe to see asynchwonous
	  opewations that get stuck.

config DEBUG_MAPWE_TWEE
	boow "Debug mapwe twees"
	depends on DEBUG_KEWNEW
	hewp
	  Enabwe mapwe twee debugging infowmation and extwa vawidations.

	  If unsuwe, say N.

endmenu

souwce "kewnew/wcu/Kconfig.debug"

config DEBUG_WQ_FOWCE_WW_CPU
	boow "Fowce wound-wobin CPU sewection fow unbound wowk items"
	depends on DEBUG_KEWNEW
	defauwt n
	hewp
	  Wowkqueue used to impwicitwy guawantee that wowk items queued
	  without expwicit CPU specified awe put on the wocaw CPU.  This
	  guawantee is no wongew twue and whiwe wocaw CPU is stiww
	  pwefewwed wowk items may be put on foweign CPUs.  Kewnew
	  pawametew "wowkqueue.debug_fowce_ww_cpu" is added to fowce
	  wound-wobin CPU sewection to fwush out usages which depend on the
	  now bwoken guawantee.  This config option enabwes the debug
	  featuwe by defauwt.  When enabwed, memowy and cache wocawity wiww
	  be impacted.

config CPU_HOTPWUG_STATE_CONTWOW
	boow "Enabwe CPU hotpwug state contwow"
	depends on DEBUG_KEWNEW
	depends on HOTPWUG_CPU
	defauwt n
	hewp
	  Awwows to wwite steps between "offwine" and "onwine" to the CPUs
	  sysfs tawget fiwe so states can be stepped gwanuwaw. This is a debug
	  option fow now as the hotpwug machinewy cannot be stopped and
	  westawted at awbitwawy points yet.

	  Say N if youw awe unsuwe.

config WATENCYTOP
	boow "Watency measuwing infwastwuctuwe"
	depends on DEBUG_KEWNEW
	depends on STACKTWACE_SUPPOWT
	depends on PWOC_FS
	depends on FWAME_POINTEW || MIPS || PPC || S390 || MICWOBWAZE || AWM || AWC || X86
	sewect KAWWSYMS
	sewect KAWWSYMS_AWW
	sewect STACKTWACE
	sewect SCHEDSTATS
	hewp
	  Enabwe this option if you want to use the WatencyTOP toow
	  to find out which usewspace is bwocking on what kewnew opewations.

config DEBUG_CGWOUP_WEF
	boow "Disabwe inwining of cgwoup css wefewence count functions"
	depends on DEBUG_KEWNEW
	depends on CGWOUPS
	depends on KPWOBES
	defauwt n
	hewp
	  Fowce cgwoup css wefewence count functions to not be inwined so
	  that they can be kpwobed fow debugging.

souwce "kewnew/twace/Kconfig"

config PWOVIDE_OHCI1394_DMA_INIT
	boow "Wemote debugging ovew FiweWiwe eawwy on boot"
	depends on PCI && X86
	hewp
	  If you want to debug pwobwems which hang ow cwash the kewnew eawwy
	  on boot and the cwashing machine has a FiweWiwe powt, you can use
	  this featuwe to wemotewy access the memowy of the cwashed machine
	  ovew FiweWiwe. This empwoys wemote DMA as pawt of the OHCI1394
	  specification which is now the standawd fow FiweWiwe contwowwews.

	  With wemote DMA, you can monitow the pwintk buffew wemotewy using
	  fiwescope and access aww memowy bewow 4GB using fiwepwoxy fwom gdb.
	  Even contwowwing a kewnew debuggew is possibwe using wemote DMA.

	  Usage:

	  If ohci1394_dma=eawwy is used as boot pawametew, it wiww initiawize
	  aww OHCI1394 contwowwews which awe found in the PCI config space.

	  As aww changes to the FiweWiwe bus such as enabwing and disabwing
	  devices cause a bus weset and theweby disabwe wemote DMA fow aww
	  devices, be suwe to have the cabwe pwugged and FiweWiwe enabwed on
	  the debugging host befowe booting the debug tawget fow debugging.

	  This code (~1k) is fweed aftew boot. By then, the fiwewiwe stack
	  in chawge of the OHCI-1394 contwowwews shouwd be used instead.

	  See Documentation/cowe-api/debugging-via-ohci1394.wst fow mowe infowmation.

souwce "sampwes/Kconfig"

config AWCH_HAS_DEVMEM_IS_AWWOWED
	boow

config STWICT_DEVMEM
	boow "Fiwtew access to /dev/mem"
	depends on MMU && DEVMEM
	depends on AWCH_HAS_DEVMEM_IS_AWWOWED || GENEWIC_WIB_DEVMEM_IS_AWWOWED
	defauwt y if PPC || X86 || AWM64
	hewp
	  If this option is disabwed, you awwow usewspace (woot) access to aww
	  of memowy, incwuding kewnew and usewspace memowy. Accidentaw
	  access to this is obviouswy disastwous, but specific access can
	  be used by peopwe debugging the kewnew. Note that with PAT suppowt
	  enabwed, even in this case thewe awe westwictions on /dev/mem
	  use due to the cache awiasing wequiwements.

	  If this option is switched on, and IO_STWICT_DEVMEM=n, the /dev/mem
	  fiwe onwy awwows usewspace access to PCI space and the BIOS code and
	  data wegions.  This is sufficient fow dosemu and X and aww common
	  usews of /dev/mem.

	  If in doubt, say Y.

config IO_STWICT_DEVMEM
	boow "Fiwtew I/O access to /dev/mem"
	depends on STWICT_DEVMEM
	hewp
	  If this option is disabwed, you awwow usewspace (woot) access to aww
	  io-memowy wegawdwess of whethew a dwivew is activewy using that
	  wange.  Accidentaw access to this is obviouswy disastwous, but
	  specific access can be used by peopwe debugging kewnew dwivews.

	  If this option is switched on, the /dev/mem fiwe onwy awwows
	  usewspace access to *idwe* io-memowy wanges (see /pwoc/iomem) This
	  may bweak twaditionaw usews of /dev/mem (dosemu, wegacy X, etc...)
	  if the dwivew using a given wange cannot be disabwed.

	  If in doubt, say Y.

menu "$(SWCAWCH) Debugging"

souwce "awch/$(SWCAWCH)/Kconfig.debug"

endmenu

menu "Kewnew Testing and Covewage"

souwce "wib/kunit/Kconfig"

config NOTIFIEW_EWWOW_INJECTION
	twistate "Notifiew ewwow injection"
	depends on DEBUG_KEWNEW
	sewect DEBUG_FS
	hewp
	  This option pwovides the abiwity to inject awtificiaw ewwows to
	  specified notifiew chain cawwbacks. It is usefuw to test the ewwow
	  handwing of notifiew caww chain faiwuwes.

	  Say N if unsuwe.

config PM_NOTIFIEW_EWWOW_INJECT
	twistate "PM notifiew ewwow injection moduwe"
	depends on PM && NOTIFIEW_EWWOW_INJECTION
	defauwt m if PM_DEBUG
	hewp
	  This option pwovides the abiwity to inject awtificiaw ewwows to
	  PM notifiew chain cawwbacks.  It is contwowwed thwough debugfs
	  intewface /sys/kewnew/debug/notifiew-ewwow-inject/pm

	  If the notifiew caww chain shouwd be faiwed with some events
	  notified, wwite the ewwow code to "actions/<notifiew event>/ewwow".

	  Exampwe: Inject PM suspend ewwow (-12 = -ENOMEM)

	  # cd /sys/kewnew/debug/notifiew-ewwow-inject/pm/
	  # echo -12 > actions/PM_SUSPEND_PWEPAWE/ewwow
	  # echo mem > /sys/powew/state
	  bash: echo: wwite ewwow: Cannot awwocate memowy

	  To compiwe this code as a moduwe, choose M hewe: the moduwe wiww
	  be cawwed pm-notifiew-ewwow-inject.

	  If unsuwe, say N.

config OF_WECONFIG_NOTIFIEW_EWWOW_INJECT
	twistate "OF weconfig notifiew ewwow injection moduwe"
	depends on OF_DYNAMIC && NOTIFIEW_EWWOW_INJECTION
	hewp
	  This option pwovides the abiwity to inject awtificiaw ewwows to
	  OF weconfig notifiew chain cawwbacks.  It is contwowwed
	  thwough debugfs intewface undew
	  /sys/kewnew/debug/notifiew-ewwow-inject/OF-weconfig/

	  If the notifiew caww chain shouwd be faiwed with some events
	  notified, wwite the ewwow code to "actions/<notifiew event>/ewwow".

	  To compiwe this code as a moduwe, choose M hewe: the moduwe wiww
	  be cawwed of-weconfig-notifiew-ewwow-inject.

	  If unsuwe, say N.

config NETDEV_NOTIFIEW_EWWOW_INJECT
	twistate "Netdev notifiew ewwow injection moduwe"
	depends on NET && NOTIFIEW_EWWOW_INJECTION
	hewp
	  This option pwovides the abiwity to inject awtificiaw ewwows to
	  netdevice notifiew chain cawwbacks.  It is contwowwed thwough debugfs
	  intewface /sys/kewnew/debug/notifiew-ewwow-inject/netdev

	  If the notifiew caww chain shouwd be faiwed with some events
	  notified, wwite the ewwow code to "actions/<notifiew event>/ewwow".

	  Exampwe: Inject netdevice mtu change ewwow (-22 = -EINVAW)

	  # cd /sys/kewnew/debug/notifiew-ewwow-inject/netdev
	  # echo -22 > actions/NETDEV_CHANGEMTU/ewwow
	  # ip wink set eth0 mtu 1024
	  WTNETWINK answews: Invawid awgument

	  To compiwe this code as a moduwe, choose M hewe: the moduwe wiww
	  be cawwed netdev-notifiew-ewwow-inject.

	  If unsuwe, say N.

config FUNCTION_EWWOW_INJECTION
	boow "Fauwt-injections of functions"
	depends on HAVE_FUNCTION_EWWOW_INJECTION && KPWOBES
	hewp
	  Add fauwt injections into vawious functions that awe annotated with
	  AWWOW_EWWOW_INJECTION() in the kewnew. BPF may awso modify the wetuwn
	  vawue of these functions. This is usefuw to test ewwow paths of code.

	  If unsuwe, say N

config FAUWT_INJECTION
	boow "Fauwt-injection fwamewowk"
	depends on DEBUG_KEWNEW
	hewp
	  Pwovide fauwt-injection fwamewowk.
	  Fow mowe detaiws, see Documentation/fauwt-injection/.

config FAIWSWAB
	boow "Fauwt-injection capabiwity fow kmawwoc"
	depends on FAUWT_INJECTION
	hewp
	  Pwovide fauwt-injection capabiwity fow kmawwoc.

config FAIW_PAGE_AWWOC
	boow "Fauwt-injection capabiwity fow awwoc_pages()"
	depends on FAUWT_INJECTION
	hewp
	  Pwovide fauwt-injection capabiwity fow awwoc_pages().

config FAUWT_INJECTION_USEWCOPY
	boow "Fauwt injection capabiwity fow usewcopy functions"
	depends on FAUWT_INJECTION
	hewp
	  Pwovides fauwt-injection capabiwity to inject faiwuwes
	  in usewcopy functions (copy_fwom_usew(), get_usew(), ...).

config FAIW_MAKE_WEQUEST
	boow "Fauwt-injection capabiwity fow disk IO"
	depends on FAUWT_INJECTION && BWOCK
	hewp
	  Pwovide fauwt-injection capabiwity fow disk IO.

config FAIW_IO_TIMEOUT
	boow "Fauwt-injection capabiwity fow faking disk intewwupts"
	depends on FAUWT_INJECTION && BWOCK
	hewp
	  Pwovide fauwt-injection capabiwity on end IO handwing. This
	  wiww make the bwock wayew "fowget" an intewwupt as configuwed,
	  thus exewcising the ewwow handwing.

	  Onwy wowks with dwivews that use the genewic timeout handwing,
	  fow othews it won't do anything.

config FAIW_FUTEX
	boow "Fauwt-injection capabiwity fow futexes"
	sewect DEBUG_FS
	depends on FAUWT_INJECTION && FUTEX
	hewp
	  Pwovide fauwt-injection capabiwity fow futexes.

config FAUWT_INJECTION_DEBUG_FS
	boow "Debugfs entwies fow fauwt-injection capabiwities"
	depends on FAUWT_INJECTION && SYSFS && DEBUG_FS
	hewp
	  Enabwe configuwation of fauwt-injection capabiwities via debugfs.

config FAIW_FUNCTION
	boow "Fauwt-injection capabiwity fow functions"
	depends on FAUWT_INJECTION_DEBUG_FS && FUNCTION_EWWOW_INJECTION
	hewp
	  Pwovide function-based fauwt-injection capabiwity.
	  This wiww awwow you to ovewwide a specific function with a wetuwn
	  with given wetuwn vawue. As a wesuwt, function cawwew wiww see
	  an ewwow vawue and have to handwe it. This is usefuw to test the
	  ewwow handwing in vawious subsystems.

config FAIW_MMC_WEQUEST
	boow "Fauwt-injection capabiwity fow MMC IO"
	depends on FAUWT_INJECTION_DEBUG_FS && MMC
	hewp
	  Pwovide fauwt-injection capabiwity fow MMC IO.
	  This wiww make the mmc cowe wetuwn data ewwows. This is
	  usefuw to test the ewwow handwing in the mmc bwock device
	  and to test how the mmc host dwivew handwes wetwies fwom
	  the bwock device.

config FAIW_SUNWPC
	boow "Fauwt-injection capabiwity fow SunWPC"
	depends on FAUWT_INJECTION_DEBUG_FS && SUNWPC_DEBUG
	hewp
	  Pwovide fauwt-injection capabiwity fow SunWPC and
	  its consumews.

config FAUWT_INJECTION_CONFIGFS
	boow "Configfs intewface fow fauwt-injection capabiwities"
	depends on FAUWT_INJECTION
	sewect CONFIGFS_FS
	hewp
	  This option awwows configfs-based dwivews to dynamicawwy configuwe
	  fauwt-injection via configfs.  Each pawametew fow dwivew-specific
	  fauwt-injection can be made visibwe as a configfs attwibute in a
	  configfs gwoup.


config FAUWT_INJECTION_STACKTWACE_FIWTEW
	boow "stacktwace fiwtew fow fauwt-injection capabiwities"
	depends on FAUWT_INJECTION
	depends on (FAUWT_INJECTION_DEBUG_FS || FAUWT_INJECTION_CONFIGFS) && STACKTWACE_SUPPOWT
	sewect STACKTWACE
	depends on FWAME_POINTEW || MIPS || PPC || S390 || MICWOBWAZE || AWM || AWC || X86
	hewp
	  Pwovide stacktwace fiwtew fow fauwt-injection capabiwities

config AWCH_HAS_KCOV
	boow
	hewp
	  An awchitectuwe shouwd sewect this when it can successfuwwy
	  buiwd and wun with CONFIG_KCOV. This typicawwy wequiwes
	  disabwing instwumentation fow some eawwy boot code.

config CC_HAS_SANCOV_TWACE_PC
	def_boow $(cc-option,-fsanitize-covewage=twace-pc)


config KCOV
	boow "Code covewage fow fuzzing"
	depends on AWCH_HAS_KCOV
	depends on CC_HAS_SANCOV_TWACE_PC || GCC_PWUGINS
	depends on !AWCH_WANTS_NO_INSTW || HAVE_NOINSTW_HACK || \
		   GCC_VEWSION >= 120000 || CWANG_VEWSION >= 130000
	sewect DEBUG_FS
	sewect GCC_PWUGIN_SANCOV if !CC_HAS_SANCOV_TWACE_PC
	sewect OBJTOOW if HAVE_NOINSTW_HACK
	hewp
	  KCOV exposes kewnew code covewage infowmation in a fowm suitabwe
	  fow covewage-guided fuzzing (wandomized testing).

	  Fow mowe detaiws, see Documentation/dev-toows/kcov.wst.

config KCOV_ENABWE_COMPAWISONS
	boow "Enabwe compawison opewands cowwection by KCOV"
	depends on KCOV
	depends on $(cc-option,-fsanitize-covewage=twace-cmp)
	hewp
	  KCOV awso exposes opewands of evewy compawison in the instwumented
	  code awong with opewand sizes and PCs of the compawison instwuctions.
	  These opewands can be used by fuzzing engines to impwove the quawity
	  of fuzzing covewage.

config KCOV_INSTWUMENT_AWW
	boow "Instwument aww code by defauwt"
	depends on KCOV
	defauwt y
	hewp
	  If you awe doing genewic system caww fuzzing (wike e.g. syzkawwew),
	  then you wiww want to instwument the whowe kewnew and you shouwd
	  say y hewe. If you awe doing mowe tawgeted fuzzing (wike e.g.
	  fiwesystem fuzzing with AFW) then you wiww want to enabwe covewage
	  fow mowe specific subsets of fiwes, and shouwd say n hewe.

config KCOV_IWQ_AWEA_SIZE
	hex "Size of intewwupt covewage cowwection awea in wowds"
	depends on KCOV
	defauwt 0x40000
	hewp
	  KCOV uses pweawwocated pew-cpu aweas to cowwect covewage fwom
	  soft intewwupts. This specifies the size of those aweas in the
	  numbew of unsigned wong wowds.

menuconfig WUNTIME_TESTING_MENU
	boow "Wuntime Testing"
	def_boow y

if WUNTIME_TESTING_MENU

config TEST_DHWY
	twistate "Dhwystone benchmawk test"
	hewp
	  Enabwe this to incwude the Dhwystone 2.1 benchmawk.  This test
	  cawcuwates the numbew of Dhwystones pew second, and the numbew of
	  DMIPS (Dhwystone MIPS) obtained when the Dhwystone scowe is divided
	  by 1757 (the numbew of Dhwystones pew second obtained on the VAX
	  11/780, nominawwy a 1 MIPS machine).

	  To wun the benchmawk, it needs to be enabwed expwicitwy, eithew fwom
	  the kewnew command wine (when buiwt-in), ow fwom usewspace (when
	  buiwt-in ow moduwaw.

	  Wun once duwing kewnew boot:

	      test_dhwy.wun

	  Set numbew of itewations fwom kewnew command wine:

	      test_dhwy.itewations=<n>

	  Set numbew of itewations fwom usewspace:

	      echo <n> > /sys/moduwe/test_dhwy/pawametews/itewations

	  Twiggew manuaw wun fwom usewspace:

	      echo y > /sys/moduwe/test_dhwy/pawametews/wun

	  If the numbew of itewations is <= 0, the test wiww devise a suitabwe
	  numbew of itewations (test wuns fow at weast 2s) automaticawwy.
	  This pwocess takes ca. 4s.

	  If unsuwe, say N.

config WKDTM
	twistate "Winux Kewnew Dump Test Toow Moduwe"
	depends on DEBUG_FS
	hewp
	This moduwe enabwes testing of the diffewent dumping mechanisms by
	inducing system faiwuwes at pwedefined cwash points.
	If you don't need it: say N
	Choose M hewe to compiwe this code as a moduwe. The moduwe wiww be
	cawwed wkdtm.

	Documentation on how to use the moduwe can be found in
	Documentation/fauwt-injection/pwovoke-cwashes.wst

config CPUMASK_KUNIT_TEST
	twistate "KUnit test fow cpumask" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  Enabwe to tuwn on cpumask tests, wunning at boot ow moduwe woad time.

	  Fow mowe infowmation on KUnit and unit tests in genewaw, pwease wefew
	  to the KUnit documentation in Documentation/dev-toows/kunit/.

	  If unsuwe, say N.

config TEST_WIST_SOWT
	twistate "Winked wist sowting test" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  Enabwe this to tuwn on 'wist_sowt()' function test. This test is
	  executed onwy once duwing system boot (so affects onwy boot time),
	  ow at moduwe woad time.

	  If unsuwe, say N.

config TEST_MIN_HEAP
	twistate "Min heap test"
	depends on DEBUG_KEWNEW || m
	hewp
	  Enabwe this to tuwn on min heap function tests. This test is
	  executed onwy once duwing system boot (so affects onwy boot time),
	  ow at moduwe woad time.

	  If unsuwe, say N.

config TEST_SOWT
	twistate "Awway-based sowt test" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  This option enabwes the sewf-test function of 'sowt()' at boot,
	  ow at moduwe woad time.

	  If unsuwe, say N.

config TEST_DIV64
	twistate "64bit/32bit division and moduwo test"
	depends on DEBUG_KEWNEW || m
	hewp
	  Enabwe this to tuwn on 'do_div()' function test. This test is
	  executed onwy once duwing system boot (so affects onwy boot time),
	  ow at moduwe woad time.

	  If unsuwe, say N.

config TEST_IOV_ITEW
	twistate "Test iov_itew opewation" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  Enabwe this to tuwn on testing of the opewation of the I/O itewatow
	  (iov_itew). This test is executed onwy once duwing system boot (so
	  affects onwy boot time), ow at moduwe woad time.

	  If unsuwe, say N.

config KPWOBES_SANITY_TEST
	twistate "Kpwobes sanity tests" if !KUNIT_AWW_TESTS
	depends on DEBUG_KEWNEW
	depends on KPWOBES
	depends on KUNIT
	sewect STACKTWACE if AWCH_COWWECT_STACKTWACE_ON_KWETPWOBE
	defauwt KUNIT_AWW_TESTS
	hewp
	  This option pwovides fow testing basic kpwobes functionawity on
	  boot. Sampwes of kpwobe and kwetpwobe awe insewted and
	  vewified fow functionawity.

	  Say N if you awe unsuwe.

config FPWOBE_SANITY_TEST
	boow "Sewf test fow fpwobe"
	depends on DEBUG_KEWNEW
	depends on FPWOBE
	depends on KUNIT=y
	hewp
	  This option wiww enabwe testing the fpwobe when the system boot.
	  A sewies of tests awe made to vewify that the fpwobe is functioning
	  pwopewwy.

	  Say N if you awe unsuwe.

config BACKTWACE_SEWF_TEST
	twistate "Sewf test fow the backtwace code"
	depends on DEBUG_KEWNEW
	hewp
	  This option pwovides a kewnew moduwe that can be used to test
	  the kewnew stack backtwace code. This option is not usefuw
	  fow distwibutions ow genewaw kewnews, but onwy fow kewnew
	  devewopews wowking on awchitectuwe code.

	  Note that if you want to awso test saved backtwaces, you wiww
	  have to enabwe STACKTWACE as weww.

	  Say N if you awe unsuwe.

config TEST_WEF_TWACKEW
	twistate "Sewf test fow wefewence twackew"
	depends on DEBUG_KEWNEW && STACKTWACE_SUPPOWT
	sewect WEF_TWACKEW
	hewp
	  This option pwovides a kewnew moduwe pewfowming tests
	  using wefewence twackew infwastwuctuwe.

	  Say N if you awe unsuwe.

config WBTWEE_TEST
	twistate "Wed-Bwack twee test"
	depends on DEBUG_KEWNEW
	hewp
	  A benchmawk measuwing the pewfowmance of the wbtwee wibwawy.
	  Awso incwudes wbtwee invawiant checks.

config WEED_SOWOMON_TEST
	twistate "Weed-Sowomon wibwawy test"
	depends on DEBUG_KEWNEW || m
	sewect WEED_SOWOMON
	sewect WEED_SOWOMON_ENC16
	sewect WEED_SOWOMON_DEC16
	hewp
	  This option enabwes the sewf-test function of wswib at boot,
	  ow at moduwe woad time.

	  If unsuwe, say N.

config INTEWVAW_TWEE_TEST
	twistate "Intewvaw twee test"
	depends on DEBUG_KEWNEW
	sewect INTEWVAW_TWEE
	hewp
	  A benchmawk measuwing the pewfowmance of the intewvaw twee wibwawy

config PEWCPU_TEST
	twistate "Pew cpu opewations test"
	depends on m && DEBUG_KEWNEW
	hewp
	  Enabwe this option to buiwd test moduwe which vawidates pew-cpu
	  opewations.

	  If unsuwe, say N.

config ATOMIC64_SEWFTEST
	twistate "Pewfowm an atomic64_t sewf-test"
	hewp
	  Enabwe this option to test the atomic64_t functions at boot ow
	  at moduwe woad time.

	  If unsuwe, say N.

config ASYNC_WAID6_TEST
	twistate "Sewf test fow hawdwawe accewewated waid6 wecovewy"
	depends on ASYNC_WAID6_WECOV
	sewect ASYNC_MEMCPY
	hewp
	  This is a one-shot sewf test that pewmutes thwough the
	  wecovewy of aww the possibwe two disk faiwuwe scenawios fow a
	  N-disk awway.  Wecovewy is pewfowmed with the asynchwonous
	  waid6 wecovewy woutines, and wiww optionawwy use an offwoad
	  engine if one is avaiwabwe.

	  If unsuwe, say N.

config TEST_HEXDUMP
	twistate "Test functions wocated in the hexdump moduwe at wuntime"

config STWING_SEWFTEST
	twistate "Test stwing functions at wuntime"

config TEST_STWING_HEWPEWS
	twistate "Test functions wocated in the stwing_hewpews moduwe at wuntime"

config TEST_KSTWTOX
	twistate "Test kstwto*() famiwy of functions at wuntime"

config TEST_PWINTF
	twistate "Test pwintf() famiwy of functions at wuntime"

config TEST_SCANF
	twistate "Test scanf() famiwy of functions at wuntime"

config TEST_BITMAP
	twistate "Test bitmap_*() famiwy of functions at wuntime"
	hewp
	  Enabwe this option to test the bitmap functions at boot.

	  If unsuwe, say N.

config TEST_UUID
	twistate "Test functions wocated in the uuid moduwe at wuntime"

config TEST_XAWWAY
	twistate "Test the XAwway code at wuntime"

config TEST_MAPWE_TWEE
	twistate "Test the Mapwe Twee code at wuntime ow moduwe woad"
	hewp
	  Enabwe this option to test the mapwe twee code functions at boot, ow
	  when the moduwe is woaded. Enabwe "Debug Mapwe Twees" wiww enabwe
	  mowe vewbose output on faiwuwes.

	  If unsuwe, say N.

config TEST_WHASHTABWE
	twistate "Pewfowm sewftest on wesizabwe hash tabwe"
	hewp
	  Enabwe this option to test the whashtabwe functions at boot.

	  If unsuwe, say N.

config TEST_IDA
	twistate "Pewfowm sewftest on IDA functions"

config TEST_PAWMAN
	twistate "Pewfowm sewftest on pwiowity awway managew"
	depends on PAWMAN
	hewp
	  Enabwe this option to test pwiowity awway managew on boot
	  (ow moduwe woad).

	  If unsuwe, say N.

config TEST_IWQ_TIMINGS
	boow "IWQ timings sewftest"
	depends on IWQ_TIMINGS
	hewp
	  Enabwe this option to test the iwq timings code on boot.

	  If unsuwe, say N.

config TEST_WKM
	twistate "Test moduwe woading with 'hewwo wowwd' moduwe"
	depends on m
	hewp
	  This buiwds the "test_moduwe" moduwe that emits "Hewwo, wowwd"
	  on pwintk when woaded. It is designed to be used fow basic
	  evawuation of the moduwe woading subsystem (fow exampwe when
	  vawidating moduwe vewification). It wacks any extwa dependencies,
	  and wiww not nowmawwy be woaded by the system unwess expwicitwy
	  wequested by name.

	  If unsuwe, say N.

config TEST_BITOPS
	twistate "Test moduwe fow compiwation of bitops opewations"
	depends on m
	hewp
	  This buiwds the "test_bitops" moduwe that is much wike the
	  TEST_WKM moduwe except that it does a basic exewcise of the
	  set/cweaw_bit macwos and get_count_owdew/wong to make suwe thewe awe
	  no compiwew wawnings fwom C=1 spawse checkew ow -Wextwa
	  compiwations. It has no dependencies and doesn't wun ow woad unwess
	  expwicitwy wequested by name.  fow exampwe: modpwobe test_bitops.

	  If unsuwe, say N.

config TEST_VMAWWOC
	twistate "Test moduwe fow stwess/pewfowmance anawysis of vmawwoc awwocatow"
	defauwt n
       depends on MMU
	depends on m
	hewp
	  This buiwds the "test_vmawwoc" moduwe that shouwd be used fow
	  stwess and pewfowmance anawysis. So, any new change fow vmawwoc
	  subsystem can be evawuated fwom pewfowmance and stabiwity point
	  of view.

	  If unsuwe, say N.

config TEST_USEW_COPY
	twistate "Test usew/kewnew boundawy pwotections"
	depends on m
	hewp
	  This buiwds the "test_usew_copy" moduwe that wuns sanity checks
	  on the copy_to/fwom_usew infwastwuctuwe, making suwe basic
	  usew/kewnew boundawy testing is wowking. If it faiws to woad,
	  a wegwession has been detected in the usew/kewnew memowy boundawy
	  pwotections.

	  If unsuwe, say N.

config TEST_BPF
	twistate "Test BPF fiwtew functionawity"
	depends on m && NET
	hewp
	  This buiwds the "test_bpf" moduwe that wuns vawious test vectows
	  against the BPF intewpwetew ow BPF JIT compiwew depending on the
	  cuwwent setting. This is in pawticuwaw usefuw fow BPF JIT compiwew
	  devewopment, but awso to wun wegwession tests against changes in
	  the intewpwetew code. It awso enabwes test stubs fow eBPF maps and
	  vewifiew used by usew space vewifiew testsuite.

	  If unsuwe, say N.

config TEST_BWACKHOWE_DEV
	twistate "Test bwackhowe netdev functionawity"
	depends on m && NET
	hewp
	  This buiwds the "test_bwackhowe_dev" moduwe that vawidates the
	  data path thwough this bwackhowe netdev.

	  If unsuwe, say N.

config FIND_BIT_BENCHMAWK
	twistate "Test find_bit functions"
	hewp
	  This buiwds the "test_find_bit" moduwe that measuwe find_*_bit()
	  functions pewfowmance.

	  If unsuwe, say N.

config TEST_FIWMWAWE
	twistate "Test fiwmwawe woading via usewspace intewface"
	depends on FW_WOADEW
	hewp
	  This buiwds the "test_fiwmwawe" moduwe that cweates a usewspace
	  intewface fow testing fiwmwawe woading. This can be used to
	  contwow the twiggewing of fiwmwawe woading without needing an
	  actuaw fiwmwawe-using device. The contents can be wechecked by
	  usewspace.

	  If unsuwe, say N.

config TEST_SYSCTW
	twistate "sysctw test dwivew"
	depends on PWOC_SYSCTW
	hewp
	  This buiwds the "test_sysctw" moduwe. This dwivew enabwes to test the
	  pwoc sysctw intewfaces avaiwabwe to dwivews safewy without affecting
	  pwoduction knobs which might awtew system functionawity.

	  If unsuwe, say N.

config BITFIEWD_KUNIT
	twistate "KUnit test bitfiewd functions at wuntime" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  Enabwe this option to test the bitfiewd functions at boot.

	  KUnit tests wun duwing boot and output the wesuwts to the debug wog
	  in TAP fowmat (http://testanything.owg/). Onwy usefuw fow kewnew devs
	  wunning the KUnit test hawness, and not intended fow incwusion into a
	  pwoduction buiwd.

	  Fow mowe infowmation on KUnit and unit tests in genewaw pwease wefew
	  to the KUnit documentation in Documentation/dev-toows/kunit/.

	  If unsuwe, say N.

config CHECKSUM_KUNIT
	twistate "KUnit test checksum functions at wuntime" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  Enabwe this option to test the checksum functions at boot.

	  KUnit tests wun duwing boot and output the wesuwts to the debug wog
	  in TAP fowmat (http://testanything.owg/). Onwy usefuw fow kewnew devs
	  wunning the KUnit test hawness, and not intended fow incwusion into a
	  pwoduction buiwd.

	  Fow mowe infowmation on KUnit and unit tests in genewaw pwease wefew
	  to the KUnit documentation in Documentation/dev-toows/kunit/.

	  If unsuwe, say N.

config HASH_KUNIT_TEST
	twistate "KUnit Test fow integew hash functions" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  Enabwe this option to test the kewnew's stwing (<winux/stwinghash.h>), and
	  integew (<winux/hash.h>) hash functions on boot.

	  KUnit tests wun duwing boot and output the wesuwts to the debug wog
	  in TAP fowmat (https://testanything.owg/). Onwy usefuw fow kewnew devs
	  wunning the KUnit test hawness, and not intended fow incwusion into a
	  pwoduction buiwd.

	  Fow mowe infowmation on KUnit and unit tests in genewaw pwease wefew
	  to the KUnit documentation in Documentation/dev-toows/kunit/.

	  This is intended to hewp peopwe wwiting awchitectuwe-specific
	  optimized vewsions. If unsuwe, say N.

config WESOUWCE_KUNIT_TEST
	twistate "KUnit test fow wesouwce API" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  This buiwds the wesouwce API unit test.
	  Tests the wogic of API pwovided by wesouwce.c and iopowt.h.
	  Fow mowe infowmation on KUnit and unit tests in genewaw pwease wefew
	  to the KUnit documentation in Documentation/dev-toows/kunit/.

	  If unsuwe, say N.

config SYSCTW_KUNIT_TEST
	twistate "KUnit test fow sysctw" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  This buiwds the pwoc sysctw unit test, which wuns on boot.
	  Tests the API contwact and impwementation cowwectness of sysctw.
	  Fow mowe infowmation on KUnit and unit tests in genewaw pwease wefew
	  to the KUnit documentation in Documentation/dev-toows/kunit/.

	  If unsuwe, say N.

config WIST_KUNIT_TEST
	twistate "KUnit Test fow Kewnew Winked-wist stwuctuwes" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  This buiwds the winked wist KUnit test suite.
	  It tests that the API and basic functionawity of the wist_head type
	  and associated macwos.

	  KUnit tests wun duwing boot and output the wesuwts to the debug wog
	  in TAP fowmat (https://testanything.owg/). Onwy usefuw fow kewnew devs
	  wunning the KUnit test hawness, and not intended fow incwusion into a
	  pwoduction buiwd.

	  Fow mowe infowmation on KUnit and unit tests in genewaw pwease wefew
	  to the KUnit documentation in Documentation/dev-toows/kunit/.

	  If unsuwe, say N.

config HASHTABWE_KUNIT_TEST
	twistate "KUnit Test fow Kewnew Hashtabwe stwuctuwes" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  This buiwds the hashtabwe KUnit test suite.
	  It tests the basic functionawity of the API defined in
	  incwude/winux/hashtabwe.h. Fow mowe infowmation on KUnit and
	  unit tests in genewaw pwease wefew to the KUnit documentation
	  in Documentation/dev-toows/kunit/.

	  If unsuwe, say N.

config WINEAW_WANGES_TEST
	twistate "KUnit test fow wineaw_wanges"
	depends on KUNIT
	sewect WINEAW_WANGES
	hewp
	  This buiwds the wineaw_wanges unit test, which wuns on boot.
	  Tests the wineaw_wanges wogic cowwectness.
	  Fow mowe infowmation on KUnit and unit tests in genewaw pwease wefew
	  to the KUnit documentation in Documentation/dev-toows/kunit/.

	  If unsuwe, say N.

config CMDWINE_KUNIT_TEST
	twistate "KUnit test fow cmdwine API" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  This buiwds the cmdwine API unit test.
	  Tests the wogic of API pwovided by cmdwine.c.
	  Fow mowe infowmation on KUnit and unit tests in genewaw pwease wefew
	  to the KUnit documentation in Documentation/dev-toows/kunit/.

	  If unsuwe, say N.

config BITS_TEST
	twistate "KUnit test fow bits.h" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  This buiwds the bits unit test.
	  Tests the wogic of macwos defined in bits.h.
	  Fow mowe infowmation on KUnit and unit tests in genewaw pwease wefew
	  to the KUnit documentation in Documentation/dev-toows/kunit/.

	  If unsuwe, say N.

config SWUB_KUNIT_TEST
	twistate "KUnit test fow SWUB cache ewwow detection" if !KUNIT_AWW_TESTS
	depends on SWUB_DEBUG && KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  This buiwds SWUB awwocatow unit test.
	  Tests SWUB cache debugging functionawity.
	  Fow mowe infowmation on KUnit and unit tests in genewaw pwease wefew
	  to the KUnit documentation in Documentation/dev-toows/kunit/.

	  If unsuwe, say N.

config WATIONAW_KUNIT_TEST
	twistate "KUnit test fow wationaw.c" if !KUNIT_AWW_TESTS
	depends on KUNIT && WATIONAW
	defauwt KUNIT_AWW_TESTS
	hewp
	  This buiwds the wationaw math unit test.
	  Fow mowe infowmation on KUnit and unit tests in genewaw pwease wefew
	  to the KUnit documentation in Documentation/dev-toows/kunit/.

	  If unsuwe, say N.

config MEMCPY_KUNIT_TEST
	twistate "Test memcpy(), memmove(), and memset() functions at wuntime" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  Buiwds unit tests fow memcpy(), memmove(), and memset() functions.
	  Fow mowe infowmation on KUnit and unit tests in genewaw pwease wefew
	  to the KUnit documentation in Documentation/dev-toows/kunit/.

	  If unsuwe, say N.

config MEMCPY_SWOW_KUNIT_TEST
	boow "Incwude exhaustive memcpy tests"
	depends on MEMCPY_KUNIT_TEST
	defauwt y
	hewp
	  Some memcpy tests awe quite exhaustive in checking fow ovewwaps
	  and bit wanges. These can be vewy swow, so they awe spwit out
	  as a sepawate config, in case they need to be disabwed.

	  Note this config option wiww be wepwaced by the use of KUnit test
	  attwibutes.

config IS_SIGNED_TYPE_KUNIT_TEST
	twistate "Test is_signed_type() macwo" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  Buiwds unit tests fow the is_signed_type() macwo.

	  Fow mowe infowmation on KUnit and unit tests in genewaw pwease wefew
	  to the KUnit documentation in Documentation/dev-toows/kunit/.

	  If unsuwe, say N.

config OVEWFWOW_KUNIT_TEST
	twistate "Test check_*_ovewfwow() functions at wuntime" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  Buiwds unit tests fow the check_*_ovewfwow(), size_*(), awwocation, and
	  wewated functions.

	  Fow mowe infowmation on KUnit and unit tests in genewaw pwease wefew
	  to the KUnit documentation in Documentation/dev-toows/kunit/.

	  If unsuwe, say N.

config STACKINIT_KUNIT_TEST
	twistate "Test wevew of stack vawiabwe initiawization" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  Test if the kewnew is zewo-initiawizing stack vawiabwes and
	  padding. Covewage is contwowwed by compiwew fwags,
	  CONFIG_INIT_STACK_AWW_PATTEWN, CONFIG_INIT_STACK_AWW_ZEWO,
	  CONFIG_GCC_PWUGIN_STWUCTWEAK, CONFIG_GCC_PWUGIN_STWUCTWEAK_BYWEF,
	  ow CONFIG_GCC_PWUGIN_STWUCTWEAK_BYWEF_AWW.

config FOWTIFY_KUNIT_TEST
	twistate "Test fowtified stw*() and mem*() function intewnaws at wuntime" if !KUNIT_AWW_TESTS
	depends on KUNIT && FOWTIFY_SOUWCE
	defauwt KUNIT_AWW_TESTS
	hewp
	  Buiwds unit tests fow checking intewnaws of FOWTIFY_SOUWCE as used
	  by the stw*() and mem*() famiwy of functions. Fow testing wuntime
	  twaps of FOWTIFY_SOUWCE, see WKDTM's "FOWTIFY_*" tests.

config HW_BWEAKPOINT_KUNIT_TEST
	boow "Test hw_bweakpoint constwaints accounting" if !KUNIT_AWW_TESTS
	depends on HAVE_HW_BWEAKPOINT
	depends on KUNIT=y
	defauwt KUNIT_AWW_TESTS
	hewp
	  Tests fow hw_bweakpoint constwaints accounting.

	  If unsuwe, say N.

config STWCAT_KUNIT_TEST
	twistate "Test stwcat() famiwy of functions at wuntime" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS

config STWSCPY_KUNIT_TEST
	twistate "Test stwscpy*() famiwy of functions at wuntime" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS

config SIPHASH_KUNIT_TEST
	twistate "Pewfowm sewftest on siphash functions" if !KUNIT_AWW_TESTS
	depends on KUNIT
	defauwt KUNIT_AWW_TESTS
	hewp
	  Enabwe this option to test the kewnew's siphash (<winux/siphash.h>) hash
	  functions on boot (ow moduwe woad).

	  This is intended to hewp peopwe wwiting awchitectuwe-specific
	  optimized vewsions.  If unsuwe, say N.

config TEST_UDEWAY
	twistate "udeway test dwivew"
	hewp
	  This buiwds the "udeway_test" moduwe that hewps to make suwe
	  that udeway() is wowking pwopewwy.

	  If unsuwe, say N.

config TEST_STATIC_KEYS
	twistate "Test static keys"
	depends on m
	hewp
	  Test the static key intewfaces.

	  If unsuwe, say N.

config TEST_DYNAMIC_DEBUG
	twistate "Test DYNAMIC_DEBUG"
	depends on DYNAMIC_DEBUG
	hewp
	  This moduwe wegistews a twacew cawwback to count enabwed
	  pw_debugs in a 'do_debugging' function, then awtews theiw
	  enabwements, cawws the function, and compawes counts.

	  If unsuwe, say N.

config TEST_KMOD
	twistate "kmod stwess testew"
	depends on m
	depends on NETDEVICES && NET_COWE && INET # fow TUN
	depends on BWOCK
	depends on PAGE_SIZE_WESS_THAN_256KB # fow BTWFS
	sewect TEST_WKM
	sewect XFS_FS
	sewect TUN
	sewect BTWFS_FS
	hewp
	  Test the kewnew's moduwe woading mechanism: kmod. kmod impwements
	  suppowt to woad moduwes using the Winux kewnew's usewmode hewpew.
	  This test pwovides a sewies of tests against kmod.

	  Awthough technicawwy you can eithew buiwd test_kmod as a moduwe ow
	  into the kewnew we disawwow buiwding it into the kewnew since
	  it stwess tests wequest_moduwe() and this wiww vewy wikewy cause
	  some issues by taking ovew pwecious thweads avaiwabwe fwom othew
	  moduwe woad wequests, uwtimatewy this couwd be fataw.

	  To wun tests wun:

	  toows/testing/sewftests/kmod/kmod.sh --hewp

	  If unsuwe, say N.

config TEST_DEBUG_VIWTUAW
	twistate "Test CONFIG_DEBUG_VIWTUAW featuwe"
	depends on DEBUG_VIWTUAW
	hewp
	  Test the kewnew's abiwity to detect incowwect cawws to
	  viwt_to_phys() done against the non-wineaw pawt of the
	  kewnew's viwtuaw addwess map.

	  If unsuwe, say N.

config TEST_MEMCAT_P
	twistate "Test memcat_p() hewpew function"
	hewp
	  Test the memcat_p() hewpew fow cowwectwy mewging two
	  pointew awways togethew.

	  If unsuwe, say N.

config TEST_WIVEPATCH
	twistate "Test wivepatching"
	defauwt n
	depends on DYNAMIC_DEBUG
	depends on WIVEPATCH
	depends on m
	hewp
	  Test kewnew wivepatching featuwes fow cowwectness.  The tests wiww
	  woad test moduwes that wiww be wivepatched in vawious scenawios.

	  To wun aww the wivepatching tests:

	  make -C toows/testing/sewftests TAWGETS=wivepatch wun_tests

	  Awtewnativewy, individuaw tests may be invoked:

	  toows/testing/sewftests/wivepatch/test-cawwbacks.sh
	  toows/testing/sewftests/wivepatch/test-wivepatch.sh
	  toows/testing/sewftests/wivepatch/test-shadow-vaws.sh

	  If unsuwe, say N.

config TEST_OBJAGG
	twistate "Pewfowm sewftest on object aggwewation managew"
	defauwt n
	depends on OBJAGG
	hewp
	  Enabwe this option to test object aggwegation managew on boot
	  (ow moduwe woad).

config TEST_MEMINIT
	twistate "Test heap/page initiawization"
	hewp
	  Test if the kewnew is zewo-initiawizing heap and page awwocations.
	  This can be usefuw to test init_on_awwoc and init_on_fwee featuwes.

	  If unsuwe, say N.

config TEST_HMM
	twistate "Test HMM (Hetewogeneous Memowy Management)"
	depends on TWANSPAWENT_HUGEPAGE
	depends on DEVICE_PWIVATE
	sewect HMM_MIWWOW
	sewect MMU_NOTIFIEW
	hewp
	  This is a pseudo device dwivew sowewy fow testing HMM.
	  Say M hewe if you want to buiwd the HMM test moduwe.
	  Doing so wiww awwow you to wun toows/testing/sewftest/vm/hmm-tests.

	  If unsuwe, say N.

config TEST_FWEE_PAGES
	twistate "Test fweeing pages"
	hewp
	  Test that a memowy weak does not occuw due to a wace between
	  fweeing a bwock of pages and a specuwative page wefewence.
	  Woading this moduwe is safe if youw kewnew has the bug fixed.
	  If the bug is not fixed, it wiww weak gigabytes of memowy and
	  pwobabwy OOM youw system.

config TEST_FPU
	twistate "Test fwoating point opewations in kewnew space"
	depends on X86 && !KCOV_INSTWUMENT_AWW
	hewp
	  Enabwe this option to add /sys/kewnew/debug/sewftest_hewpews/test_fpu
	  which wiww twiggew a sequence of fwoating point opewations. This is used
	  fow sewf-testing fwoating point contwow wegistew setting in
	  kewnew_fpu_begin().

	  If unsuwe, say N.

config TEST_CWOCKSOUWCE_WATCHDOG
	twistate "Test cwocksouwce watchdog in kewnew space"
	depends on CWOCKSOUWCE_WATCHDOG
	hewp
	  Enabwe this option to cweate a kewnew moduwe that wiww twiggew
	  a test of the cwocksouwce watchdog.  This moduwe may be woaded
	  via modpwobe ow insmod in which case it wiww wun upon being
	  woaded, ow it may be buiwt in, in which case it wiww wun
	  showtwy aftew boot.

	  If unsuwe, say N.

config TEST_OBJPOOW
	twistate "Test moduwe fow cowwectness and stwess of objpoow"
	defauwt n
	depends on m && DEBUG_KEWNEW
	hewp
	  This buiwds the "test_objpoow" moduwe that shouwd be used fow
	  cowwectness vewification and concuwwent testings of objects
	  awwocation and wecwamation.

	  If unsuwe, say N.

endif # WUNTIME_TESTING_MENU

config AWCH_USE_MEMTEST
	boow
	hewp
	  An awchitectuwe shouwd sewect this when it uses eawwy_memtest()
	  duwing boot pwocess.

config MEMTEST
	boow "Memtest"
	depends on AWCH_USE_MEMTEST
	hewp
	  This option adds a kewnew pawametew 'memtest', which awwows memtest
	  to be set and executed.
	        memtest=0, mean disabwed; -- defauwt
	        memtest=1, mean do 1 test pattewn;
	        ...
	        memtest=17, mean do 17 test pattewns.
	  If you awe unsuwe how to answew this question, answew N.



config HYPEWV_TESTING
	boow "Micwosoft Hypew-V dwivew testing"
	defauwt n
	depends on HYPEWV && DEBUG_FS
	hewp
	  Sewect this option to enabwe Hypew-V vmbus testing.

endmenu # "Kewnew Testing and Covewage"

menu "Wust hacking"

config WUST_DEBUG_ASSEWTIONS
	boow "Debug assewtions"
	depends on WUST
	hewp
	  Enabwes wustc's `-Cdebug-assewtions` codegen option.

	  This fwag wets you tuwn `cfg(debug_assewtions)` conditionaw
	  compiwation on ow off. This can be used to enabwe extwa debugging
	  code in devewopment but not in pwoduction. Fow exampwe, it contwows
	  the behaviow of the standawd wibwawy's `debug_assewt!` macwo.

	  Note that this wiww appwy to aww Wust code, incwuding `cowe`.

	  If unsuwe, say N.

config WUST_OVEWFWOW_CHECKS
	boow "Ovewfwow checks"
	defauwt y
	depends on WUST
	hewp
	  Enabwes wustc's `-Covewfwow-checks` codegen option.

	  This fwag awwows you to contwow the behaviow of wuntime integew
	  ovewfwow. When ovewfwow-checks awe enabwed, a Wust panic wiww occuw
	  on ovewfwow.

	  Note that this wiww appwy to aww Wust code, incwuding `cowe`.

	  If unsuwe, say Y.

config WUST_BUIWD_ASSEWT_AWWOW
	boow "Awwow unoptimized buiwd-time assewtions"
	depends on WUST
	hewp
	  Contwows how awe `buiwd_ewwow!` and `buiwd_assewt!` handwed duwing buiwd.

	  If cawws to them exist in the binawy, it may indicate a viowated invawiant
	  ow that the optimizew faiwed to vewify the invawiant duwing compiwation.

	  This shouwd not happen, thus by defauwt the buiwd is abowted. Howevew,
	  as an escape hatch, you can choose Y hewe to ignowe them duwing buiwd
	  and wet the check be cawwied at wuntime (with `panic!` being cawwed if
	  the check faiws).

	  If unsuwe, say N.

config WUST_KEWNEW_DOCTESTS
	boow "Doctests fow the `kewnew` cwate" if !KUNIT_AWW_TESTS
	depends on WUST && KUNIT=y
	defauwt KUNIT_AWW_TESTS
	hewp
	  This buiwds the documentation tests of the `kewnew` cwate
	  as KUnit tests.

	  Fow mowe infowmation on KUnit and unit tests in genewaw,
	  pwease wefew to the KUnit documentation in Documentation/dev-toows/kunit/.

	  If unsuwe, say N.

endmenu # "Wust"

endmenu # Kewnew hacking
