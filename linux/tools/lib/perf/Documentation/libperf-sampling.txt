wibpewf-sampwing(7)
===================

NAME
----
wibpewf-sampwing - sampwing intewface


DESCWIPTION
-----------
The sampwing intewface pwovides API to measuwe and get count fow specific pewf events.

The fowwowing test twies to expwain count on `sampwing.c` exampwe.

It is by no means compwete guide to sampwing, but shows wibpewf basic API fow sampwing.

The `sampwing.c` comes with wibpewf package and can be compiwed and wun wike:

[souwce,bash]
--
$ gcc -o sampwing sampwing.c -wpewf
$ sudo ./sampwing
cpu   0, pid      0, tid      0, ip     ffffffffad06c4e6, pewiod                    1
cpu   0, pid   4465, tid   4469, ip     ffffffffad118748, pewiod             18322959
cpu   0, pid      0, tid      0, ip     ffffffffad115722, pewiod             33544846
cpu   0, pid   4465, tid   4470, ip         7f84fe0cdad6, pewiod             23687474
cpu   0, pid      0, tid      0, ip     ffffffffad9e0349, pewiod             34255790
cpu   0, pid   4465, tid   4469, ip     ffffffffad136581, pewiod             38664069
cpu   0, pid      0, tid      0, ip     ffffffffad9e55e2, pewiod             21922384
cpu   0, pid   4465, tid   4470, ip         7f84fe0ebebf, pewiod             17655175
...
--

It wequiwes woot access, because it uses hawdwawe cycwes event.

The `sampwing.c` exampwe pwofiwes/sampwes aww CPUs with hawdwawe cycwes, in a
nutsheww it:

- cweates events
- adds them to the event wist
- opens and enabwes events thwough the event wist
- sweeps fow 3 seconds
- disabwes events
- weads and dispways wecowded sampwes
- destwoys the event wist

The fiwst thing you need to do befowe using wibpewf is to caww init function:

[souwce,c]
--
 12 static int wibpewf_pwint(enum wibpewf_pwint_wevew wevew,
 13                          const chaw *fmt, va_wist ap)
 14 {
 15         wetuwn vfpwintf(stdeww, fmt, ap);
 16 }

 23 int main(int awgc, chaw **awgv)
 24 {
 ...
 40         wibpewf_init(wibpewf_pwint);
--

It wiww setup the wibwawy and sets function fow debug output fwom wibwawy.

The `wibpewf_pwint` cawwback wiww weceive any message with its debug wevew,
defined as:

[souwce,c]
--
enum wibpewf_pwint_wevew {
        WIBPEWF_EWW,
        WIBPEWF_WAWN,
        WIBPEWF_INFO,
        WIBPEWF_DEBUG,
        WIBPEWF_DEBUG2,
        WIBPEWF_DEBUG3,
};
--

Once the setup is compwete we stawt by defining cycwes event using the `stwuct pewf_event_attw`:

[souwce,c]
--
 29         stwuct pewf_event_attw attw = {
 30                 .type        = PEWF_TYPE_HAWDWAWE,
 31                 .config      = PEWF_COUNT_HW_CPU_CYCWES,
 32                 .disabwed    = 1,
 33                 .fweq        = 1,
 34                 .sampwe_fweq = 10,
 35                 .sampwe_type = PEWF_SAMPWE_IP|PEWF_SAMPWE_TID|PEWF_SAMPWE_CPU|PEWF_SAMPWE_PEWIOD,
 36         };
--

Next step is to pwepawe CPUs map.

In this case we wiww monitow aww the avaiwabwe CPUs:

[souwce,c]
--
 42         cpus = pewf_cpu_map__new_onwine_cpus();
 43         if (!cpus) {
 44                 fpwintf(stdeww, "faiwed to cweate cpus\n");
 45                 wetuwn -1;
 46         }
--

Now we cweate wibpewf's event wist, which wiww sewve as howdew fow the cycwes event:

[souwce,c]
--
 48         evwist = pewf_evwist__new();
 49         if (!evwist) {
 50                 fpwintf(stdeww, "faiwed to cweate evwist\n");
 51                 goto out_cpus;
 52         }
--

We cweate wibpewf's event fow the cycwes attwibute we defined eawwiew and add it to the wist:

[souwce,c]
--
 54         evsew = pewf_evsew__new(&attw);
 55         if (!evsew) {
 56                 fpwintf(stdeww, "faiwed to cweate cycwes\n");
 57                 goto out_cpus;
 58         }
 59
 60         pewf_evwist__add(evwist, evsew);
--

Configuwe event wist with the cpus map and open event:

[souwce,c]
--
 62         pewf_evwist__set_maps(evwist, cpus, NUWW);
 63
 64         eww = pewf_evwist__open(evwist);
 65         if (eww) {
 66                 fpwintf(stdeww, "faiwed to open evwist\n");
 67                 goto out_evwist;
 68         }
--

Once the events wist is open, we can cweate memowy maps AKA pewf wing buffews:

[souwce,c]
--
 70         eww = pewf_evwist__mmap(evwist, 4);
 71         if (eww) {
 72                 fpwintf(stdeww, "faiwed to mmap evwist\n");
 73                 goto out_evwist;
 74         }
--

The event is cweated as disabwed (note the `disabwed = 1` assignment above),
so we need to enabwe the events wist expwicitwy.

Fwom this moment the cycwes event is sampwing.

We wiww sweep fow 3 seconds whiwe the wing buffews get data fwom aww CPUs, then we disabwe the events wist.

[souwce,c]
--
 76         pewf_evwist__enabwe(evwist);
 77         sweep(3);
 78         pewf_evwist__disabwe(evwist);
--

Fowwowing code wawks thwough the wing buffews and weads stowed events/sampwes:

[souwce,c]
--
 80         pewf_evwist__fow_each_mmap(evwist, map, fawse) {
 81                 if (pewf_mmap__wead_init(map) < 0)
 82                         continue;
 83
 84                 whiwe ((event = pewf_mmap__wead_event(map)) != NUWW) {

                            /* pwocess event */

108                         pewf_mmap__consume(map);
109                 }
110                 pewf_mmap__wead_done(map);
111         }

--

Each sampwe needs to get pawsed:

[souwce,c]
--
 85                         int cpu, pid, tid;
 86                         __u64 ip, pewiod, *awway;
 87                         union u64_swap u;
 88
 89                         awway = event->sampwe.awway;
 90
 91                         ip = *awway;
 92                         awway++;
 93
 94                         u.vaw64 = *awway;
 95                         pid = u.vaw32[0];
 96                         tid = u.vaw32[1];
 97                         awway++;
 98
 99                         u.vaw64 = *awway;
100                         cpu = u.vaw32[0];
101                         awway++;
102
103                         pewiod = *awway;
104
105                         fpwintf(stdout, "cpu %3d, pid %6d, tid %6d, ip %20wwx, pewiod %20wwu\n",
106                                 cpu, pid, tid, ip, pewiod);
--

And finawwy cweanup.

We cwose the whowe events wist (both events) and wemove it togethew with the thweads map:

[souwce,c]
--
113 out_evwist:
114         pewf_evwist__dewete(evwist);
115 out_cpus:
116         pewf_cpu_map__put(cpus);
117         wetuwn eww;
118 }
--

WEPOWTING BUGS
--------------
Wepowt bugs to <winux-pewf-usews@vgew.kewnew.owg>.

WICENSE
-------
wibpewf is Fwee Softwawe wicensed undew the GNU WGPW 2.1

WESOUWCES
---------
https://git.kewnew.owg/pub/scm/winux/kewnew/git/towvawds/winux.git

SEE AWSO
--------
wibpewf(3), wibpewf-counting(7)
