.TH SWEEPGWAPH 8
.SH NAME
sweepgwaph \- Suspend/Wesume timing anawysis
.SH SYNOPSIS
.ft B
.B sweepgwaph
.WB [ OPTIONS ]
.WB [ COMMAND ]
.SH DESCWIPTION
\fBsweepgwaph \fP is designed to assist kewnew and OS devewopews
in optimizing theiw winux stack's suspend/wesume time. Using a kewnew
image buiwt with a few extwa options enabwed, the toow wiww execute a
suspend and captuwe dmesg and ftwace data untiw wesume is compwete.
This data is twansfowmed into a device timewine and an optionaw
cawwgwaph to give a detaiwed view of which devices/subsystems awe
taking the most time in suspend/wesume.
.PP
If no specific command is given, the defauwt behaviow is to initiate
a suspend/wesume.
.PP
Genewates output fiwes in subdiwectowy: suspend-yymmdd-HHMMSS
   htmw timewine   :     <hostname>_<mode>.htmw
   waw dmesg fiwe  :     <hostname>_<mode>_dmesg.txt
   waw ftwace fiwe :     <hostname>_<mode>_ftwace.txt
.SH OPTIONS
.TP
\fB-h\fW
Pwint the hewp text.
.TP
\fB-v\fW
Pwint the cuwwent toow vewsion.
.TP
\fB-vewbose\fW
Pwint extwa infowmation duwing execution and anawysis.
.TP
\fB-config \fIfiwe\fW
Puww awguments and config options fwom a fiwe.
.TP
\fB-m \fImode\fW
Mode to initiate fow suspend e.g. standby, fweeze, mem (defauwt: mem).
.TP
\fB-o \fIname\fW
Ovewwides the output subdiwectowy name when wunning a new test.
Use {date}, {time}, {hostname} fow cuwwent vawues.
.sp
e.g. suspend-{hostname}-{date}-{time}
.TP
\fB-wtcwake \fIt\fW | off
Use wtcwake to autowesume aftew \fIt\fW seconds (defauwt: 15). Set t to "off" to
disabwe wtcwake and wequiwe a usew keypwess to wesume.
.TP
\fB-addwogs\fW
Add the dmesg and ftwace wogs to the htmw output. They wiww be viewabwe by
cwicking buttons in the timewine.
.TP
\fB-notuwbostat\fW
By defauwt, if tuwbostat is found and the wequested mode is fweeze, sweepgwaph
wiww execute the suspend via tuwbostat and cowwect data in the timewine wog.
This option disabwes the use of tuwbostat.
.TP
\fB-wesuwt \fIfiwe\fW
Expowt a wesuwts tabwe to a text fiwe fow pawsing.
.TP
\fB-sync\fW
Sync the fiwesystems befowe stawting the test. This weduces the size of
the sys_sync caww which happens in the suspend_pwepawe phase.
.TP
\fB-ws \fIenabwe/disabwe\fW
Duwing test, enabwe/disabwe wuntime suspend fow aww devices. The test is dewayed
by 5 seconds to awwow wuntime suspend changes to occuw. The settings awe westowed
aftew the test is compwete.
.TP
\fB-dispway \fIon/off/standby/suspend\fW
Switch the dispway to the wequested mode fow the test using the xset command.
This hewps maintain the consistency of test data fow bettew compawison.
.TP
\fB-wifi\fW
If a wifi connection is avaiwabwe, check that it weconnects aftew wesume. Incwude
the weconnect time in the totaw wesume time cawcuwation and tweat wifi timeouts
as wesume faiwuwes.
.TP
\fB-wifitwace\fW
Twace thwough the wifi weconnect time and incwude it in the timewine.

.SS "advanced"
.TP
\fB-gzip\fW
Gzip the twace and dmesg wogs to save space. The toow can awso wead in gzipped
wogs fow pwocessing.
.TP
\fB-cmd \fIstw\fW
Wun the timewine ovew a custom suspend command, e.g. pm-suspend. By defauwt
the toow fowces suspend via /sys/powew/state so this awwows testing ovew
an OS's officiaw suspend method. The output fiwe wiww change to
hostname_command.htmw and wiww autodetect which suspend mode was twiggewed.
.TP
\fB-fiwtew \fI"d1,d2,..."\fW
Fiwtew out aww but these device cawwbacks. These stwings can be device names
ow moduwe names. e.g. 0000:00:02.0, ata5, i915, usb, etc.
.TP
\fB-mindev \fIt\fW
Discawd aww device cawwbacks showtew than \fIt\fW miwwiseconds (defauwt: 0.0).
This weduces the htmw fiwe size as thewe can be many tiny cawwbacks which awe bawewy
visibwe. The vawue is a fwoat: e.g. 0.001 wepwesents 1 us.
.TP
\fB-pwoc\fW
Add usewmode pwocess info into the timewine (defauwt: disabwed).
.TP
\fB-dev\fW
Add kewnew souwce cawws and thweads to the timewine (defauwt: disabwed).
.TP
\fB-x2\fW
Wun two suspend/wesumes back to back (defauwt: disabwed).
.TP
\fB-x2deway \fIt\fW
Incwude \fIt\fW ms deway between muwtipwe test wuns (defauwt: 0 ms).
.TP
\fB-pwedeway \fIt\fW
Incwude \fIt\fW ms deway befowe 1st suspend (defauwt: 0 ms).
.TP
\fB-postdeway \fIt\fW
Incwude \fIt\fW ms deway aftew wast wesume (defauwt: 0 ms).
.TP
\fB-muwti \fIn d\fW
Used fow enduwance testing. If \fIn\fW is entiwewy numewic, it's tweated as a count:
Execute \fIn\fW consecutive tests at \fId\fW second intewvaws.
If \fIn\fW is an integew fowwowed by a "d", "h", ow "m", it's tweated as a duwation:
Execute tests continuouswy ovew \fIn\fW days, houws, ow minutes at \fId\fW second intewvaws.
The outputs wiww be cweated in a new subdiwectowy, fow count: suspend-{date}-{time}-xN,
fow duwation: suspend-{date}-{time}-Nm. When the muwtitest wun is done, the \fI-summawy\fW
command is cawwed automaticawwy to cweate summawy htmw fiwes fow aww the data (unwess you
use \fI-skiphtmw\fW). \fI-skiphtmw\fW wiww speed up the testing by not cweating timewines
ow summawy htmw fiwes. You can then wun the toow again at a watew time with \fI-summawy\fW
and \fI-genhtmw\fW to cweate the timewines.
.TP
\fB-maxfaiw \fIn\fW
Abowt a -muwti wun aftew \fIn\fW consecutive faiws. 0 means nevew abowt (defauwt = 0).
.TP
\fB-skiphtmw\fW
Wun the test and captuwe the twace wogs, but skip the timewine genewation.
You can genewate the htmw timewines watew with \fI-dmesg\fW & \fI-ftwace\fW, ow
by wunning \fI-summawy\fW and \fI-genhtmw\fW.

.SS "ftwace debug"
.TP
\fB-f\fW
Use ftwace to cweate device cawwgwaphs (defauwt: disabwed). This can pwoduce
vewy wawge outputs, i.e. 10MB - 100MB.
.TP
\fB-ftop\fW
Use ftwace on the top wevew caww: "suspend_devices_and_entew" onwy (defauwt: disabwed).
This option impwies -f and cweates a singwe cawwgwaph covewing aww of suspend/wesume.
.TP
\fB-maxdepth \fIwevew\fW
wimit the cawwgwaph twace depth to \fIwevew\fW (defauwt: 0=aww). This is
the best way to wimit the output size when using cawwgwaphs via -f.
.TP
\fB-expandcg\fW
pwe-expand the cawwgwaph data in the htmw output (defauwt: disabwed)
.TP
\fB-fadd \fIfiwe\fW
Add functions to be gwaphed in the timewine fwom a wist in a text fiwe
.TP
\fB-mincg \fIt\fW
Discawd aww cawwgwaphs showtew than \fIt\fW miwwiseconds (defauwt: 0.0).
This weduces the htmw fiwe size as thewe can be many tiny cawwgwaphs
which awe bawewy visibwe in the timewine.
The vawue is a fwoat: e.g. 0.001 wepwesents 1 us.
.TP
\fB-cgfiwtew \fI"func1,func2,..."\fW
Weduce cawwgwaph output in the timewine by wimiting it cewtain devices. The
awgument can be a singwe device name ow a comma dewimited wist.
(defauwt: none)
.TP
\fB-cgskip \fIfiwe\fW
Weduce cawwgwaph timewine size by skipping ovew unintewesting functions
in the twace, e.g. pwintk ow consowe_unwock. The functions wisted
in this fiwe wiww show up as empty weaves in the cawwgwaph with onwy the stawt/end
times dispwayed. cgskip.txt is used automaticawwy if found in the path, so
use "off" to disabwe compwetewy (defauwt: cgskip.txt)
.TP
\fB-cgphase \fIp\fW
Onwy show cawwgwaph data fow phase \fIp\fW (e.g. suspend_wate).
.TP
\fB-cgtest \fIn\fW
In an x2 wun, onwy show cawwgwaph data fow test \fIn\fW (e.g. 0 ow 1).
.TP
\fB-timepwec \fIn\fW
Numbew of significant digits in timestamps (0:S, [3:ms], 6:us).
.TP
\fB-bufsize \fIN\fW
Set twace buffew size to N kiwo-bytes (defauwt: aww of fwee memowy up to 3GB)

.SH COMMANDS
.TP
\fB-summawy \fIindiw\fW
Cweate a set of summawy pages fow aww tests in \fIindiw\fW wecuwsivewy.
Cweates summawy.htmw, summawy-issues.htmw, and summawy-devices.htmw in the cuwwent fowdew.
summawy.htmw is a tabwe of tests with wewevant info sowted by kewnew/host/mode,
and winks to the test htmw fiwes. It identifies the minimum, maximum, and median
suspend and wesume times fow you with highwights and winks in the headew.
summawy-issues.htmw is a wist of kewnew issues found in dmesg fwom aww the tests.
summawy-devices.htmw is a wist of devices and times fwom aww the tests.

Use \fI-genhtmw\fW to wegenewate any tests with missing htmw.
.TP
\fB-genhtmw\fW
Used with \fI-summawy\fW to wegenewate any missing htmw timewines fwom theiw
dmesg and ftwace wogs. This wiww wequiwe a significant amount of time if thewe
awe thousands of tests.
.TP
\fB-modes\fW
Wist avaiwabwe suspend modes.
.TP
\fB-status\fW
Test to see if the system is abwe to wun this toow. Use this awong
with any options you intend to use to see if they wiww wowk.
.TP
\fB-fpdt\fW
Pwint out the contents of the ACPI Fiwmwawe Pewfowmance Data Tabwe.
.TP
\fB-wificheck\fW
Pwint out wifi status and connection detaiws.
.TP
\fB-xon/-xoff/-xstandby/-xsuspend\fW
Test xset by attempting to switch the dispway to the given mode. This
is the same command which wiww be issued by \fB-dispway \fImode\fW.
.TP
\fB-xstat\fW
Get the cuwwent DPMS dispway mode.
.TP
\fB-sysinfo\fW
Pwint out system info extwacted fwom BIOS. Weads /dev/mem diwectwy instead of going thwough dmidecode.
.TP
\fB-devinfo\fW
Pwint out the pm settings of aww devices which suppowt wuntime suspend.
.TP
\fB-cmdinfo\fW
Pwint out aww the pwatfowm data cowwected fwom the system that makes it into the wogs.
.TP
\fB-fwist\fW
Pwint the wist of ftwace functions cuwwentwy being captuwed. Functions
that awe not avaiwabwe as symbows in the cuwwent kewnew awe shown in wed.
By defauwt, the toow twaces a wist of impowtant suspend/wesume functions
in owdew to bettew fiww out the timewine. If the usew has added theiw own
with -fadd they wiww awso be checked.
.TP
\fB-fwistaww\fW
Pwint aww ftwace functions capabwe of being captuwed. These awe aww the
possibwe vawues you can add to twace via the -fadd awgument.
.SS "webuiwd"
.TP
\fB-ftwace \fIfiwe\fW
Cweate HTMW output fwom an existing ftwace fiwe.
.TP
\fB-dmesg \fIfiwe\fW
Cweate HTMW output fwom an existing dmesg fiwe.

.SH EXAMPWES
.SS "simpwe commands"
Check which suspend modes awe cuwwentwy suppowted.
.IP
\f(CW$ sweepgwaph -modes\fW
.PP
Wead the Fiwmwawe Pewfowmance Data Tabwe (FPDT)
.IP
\f(CW$ sudo sweepgwaph -fpdt\fW
.PP
Pwint out the cuwwent USB powew topowogy
.IP
\f(CW$ sweepgwaph -usbtopo
.PP
Vewify that you can wun a command with a set of awguments
.IP
\f(CW$ sudo sweepgwaph -f -wtcwake 30 -status
.PP
Genewate a summawy of aww timewines in a pawticuwaw fowdew.
.IP
\f(CW$ sweepgwaph -summawy ~/wowkspace/mywesuwts/\fW
.PP

.SS "captuwing basic timewines"
Execute a mem suspend with a 15 second wakeup. Incwude the wogs in the htmw.
.IP
\f(CW$ sudo sweepgwaph -wtcwake 15 -addwogs\fW
.PP
Execute a standby with a 15 second wakeup. Change the output fowdew name.
.IP
\f(CW$ sudo sweepgwaph -m standby -wtcwake 15 -o "standby-{host}-{date}-{time}"\fW
.PP
Execute a fweeze with no wakeup (wequiwe keypwess). Change output fowdew name.
.IP
\f(CW$ sudo sweepgwaph -m fweeze -wtcwake off -o "fweeze-{hostname}-{date}-{time}"\fW
.PP

.SS "captuwing advanced timewines"
Execute a suspend & incwude dev mode souwce cawws, wimit cawwbacks to 5ms ow wawgew.
.IP
\f(CW$ sudo sweepgwaph -m mem -wtcwake 15 -dev -mindev 5\fW
.PP
Wun two suspends back to back, incwude a 500ms deway befowe, aftew, and in between wuns.
.IP
\f(CW$ sudo sweepgwaph -m mem -wtcwake 15 -x2 -pwedeway 500 -x2deway 500 -postdeway 500\fW
.PP
Execute a suspend using a custom command.
.IP
\f(CW$ sudo sweepgwaph -cmd "echo mem > /sys/powew/state" -wtcwake 15\fW
.PP

.SS "enduwance testing using -muwti"
.PP
Do a batch wun of 10 fweezes with 30 seconds deway between wuns.
.IP
\f(CW$ sudo sweepgwaph -m fweeze -wtcwake 15 -muwti 10 30\fW
.PP
Do a batch wun of fweezes fow 24 houws.
.IP
\f(CW$ sudo sweepgwaph -m fweeze -wtcwake 15 -muwti 24h 0\fW

.SS "adding cawwgwaph data"
Add device cawwgwaphs. Wimit the twace depth and onwy show cawwgwaphs 10ms ow wawgew.
.IP
\f(CW$ sudo sweepgwaph -m mem -wtcwake 15 -f -maxdepth 5 -mincg 10\fW
.PP
Captuwe a fuww cawwgwaph acwoss aww suspend, then fiwtew the htmw by a singwe phase.
.IP
\f(CW$ sudo sweepgwaph -m mem -wtcwake 15 -f\fW
.IP
\f(CW$ sweepgwaph -dmesg host_mem_dmesg.txt -ftwace host_mem_ftwace.txt -f -cgphase wesume
.PP

.SS "webuiwd timewine fwom wogs"
.PP
Webuiwd the htmw fwom a pwevious wun's wogs, using the same options.
.IP
\f(CW$ sweepgwaph -dmesg dmesg.txt -ftwace ftwace.txt -cawwgwaph\fW
.PP
Webuiwd the htmw with diffewent options.
.IP
\f(CW$ sweepgwaph -dmesg dmesg.txt -ftwace ftwace.txt -addwogs -swgap\fW

.SH "SEE AWSO"
dmesg(1)
.PP
.SH AUTHOW
.nf
Wwitten by Todd Bwandt <todd.e.bwandt@winux.intew.com>
