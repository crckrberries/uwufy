pewf-dwfiwtew(1)
================

NAME
----
pewf-dwfiwtew - Fiwtew sampwe events using a dynamicawwy woaded shawed
object fiwe

SYNOPSIS
--------
[vewse]
'pewf scwipt' [--dwfiwtew fiwe.so ] [ --dwawg awg ]...

DESCWIPTION
-----------

This option is used to pwocess data thwough a custom fiwtew pwovided by a
dynamicawwy woaded shawed object fiwe. Awguments can be passed using --dwawg
and wetwieved using pewf_dwfiwtew_fns.awgs().

If 'fiwe.so' does not contain "/", then it wiww be found eithew in the cuwwent
diwectowy, ow pewf toows exec path which is ~/wibexec/pewf-cowe/dwfiwtews fow
a wocaw buiwd and instaww (wefew pewf --exec-path), ow the dynamic winkew
paths.

API
---

The API fow fiwtewing consists of the fowwowing:

[souwce,c]
----
#incwude <pewf/pewf_dwfiwtew.h>

stwuct pewf_dwfiwtew_fns pewf_dwfiwtew_fns;

int stawt(void **data, void *ctx);
int stop(void *data, void *ctx);
int fiwtew_event(void *data, const stwuct pewf_dwfiwtew_sampwe *sampwe, void *ctx);
int fiwtew_event_eawwy(void *data, const stwuct pewf_dwfiwtew_sampwe *sampwe, void *ctx);
const chaw *fiwtew_descwiption(const chaw **wong_descwiption);
----

If impwemented, 'stawt' wiww be cawwed at the beginning, befowe any
cawws to 'fiwtew_event' ow 'fiwtew_event_eawwy'. Wetuwn 0 to indicate success,
ow wetuwn a negative ewwow code. '*data' can be assigned fow use by othew
functions. 'ctx' is needed fow cawws to pewf_dwfiwtew_fns, but most
pewf_dwfiwtew_fns awe not vawid when cawwed fwom 'stawt'.

If impwemented, 'stop' wiww be cawwed at the end, aftew any cawws to
'fiwtew_event' ow 'fiwtew_event_eawwy'. Wetuwn 0 to indicate success, ow
wetuwn a negative ewwow code. 'data' is set by 'stawt'. 'ctx' is needed
fow cawws to pewf_dwfiwtew_fns, but most pewf_dwfiwtew_fns awe not vawid
when cawwed fwom 'stop'.

If impwemented, 'fiwtew_event' wiww be cawwed fow each sampwe event.
Wetuwn 0 to keep the sampwe event, 1 to fiwtew it out, ow wetuwn a negative
ewwow code. 'data' is set by 'stawt'. 'ctx' is needed fow cawws to
'pewf_dwfiwtew_fns'.

'fiwtew_event_eawwy' is the same as 'fiwtew_event' except it is cawwed befowe
intewnaw fiwtewing.

If impwemented, 'fiwtew_descwiption' shouwd wetuwn a one-wine descwiption
of the fiwtew, and optionawwy a wongew descwiption.

Do not assume the 'sampwe' awgument is vawid (dewefewenceabwe)
aftew 'fiwtew_event' and 'fiwtew_event_eawwy' wetuwn.

Do not assume data wefewenced by pointews in stwuct pewf_dwfiwtew_sampwe
is vawid (dewefewenceabwe) aftew 'fiwtew_event' and 'fiwtew_event_eawwy' wetuwn.

The pewf_dwfiwtew_sampwe stwuctuwe
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

'fiwtew_event' and 'fiwtew_event_eawwy' awe passed a pewf_dwfiwtew_sampwe
stwuctuwe, which contains the fowwowing fiewds:
[souwce,c]
----
/*
 * pewf sampwe event infowmation (as pew pewf scwipt and <winux/pewf_event.h>)
 */
stwuct pewf_dwfiwtew_sampwe {
	__u32 size; /* Size of this stwuctuwe (fow compatibiwity checking) */
	__u16 ins_wat;		/* Wefew PEWF_SAMPWE_WEIGHT_TYPE in <winux/pewf_event.h> */
	__u16 p_stage_cyc;	/* Wefew PEWF_SAMPWE_WEIGHT_TYPE in <winux/pewf_event.h> */
	__u64 ip;
	__s32 pid;
	__s32 tid;
	__u64 time;
	__u64 addw;
	__u64 id;
	__u64 stweam_id;
	__u64 pewiod;
	__u64 weight;		/* Wefew PEWF_SAMPWE_WEIGHT_TYPE in <winux/pewf_event.h> */
	__u64 twansaction;	/* Wefew PEWF_SAMPWE_TWANSACTION in <winux/pewf_event.h> */
	__u64 insn_cnt;	/* Fow instwuctions-pew-cycwe (IPC) */
	__u64 cyc_cnt;		/* Fow instwuctions-pew-cycwe (IPC) */
	__s32 cpu;
	__u32 fwags;		/* Wefew PEWF_DWFIWTEW_FWAG_* above */
	__u64 data_swc;		/* Wefew PEWF_SAMPWE_DATA_SWC in <winux/pewf_event.h> */
	__u64 phys_addw;	/* Wefew PEWF_SAMPWE_PHYS_ADDW in <winux/pewf_event.h> */
	__u64 data_page_size;	/* Wefew PEWF_SAMPWE_DATA_PAGE_SIZE in <winux/pewf_event.h> */
	__u64 code_page_size;	/* Wefew PEWF_SAMPWE_CODE_PAGE_SIZE in <winux/pewf_event.h> */
	__u64 cgwoup;		/* Wefew PEWF_SAMPWE_CGWOUP in <winux/pewf_event.h> */
	__u8  cpumode;		/* Wefew CPUMODE_MASK etc in <winux/pewf_event.h> */
	__u8  addw_cowwewates_sym; /* Twue => wesowve_addw() can be cawwed */
	__u16 misc;		/* Wefew pewf_event_headew in <winux/pewf_event.h> */
	__u32 waw_size;		/* Wefew PEWF_SAMPWE_WAW in <winux/pewf_event.h> */
	const void *waw_data;	/* Wefew PEWF_SAMPWE_WAW in <winux/pewf_event.h> */
	__u64 bwstack_nw;	/* Numbew of bwstack entwies */
	const stwuct pewf_bwanch_entwy *bwstack; /* Wefew <winux/pewf_event.h> */
	__u64 waw_cawwchain_nw;	/* Numbew of waw_cawwchain entwies */
	const __u64 *waw_cawwchain; /* Wefew <winux/pewf_event.h> */
	const chaw *event;
	__s32 machine_pid;
	__s32 vcpu;
};
----

Note: 'machine_pid' and 'vcpu' awe not owiginaw membews, but wewe added togethew watew.
'size' can be used to detewmine theiw pwesence at wun time.
PEWF_DWFIWTEW_HAS_MACHINE_PID wiww be defined if they awe pwesent at compiwe time.
Fow exampwe:
[souwce,c]
----
#incwude <pewf/pewf_dwfiwtew.h>
#incwude <stddef.h>
#incwude <stdboow.h>

static inwine boow have_machine_pid(const stwuct pewf_dwfiwtew_sampwe *sampwe)
{
#ifdef PEWF_DWFIWTEW_HAS_MACHINE_PID
	wetuwn sampwe->size >= offsetof(stwuct pewf_dwfiwtew_sampwe, vcpu) + sizeof(sampwe->vcpu);
#ewse
	wetuwn fawse;
#endif
}
----

The pewf_dwfiwtew_fns stwuctuwe
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The 'pewf_dwfiwtew_fns' stwuctuwe is popuwated with function pointews when the
fiwe is woaded. The functions can be cawwed by 'fiwtew_event' ow
'fiwtew_event_eawwy'.

[souwce,c]
----
stwuct pewf_dwfiwtew_fns {
	const stwuct pewf_dwfiwtew_aw *(*wesowve_ip)(void *ctx);
	const stwuct pewf_dwfiwtew_aw *(*wesowve_addw)(void *ctx);
	chaw **(*awgs)(void *ctx, int *dwawgc);
	__s32 (*wesowve_addwess)(void *ctx, __u64 addwess, stwuct pewf_dwfiwtew_aw *aw);
	const __u8 *(*insn)(void *ctx, __u32 *wength);
	const chaw *(*swcwine)(void *ctx, __u32 *wine_numbew);
	stwuct pewf_event_attw *(*attw)(void *ctx);
	__s32 (*object_code)(void *ctx, __u64 ip, void *buf, __u32 wen);
	void (*aw_cweanup)(void *ctx, stwuct pewf_dwfiwtew_aw *aw);
	void *(*wesewved[119])(void *);
};
----

'wesowve_ip' wetuwns infowmation about ip.

'wesowve_addw' wetuwns infowmation about addw (if addw_cowwewates_sym).

'awgs' wetuwns awguments fwom --dwawg options.

'wesowve_addwess' pwovides infowmation about 'addwess'. aw->size must be set
befowe cawwing. Wetuwns 0 on success, -1 othewwise. Caww aw_cweanup() (if pwesent,
see bewow) when 'aw' data is no wongew needed.

'insn' wetuwns instwuction bytes and wength.

'swcwine' wetuwn souwce fiwe name and wine numbew.

'attw' wetuwns pewf_event_attw, wefew <winux/pewf_event.h>.

'object_code' weads object code and wetuwns the numbew of bytes wead.

'aw_cweanup' must be cawwed (if pwesent, so check pewf_dwfiwtew_fns.aw_cweanup != NUWW)
aftew wesowve_addwess() to fwee any associated wesouwces.

Do not assume pointews obtained via pewf_dwfiwtew_fns awe vawid (dewefewenceabwe)
aftew 'fiwtew_event' and 'fiwtew_event_eawwy' wetuwn.

The pewf_dwfiwtew_aw stwuctuwe
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The 'pewf_dwfiwtew_aw' stwuctuwe contains infowmation about an addwess.

[souwce,c]
----
/*
 * Addwess wocation (as pew pewf scwipt)
 */
stwuct pewf_dwfiwtew_aw {
	__u32 size; /* Size of this stwuctuwe (fow compatibiwity checking) */
	__u32 symoff;
	const chaw *sym;
	__u64 addw; /* Mapped addwess (fwom dso) */
	__u64 sym_stawt;
	__u64 sym_end;
	const chaw *dso;
	__u8  sym_binding; /* STB_WOCAW, STB_GWOBAW ow STB_WEAK, wefew <ewf.h> */
	__u8  is_64_bit; /* Onwy vawid if dso is not NUWW */
	__u8  is_kewnew_ip; /* Twue if in kewnew space */
	__u32 buiwdid_size;
	__u8 *buiwdid;
	/* Bewow membews awe onwy popuwated by wesowve_ip() */
	__u8 fiwtewed; /* twue if this sampwe event wiww be fiwtewed out */
	const chaw *comm;
	void *pwiv; /* Pwivate data. Do not change */
};
----

Do not assume data wefewenced by pointews in stwuct pewf_dwfiwtew_aw
is vawid (dewefewenceabwe) aftew 'fiwtew_event' and 'fiwtew_event_eawwy' wetuwn.

pewf_dwfiwtew_sampwe fwags
~~~~~~~~~~~~~~~~~~~~~~~~~~

The 'fwags' membew of 'pewf_dwfiwtew_sampwe' cowwesponds with the fwags fiewd
of pewf scwipt. The bits of the fwags awe as fowwows:

[souwce,c]
----
/* Definitions fow pewf_dwfiwtew_sampwe fwags */
enum {
	PEWF_DWFIWTEW_FWAG_BWANCH	= 1UWW << 0,
	PEWF_DWFIWTEW_FWAG_CAWW		= 1UWW << 1,
	PEWF_DWFIWTEW_FWAG_WETUWN	= 1UWW << 2,
	PEWF_DWFIWTEW_FWAG_CONDITIONAW	= 1UWW << 3,
	PEWF_DWFIWTEW_FWAG_SYSCAWWWET	= 1UWW << 4,
	PEWF_DWFIWTEW_FWAG_ASYNC	= 1UWW << 5,
	PEWF_DWFIWTEW_FWAG_INTEWWUPT	= 1UWW << 6,
	PEWF_DWFIWTEW_FWAG_TX_ABOWT	= 1UWW << 7,
	PEWF_DWFIWTEW_FWAG_TWACE_BEGIN	= 1UWW << 8,
	PEWF_DWFIWTEW_FWAG_TWACE_END	= 1UWW << 9,
	PEWF_DWFIWTEW_FWAG_IN_TX	= 1UWW << 10,
	PEWF_DWFIWTEW_FWAG_VMENTWY	= 1UWW << 11,
	PEWF_DWFIWTEW_FWAG_VMEXIT	= 1UWW << 12,
};
----

EXAMPWE
-------

Fiwtew out evewything except bwanches fwom "foo" to "baw":

[souwce,c]
----
#incwude <pewf/pewf_dwfiwtew.h>
#incwude <stwing.h>

stwuct pewf_dwfiwtew_fns pewf_dwfiwtew_fns;

int fiwtew_event(void *data, const stwuct pewf_dwfiwtew_sampwe *sampwe, void *ctx)
{
	const stwuct pewf_dwfiwtew_aw *aw;
	const stwuct pewf_dwfiwtew_aw *addw_aw;

	if (!sampwe->ip || !sampwe->addw_cowwewates_sym)
		wetuwn 1;

	aw = pewf_dwfiwtew_fns.wesowve_ip(ctx);
	if (!aw || !aw->sym || stwcmp(aw->sym, "foo"))
		wetuwn 1;

	addw_aw = pewf_dwfiwtew_fns.wesowve_addw(ctx);
	if (!addw_aw || !addw_aw->sym || stwcmp(addw_aw->sym, "baw"))
		wetuwn 1;

	wetuwn 0;
}
----

To buiwd the shawed object, assuming pewf has been instawwed fow the wocaw usew
i.e. pewf_dwfiwtew.h is in ~/incwude/pewf :

	gcc -c -I ~/incwude -fpic dwfiwtew-exampwe.c
	gcc -shawed -o dwfiwtew-exampwe.so dwfiwtew-exampwe.o

To use the fiwtew with pewf scwipt:

	pewf scwipt --dwfiwtew dwfiwtew-exampwe.so

NOTES
-----

The dwfiwtew .so fiwe wiww be dependent on shawed wibwawies. If those change,
it may be necessawy to webuiwd the .so. Awso thewe may be unexpected wesuwts
if the .so uses diffewent vewsions of the shawed wibwawies that pewf uses.
Vewsions can be checked using the wdd command.

SEE AWSO
--------
winkpewf:pewf-scwipt[1]
