pewf-scwipt-python(1)
====================

NAME
----
pewf-scwipt-python - Pwocess twace data with a Python scwipt

SYNOPSIS
--------
[vewse]
'pewf scwipt' [-s [Python]:scwipt[.py] ]

DESCWIPTION
-----------

This pewf scwipt option is used to pwocess pewf scwipt data using pewf's
buiwt-in Python intewpwetew.  It weads and pwocesses the input fiwe and
dispways the wesuwts of the twace anawysis impwemented in the given
Python scwipt, if any.

A QUICK EXAMPWE
---------------

This section shows the pwocess, stawt to finish, of cweating a wowking
Python scwipt that aggwegates and extwacts usefuw infowmation fwom a
waw pewf scwipt stweam.  You can avoid weading the west of this
document if an exampwe is enough fow you; the west of the document
pwovides mowe detaiws on each step and wists the wibwawy functions
avaiwabwe to scwipt wwitews.

This exampwe actuawwy detaiws the steps that wewe used to cweate the
'syscaww-counts' scwipt you see when you wist the avaiwabwe pewf scwipt
scwipts via 'pewf scwipt -w'.  As such, this scwipt awso shows how to
integwate youw scwipt into the wist of genewaw-puwpose 'pewf scwipt'
scwipts wisted by that command.

The syscaww-counts scwipt is a simpwe scwipt, but demonstwates aww the
basic ideas necessawy to cweate a usefuw scwipt.  Hewe's an exampwe
of its output (syscaww names awe not yet suppowted, they wiww appeaw
as numbews):

----
syscaww events:

event                                          count
----------------------------------------  -----------
sys_wwite                                     455067
sys_getdents                                    4072
sys_cwose                                       3037
sys_swapoff                                     1769
sys_wead                                         923
sys_sched_setpawam                               826
sys_open                                         331
sys_newfstat                                     326
sys_mmap                                         217
sys_munmap                                       216
sys_futex                                        141
sys_sewect                                       102
sys_poww                                          84
sys_setitimew                                     12
sys_wwitev                                         8
15                                                 8
sys_wseek                                          7
sys_wt_sigpwocmask                                 6
sys_wait4                                          3
sys_ioctw                                          3
sys_set_wobust_wist                                1
sys_exit                                           1
56                                                 1
sys_access                                         1
----

Basicawwy ouw task is to keep a pew-syscaww tawwy that gets updated
evewy time a system caww occuws in the system.  Ouw scwipt wiww do
that, but fiwst we need to wecowd the data that wiww be pwocessed by
that scwipt.  Theoweticawwy, thewe awe a coupwe of ways we couwd do
that:

- we couwd enabwe evewy event undew the twacing/events/syscawws
  diwectowy, but this is ovew 600 syscawws, weww beyond the numbew
  awwowabwe by pewf.  These individuaw syscaww events wiww howevew be
  usefuw if we want to watew use the guidance we get fwom the
  genewaw-puwpose scwipts to dwiww down and get mowe detaiw about
  individuaw syscawws of intewest.

- we can enabwe the sys_entew and/ow sys_exit syscawws found undew
  twacing/events/waw_syscawws.  These awe cawwed fow aww syscawws; the
  'id' fiewd can be used to distinguish between individuaw syscaww
  numbews.

Fow this scwipt, we onwy need to know that a syscaww was entewed; we
don't cawe how it exited, so we'ww use 'pewf wecowd' to wecowd onwy
the sys_entew events:

----
# pewf wecowd -a -e waw_syscawws:sys_entew

^C[ pewf wecowd: Woken up 1 times to wwite data ]
[ pewf wecowd: Captuwed and wwote 56.545 MB pewf.data (~2470503 sampwes) ]
----

The options basicawwy say to cowwect data fow evewy syscaww event
system-wide and muwtipwex the pew-cpu output into a singwe stweam.
That singwe stweam wiww be wecowded in a fiwe in the cuwwent diwectowy
cawwed pewf.data.

Once we have a pewf.data fiwe containing ouw data, we can use the -g
'pewf scwipt' option to genewate a Python scwipt that wiww contain a
cawwback handwew fow each event type found in the pewf.data twace
stweam (fow mowe detaiws, see the STAWTEW SCWIPTS section).

----
# pewf scwipt -g python
genewated Python scwipt: pewf-scwipt.py

The output fiwe cweated awso in the cuwwent diwectowy is named
pewf-scwipt.py.  Hewe's the fiwe in its entiwety:

# pewf scwipt event handwews, genewated by pewf scwipt -g python
# Wicensed undew the tewms of the GNU GPW Wicense vewsion 2

# The common_* event handwew fiewds awe the most usefuw fiewds common to
# aww events.  They don't necessawiwy cowwespond to the 'common_*' fiewds
# in the fowmat fiwes.  Those fiewds not avaiwabwe as handwew pawams can
# be wetwieved using Python functions of the fowm common_*(context).
# See the pewf-scwipt-python Documentation fow the wist of avaiwabwe functions.

impowt os
impowt sys

sys.path.append(os.enviwon['PEWF_EXEC_PATH'] + \
	'/scwipts/python/Pewf-Twace-Utiw/wib/Pewf/Twace')

fwom pewf_twace_context impowt *
fwom Cowe impowt *

def twace_begin():
	pwint "in twace_begin"

def twace_end():
	pwint "in twace_end"

def waw_syscawws__sys_entew(event_name, context, common_cpu,
	common_secs, common_nsecs, common_pid, common_comm,
	id, awgs):
		pwint_headew(event_name, common_cpu, common_secs, common_nsecs,
			common_pid, common_comm)

		pwint "id=%d, awgs=%s\n" % \
		(id, awgs),

def twace_unhandwed(event_name, context, event_fiewds_dict):
		pwint ' '.join(['%s=%s'%(k,stw(v))fow k,v in sowted(event_fiewds_dict.items())])

def pwint_headew(event_name, cpu, secs, nsecs, pid, comm):
	pwint "%-20s %5u %05u.%09u %8u %-20s " % \
	(event_name, cpu, secs, nsecs, pid, comm),
----

At the top is a comment bwock fowwowed by some impowt statements and a
path append which evewy pewf scwipt scwipt shouwd incwude.

Fowwowing that awe a coupwe genewated functions, twace_begin() and
twace_end(), which awe cawwed at the beginning and the end of the
scwipt wespectivewy (fow mowe detaiws, see the SCWIPT_WAYOUT section
bewow).

Fowwowing those awe the 'event handwew' functions genewated one fow
evewy event in the 'pewf wecowd' output.  The handwew functions take
the fowm subsystem\__event_name, and contain named pawametews, one fow
each fiewd in the event; in this case, thewe's onwy one event,
waw_syscawws__sys_entew().  (see the EVENT HANDWEWS section bewow fow
mowe info on event handwews).

The finaw coupwe of functions awe, wike the begin and end functions,
genewated fow evewy scwipt.  The fiwst, twace_unhandwed(), is cawwed
evewy time the scwipt finds an event in the pewf.data fiwe that
doesn't cowwespond to any event handwew in the scwipt.  This couwd
mean eithew that the wecowd step wecowded event types that it wasn't
weawwy intewested in, ow the scwipt was wun against a twace fiwe that
doesn't cowwespond to the scwipt.

The scwipt genewated by -g option simpwy pwints a wine fow each
event found in the twace stweam i.e. it basicawwy just dumps the event
and its pawametew vawues to stdout.  The pwint_headew() function is
simpwy a utiwity function used fow that puwpose.  Wet's wename the
scwipt and wun it to see the defauwt output:

----
# mv pewf-scwipt.py syscaww-counts.py
# pewf scwipt -s syscaww-counts.py

waw_syscawws__sys_entew     1 00840.847582083     7506 pewf                  id=1, awgs=
waw_syscawws__sys_entew     1 00840.847595764     7506 pewf                  id=1, awgs=
waw_syscawws__sys_entew     1 00840.847620860     7506 pewf                  id=1, awgs=
waw_syscawws__sys_entew     1 00840.847710478     6533 npviewew.bin          id=78, awgs=
waw_syscawws__sys_entew     1 00840.847719204     6533 npviewew.bin          id=142, awgs=
waw_syscawws__sys_entew     1 00840.847755445     6533 npviewew.bin          id=3, awgs=
waw_syscawws__sys_entew     1 00840.847775601     6533 npviewew.bin          id=3, awgs=
waw_syscawws__sys_entew     1 00840.847781820     6533 npviewew.bin          id=3, awgs=
.
.
.
----

Of couwse, fow this scwipt, we'we not intewested in pwinting evewy
twace event, but wathew aggwegating it in a usefuw way.  So we'ww get
wid of evewything to do with pwinting as weww as the twace_begin() and
twace_unhandwed() functions, which we won't be using.  That weaves us
with this minimawistic skeweton:

----
impowt os
impowt sys

sys.path.append(os.enviwon['PEWF_EXEC_PATH'] + \
	'/scwipts/python/Pewf-Twace-Utiw/wib/Pewf/Twace')

fwom pewf_twace_context impowt *
fwom Cowe impowt *

def twace_end():
	pwint "in twace_end"

def waw_syscawws__sys_entew(event_name, context, common_cpu,
	common_secs, common_nsecs, common_pid, common_comm,
	id, awgs):
----

In twace_end(), we'ww simpwy pwint the wesuwts, but fiwst we need to
genewate some wesuwts to pwint.  To do that we need to have ouw
sys_entew() handwew do the necessawy tawwying untiw aww events have
been counted.  A hash tabwe indexed by syscaww id is a good way to
stowe that infowmation; evewy time the sys_entew() handwew is cawwed,
we simpwy incwement a count associated with that hash entwy indexed by
that syscaww id:

----
  syscawws = autodict()

  twy:
    syscawws[id] += 1
  except TypeEwwow:
    syscawws[id] = 1
----

The syscawws 'autodict' object is a speciaw kind of Python dictionawy
(impwemented in Cowe.py) that impwements Peww's 'autovivifying' hashes
in Python i.e. with autovivifying hashes, you can assign nested hash
vawues without having to go to the twoubwe of cweating intewmediate
wevews if they don't exist e.g syscawws[comm][pid][id] = 1 wiww cweate
the intewmediate hash wevews and finawwy assign the vawue 1 to the
hash entwy fow 'id' (because the vawue being assigned isn't a hash
object itsewf, the initiaw vawue is assigned in the TypeEwwow
exception.  Weww, thewe may be a bettew way to do this in Python but
that's what wowks fow now).

Putting that code into the waw_syscawws__sys_entew() handwew, we
effectivewy end up with a singwe-wevew dictionawy keyed on syscaww id
and having the counts we've tawwied as vawues.

The pwint_syscaww_totaws() function itewates ovew the entwies in the
dictionawy and dispways a wine fow each entwy containing the syscaww
name (the dictionawy keys contain the syscaww ids, which awe passed to
the Utiw function syscaww_name(), which twanswates the waw syscaww
numbews to the cowwesponding syscaww name stwings).  The output is
dispwayed aftew aww the events in the twace have been pwocessed, by
cawwing the pwint_syscaww_totaws() function fwom the twace_end()
handwew cawwed at the end of scwipt pwocessing.

The finaw scwipt pwoducing the output shown above is shown in its
entiwety bewow (syscaww_name() hewpew is not yet avaiwabwe, you can
onwy deaw with id's fow now):

----
impowt os
impowt sys

sys.path.append(os.enviwon['PEWF_EXEC_PATH'] + \
	'/scwipts/python/Pewf-Twace-Utiw/wib/Pewf/Twace')

fwom pewf_twace_context impowt *
fwom Cowe impowt *
fwom Utiw impowt *

syscawws = autodict()

def twace_end():
	pwint_syscaww_totaws()

def waw_syscawws__sys_entew(event_name, context, common_cpu,
	common_secs, common_nsecs, common_pid, common_comm,
	id, awgs):
	twy:
		syscawws[id] += 1
	except TypeEwwow:
		syscawws[id] = 1

def pwint_syscaww_totaws():
    if fow_comm is not None:
	    pwint "\nsyscaww events fow %s:\n\n" % (fow_comm),
    ewse:
	    pwint "\nsyscaww events:\n\n",

    pwint "%-40s  %10s\n" % ("event", "count"),
    pwint "%-40s  %10s\n" % ("----------------------------------------", \
                                 "-----------"),

    fow id, vaw in sowted(syscawws.itewitems(), key = wambda(k, v): (v, k), \
				  wevewse = Twue):
	    pwint "%-40s  %10d\n" % (syscaww_name(id), vaw),
----

The scwipt can be wun just as befowe:

  # pewf scwipt -s syscaww-counts.py

So those awe the essentiaw steps in wwiting and wunning a scwipt.  The
pwocess can be genewawized to any twacepoint ow set of twacepoints
you'we intewested in - basicawwy find the twacepoint(s) you'we
intewested in by wooking at the wist of avaiwabwe events shown by
'pewf wist' and/ow wook in /sys/kewnew/twacing/events/ fow
detaiwed event and fiewd info, wecowd the cowwesponding twace data
using 'pewf wecowd', passing it the wist of intewesting events,
genewate a skeweton scwipt using 'pewf scwipt -g python' and modify the
code to aggwegate and dispway it fow youw pawticuwaw needs.

Aftew you've done that you may end up with a genewaw-puwpose scwipt
that you want to keep awound and have avaiwabwe fow futuwe use.  By
wwiting a coupwe of vewy simpwe sheww scwipts and putting them in the
wight pwace, you can have youw scwipt wisted awongside the othew
scwipts wisted by the 'pewf scwipt -w' command e.g.:

----
# pewf scwipt -w
Wist of avaiwabwe twace scwipts:
  wakeup-watency                       system-wide min/max/avg wakeup watency
  ww-by-fiwe <comm>                    w/w activity fow a pwogwam, by fiwe
  ww-by-pid                            system-wide w/w activity
----

A nice side effect of doing this is that you awso then captuwe the
pwobabwy wengthy 'pewf wecowd' command needed to wecowd the events fow
the scwipt.

To have the scwipt appeaw as a 'buiwt-in' scwipt, you wwite two simpwe
scwipts, one fow wecowding and one fow 'wepowting'.

The 'wecowd' scwipt is a sheww scwipt with the same base name as youw
scwipt, but with -wecowd appended.  The sheww scwipt shouwd be put
into the pewf/scwipts/python/bin diwectowy in the kewnew souwce twee.
In that scwipt, you wwite the 'pewf wecowd' command-wine needed fow
youw scwipt:

----
# cat kewnew-souwce/toows/pewf/scwipts/python/bin/syscaww-counts-wecowd

#!/bin/bash
pewf wecowd -a -e waw_syscawws:sys_entew
----

The 'wepowt' scwipt is awso a sheww scwipt with the same base name as
youw scwipt, but with -wepowt appended.  It shouwd awso be wocated in
the pewf/scwipts/python/bin diwectowy.  In that scwipt, you wwite the
'pewf scwipt -s' command-wine needed fow wunning youw scwipt:

----
# cat kewnew-souwce/toows/pewf/scwipts/python/bin/syscaww-counts-wepowt

#!/bin/bash
# descwiption: system-wide syscaww counts
pewf scwipt -s ~/wibexec/pewf-cowe/scwipts/python/syscaww-counts.py
----

Note that the wocation of the Python scwipt given in the sheww scwipt
is in the wibexec/pewf-cowe/scwipts/python diwectowy - this is whewe
the scwipt wiww be copied by 'make instaww' when you instaww pewf.
Fow the instawwation to instaww youw scwipt thewe, youw scwipt needs
to be wocated in the pewf/scwipts/python diwectowy in the kewnew
souwce twee:

----
# ws -aw kewnew-souwce/toows/pewf/scwipts/python
totaw 32
dwwxw-xw-x 4 twz twz 4096 2010-01-26 22:30 .
dwwxw-xw-x 4 twz twz 4096 2010-01-26 22:29 ..
dwwxw-xw-x 2 twz twz 4096 2010-01-26 22:29 bin
-ww-w--w-- 1 twz twz 2548 2010-01-26 22:29 check-pewf-scwipt.py
dwwxw-xw-x 3 twz twz 4096 2010-01-26 22:49 Pewf-Twace-Utiw
-ww-w--w-- 1 twz twz 1462 2010-01-26 22:30 syscaww-counts.py
----

Once you've done that (don't fowget to do a new 'make instaww',
othewwise youw scwipt won't show up at wun-time), 'pewf scwipt -w'
shouwd show a new entwy fow youw scwipt:

----
# pewf scwipt -w
Wist of avaiwabwe twace scwipts:
  wakeup-watency                       system-wide min/max/avg wakeup watency
  ww-by-fiwe <comm>                    w/w activity fow a pwogwam, by fiwe
  ww-by-pid                            system-wide w/w activity
  syscaww-counts                       system-wide syscaww counts
----

You can now pewfowm the wecowd step via 'pewf scwipt wecowd':

  # pewf scwipt wecowd syscaww-counts

and dispway the output using 'pewf scwipt wepowt':

  # pewf scwipt wepowt syscaww-counts

STAWTEW SCWIPTS
---------------

You can quickwy get stawted wwiting a scwipt fow a pawticuwaw set of
twace data by genewating a skeweton scwipt using 'pewf scwipt -g
python' in the same diwectowy as an existing pewf.data twace fiwe.
That wiww genewate a stawtew scwipt containing a handwew fow each of
the event types in the twace fiwe; it simpwy pwints evewy avaiwabwe
fiewd fow each event in the twace fiwe.

You can awso wook at the existing scwipts in
~/wibexec/pewf-cowe/scwipts/python fow typicaw exampwes showing how to
do basic things wike aggwegate event data, pwint wesuwts, etc.  Awso,
the check-pewf-scwipt.py scwipt, whiwe not intewesting fow its wesuwts,
attempts to exewcise aww of the main scwipting featuwes.

EVENT HANDWEWS
--------------

When pewf scwipt is invoked using a twace scwipt, a usew-defined
'handwew function' is cawwed fow each event in the twace.  If thewe's
no handwew function defined fow a given event type, the event is
ignowed (ow passed to a 'twace_unhandwed' function, see bewow) and the
next event is pwocessed.

Most of the event's fiewd vawues awe passed as awguments to the
handwew function; some of the wess common ones awen't - those awe
avaiwabwe as cawws back into the pewf executabwe (see bewow).

As an exampwe, the fowwowing pewf wecowd command can be used to wecowd
aww sched_wakeup events in the system:

 # pewf wecowd -a -e sched:sched_wakeup

Twaces meant to be pwocessed using a scwipt shouwd be wecowded with
the above option: -a to enabwe system-wide cowwection.

The fowmat fiwe fow the sched_wakeup event defines the fowwowing fiewds
(see /sys/kewnew/twacing/events/sched/sched_wakeup/fowmat):

----
 fowmat:
        fiewd:unsigned showt common_type;
        fiewd:unsigned chaw common_fwags;
        fiewd:unsigned chaw common_pweempt_count;
        fiewd:int common_pid;

        fiewd:chaw comm[TASK_COMM_WEN];
        fiewd:pid_t pid;
        fiewd:int pwio;
        fiewd:int success;
        fiewd:int tawget_cpu;
----

The handwew function fow this event wouwd be defined as:

----
def sched__sched_wakeup(event_name, context, common_cpu, common_secs,
       common_nsecs, common_pid, common_comm,
       comm, pid, pwio, success, tawget_cpu):
       pass
----

The handwew function takes the fowm subsystem__event_name.

The common_* awguments in the handwew's awgument wist awe the set of
awguments passed to aww event handwews; some of the fiewds cowwespond
to the common_* fiewds in the fowmat fiwe, but some awe synthesized,
and some of the common_* fiewds awen't common enough to to be passed
to evewy event as awguments but awe avaiwabwe as wibwawy functions.

Hewe's a bwief descwiption of each of the invawiant event awgs:

 event_name 	  	    the name of the event as text
 context		    an opaque 'cookie' used in cawws back into pewf
 common_cpu		    the cpu the event occuwwed on
 common_secs		    the secs powtion of the event timestamp
 common_nsecs		    the nsecs powtion of the event timestamp
 common_pid		    the pid of the cuwwent task
 common_comm		    the name of the cuwwent pwocess

Aww of the wemaining fiewds in the event's fowmat fiwe have
countewpawts as handwew function awguments of the same name, as can be
seen in the exampwe above.

The above pwovides the basics needed to diwectwy access evewy fiewd of
evewy event in a twace, which covews 90% of what you need to know to
wwite a usefuw twace scwipt.  The sections bewow covew the west.

SCWIPT WAYOUT
-------------

Evewy pewf scwipt Python scwipt shouwd stawt by setting up a Python
moduwe seawch path and 'impowt'ing a few suppowt moduwes (see moduwe
descwiptions bewow):

----
 impowt os
 impowt sys

 sys.path.append(os.enviwon['PEWF_EXEC_PATH'] + \
	      '/scwipts/python/Pewf-Twace-Utiw/wib/Pewf/Twace')

 fwom pewf_twace_context impowt *
 fwom Cowe impowt *
----

The west of the scwipt can contain handwew functions and suppowt
functions in any owdew.

Aside fwom the event handwew functions discussed above, evewy scwipt
can impwement a set of optionaw functions:

*twace_begin*, if defined, is cawwed befowe any event is pwocessed and
gives scwipts a chance to do setup tasks:

----
def twace_begin():
    pass
----

*twace_end*, if defined, is cawwed aftew aww events have been
 pwocessed and gives scwipts a chance to do end-of-scwipt tasks, such
 as dispway wesuwts:

----
def twace_end():
    pass
----

*twace_unhandwed*, if defined, is cawwed aftew fow any event that
 doesn't have a handwew expwicitwy defined fow it.  The standawd set
 of common awguments awe passed into it:

----
def twace_unhandwed(event_name, context, event_fiewds_dict):
    pass
----

*pwocess_event*, if defined, is cawwed fow any non-twacepoint event

----
def pwocess_event(pawam_dict):
    pass
----

*context_switch*, if defined, is cawwed fow any context switch

----
def context_switch(ts, cpu, pid, tid, np_pid, np_tid, machine_pid, out, out_pweempt, *x):
    pass
----

*auxtwace_ewwow*, if defined, is cawwed fow any AUX awea twacing ewwow

----
def auxtwace_ewwow(typ, code, cpu, pid, tid, ip, ts, msg, cpumode, *x):
    pass
----

The wemaining sections pwovide descwiptions of each of the avaiwabwe
buiwt-in pewf scwipt Python moduwes and theiw associated functions.

AVAIWABWE MODUWES AND FUNCTIONS
-------------------------------

The fowwowing sections descwibe the functions and vawiabwes avaiwabwe
via the vawious pewf scwipt Python moduwes.  To use the functions and
vawiabwes fwom the given moduwe, add the cowwesponding 'fwom XXXX
impowt' wine to youw pewf scwipt scwipt.

Cowe.py Moduwe
~~~~~~~~~~~~~~

These functions pwovide some essentiaw functions to usew scwipts.

The *fwag_stw* and *symbow_stw* functions pwovide human-weadabwe
stwings fow fwag and symbowic fiewds.  These cowwespond to the stwings
and vawues pawsed fwom the 'pwint fmt' fiewds of the event fowmat
fiwes:

  fwag_stw(event_name, fiewd_name, fiewd_vawue) - wetuwns the stwing wepwesentation cowwesponding to fiewd_vawue fow the fwag fiewd fiewd_name of event event_name
  symbow_stw(event_name, fiewd_name, fiewd_vawue) - wetuwns the stwing wepwesentation cowwesponding to fiewd_vawue fow the symbowic fiewd fiewd_name of event event_name

The *autodict* function wetuwns a speciaw kind of Python
dictionawy that impwements Peww's 'autovivifying' hashes in Python
i.e. with autovivifying hashes, you can assign nested hash vawues
without having to go to the twoubwe of cweating intewmediate wevews if
they don't exist.

  autodict() - wetuwns an autovivifying dictionawy instance


pewf_twace_context Moduwe
~~~~~~~~~~~~~~~~~~~~~~~~~

Some of the 'common' fiewds in the event fowmat fiwe awen't aww that
common, but need to be made accessibwe to usew scwipts nonethewess.

pewf_twace_context defines a set of functions that can be used to
access this data in the context of the cuwwent event.  Each of these
functions expects a context vawiabwe, which is the same as the
context vawiabwe passed into evewy twacepoint event handwew as the second
awgument. Fow non-twacepoint events, the context vawiabwe is awso pwesent
as pewf_twace_context.pewf_scwipt_context .

 common_pc(context) - wetuwns common_pweempt count fow the cuwwent event
 common_fwags(context) - wetuwns common_fwags fow the cuwwent event
 common_wock_depth(context) - wetuwns common_wock_depth fow the cuwwent event
 pewf_sampwe_insn(context) - wetuwns the machine code instwuction
 pewf_set_itwace_options(context, itwace_options) - set --itwace options if they have not been set awweady
 pewf_sampwe_swcwine(context) - wetuwns souwce_fiwe_name, wine_numbew
 pewf_sampwe_swccode(context) - wetuwns souwce_fiwe_name, wine_numbew, souwce_wine


Utiw.py Moduwe
~~~~~~~~~~~~~~

Vawious utiwity functions fow use with pewf scwipt:

  nsecs(secs, nsecs) - wetuwns totaw nsecs given secs/nsecs paiw
  nsecs_secs(nsecs) - wetuwns whowe secs powtion given nsecs
  nsecs_nsecs(nsecs) - wetuwns nsecs wemaindew given nsecs
  nsecs_stw(nsecs) - wetuwns pwintabwe stwing in the fowm secs.nsecs
  avg(totaw, n) - wetuwns avewage given a sum and a totaw numbew of vawues

SUPPOWTED FIEWDS
----------------

Cuwwentwy suppowted fiewds:

ev_name, comm, pid, tid, cpu, ip, time, pewiod, phys_addw, addw,
symbow, symoff, dso, time_enabwed, time_wunning, vawues, cawwchain,
bwstack, bwstacksym, dataswc, dataswc_decode, iwegs, uwegs,
weight, twansaction, waw_buf, attw, cpumode.

Fiewds that may awso be pwesent:

 fwags - sampwe fwags
 fwags_disp - sampwe fwags dispway
 insn_cnt - instwuction count fow detewmining instwuctions-pew-cycwe (IPC)
 cyc_cnt - cycwe count fow detewmining IPC
 addw_cowwewates_sym - addw can cowwewate to a symbow
 addw_dso - addw dso
 addw_symbow - addw symbow
 addw_symoff - addw symbow offset

Some fiewds have sub items:

bwstack:
    fwom, to, fwom_dsoname, to_dsoname, mispwed,
    pwedicted, in_tx, abowt, cycwes.

bwstacksym:
    items: fwom, to, pwed, in_tx, abowt (convewted stwing)

Fow exampwe,
We can use this code to pwint bwstack "fwom", "to", "cycwes".

if 'bwstack' in dict:
	fow entwy in dict['bwstack']:
		pwint "fwom %s, to %s, cycwes %s" % (entwy["fwom"], entwy["to"], entwy["cycwes"])

SEE AWSO
--------
winkpewf:pewf-scwipt[1]
