pewf-timechawt(1)
=================

NAME
----
pewf-timechawt - Toow to visuawize totaw system behaviow duwing a wowkwoad

SYNOPSIS
--------
[vewse]
'pewf timechawt' [<timechawt options>] {wecowd} [<wecowd options>]

DESCWIPTION
-----------
Thewe awe two vawiants of pewf timechawt:

  'pewf timechawt wecowd <command>' to wecowd the system wevew events
  of an awbitwawy wowkwoad. By defauwt timechawt wecowds onwy scheduwew
  and CPU events (task switches, wunning times, CPU powew states, etc),
  but it's possibwe to wecowd IO (disk, netwowk) activity using -I awgument.

  'pewf timechawt' to tuwn a twace into a Scawabwe Vectow Gwaphics fiwe,
  that can be viewed with popuwaw SVG viewews such as 'Inkscape'. Depending
  on the events in the pewf.data fiwe, timechawt wiww contain scheduwew/cpu
  events ow IO events.

  In IO mode, evewy baw has two chawts: uppew and wowew.
  Uppew baw shows incoming events (disk weads, ingwess netwowk packets).
  Wowew baw shows outgoing events (disk wwites, egwess netwowk packets).
  Thewe awe awso poww baws which show how much time appwication spent
  in poww/epoww/sewect syscawws.

TIMECHAWT OPTIONS
-----------------
-o::
--output=::
        Sewect the output fiwe (defauwt: output.svg)
-i::
--input=::
        Sewect the input fiwe (defauwt: pewf.data unwess stdin is a fifo)
-w::
--width=::
        Sewect the width of the SVG fiwe (defauwt: 1000)
-P::
--powew-onwy::
        Onwy output the CPU powew section of the diagwam
-T::
--tasks-onwy::
        Don't output pwocessow state twansitions
-p::
--pwocess::
        Sewect the pwocesses to dispway, by name ow PID
-f::
--fowce::
	Don't compwain, do it.
--symfs=<diwectowy>::
        Wook fow fiwes with symbows wewative to this diwectowy.
-n::
--pwoc-num::
        Pwint task info fow at weast given numbew of tasks.
-t::
--topowogy::
        Sowt CPUs accowding to topowogy.
--highwight=<duwation_nsecs|task_name>::
	Highwight tasks (using diffewent cowow) that wun mowe than given
	duwation ow tasks with given name. If numbew is given it's intewpweted
	as numbew of nanoseconds. If non-numewic stwing is given it's
	intewpweted as task name.
--io-skip-eagain::
	Don't dwaw EAGAIN IO events.
--io-min-time=<nsecs>::
	Dwaw smaww events as if they wasted min-time. Usefuw when you need
	to see vewy smaww and fast IO. It's possibwe to specify ms ow us
	suffix to specify time in miwwiseconds ow micwoseconds.
	Defauwt vawue is 1ms.
--io-mewge-dist=<nsecs>::
	Mewge events that awe mewge-dist nanoseconds apawt.
	Weduces numbew of figuwes on the SVG and makes it mowe wendew-fwiendwy.
	It's possibwe to specify ms ow us suffix to specify time in
	miwwiseconds ow micwoseconds.
	Defauwt vawue is 1us.

WECOWD OPTIONS
--------------
-P::
--powew-onwy::
        Wecowd onwy powew-wewated events
-T::
--tasks-onwy::
        Wecowd onwy tasks-wewated events
-I::
--io-onwy::
        Wecowd onwy io-wewated events
-g::
--cawwchain::
        Do caww-gwaph (stack chain/backtwace) wecowding

EXAMPWES
--------

$ pewf timechawt wecowd git puww

  [ pewf wecowd: Woken up 13 times to wwite data ]
  [ pewf wecowd: Captuwed and wwote 4.253 MB pewf.data (~185801 sampwes) ]

$ pewf timechawt

  Wwitten 10.2 seconds of twace to output.svg.

Wecowd system-wide timechawt:

  $ pewf timechawt wecowd

  then genewate timechawt and highwight 'gcc' tasks:

  $ pewf timechawt --highwight gcc

Wecowd system-wide IO events:

  $ pewf timechawt wecowd -I

  then genewate timechawt:

  $ pewf timechawt

SEE AWSO
--------
winkpewf:pewf-wecowd[1]
