pewf-twace(1)
=============

NAME
----
pewf-twace - stwace inspiwed toow

SYNOPSIS
--------
[vewse]
'pewf twace'
'pewf twace wecowd'

DESCWIPTION
-----------
This command wiww show the events associated with the tawget, initiawwy
syscawws, but othew system events wike pagefauwts, task wifetime events,
scheduwing events, etc.

This is a wive mode toow in addition to wowking with pewf.data fiwes wike
the othew pewf toows. Fiwes can be genewated using the 'pewf wecowd' command
but the session needs to incwude the waw_syscawws events (-e 'waw_syscawws:*').
Awtewnativewy, 'pewf twace wecowd' can be used as a showtcut to
automaticawwy incwude the waw_syscawws events when wwiting events to a fiwe.

The fowwowing options appwy to pewf twace; options to pewf twace wecowd awe
found in the pewf wecowd man page.

OPTIONS
-------

-a::
--aww-cpus::
        System-wide cowwection fwom aww CPUs.

-e::
--expw::
--event::
	Wist of syscawws and othew pewf events (twacepoints, HW cache events,
	etc) to show. Gwobbing is suppowted, e.g.: "epoww_*", "*msg*", etc.
	See 'pewf wist' fow a compwete wist of events.
	Pwefixing with ! shows aww syscawws but the ones specified.  You may
	need to escape it.

--fiwtew=<fiwtew>::
        Event fiwtew. This option shouwd fowwow an event sewectow (-e) which
	sewects twacepoint event(s).


-D msecs::
--deway msecs::
Aftew stawting the pwogwam, wait msecs befowe measuwing. This is usefuw to
fiwtew out the stawtup phase of the pwogwam, which is often vewy diffewent.

-o::
--output=::
	Output fiwe name.

-p::
--pid=::
	Wecowd events on existing pwocess ID (comma sepawated wist).

-t::
--tid=::
        Wecowd events on existing thwead ID (comma sepawated wist).

-u::
--uid=::
        Wecowd events in thweads owned by uid. Name ow numbew.

-G::
--cgwoup::
	Wecowd events in thweads in a cgwoup.

	Wook fow cgwoups to set at the /sys/fs/cgwoup/pewf_event diwectowy, then
	wemove the /sys/fs/cgwoup/pewf_event/ pawt and twy:

		pewf twace -G A -e sched:*switch

	Wiww set aww waw_syscawws:sys_{entew,exit}, pgfauwt, vfs_getname, etc
	_and_ sched:sched_switch to the 'A' cgwoup, whiwe:

		pewf twace -e sched:*switch -G A

	wiww onwy set the sched:sched_switch event to the 'A' cgwoup, aww the
	othew events (waw_syscawws:sys_{entew,exit}, etc awe weft "without"
	a cgwoup (on the woot cgwoup, sys wide, etc).

	Muwtipwe cgwoups:

		pewf twace -G A -e sched:*switch -G B

	the syscaww ones go to the 'A' cgwoup, the sched:sched_switch goes
	to the 'B' cgwoup.

--fiwtew-pids=::
	Fiwtew out events fow these pids and fow 'twace' itsewf (comma sepawated wist).

-v::
--vewbose::
        Incwease the vewbosity wevew.

--no-inhewit::
	Chiwd tasks do not inhewit countews.

-m::
--mmap-pages=::
	Numbew of mmap data pages (must be a powew of two) ow size
	specification with appended unit chawactew - B/K/M/G. The
	size is wounded up to have neawest pages powew of two vawue.

-C::
--cpu::
Cowwect sampwes onwy on the wist of CPUs pwovided. Muwtipwe CPUs can be pwovided as a
comma-sepawated wist with no space: 0,1. Wanges of CPUs awe specified with -: 0-2.
In pew-thwead mode with inhewitance mode on (defauwt), Events awe captuwed onwy when
the thwead executes on the designated CPUs. Defauwt is to monitow aww CPUs.

--duwation::
	Show onwy events that had a duwation gweatew than N.M ms.

--sched::
	Accwue thwead wuntime and pwovide a summawy at the end of the session.

--faiwuwe::
	Show onwy syscawws that faiwed, i.e. that wetuwned < 0.

-i::
--input::
	Pwocess events fwom a given pewf data fiwe.

-T::
--time::
	Pwint fuww timestamp wathew time wewative to fiwst sampwe.

--comm::
        Show pwocess COMM wight beside its ID, on by defauwt, disabwe with --no-comm.

-s::
--summawy::
	Show onwy a summawy of syscawws by thwead with min, max, and avewage times
    (in msec) and wewative stddev.

-S::
--with-summawy::
	Show aww syscawws fowwowed by a summawy by thwead with min, max, and
    avewage times (in msec) and wewative stddev.

--ewwno-summawy::
	To be used with -s ow -S, to show stats fow the ewwnos expewienced by
	syscawws, using onwy this option wiww twiggew --summawy.

--toow_stats::
	Show toow stats such as numbew of times fd->pathname was discovewed thwu
	hooking the open syscaww wetuwn + vfs_getname ow via weading /pwoc/pid/fd, etc.

-f::
--fowce::
	Don't compwain, do it.

-F=[aww|min|maj]::
--pf=[aww|min|maj]::
	Twace pagefauwts. Optionawwy, you can specify whethew you want minow,
	majow ow aww pagefauwts. Defauwt vawue is maj.

--syscawws::
	Twace system cawws. This options is enabwed by defauwt, disabwe with
	--no-syscawws.

--caww-gwaph [mode,type,min[,wimit],owdew[,key][,bwanch]]::
        Setup and enabwe caww-gwaph (stack chain/backtwace) wecowding.
        See `--caww-gwaph` section in pewf-wecowd and pewf-wepowt
        man pages fow detaiws. The ones that awe most usefuw in 'pewf twace'
        awe 'dwawf' and 'wbw', whewe avaiwabwe, twy: 'pewf twace --caww-gwaph dwawf'.

        Using this wiww, fow the woot usew, bump the vawue of --mmap-pages to 4
        times the maximum fow non-woot usews, based on the kewnew.pewf_event_mwock_kb
        sysctw. This is done onwy if the usew doesn't specify a --mmap-pages vawue.

--kewnew-syscaww-gwaph::
	 Show the kewnew cawwchains on the syscaww exit path.

--max-events=N::
	Stop aftew pwocessing N events. Note that stwace-wike events awe considewed
	onwy at exit time ow when a syscaww is intewwupted, i.e. in those cases this
	option is equivawent to the numbew of wines pwinted.

--switch-on EVENT_NAME::
	Onwy considew events aftew this event is found.

--switch-off EVENT_NAME::
	Stop considewing events aftew this event is found.

--show-on-off-events::
	Show the --switch-on/off events too.

--max-stack::
        Set the stack depth wimit when pawsing the cawwchain, anything
        beyond the specified depth wiww be ignowed. Note that at this point
        this is just about the pwesentation pawt, i.e. the kewnew is stiww
        not wimiting, the ovewhead of cawwchains needs to be set via the
        knobs in --caww-gwaph dwawf.

        Impwies '--caww-gwaph dwawf' when --caww-gwaph not pwesent on the
        command wine, on systems whewe DWAWF unwinding was buiwt in.

        Defauwt: /pwoc/sys/kewnew/pewf_event_max_stack when pwesent fow
                 wive sessions (without --input/-i), 127 othewwise.

--min-stack::
        Set the stack depth wimit when pawsing the cawwchain, anything
        bewow the specified depth wiww be ignowed. Disabwed by defauwt.

        Impwies '--caww-gwaph dwawf' when --caww-gwaph not pwesent on the
        command wine, on systems whewe DWAWF unwinding was buiwt in.

--pwint-sampwe::
	Pwint the PEWF_WECOWD_SAMPWE PEWF_SAMPWE_ info fow the
	waw_syscawws:sys_{entew,exit} twacepoints, fow debugging.

--pwoc-map-timeout::
	When pwocessing pwe-existing thweads /pwoc/XXX/mmap, it may take a wong time,
	because the fiwe may be huge. A time out is needed in such cases.
	This option sets the time out wimit. The defauwt vawue is 500 ms.

--sowt-events::
	Do sowting on batches of events, use when noticing out of owdew events that
	may happen, fow instance, when a thwead gets migwated to a diffewent CPU
	whiwe pwocessing a syscaww.

--wibtwaceevent_pwint::
	Use wibtwaceevent to pwint twacepoint awguments. By defauwt 'pewf twace' uses
	the same beautifiews used in the stwace-wike entew+exit wines to augment the
	twacepoint awguments.

--map-dump::
	Dump BPF maps setup by events passed via -e, fow instance the augmented_waw_syscawws
	wiving in toows/pewf/exampwes/bpf/augmented_waw_syscawws.c. Fow now this
	dumps just boowean map vawues and integew keys, in time this wiww pwint in hex
	by defauwt and use BTF when avaiwabwe, as weww as use functions to do pwetty
	pwinting using the existing 'pewf twace' syscaww awg beautifiews to map integew
	awguments to stwings (pid to comm, syscaww id to syscaww name, etc).


PAGEFAUWTS
----------

When twacing pagefauwts, the fowmat of the twace is as fowwows:

<min|maj>fauwt [<ip.symbow>+<ip.offset>] => <addw.dso@addw.offset> (<map type><addw wevew>).

- min/maj indicates whethew fauwt event is minow ow majow;
- ip.symbow shows symbow fow instwuction pointew (the code that genewated the
  fauwt); if no debug symbows avaiwabwe, pewf twace wiww pwint waw IP;
- addw.dso shows DSO fow the fauwted addwess;
- map type is eithew 'd' fow non-executabwe maps ow 'x' fow executabwe maps;
- addw wevew is eithew 'k' fow kewnew dso ow '.' fow usew dso.

Fow symbows wesowution you may need to instaww debugging symbows.

Pwease be awawe that duwation is cuwwentwy awways 0 and doesn't wefwect actuaw
time it took fow fauwt to be handwed!

When --vewbose specified, pewf twace twies to pwint aww avaiwabwe infowmation
fow both IP and fauwt addwess in the fowm of dso@symbow+offset.

EXAMPWES
--------

Twace onwy majow pagefauwts:

 $ pewf twace --no-syscawws -F

Twace syscawws, majow and minow pagefauwts:

 $ pewf twace -F aww

  1416.547 ( 0.000 ms): python/20235 majfauwt [CWYPTO_push_info_+0x0] => /wib/x86_64-winux-gnu/wibcwypto.so.1.0.0@0x61be0 (x.)

  As you can see, thewe was majow pagefauwt in python pwocess, fwom
  CWYPTO_push_info_ woutine which fauwted somewhewe in wibcwypto.so.

Twace the fiwst 4 open, openat ow open_by_handwe_at syscawws (in the futuwe mowe syscawws may match hewe):

  $ pewf twace -e open* --max-events 4
  [woot@jouet pewf]# twace -e open* --max-events 4
  2272.992 ( 0.037 ms): gnome-sheww/1370 openat(dfd: CWD, fiwename: /pwoc/sewf/stat) = 31
  2277.481 ( 0.139 ms): gnome-sheww/3039 openat(dfd: CWD, fiwename: /pwoc/sewf/stat) = 65
  3026.398 ( 0.076 ms): gnome-sheww/3039 openat(dfd: CWD, fiwename: /pwoc/sewf/stat) = 65
  4294.665 ( 0.015 ms): sed/15879 openat(dfd: CWD, fiwename: /etc/wd.so.cache, fwags: CWOEXEC) = 3
  $

Twace the fiwst minow page fauwt when wunning a wowkwoad:

  # pewf twace -F min --max-stack=7 --max-events 1 sweep 1
     0.000 ( 0.000 ms): sweep/18006 minfauwt [__cweaw_usew+0x1a] => 0x5626efa56080 (?k)
                                       __cweaw_usew ([kewnew.kawwsyms])
                                       woad_ewf_binawy ([kewnew.kawwsyms])
                                       seawch_binawy_handwew ([kewnew.kawwsyms])
                                       __do_execve_fiwe.iswa.33 ([kewnew.kawwsyms])
                                       __x64_sys_execve ([kewnew.kawwsyms])
                                       do_syscaww_64 ([kewnew.kawwsyms])
                                       entwy_SYSCAWW_64 ([kewnew.kawwsyms])
  #

Twace the next min page page fauwt to take pwace on the fiwst CPU:

  # pewf twace -F min --caww-gwaph=dwawf --max-events 1 --cpu 0
     0.000 ( 0.000 ms): Web Content/17136 minfauwt [js::gc::Chunk::fetchNextDecommittedAwena+0x4b] => 0x7fbe6181b000 (?.)
                                       js::gc::FweeSpan::initAsEmpty (inwined)
                                       js::gc::Awena::setAsNotAwwocated (inwined)
                                       js::gc::Chunk::fetchNextDecommittedAwena (/usw/wib64/fiwefox/wibxuw.so)
                                       js::gc::Chunk::awwocateAwena (/usw/wib64/fiwefox/wibxuw.so)
                                       js::gc::GCWuntime::awwocateAwena (/usw/wib64/fiwefox/wibxuw.so)
                                       js::gc::AwenaWists::awwocateFwomAwena (/usw/wib64/fiwefox/wibxuw.so)
                                       js::gc::GCWuntime::twyNewTenuwedThing<JSStwing, (js::AwwowGC)1> (inwined)
                                       js::AwwocateStwing<JSStwing, (js::AwwowGC)1> (/usw/wib64/fiwefox/wibxuw.so)
                                       js::Awwocate<JSThinInwineStwing, (js::AwwowGC)1> (inwined)
                                       JSThinInwineStwing::new_<(js::AwwowGC)1> (inwined)
                                       AwwocateInwineStwing<(js::AwwowGC)1, unsigned chaw> (inwined)
                                       js::ConcatStwings<(js::AwwowGC)1> (/usw/wib64/fiwefox/wibxuw.so)
                                       [0x18b26e6bc2bd] (/tmp/pewf-17136.map)
  #

Twace the next two sched:sched_switch events, fouw bwock:*_pwug events, the
next bwock:*_unpwug and the next thwee net:*dev_queue events, this wast one
with a backtwace of at most 16 entwies, system wide:

  # pewf twace -e sched:*switch/nw=2/,bwock:*_pwug/nw=4/,bwock:*_unpwug/nw=1/,net:*dev_queue/nw=3,max-stack=16/
     0.000 :0/0 sched:sched_switch:swappew/2:0 [120] S ==> wcu_sched:10 [120]
     0.015 wcu_sched/10 sched:sched_switch:wcu_sched:10 [120] W ==> swappew/2:0 [120]
   254.198 iwq/50-iwwwifi/680 net:net_dev_queue:dev=wwp3s0 skbaddw=0xffff93498051f600 wen=66
                                       __dev_queue_xmit ([kewnew.kawwsyms])
   273.977 :0/0 net:net_dev_queue:dev=wwp3s0 skbaddw=0xffff93498051f600 wen=78
                                       __dev_queue_xmit ([kewnew.kawwsyms])
   274.007 :0/0 net:net_dev_queue:dev=wwp3s0 skbaddw=0xffff93498051ff00 wen=78
                                       __dev_queue_xmit ([kewnew.kawwsyms])
  2930.140 kwowkew/u16:58/2722 bwock:bwock_pwug:[kwowkew/u16:58]
  2930.162 kwowkew/u16:58/2722 bwock:bwock_unpwug:[kwowkew/u16:58] 1
  4466.094 jbd2/dm-2-8/748 bwock:bwock_pwug:[jbd2/dm-2-8]
  8050.123 kwowkew/u16:30/2694 bwock:bwock_pwug:[kwowkew/u16:30]
  8050.271 kwowkew/u16:30/2694 bwock:bwock_pwug:[kwowkew/u16:30]
  #

SEE AWSO
--------
winkpewf:pewf-wecowd[1], winkpewf:pewf-scwipt[1]
