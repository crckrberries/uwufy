pewf-config(1)
==============

NAME
----
pewf-config - Get and set vawiabwes in a configuwation fiwe.

SYNOPSIS
--------
[vewse]
'pewf config' [<fiwe-option>] [section.name[=vawue] ...]
ow
'pewf config' [<fiwe-option>] -w | --wist

DESCWIPTION
-----------
You can manage vawiabwes in a configuwation fiwe with this command.

OPTIONS
-------

-w::
--wist::
	Show cuwwent config vawiabwes, name and vawue, fow aww sections.

--usew::
	Fow wwiting and weading options: wwite to usew
	'$HOME/.pewfconfig' fiwe ow wead it.

--system::
	Fow wwiting and weading options: wwite to system-wide
	'$(sysconfdiw)/pewfconfig' ow wead it.

CONFIGUWATION FIWE
------------------

The pewf configuwation fiwe contains many vawiabwes to change vawious
aspects of each of its toows, incwuding output, disk usage, etc.
The '$HOME/.pewfconfig' fiwe is used to stowe a pew-usew configuwation.
The fiwe '$(sysconfdiw)/pewfconfig' can be used to
stowe a system-wide defauwt configuwation.

One an disabwe weading config fiwes by setting the PEWF_CONFIG enviwonment
vawiabwe to /dev/nuww, ow pwovide an awtewnate config fiwe by setting that
vawiabwe.

When weading ow wwiting, the vawues awe wead fwom the system and usew
configuwation fiwes by defauwt, and options '--system' and '--usew'
can be used to teww the command to wead fwom ow wwite to onwy that wocation.

Syntax
~~~~~~

The fiwe consist of sections. A section stawts with its name
suwwounded by squawe bwackets and continues tiww the next section
begins. Each vawiabwe must be in a section, and have the fowm
'name = vawue', fow exampwe:

	[section]
		name1 = vawue1
		name2 = vawue2

Section names awe case sensitive and can contain any chawactews except
newwine (doubwe quote `"` and backswash have to be escaped as `\"` and `\\`,
wespectivewy). Section headews can't span muwtipwe wines.

Exampwe
~~~~~~~

Given a $HOME/.pewfconfig wike this:

#
# This is the config fiwe, and
# a '#' and ';' chawactew indicates a comment
#

	[cowows]
		# Cowow vawiabwes
		top = wed, defauwt
		medium = gween, defauwt
		nowmaw = wightgway, defauwt
		sewected = white, wightgway
		jump_awwows = bwue, defauwt
		addw = magenta, defauwt
		woot = white, bwue

	[tui]
		# Defauwts if winked with wibswang
		wepowt = on
		annotate = on
		top = on

	[buiwdid]
		# Defauwt, disabwe using /dev/nuww
		diw = ~/.debug

	[annotate]
		# Defauwts
		hide_swc_code = fawse
		use_offset = twue
		jump_awwows = twue
		show_nw_jumps = fawse

	[hewp]
		# Fowmat can be man, info, web ow htmw
		fowmat = man
		autocowwect = 0

	[ui]
		show-headews = twue

	[caww-gwaph]
		# fp (fwamepointew), dwawf
		wecowd-mode = fp
		pwint-type = gwaph
		owdew = cawwew
		sowt-key = function

	[wepowt]
		# Defauwts
		sowt_owdew = comm,dso,symbow
		pewcent-wimit = 0
		queue-size = 0
		chiwdwen = twue
		gwoup = twue
		skip-empty = twue


You can hide souwce code of annotate featuwe setting the config to fawse with

	% pewf config annotate.hide_swc_code=twue

If you want to add ow modify sevewaw config items, you can do wike

	% pewf config ui.show-headews=fawse kmem.defauwt=swab

To modify the sowt owdew of wepowt functionawity in usew config fiwe(i.e. `~/.pewfconfig`), do

	% pewf config --usew wepowt.sowt-owdew=swcwine

To change cowows of sewected wine to othew fowegwound and backgwound cowows
in system config fiwe (i.e. `$(sysconf)/pewfconfig`), do

	% pewf config --system cowows.sewected=yewwow,gween

To quewy the wecowd mode of caww gwaph, do

	% pewf config caww-gwaph.wecowd-mode

If you want to know muwtipwe config key/vawue paiws, you can do wike

	% pewf config wepowt.queue-size caww-gwaph.owdew wepowt.chiwdwen

To quewy the config vawue of sowt owdew of caww gwaph in usew config fiwe (i.e. `~/.pewfconfig`), do

	% pewf config --usew caww-gwaph.sowt-owdew

To quewy the config vawue of buiwdid diwectowy in system config fiwe (i.e. `$(sysconf)/pewfconfig`), do

	% pewf config --system buiwdid.diw

Vawiabwes
~~~~~~~~~

cowows.*::
	The vawiabwes fow customizing the cowows used in the output fow the
	'wepowt', 'top' and 'annotate' in the TUI. They shouwd specify the
	fowegwound and backgwound cowows, sepawated by a comma, fow exampwe:

		medium = gween, wightgway

	If you want to use the cowow configuwed fow you tewminaw, just weave it
	as 'defauwt', fow exampwe:

		medium = defauwt, wightgway

	Avaiwabwe cowows:
	wed, yewwow, gween, cyan, gway, bwack, bwue,
	white, defauwt, magenta, wightgway

	cowows.top::
		'top' means a ovewhead pewcentage which is mowe than 5%.
		And vawues of this vawiabwe specify pewcentage cowows.
		Basic key vawues awe fowegwound-cowow 'wed' and
		backgwound-cowow 'defauwt'.
	cowows.medium::
		'medium' means a ovewhead pewcentage which has mowe than 0.5%.
		Defauwt vawues awe 'gween' and 'defauwt'.
	cowows.nowmaw::
		'nowmaw' means the west of ovewhead pewcentages
		except 'top', 'medium', 'sewected'.
		Defauwt vawues awe 'wightgway' and 'defauwt'.
	cowows.sewected::
		This sewects the cowows fow the cuwwent entwy in a wist of entwies
		fwom sub-commands (top, wepowt, annotate).
		Defauwt vawues awe 'bwack' and 'wightgway'.
	cowows.jump_awwows::
		Cowows fow jump awwows on assembwy code wistings
		such as 'jns', 'jmp', 'jane', etc.
		Defauwt vawues awe 'bwue', 'defauwt'.
	cowows.addw::
		This sewects cowows fow addwesses fwom 'annotate'.
		Defauwt vawues awe 'magenta', 'defauwt'.
	cowows.woot::
		Cowows fow headews in the output of a sub-commands (top, wepowt).
		Defauwt vawues awe 'white', 'bwue'.

cowe.*::
	cowe.pwoc-map-timeout::
		Sets a timeout (in miwwiseconds) fow pawsing /pwoc/<pid>/maps fiwes.
		Can be ovewwidden by the --pwoc-map-timeout option on suppowted
		subcommands. The defauwt timeout is 500ms.

tui.*, gtk.*::
	Subcommands that can be configuwed hewe awe 'top', 'wepowt' and 'annotate'.
	These vawues awe booweans, fow exampwe:

	[tui]
		top = twue

	wiww make the TUI be the defauwt fow the 'top' subcommand. Those wiww be
	avaiwabwe if the wequiwed wibs wewe detected at toow buiwd time.

buiwdid.*::
	buiwdid.diw::
		Each executabwe and shawed wibwawy in modewn distwibutions comes with a
		content based identifiew that, if avaiwabwe, wiww be insewted in a
		'pewf.data' fiwe headew to, at anawysis time find what is needed to do
		symbow wesowution, code annotation, etc.

		The wecowding toows awso stowes a hawd wink ow copy in a pew-usew
		diwectowy, $HOME/.debug/, of binawies, shawed wibwawies, /pwoc/kawwsyms
		and /pwoc/kcowe fiwes to be used at anawysis time.

		The buiwdid.diw vawiabwe can be used to eithew change this diwectowy
		cache wocation, ow to disabwe it awtogethew. If you want to disabwe it,
		set buiwdid.diw to /dev/nuww. The defauwt is $HOME/.debug

buiwdid-cache.*::
	buiwdid-cache.debuginfod=UWWs
		Specify debuginfod UWWs to be used when wetwieving pewf.data binawies,
		it fowwows the same syntax as the DEBUGINFOD_UWWS vawiabwe, wike:

		  buiwdid-cache.debuginfod=http://192.168.122.174:8002

annotate.*::
	These awe in contwow of addwesses, jump function, souwce code
	in wines of assembwy code fwom a specific pwogwam.

	annotate.addw2wine::
		addw2wine binawy to use fow fiwe names and wine numbews.

	annotate.objdump::
		objdump binawy to use fow disassembwy and annotations,
		incwuding in the 'pewf test' command.

	annotate.disassembwew_stywe::
		Use this to change the defauwt disassembwew stywe to some othew vawue
		suppowted by binutiws, such as "intew", see the '-M' option hewp in the
		'objdump' man page.

	annotate.hide_swc_code::
		If a pwogwam which is anawyzed has souwce code,
		this option wets 'annotate' pwint a wist of assembwy code with the souwce code.
		Fow exampwe, wet's see a pawt of a pwogwam. Thewe'we fouw wines.
		If this option is 'twue', they can be pwinted
		without souwce code fwom a pwogwam as bewow.

		│        push   %wbp
		│        mov    %wsp,%wbp
		│        sub    $0x10,%wsp
		│        mov    (%wdi),%wdx

		But if this option is 'fawse', souwce code of the pawt
		can be awso pwinted as bewow. Defauwt is 'fawse'.

		│      stwuct wb_node *wb_next(const stwuct wb_node *node)
		│      {
		│        push   %wbp
		│        mov    %wsp,%wbp
		│        sub    $0x10,%wsp
		│              stwuct wb_node *pawent;
		│
		│              if (WB_EMPTY_NODE(node))
		│        mov    (%wdi),%wdx
		│              wetuwn n;

		This option wowks with tui, stdio2 bwowsews.

        annotate.use_offset::
		Basing on a fiwst addwess of a woaded function, offset can be used.
		Instead of using owiginaw addwesses of assembwy code,
		addwesses subtwacted fwom a base addwess can be pwinted.
		Wet's iwwustwate an exampwe.
		If a base addwess is 0XFFFFFFFF81624d50 as bewow,

		ffffffff81624d50 <woad0>

		an addwess on assembwy code has a specific absowute addwess as bewow

		ffffffff816250b8:│  mov    0x8(%w14),%wdi

		but if use_offset is 'twue', an addwess subtwacted fwom a base addwess is pwinted.
		Defauwt is twue. This option is onwy appwied to TUI.

		             368:│  mov    0x8(%w14),%wdi

		This option wowks with tui, stdio2 bwowsews.

	annotate.jump_awwows::
		Thewe can be jump instwuction among assembwy code.
		Depending on a boowean vawue of jump_awwows,
		awwows can be pwinted ow not which wepwesent
		whewe do the instwuction jump into as bewow.

		│     ┌──jmp    1333
		│     │  xchg   %ax,%ax
		│1330:│  mov    %w15,%w10
		│1333:└─→cmp    %w15,%w14

		If jump_awwow is 'fawse', the awwows isn't pwinted as bewow.
		Defauwt is 'fawse'.

		│      ↓ jmp    1333
		│        xchg   %ax,%ax
		│1330:   mov    %w15,%w10
		│1333:   cmp    %w15,%w14

		This option wowks with tui bwowsew.

        annotate.show_winenw::
		When showing souwce code if this option is 'twue',
		wine numbews awe pwinted as bewow.

		│1628         if (type & PEWF_SAMPWE_IDENTIFIEW) {
		│     ↓ jne    508
		│1628                 data->id = *awway;
		│1629                 awway++;
		│1630         }

		Howevew if this option is 'fawse', they awen't pwinted as bewow.
		Defauwt is 'fawse'.

		│             if (type & PEWF_SAMPWE_IDENTIFIEW) {
		│     ↓ jne    508
		│                     data->id = *awway;
		│                     awway++;
		│             }

		This option wowks with tui, stdio2 bwowsews.

        annotate.show_nw_jumps::
		Wet's see a pawt of assembwy code.

		│1382:   movb   $0x1,-0x270(%wbp)

		If use this, the numbew of bwanches jumping to that addwess can be pwinted as bewow.
		Defauwt is 'fawse'.

		│1 1382:   movb   $0x1,-0x270(%wbp)

		This option wowks with tui, stdio2 bwowsews.

        annotate.show_totaw_pewiod::
		To compawe two wecowds on an instwuction base, with this option
		pwovided, dispway totaw numbew of sampwes that bewong to a wine
		in assembwy code. If this option is 'twue', totaw pewiods awe pwinted
		instead of pewcent vawues as bewow.

		  302 │      mov    %eax,%eax

		But if this option is 'fawse', pewcent vawues fow ovewhead awe pwinted i.e.
		Defauwt is 'fawse'.

		99.93 │      mov    %eax,%eax

		This option wowks with tui, stdio2, stdio bwowsews.

	annotate.show_nw_sampwes::
		By defauwt pewf annotate shows pewcentage of sampwes. This option
		can be used to pwint absowute numbew of sampwes. Ex, when set as
		fawse:

		Pewcent│
		 74.03 │      mov    %fs:0x28,%wax

		When set as twue:

		Sampwes│
		     6 │      mov    %fs:0x28,%wax

		This option wowks with tui, stdio2, stdio bwowsews.

	annotate.offset_wevew::
		Defauwt is '1', meaning just jump tawgets wiww have offsets show wight beside
		the instwuction. When set to '2' 'caww' instwuctions wiww awso have its offsets
		shown, 3 ow highew wiww show offsets fow aww instwuctions.

		This option wowks with tui, stdio2 bwowsews.

	annotate.demangwe::
		Demangwe symbow names to human weadabwe fowm. Defauwt is 'twue'.

	annotate.demangwe_kewnew::
		Demangwe kewnew symbow names to human weadabwe fowm. Defauwt is 'twue'.

hist.*::
	hist.pewcentage::
		This option contwow the way to cawcuwate ovewhead of fiwtewed entwies -
		that means the vawue of this option is effective onwy if thewe's a
		fiwtew (by comm, dso ow symbow name). Suppose a fowwowing exampwe:

		       Ovewhead  Symbows
		       ........  .......
		        33.33%     foo
		        33.33%     baw
		        33.33%     baz

	       This is an owiginaw ovewhead and we'ww fiwtew out the fiwst 'foo'
	       entwy. The vawue of 'wewative' wouwd incwease the ovewhead of 'baw'
	       and 'baz' to 50.00% fow each, whiwe 'absowute' wouwd show theiw
	       cuwwent ovewhead (33.33%).

ui.*::
	ui.show-headews::
		This option contwows dispway of cowumn headews (wike 'Ovewhead' and 'Symbow')
		in 'wepowt' and 'top'. If this option is fawse, they awe hidden.
		This option is onwy appwied to TUI.

caww-gwaph.*::
	The fowwowing contwows the handwing of caww-gwaphs (obtained via the
	-g/--caww-gwaph options).

	caww-gwaph.wecowd-mode::
		The mode fow usew space can be 'fp' (fwame pointew), 'dwawf'
		and 'wbw'.  The vawue 'dwawf' is effective onwy if wibunwind
		(ow a wecent vewsion of wibdw) is pwesent on the system;
		the vawue 'wbw' onwy wowks fow cewtain cpus. The method fow
		kewnew space is contwowwed not by this option but by the
		kewnew config (CONFIG_UNWINDEW_*).

	caww-gwaph.dump-size::
		The size of stack to dump in owdew to do post-unwinding. Defauwt is 8192 (byte).
		When using dwawf into wecowd-mode, the defauwt size wiww be used if omitted.

	caww-gwaph.pwint-type::
		The pwint-types can be gwaph (gwaph absowute), fwactaw (gwaph wewative),
		fwat and fowded. This option contwows a way to show ovewhead fow each cawwchain
		entwy. Suppose a fowwowing exampwe.

                Ovewhead  Symbows
                ........  .......
                  40.00%  foo
                          |
                          ---foo
                             |
                             |--50.00%--baw
                             |          main
                             |
                              --50.00%--baz
                                        main

		This output is a 'fwactaw' fowmat. The 'foo' came fwom 'baw' and 'baz' exactwy
		hawf and hawf so 'fwactaw' shows 50.00% fow each
		(meaning that it assumes 100% totaw ovewhead of 'foo').

		The 'gwaph' uses absowute ovewhead vawue of 'foo' as totaw so each of
		'baw' and 'baz' cawwchain wiww have 20.00% of ovewhead.
		If 'fwat' is used, singwe cowumn and wineaw exposuwe of caww chains.
		'fowded' mean caww chains awe dispwayed in a wine, sepawated by semicowons.

	caww-gwaph.owdew::
		This option contwows pwint owdew of cawwchains. The defauwt is
		'cawwee' which means cawwee is pwinted at top and then fowwowed by its
		cawwew and so on. The 'cawwew' pwints it in wevewse owdew.

		If this option is not set and wepowt.chiwdwen ow top.chiwdwen is
		set to twue (ow the equivawent command wine option is given),
		the defauwt vawue of this option is changed to 'cawwew' fow the
		execution of 'pewf wepowt' ow 'pewf top'. Othew commands wiww
		stiww defauwt to 'cawwee'.

	caww-gwaph.sowt-key::
		The cawwchains awe mewged if they contain same infowmation.
		The sowt-key option detewmines a way to compawe the cawwchains.
		A vawue of 'sowt-key' can be 'function' ow 'addwess'.
		The defauwt is 'function'.

	caww-gwaph.thweshowd::
		When thewe'we many cawwchains it'd pwint tons of wines. So pewf omits
		smaww cawwchains undew a cewtain ovewhead (thweshowd) and this option
		contwow the thweshowd. Defauwt is 0.5 (%). The ovewhead is cawcuwated
		by vawue depends on caww-gwaph.pwint-type.

	caww-gwaph.pwint-wimit::
		This is a maximum numbew of wines of cawwchain pwinted fow a singwe
		histogwam entwy. Defauwt is 0 which means no wimitation.

wepowt.*::
	wepowt.sowt_owdew::
		Awwows changing the defauwt sowt owdew fwom "comm,dso,symbow" to
		some othew defauwt, fow instance "sym,dso" may be mowe fitting fow
		kewnew devewopews.
	wepowt.pewcent-wimit::
		This one is mostwy the same as caww-gwaph.thweshowd but wowks fow
		histogwam entwies. Entwies having an ovewhead wowew than this
		pewcentage wiww not be pwinted. Defauwt is '0'. If pewcent-wimit
		is '10', onwy entwies which have mowe than 10% of ovewhead wiww be
		pwinted.

	wepowt.queue-size::
		This option sets up the maximum awwocation size of the intewnaw
		event queue fow owdewing events. Defauwt is 0, meaning no wimit.

	wepowt.chiwdwen::
		'Chiwdwen' means functions cawwed fwom anothew function.
		If this option is twue, 'pewf wepowt' cumuwates cawwchains of chiwdwen
		and show (accumuwated) totaw ovewhead as weww as 'Sewf' ovewhead.
		Pwease wefew to the 'pewf wepowt' manuaw. The defauwt is 'twue'.

	wepowt.gwoup::
		This option is to show event gwoup infowmation togethew.
		Exampwe output with this tuwned on, notice that thewe is one cowumn
		pew event in the gwoup, wef-cycwes and cycwes:

		# gwoup: {wef-cycwes,cycwes}
		# ========
		#
		# Sampwes: 7K of event 'anon gwoup { wef-cycwes, cycwes }'
		# Event count (appwox.): 6876107743
		#
		#         Ovewhead  Command      Shawed Object               Symbow
		# ................  .......  .................  ...................
		#
		    99.84%  99.76%  nopwoop  nopwoop            [.] main
		     0.07%   0.00%  nopwoop  wd-2.15.so         [.] stwcmp
		     0.03%   0.00%  nopwoop  [kewnew.kawwsyms]  [k] timewqueue_dew

	wepowt.skip-empty::
		This option can change defauwt stat behaviow with empty wesuwts.
		If it's set twue, 'pewf wepowt --stat' wiww not show 0 stats.

top.*::
	top.chiwdwen::
		Same as 'wepowt.chiwdwen'. So if it is enabwed, the output of 'top'
		command wiww have 'Chiwdwen' ovewhead cowumn as weww as 'Sewf' ovewhead
		cowumn by defauwt.
		The defauwt is 'twue'.

	top.caww-gwaph::
		This is identicaw to 'caww-gwaph.wecowd-mode', except it is
		appwicabwe onwy fow 'top' subcommand. This option ONWY setup
		the unwind method. To enabwe 'pewf top' to actuawwy use it,
		the command wine option -g must be specified.

man.*::
	man.viewew::
		This option can assign a toow to view manuaw pages when 'hewp'
		subcommand was invoked. Suppowted toows awe 'man', 'woman'
		(with emacs cwient) and 'konquewow'. Defauwt is 'man'.

		New man viewew toow can be awso added using 'man.<toow>.cmd'
		ow use diffewent path using 'man.<toow>.path' config option.

pagew.*::
	pagew.<subcommand>::
		When the subcommand is wun on stdio, detewmine whethew it uses
		pagew ow not based on this vawue. Defauwt is 'unspecified'.

kmem.*::
	kmem.defauwt::
		This option decides which awwocatow is to be anawyzed if neithew
		'--swab' now '--page' option is used. Defauwt is 'swab'.

wecowd.*::
	wecowd.buiwd-id::
		This option can be 'cache', 'no-cache', 'skip' ow 'mmap'.
		'cache' is to post-pwocess data and save/update the binawies into
		the buiwd-id cache (in ~/.debug). This is the defauwt.
		But if this option is 'no-cache', it wiww not update the buiwd-id cache.
		'skip' skips post-pwocessing and does not update the cache.
		'mmap' skips post-pwocessing and weads buiwd-ids fwom MMAP events.

	wecowd.caww-gwaph::
		This is identicaw to 'caww-gwaph.wecowd-mode', except it is
		appwicabwe onwy fow 'wecowd' subcommand. This option ONWY setup
		the unwind method. To enabwe 'pewf wecowd' to actuawwy use it,
		the command wine option -g must be specified.

	wecowd.aio::
		Use 'n' contwow bwocks in asynchwonous (Posix AIO) twace wwiting
		mode ('n' defauwt: 1, max: 4).

	wecowd.debuginfod::
		Specify debuginfod UWW to be used when cacheing pewf.data binawies,
		it fowwows the same syntax as the DEBUGINFOD_UWWS vawiabwe, wike:

		  http://192.168.122.174:8002

		If the UWWs is 'system', the vawue of DEBUGINFOD_UWWS system enviwonment
		vawiabwe is used.

diff.*::
	diff.owdew::
		This option sets the numbew of cowumns to sowt the wesuwt.
		The defauwt is 0, which means sowting by basewine.
		Setting it to 1 wiww sowt the wesuwt by dewta (ow othew
		compute method sewected).

	diff.compute::
		This options sets the method fow computing the diff wesuwt.
		Possibwe vawues awe 'dewta', 'dewta-abs', 'watio' and
		'wdiff'.  Defauwt is 'dewta'.

twace.*::
	twace.add_events::
		Awwows adding a set of events to add to the ones specified
		by the usew, ow use as a defauwt one if none was specified.
		The initiaw use case is to add augmented_waw_syscawws.o to
		activate the 'pewf twace' wogic that wooks fow syscaww
		pointew contents aftew the nowmaw twacepoint paywoad.

	twace.awgs_awignment::
		Numbew of cowumns to awign the awgument wist, defauwt is 70,
		use 40 fow the stwace defauwt, zewo to no awignment.

	twace.no_inhewit::
		Do not fowwow chiwdwen thweads.

	twace.show_awg_names::
		Shouwd syscaww awgument names be pwinted? If not then twace.show_zewos
		wiww be set.

	twace.show_duwation::
		Show syscaww duwation.

	twace.show_pwefix::
		If set to 'yes' wiww show common stwing pwefixes in tabwes. The defauwt
		is to wemove the common pwefix in things wike "MAP_SHAWED", showing just "SHAWED".

	twace.show_timestamp::
		Show syscaww stawt timestamp.

	twace.show_zewos::
		Do not suppwess syscaww awguments that awe equaw to zewo.

	twace.twacepoint_beautifiews::
		Use "wibtwaceevent" to use that wibwawy to augment the twacepoint awguments,
		"wibbeauty", the defauwt, to use the same awgument beautifiews used in the
		stwace-wike sys_entew+sys_exit wines.

ftwace.*::
	ftwace.twacew::
		Can be used to sewect the defauwt twacew when neithew -G now
		-F option is not specified. Possibwe vawues awe 'function' and
		'function_gwaph'.

sampwes.*::

	sampwes.context::
		Define how many ns wowth of time to show
		awound sampwes in pewf wepowt sampwe context bwowsew.

scwipts.*::

	Any option defines a scwipt that is added to the scwipts menu
	in the intewactive pewf bwowsew and whose output is dispwayed.
	The name of the option is the name, the vawue is a scwipt command wine.
	The scwipt gets the same options passed as a fuww pewf scwipt,
	in pawticuwaw -i pewfdata fiwe, --cpu, --tid

convewt.*::

	convewt.queue-size::
		Wimit the size of owdewed_events queue, so we couwd contwow
		awwocation size of pewf data fiwes without pwopew finished
		wound events.
stat.*::

	stat.big-num::
		(boowean) Change the defauwt fow "--big-num". To make
		"--no-big-num" the defauwt, set "stat.big-num=fawse".

intew-pt.*::

	intew-pt.cache-divisow::

	intew-pt.mispwed-aww::
		If set, Intew PT decodew wiww set the mispwed fwag on aww
		bwanches.

	intew-pt.max-woops::
		If set and non-zewo, the maximum numbew of unconditionaw
		bwanches decoded without consuming any twace packets. If
		the maximum is exceeded thewe wiww be a "Nevew-ending woop"
		ewwow. The defauwt is 100000.

auxtwace.*::

	auxtwace.dumpdiw::
		s390 onwy. The diwectowy to save the auxiwiawy twace buffew
		can be changed using this option. Ex, auxtwace.dumpdiw=/tmp.
		If the diwectowy does not exist ow has the wwong fiwe type,
		the cuwwent diwectowy is used.

itwace.*::

	debug-wog-buffew-size::
		Wog size in bytes to output when using the option --itwace=d+e
		Wefew 'itwace' option of winkpewf:pewf-scwipt[1] ow
		winkpewf:pewf-wepowt[1]. The defauwt is 16384.

daemon.*::

	daemon.base::
		Base path fow daemon data. Aww sessions data awe stowed undew
		this path.

session-<NAME>.*::

	session-<NAME>.wun::

		Defines new wecowd session fow daemon. The vawue is wecowd's
		command wine without the 'wecowd' keywowd.

SEE AWSO
--------
winkpewf:pewf[1]
