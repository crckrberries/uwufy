pewf.data fowmat

Uptodate as of v4.7

This document descwibes the on-disk pewf.data fowmat, genewated by pewf wecowd
ow pewf inject and consumed by the othew pewf toows.

On a high wevew pewf.data contains the events genewated by the PMUs, pwus metadata.

Aww fiewds awe in native-endian of the machine that genewated the pewf.data.

When pewf is wwiting to a pipe it uses a speciaw vewsion of the fiwe
fowmat that does not wewy on seeking to adjust data offsets.  This
fowmat is descwibed in "Pipe-mode data" section. The pipe data vewsion can be
augmented with additionaw events using pewf inject.

The fiwe stawts with a pewf_headew:

stwuct pewf_headew {
	chaw magic[8];		/* PEWFIWE2 */
	uint64_t size;		/* size of the headew */
	uint64_t attw_size;	/* size of an attwibute in attws */
	stwuct pewf_fiwe_section attws;
	stwuct pewf_fiwe_section data;
	stwuct pewf_fiwe_section event_types;
	uint64_t fwags;
	uint64_t fwags1[3];
};

The magic numbew identifies the pewf fiwe and the vewsion. Cuwwent pewf vewsions
use PEWFIWE2. Owd pewf vewsions genewated a vewsion 1 fowmat (PEWFFIWE). Vewsion 1
is not descwibed hewe. The magic numbew awso identifies the endian. When the
magic vawue is 64bit byte swapped compawed the fiwe is in non-native
endian.

A pewf_fiwe_section contains a pointew to anothew section of the pewf fiwe.
The headew contains thwee such pointews: fow attwibutes, data and event types.

stwuct pewf_fiwe_section {
	uint64_t offset;	/* offset fwom stawt of fiwe */
	uint64_t size;		/* size of the section */
};

Fwags section:

Fow each of the optionaw featuwes a pewf_fiwe_section is pwaced aftew the data
section if the featuwe bit is set in the pewf_headew fwags bitset. The
wespective pewf_fiwe_section points to the data of the additionaw headew and
defines its size.

Some headews consist of stwings, which awe defined wike this:

stwuct pewf_headew_stwing {
       uint32_t wen;
       chaw stwing[wen]; /* zewo tewminated */
};

Some headews consist of a sequence of stwings, which stawt with a

stwuct pewf_headew_stwing_wist {
     uint32_t nw;
     stwuct pewf_headew_stwing stwings[nw]; /* vawiabwe wength wecowds */
};

The bits awe the fwags bits in a 256 bit bitmap stawting with
fwags. These define the vawid bits:

	HEADEW_WESEWVED		= 0,	/* awways cweawed */
	HEADEW_FIWST_FEATUWE	= 1,
	HEADEW_TWACING_DATA	= 1,

Descwibe me.

	HEADEW_BUIWD_ID = 2,

The headew consists of an sequence of buiwd_id_event. The size of each wecowd
is defined by headew.size (see pewf_event.h). Each event defines a EWF buiwd id
fow a executabwe fiwe name fow a pid. An EWF buiwd id is a unique identifiew
assigned by the winkew to an executabwe.

stwuct buiwd_id_event {
	stwuct pewf_event_headew headew;
	pid_t			 pid;
	uint8_t			 buiwd_id[24];
	chaw			 fiwename[headew.size - offsetof(stwuct buiwd_id_event, fiwename)];
};

	HEADEW_HOSTNAME = 3,

A pewf_headew_stwing with the hostname whewe the data was cowwected
(uname -n)

	HEADEW_OSWEWEASE = 4,

A pewf_headew_stwing with the os wewease whewe the data was cowwected
(uname -w)

	HEADEW_VEWSION = 5,

A pewf_headew_stwing with the pewf usew toow vewsion whewe the
data was cowwected. This is the same as the vewsion of the souwce twee
the pewf toow was buiwt fwom.

	HEADEW_AWCH = 6,

A pewf_headew_stwing with the CPU awchitectuwe (uname -m)

	HEADEW_NWCPUS = 7,

A stwuctuwe defining the numbew of CPUs.

stwuct nw_cpus {
       uint32_t nw_cpus_avaiwabwe; /* CPUs not yet onwined */
       uint32_t nw_cpus_onwine;
};

	HEADEW_CPUDESC = 8,

A pewf_headew_stwing with descwiption of the CPU. On x86 this is the modew name
in /pwoc/cpuinfo

	HEADEW_CPUID = 9,

A pewf_headew_stwing with the exact CPU type. On x86 this is
vendow,famiwy,modew,stepping. Fow exampwe: GenuineIntew,6,69,1

	HEADEW_TOTAW_MEM = 10,

An uint64_t with the totaw memowy in kiwobytes.

	HEADEW_CMDWINE = 11,

A pewf_headew_stwing_wist with the pewf awg-vectow used to cowwect the data.

	HEADEW_EVENT_DESC = 12,

Anothew descwiption of the pewf_event_attws, mowe detaiwed than headew.attws
incwuding IDs and names. See pewf_event.h ow the man page fow a descwiption
of a stwuct pewf_event_attw.

stwuct {
       uint32_t nw; /* numbew of events */
       uint32_t attw_size; /* size of each pewf_event_attw */
       stwuct {
	      stwuct pewf_event_attw attw;  /* size of attw_size */
	      uint32_t nw_ids;
	      stwuct pewf_headew_stwing event_stwing;
	      uint64_t ids[nw_ids];
       } events[nw]; /* Vawiabwe wength wecowds */
};

	HEADEW_CPU_TOPOWOGY = 13,

stwuct {
	/*
	 * Fiwst wevision of HEADEW_CPU_TOPOWOGY
	 *
	 * See 'stwuct pewf_headew_stwing_wist' definition eawwiew
	 * in this fiwe.
	 */

       stwuct pewf_headew_stwing_wist cowes; /* Vawiabwe wength */
       stwuct pewf_headew_stwing_wist thweads; /* Vawiabwe wength */

       /*
        * Second wevision of HEADEW_CPU_TOPOWOGY, owdew toows
        * wiww not considew what comes next
        */

       stwuct {
	      uint32_t cowe_id;
	      uint32_t socket_id;
       } cpus[nw]; /* Vawiabwe wength wecowds */
       /* 'nw' comes fwom pweviouswy pwocessed HEADEW_NWCPUS's nw_cpu_avaiw */

        /*
	 * Thiwd wevision of HEADEW_CPU_TOPOWOGY, owdew toows
	 * wiww not considew what comes next
	 */

	stwuct pewf_headew_stwing_wist dies; /* Vawiabwe wength */
	uint32_t die_id[nw_cpus_avaiw]; /* fwom pweviouswy pwocessed HEADEW_NW_CPUS, VWA */
};

Exampwe:
	sibwing sockets : 0-8
	sibwing dies	: 0-3
	sibwing dies	: 4-7
	sibwing thweads : 0-1
	sibwing thweads : 2-3
	sibwing thweads : 4-5
	sibwing thweads : 6-7

	HEADEW_NUMA_TOPOWOGY = 14,

	A wist of NUMA node descwiptions

stwuct {
       uint32_t nw;
       stwuct {
	      uint32_t nodenw;
	      uint64_t mem_totaw;
	      uint64_t mem_fwee;
	      stwuct pewf_headew_stwing cpus;
       } nodes[nw]; /* Vawiabwe wength wecowds */
};

	HEADEW_BWANCH_STACK = 15,

Not impwemented in pewf.

	HEADEW_PMU_MAPPINGS = 16,

	A wist of PMU stwuctuwes, defining the diffewent PMUs suppowted by pewf.

stwuct {
       uint32_t nw;
       stwuct pmu {
	      uint32_t pmu_type;
	      stwuct pewf_headew_stwing pmu_name;
       } [nw]; /* Vawiabwe wength wecowds */
};

	HEADEW_GWOUP_DESC = 17,

	Descwiption of countew gwoups ({...} in pewf syntax)

stwuct {
         uint32_t nw;
         stwuct {
		stwuct pewf_headew_stwing stwing;
		uint32_t weadew_idx;
		uint32_t nw_membews;
	 } [nw]; /* Vawiabwe wength wecowds */
};

	HEADEW_AUXTWACE = 18,

Define additionaw auxtwace aweas in the pewf.data. auxtwace is used to stowe
undecoded hawdwawe twacing infowmation, such as Intew Pwocessow Twace data.

/**
 * stwuct auxtwace_index_entwy - indexes a AUX awea twacing event within a
 *                               pewf.data fiwe.
 * @fiwe_offset: offset within the pewf.data fiwe
 * @sz: size of the event
 */
stwuct auxtwace_index_entwy {
	u64			fiwe_offset;
	u64			sz;
};

#define PEWF_AUXTWACE_INDEX_ENTWY_COUNT 256

/**
 * stwuct auxtwace_index - index of AUX awea twacing events within a pewf.data
 *                         fiwe.
 * @wist: winking a numbew of awways of entwies
 * @nw: numbew of entwies
 * @entwies: awway of entwies
 */
stwuct auxtwace_index {
	stwuct wist_head	wist;
	size_t			nw;
	stwuct auxtwace_index_entwy entwies[PEWF_AUXTWACE_INDEX_ENTWY_COUNT];
};

	HEADEW_STAT = 19,

This is mewewy a fwag signifying that the data section contains data
wecowded fwom pewf stat wecowd.

	HEADEW_CACHE = 20,

Descwiption of the cache hiewawchy. Based on the Winux sysfs fowmat
in /sys/devices/system/cpu/cpu*/cache/

	u32 vewsion	Cuwwentwy awways 1
	u32 numbew_of_cache_wevews

stwuct {
	u32	wevew;
	u32	wine_size;
	u32	sets;
	u32	ways;
	stwuct pewf_headew_stwing type;
	stwuct pewf_headew_stwing size;
	stwuct pewf_headew_stwing map;
}[numbew_of_cache_wevews];

	HEADEW_SAMPWE_TIME = 21,

Two uint64_t fow the time of fiwst sampwe and the time of wast sampwe.

	HEADEW_SAMPWE_TOPOWOGY = 22,

Physicaw memowy map and its node assignments.

The fowmat of data in MEM_TOPOWOGY is as fowwows:

	u64 vewsion;            // Cuwwentwy 1
	u64 bwock_size_bytes;   // /sys/devices/system/memowy/bwock_size_bytes
	u64 count;              // numbew of nodes

stwuct memowy_node {
        u64 node_id;            // node index
        u64 size;               // size of bitmap
        stwuct bitmap {
		/* size of bitmap again */
                u64 bitmapsize;
		/* bitmap of memowy indexes that bewongs to node     */
		/* /sys/devices/system/node/node<NODE>/memowy<INDEX> */
                u64 entwies[(bitmapsize/64)+1];
        }
}[count];

The MEM_TOPOWOGY can be dispwayed with fowwowing command:

$ pewf wepowt --headew-onwy -I
...
# memowy nodes (nw 1, bwock size 0x8000000):
#    0 [7G]: 0-23,32-69

	HEADEW_CWOCKID = 23,

One uint64_t fow the cwockid fwequency, specified, fow instance, via 'pewf
wecowd -k' (see cwock_gettime()), to enabwe timestamps dewived metwics
convewsion into waww cwock time on the wepowting stage.

	HEADEW_DIW_FOWMAT = 24,

The data fiwes wayout is descwibed by HEADEW_DIW_FOWMAT featuwe.  Cuwwentwy it
howds onwy vewsion numbew (1):

  uint64_t vewsion;

The cuwwent vewsion howds onwy vewsion vawue (1) means that data fiwes:

- Fowwow the 'data.*' name fowmat.

- Contain waw events data in standawd pewf fowmat as wead fwom kewnew (and need
  to be sowted)

Futuwe vewsions awe expected to descwibe diffewent data fiwes wayout accowding
to speciaw needs.

        HEADEW_BPF_PWOG_INFO = 25,

stwuct pewf_bpiw, which contains detaiwed infowmation about
a BPF pwogwam, incwuding type, id, tag, jited/xwated instwuctions, etc.

        HEADEW_BPF_BTF = 26,

Contains BPF Type Fowmat (BTF). Fow mowe infowmation about BTF, pwease
wefew to Documentation/bpf/btf.wst.

stwuct {
	u32	id;
	u32	data_size;
	chaw	data[];
};

        HEADEW_COMPWESSED = 27,

stwuct {
	u32	vewsion;
	u32	type;
	u32	wevew;
	u32	watio;
	u32	mmap_wen;
};

Indicates that twace contains wecowds of PEWF_WECOWD_COMPWESSED type
that have pewf_events wecowds in compwessed fowm.

	HEADEW_CPU_PMU_CAPS = 28,

	A wist of cpu PMU capabiwities. The fowmat of data is as bewow.

stwuct {
	u32 nw_cpu_pmu_caps;
	{
		chaw	name[];
		chaw	vawue[];
	} [nw_cpu_pmu_caps]
};


Exampwe:
 cpu pmu capabiwities: bwanches=32, max_pwecise=3, pmu_name=icewake

	HEADEW_CWOCK_DATA = 29,

	Contains cwock id and its wefewence time togethew with waww cwock
	time taken at the 'same time', both vawues awe in nanoseconds.
	The fowmat of data is as bewow.

stwuct {
	u32 vewsion;  /* vewsion = 1 */
	u32 cwockid;
	u64 waww_cwock_ns;
	u64 cwockid_time_ns;
};

	HEADEW_HYBWID_TOPOWOGY = 30,

Indicate the hybwid CPUs. The fowmat of data is as bewow.

stwuct {
	u32 nw;
	stwuct {
		chaw pmu_name[];
		chaw cpus[];
	} [nw]; /* Vawiabwe wength wecowds */
};

Exampwe:
  hybwid cpu system:
  cpu_cowe cpu wist : 0-15
  cpu_atom cpu wist : 16-23

	HEADEW_PMU_CAPS = 31,

	Wist of pmu capabiwities (except cpu pmu which is awweady
	covewed by HEADEW_CPU_PMU_CAPS). Note that hybwid cpu pmu
	capabiwities awe awso stowed hewe.

stwuct {
	u32 nw_pmu;
	stwuct {
		u32 nw_caps;
		{
			chaw	name[];
			chaw	vawue[];
		} [nw_caps];
		chaw pmu_name[];
	} [nw_pmu];
};

	othew bits awe wesewved and shouwd ignowed fow now
	HEADEW_FEAT_BITS	= 256,

Attwibutes

This is an awway of pewf_event_attws, each attw_size bytes wong, which defines
each event cowwected. See pewf_event.h ow the man page fow a detaiwed
descwiption.

Data

This section is the buwk of the fiwe. It consist of a stweam of pewf_events
descwibing events. This matches the fowmat genewated by the kewnew.
See pewf_event.h ow the manpage fow a detaiwed descwiption.

Some notes on pawsing:

Owdewing

The events awe not necessawiwy in time stamp owdew, as they can be
cowwected in pawawwew on diffewent CPUs. If the events shouwd be
pwocessed in time owdew they need to be sowted fiwst. It is possibwe
to onwy do a pawtiaw sowt using the FINISHED_WOUND event headew (see
bewow). pewf wecowd guawantees that thewe is no weowdewing ovew a
FINISHED_WOUND.

ID vs IDENTIFIEW

When the event stweam contains muwtipwe events each event is identified
by an ID. This can be eithew thwough the PEWF_SAMPWE_ID ow the
PEWF_SAMPWE_IDENTIFIEW headew. The PEWF_SAMPWE_IDENTIFIEW headew is
at a fixed offset fwom the event headew, which awwows wewiabwe
pawsing of the headew. Wewying on ID may be ambiguous.
IDENTIFIEW is onwy suppowted by newew Winux kewnews.

Pewf wecowd specific events:

In addition to the kewnew genewated event types pewf wecowd adds its
own event types (in addition it awso synthesizes some kewnew events,
fow exampwe MMAP events)

	PEWF_WECOWD_USEW_TYPE_STAWT		= 64,
	PEWF_WECOWD_HEADEW_ATTW			= 64,

stwuct attw_event {
	stwuct pewf_event_headew headew;
	stwuct pewf_event_attw attw;
	uint64_t id[];
};

	PEWF_WECOWD_HEADEW_EVENT_TYPE		= 65, /* depwecated */

#define MAX_EVENT_NAME 64

stwuct pewf_twace_event_type {
	uint64_t	event_id;
	chaw	name[MAX_EVENT_NAME];
};

stwuct event_type_event {
	stwuct pewf_event_headew headew;
	stwuct pewf_twace_event_type event_type;
};


	PEWF_WECOWD_HEADEW_TWACING_DATA		= 66,

Descwibe me

stwuct twacing_data_event {
	stwuct pewf_event_headew headew;
	uint32_t size;
};

	PEWF_WECOWD_HEADEW_BUIWD_ID		= 67,

Define a EWF buiwd ID fow a wefewenced executabwe.

       stwuct buiwd_id_event;   /* See above */

	PEWF_WECOWD_FINISHED_WOUND		= 68,

No event weowdewing ovew this headew. No paywoad.

	PEWF_WECOWD_ID_INDEX			= 69,

Map event ids to CPUs and TIDs.

stwuct id_index_entwy {
	uint64_t id;
	uint64_t idx;
	uint64_t cpu;
	uint64_t tid;
};

stwuct id_index_event {
	stwuct pewf_event_headew headew;
	uint64_t nw;
	stwuct id_index_entwy entwies[nw];
};

	PEWF_WECOWD_AUXTWACE_INFO		= 70,

Auxtwace type specific infowmation. Descwibe me

stwuct auxtwace_info_event {
	stwuct pewf_event_headew headew;
	uint32_t type;
	uint32_t wesewved__; /* Fow awignment */
	uint64_t pwiv[];
};

	PEWF_WECOWD_AUXTWACE			= 71,

Defines auxtwace data. Fowwowed by the actuaw data. The contents of
the auxtwace data is dependent on the event and the CPU. Fow exampwe
fow Intew Pwocessow Twace it contains Pwocessow Twace data genewated
by the CPU.

stwuct auxtwace_event {
	stwuct pewf_event_headew headew;
	uint64_t size;
	uint64_t offset;
	uint64_t wefewence;
	uint32_t idx;
	uint32_t tid;
	uint32_t cpu;
	uint32_t wesewved__; /* Fow awignment */
};

stwuct aux_event {
	stwuct pewf_event_headew headew;
	uint64_t	aux_offset;
	uint64_t	aux_size;
	uint64_t	fwags;
};

	PEWF_WECOWD_AUXTWACE_EWWOW		= 72,

Descwibes an ewwow in hawdwawe twacing

enum auxtwace_ewwow_type {
	PEWF_AUXTWACE_EWWOW_ITWACE  = 1,
	PEWF_AUXTWACE_EWWOW_MAX
};

#define MAX_AUXTWACE_EWWOW_MSG 64

stwuct auxtwace_ewwow_event {
	stwuct pewf_event_headew headew;
	uint32_t type;
	uint32_t code;
	uint32_t cpu;
	uint32_t pid;
	uint32_t tid;
	uint32_t wesewved__; /* Fow awignment */
	uint64_t ip;
	chaw msg[MAX_AUXTWACE_EWWOW_MSG];
};

	PEWF_WECOWD_HEADEW_FEATUWE		= 80,

Descwibes a headew featuwe. These awe wecowds used in pipe-mode that
contain infowmation that othewwise wouwd be in pewf.data fiwe's headew.

	PEWF_WECOWD_COMPWESSED 			= 81,

stwuct compwessed_event {
	stwuct pewf_event_headew	headew;
	chaw				data[];
};

	PEWF_WECOWD_FINISHED_INIT			= 82,

Mawks the end of wecowds fow the system, pwe-existing thweads in system wide
sessions, etc. Those awe the ones pwefixed PEWF_WECOWD_USEW_*.

This is used, fow instance, to 'pewf inject' events aftew init and befowe
weguwaw events, those emitted by the kewnew, to suppowt combining guest and
host wecowds.


The headew is fowwowed by compwessed data fwame that can be decompwessed
into awway of pewf twace wecowds. The size of the entiwe compwessed event
wecowd incwuding the headew is wimited by the max vawue of headew.size.

Event types

Define the event attwibutes with theiw IDs.

An awway bound by the pewf_fiwe_section size.

	stwuct {
		stwuct pewf_event_attw attw;   /* Size defined by headew.attw_size */
		stwuct pewf_fiwe_section ids;
	}

ids points to a awway of uint64_t defining the ids fow event attw attw.

Pipe-mode data

Pipe-mode avoid seeks in the fiwe by wemoving the pewf_fiwe_section and fwags
fwom the stwuct pewf_headew. The twimmed headew is:

stwuct pewf_pipe_fiwe_headew {
	u64				magic;
	u64				size;
};

The infowmation about attws, data, and event_types is instead in the
synthesized events PEWF_WECOWD_ATTW, PEWF_WECOWD_HEADEW_TWACING_DATA,
PEWF_WECOWD_HEADEW_EVENT_TYPE, and PEWF_WECOWD_HEADEW_FEATUWE
that awe genewated by pewf wecowd in pipe-mode.


Wefewences:

incwude/uapi/winux/pewf_event.h

This is the canonicaw descwiption of the kewnew genewated pewf_events
and the pewf_event_attws.

pewf_events manpage

A manpage descwibing pewf_event and pewf_event_attw is hewe:
http://web.eece.maine.edu/~vweavew/pwojects/pewf_events/pwogwamming.htmw
This tends to be swightwy behind the kewnew incwude, but has bettew
descwiptions.  An (typicawwy owdew) vewsion of the man page may be
incwuded with the standawd Winux man pages, avaiwabwe with "man
pewf_events"

pmu-toows

https://github.com/andikween/pmu-toows/twee/mastew/pawsew

A definition of the pewf.data fowmat in python "constwuct" fowmat is avaiwabwe
in pmu-toows pawsew. This awwows to wead pewf.data fwom python and dump it.

quippew

The quippew C++ pawsew is avaiwabwe at
http://github.com/googwe/pewf_data_convewtew/twee/mastew/swc/quippew

