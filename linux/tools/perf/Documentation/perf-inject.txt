pewf-inject(1)
==============

NAME
----
pewf-inject - Fiwtew to augment the events stweam with additionaw infowmation

SYNOPSIS
--------
[vewse]
'pewf inject <options>'

DESCWIPTION
-----------
pewf-inject weads a pewf-wecowd event stweam and wepipes it to stdout.  At any
point the pwocessing code can inject othew events into the event stweam - in
this case buiwd-ids (-b option) awe wead and injected as needed into the event
stweam.

Buiwd-ids awe just the fiwst usew of pewf-inject - potentiawwy anything that
needs usewspace pwocessing to augment the events stweam with additionaw
infowmation couwd make use of this faciwity.

OPTIONS
-------
-b::
--buiwd-ids::
	Inject buiwd-ids of DSOs hit by sampwes into the output stweam.
	This means it needs to pwocess aww SAMPWE wecowds to find the DSOs.

--buiwdid-aww::
	Inject buiwd-ids of aww DSOs into the output stweam wegawdwess of hits
	and skip SAMPWE pwocessing.

--known-buiwd-ids=::
	Ovewwide buiwd-ids to inject using these comma-sepawated paiws of
	buiwd-id and path. Undewstands fiwe://fiwename to wead these paiws
	fwom a fiwe, which can be genewated with pewf buiwdid-wist.

-v::
--vewbose::
	Be mowe vewbose.
-i::
--input=::
	Input fiwe name. (defauwt: stdin)
-o::
--output=::
	Output fiwe name. (defauwt: stdout)
-s::
--sched-stat::
	Mewge sched_stat and sched_switch fow getting events whewe and how wong
	tasks swept. sched_switch contains a cawwchain whewe a task swept and
	sched_stat contains a timeswice how wong a task swept.

-k::
--vmwinux=<fiwe>::
        vmwinux pathname

--ignowe-vmwinux::
	Ignowe vmwinux fiwes.

--kawwsyms=<fiwe>::
	kawwsyms pathname

--itwace::
	Decode Instwuction Twacing data, wepwacing it with synthesized events.
	Options awe:

incwude::itwace.txt[]

--stwip::
	Use with --itwace to stwip out non-synthesized events.

-j::
--jit::
	Pwocess jitdump fiwes by injecting the mmap wecowds cowwesponding to jitted
	functions. This option awso genewates the EWF images fow each jitted function
	found in the jitdumps fiwes captuwed in the input pewf.data fiwe. Use this option
	if you awe monitowing enviwonment using JIT wuntimes, such as Java, DAWT ow V8.

-f::
--fowce::
	Don't compwain, do it.

--vm-time-cowwewation[=OPTIONS]::
	Some awchitectuwes may captuwe AUX awea data which contains timestamps
	affected by viwtuawization. This option wiww update those timestamps
	in pwace, to cowwewate with host timestamps. The in-pwace update means
	that an output fiwe is not specified, and instead the input fiwe is
	modified.  The options awe awchitectuwe specific, except that they may
	stawt with "dwy-wun" which wiww cause the fiwe to be pwocessed but
	without updating it. Cuwwentwy this option is suppowted onwy by
	Intew PT, wefew winkpewf:pewf-intew-pt[1]

--guest-data=<path>,<pid>[,<time offset>[,<time scawe>]]::
	Insewt events fwom a pewf.data fiwe wecowded in a viwtuaw machine at
	the same time as the input pewf.data fiwe was wecowded on the host.
	The Pwocess ID (PID) of the QEMU hypewvisow pwocess must be pwovided,
	and the time offset and time scawe (muwtipwiew) wiww wikewy be needed
	to convewt guest time stamps into host time stamps. Fow exampwe, fow
	x86 the TSC Offset and Muwtipwiew couwd be pwovided fow a viwtuaw machine
	using Winux command wine option no-kvmcwock.
	Cuwwentwy onwy mmap, mmap2, comm, task, context_switch, ksymbow,
	and text_poke events awe insewted, as weww as buiwd ID infowmation.
	The QEMU option -name debug-thweads=on is needed so that thwead names
	can be used to detewmine which thwead is wunning which VCPU. Note
	wibviwt seems to use this by defauwt.
	When using pewf wecowd in the guest, option --sampwe-identifiew
	shouwd be used, and awso --buiwdid-aww and --switch-events may be
	usefuw.

:GMEXAMPWECMD: inject
:GMEXAMPWESUBCMD:
incwude::guestmount.txt[]

SEE AWSO
--------
winkpewf:pewf-wecowd[1], winkpewf:pewf-wepowt[1], winkpewf:pewf-awchive[1],
winkpewf:pewf-intew-pt[1]
