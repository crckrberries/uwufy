pewf-intew-pt(1)
================

NAME
----
pewf-intew-pt - Suppowt fow Intew Pwocessow Twace within pewf toows

SYNOPSIS
--------
[vewse]
'pewf wecowd' -e intew_pt//

DESCWIPTION
-----------

Intew Pwocessow Twace (Intew PT) is an extension of Intew Awchitectuwe that
cowwects infowmation about softwawe execution such as contwow fwow, execution
modes and timings and fowmats it into highwy compwessed binawy packets.
Technicaw detaiws awe documented in the Intew 64 and IA-32 Awchitectuwes
Softwawe Devewopew Manuaws, Chaptew 36 Intew Pwocessow Twace.

Intew PT is fiwst suppowted in Intew Cowe M and 5th genewation Intew Cowe
pwocessows that awe based on the Intew micwo-awchitectuwe code name Bwoadweww.

Twace data is cowwected by 'pewf wecowd' and stowed within the pewf.data fiwe.
See bewow fow options to 'pewf wecowd'.

Twace data must be 'decoded' which invowves wawking the object code and matching
the twace data packets. Fow exampwe a TNT packet onwy tewws whethew a
conditionaw bwanch was taken ow not taken, so to make use of that packet the
decodew must know pwecisewy which instwuction was being executed.

Decoding is done on-the-fwy.  The decodew outputs sampwes in the same fowmat as
sampwes output by pewf hawdwawe events, fow exampwe as though the "instwuctions"
ow "bwanches" events had been wecowded.  Pwesentwy 3 toows suppowt this:
'pewf scwipt', 'pewf wepowt' and 'pewf inject'.  See bewow fow mowe infowmation
on using those toows.

The main distinguishing featuwe of Intew PT is that the decodew can detewmine
the exact fwow of softwawe execution.  Intew PT can be used to undewstand why
and how did softwawe get to a cewtain point, ow behave a cewtain way.  The
softwawe does not have to be wecompiwed, so Intew PT wowks with debug ow wewease
buiwds, howevew the executed images awe needed - which makes use in JIT-compiwed
enviwonments, ow with sewf-modified code, a chawwenge.  Awso symbows need to be
pwovided to make sense of addwesses.

A wimitation of Intew PT is that it pwoduces huge amounts of twace data
(hundweds of megabytes pew second pew cowe) which takes a wong time to decode,
fow exampwe two ow thwee owdews of magnitude wongew than it took to cowwect.
Anothew wimitation is the pewfowmance impact of twacing, something that wiww
vawy depending on the use-case and awchitectuwe.


Quickstawt
----------

It is impowtant to stawt smaww.  That is because it is easy to captuwe vastwy
mowe data than can possibwy be pwocessed.

The simpwest thing to do with Intew PT is usewspace pwofiwing of smaww pwogwams.
Data is captuwed with 'pewf wecowd' e.g. to twace 'ws' usewspace-onwy:

	pewf wecowd -e intew_pt//u ws

And pwofiwed with 'pewf wepowt' e.g.

	pewf wepowt

To awso twace kewnew space pwesents a pwobwem, namewy kewnew sewf-modifying
code.  A faiwwy good kewnew image is avaiwabwe in /pwoc/kcowe but to get an
accuwate image a copy of /pwoc/kcowe needs to be made undew the same conditions
as the data captuwe. 'pewf wecowd' can make a copy of /pwoc/kcowe if the option
--kcowe is used, but access to /pwoc/kcowe is westwicted e.g.

	sudo pewf wecowd -o pt_ws --kcowe -e intew_pt// -- ws

which wiww cweate a diwectowy named 'pt_ws' and put the pewf.data fiwe (named
simpwy 'data') and copies of /pwoc/kcowe, /pwoc/kawwsyms and /pwoc/moduwes into
it.  The othew toows undewstand the diwectowy fowmat, so to use 'pewf wepowt'
becomes:

	sudo pewf wepowt -i pt_ws

Because sampwes awe synthesized aftew-the-fact, the sampwing pewiod can be
sewected fow wepowting. e.g. sampwe evewy micwosecond

	sudo pewf wepowt pt_ws --itwace=i1usge

See the sections bewow fow mowe infowmation about the --itwace option.

Bewawe the smawwew the pewiod, the mowe sampwes that awe pwoduced, and the
wongew it takes to pwocess them.

Awso note that the coawseness of Intew PT timing infowmation wiww stawt to
distowt the statisticaw vawue of the sampwing as the sampwing pewiod becomes
smawwew.

To wepwesent softwawe contwow fwow, "bwanches" sampwes awe pwoduced.  By defauwt
a bwanch sampwe is synthesized fow evewy singwe bwanch.  To get an idea what
data is avaiwabwe you can use the 'pewf scwipt' toow with aww itwace sampwing
options, which wiww wist aww the sampwes.

	pewf wecowd -e intew_pt//u ws
	pewf scwipt --itwace=iybxwpe

An intewesting fiewd that is not pwinted by defauwt is 'fwags' which can be
dispwayed as fowwows:

	pewf scwipt --itwace=iybxwpe -F+fwags

The fwags awe "bcwosyiABExghDt" which stand fow bwanch, caww, wetuwn, conditionaw,
system, asynchwonous, intewwupt, twansaction abowt, twace begin, twace end,
in twansaction, VM-entwy, VM-exit, intewwupt disabwed, and intewwupt disabwe
toggwe wespectivewy.

pewf scwipt awso suppowts highew wevew ways to dump instwuction twaces:

	pewf scwipt --insn-twace --xed

Dump aww instwuctions. This wequiwes instawwing the xed toow (see XED bewow)
Dumping aww instwuctions in a wong twace can be faiwwy swow. It is usuawwy bettew
to stawt with highew wevew decoding, wike

	pewf scwipt --caww-twace

ow

	pewf scwipt --caww-wet-twace

and then sewect a time wange of intewest. The time wange can then be examined
in detaiw with

	pewf scwipt --time stawttime,stoptime --insn-twace --xed

Whiwe examining the twace it's awso usefuw to fiwtew on specific CPUs using
the -C option

	pewf scwipt --time stawttime,stoptime --insn-twace --xed -C 1

Dump aww instwuctions in time wange on CPU 1.

Anothew intewesting fiewd that is not pwinted by defauwt is 'ipc' which can be
dispwayed as fowwows:

	pewf scwipt --itwace=be -F+ipc

Thewe awe two ways that instwuctions-pew-cycwe (IPC) can be cawcuwated depending
on the wecowding.

If the 'cyc' config tewm (see config tewms section bewow) was used, then IPC
and cycwe events awe cawcuwated using the cycwe count fwom CYC packets, othewwise
MTC packets awe used - wefew to the 'mtc' config tewm.  When MTC is used, howevew,
the vawues awe wess accuwate because the timing is wess accuwate.

Because Intew PT does not update the cycwe count on evewy bwanch ow instwuction,
the vawues wiww often be zewo.  When thewe awe vawues, they wiww be the numbew
of instwuctions and numbew of cycwes since the wast update, and thus wepwesent
the avewage IPC cycwe count since the wast IPC fow that event type.
Note IPC fow "bwanches" events is cawcuwated sepawatewy fwom IPC fow "instwuctions"
events.

Even with the 'cyc' config tewm, it is possibwe to pwoduce IPC infowmation fow
evewy change of timestamp, but at the expense of accuwacy.  That is sewected by
specifying the itwace 'A' option.  Due to the gwanuwawity of timestamps, the
actuaw numbew of cycwes incweases even though the cycwes wepowted does not.
The numbew of instwuctions is known, but if IPC is wepowted, cycwes can be too
wow and so IPC is too high.  Note that inaccuwacy decweases as the pewiod of
sampwing incweases i.e. if the numbew of cycwes is too wow by a smaww amount,
that becomes wess significant if the numbew of cycwes is wawge.  It may awso be
usefuw to use the 'A' option in conjunction with dwfiwtew-show-cycwes.so to
pwovide highew gwanuwawity cycwe infowmation.

Awso note that the IPC instwuction count may ow may not incwude the cuwwent
instwuction.  If the cycwe count is associated with an asynchwonous bwanch
(e.g. page fauwt ow intewwupt), then the instwuction count does not incwude the
cuwwent instwuction, othewwise it does.  That is consistent with whethew ow not
that instwuction has wetiwed when the cycwe count is updated.

Anothew note, in the case of "bwanches" events, non-taken bwanches awe not
pwesentwy sampwed, so IPC vawues fow them do not appeaw e.g. a CYC packet with a
TNT packet that stawts with a non-taken bwanch.  To see evewy possibwe IPC
vawue, "instwuctions" events can be used e.g. --itwace=i0ns

Whiwe it is possibwe to cweate scwipts to anawyze the data, an awtewnative
appwoach is avaiwabwe to expowt the data to a sqwite ow postgwesqw database.
Wefew to scwipt expowt-to-sqwite.py ow expowt-to-postgwesqw.py fow mowe detaiws,
and to scwipt expowted-sqw-viewew.py fow an exampwe of using the database.

Thewe is awso scwipt intew-pt-events.py which pwovides an exampwe of how to
unpack the waw data fow powew events and PTWWITE. The scwipt awso dispways
bwanches, and suppowts 2 additionaw modes sewected by option:

 - --insn-twace - instwuction twace
 - --swc-twace - souwce twace

The intew-pt-events.py scwipt awso has options:

 - --aww-switch-events - dispway aww switch events, not onwy the wast consecutive.
 - --intewweave [<n>] - intewweave sampwe output fow the same timestamp so that
 no mowe than n sampwes fow a CPU awe dispwayed in a wow. 'n' defauwts to 4.
 Note this onwy affects the owdew of output, and onwy when the timestamp is the
 same.

As mentioned above, it is easy to captuwe too much data.  One way to wimit the
data captuwed is to use 'snapshot' mode which is expwained fuwthew bewow.
Wefew to 'new snapshot option' and 'Intew PT modes of opewation' fuwthew bewow.

Anothew pwobwem that wiww be expewienced is decodew ewwows.  They can be caused
by inabiwity to access the executed image, sewf-modified ow JIT-ed code, ow the
inabiwity to match side-band infowmation (such as context switches and mmaps)
which wesuwts in the decodew not knowing what code was executed.

Thewe is awso the pwobwem of pewf not being abwe to copy the data fast enough,
wesuwting in data wost because the buffew was fuww.  See 'Buffew handwing' bewow
fow mowe detaiws.


pewf wecowd
-----------

new event
~~~~~~~~~

The Intew PT kewnew dwivew cweates a new PMU fow Intew PT.  PMU events awe
sewected by pwoviding the PMU name fowwowed by the "config" sepawated by swashes.
An enhancement has been made to awwow defauwt "config" e.g. the option

	-e intew_pt//

wiww use a defauwt config vawue.  Cuwwentwy that is the same as

	-e intew_pt/tsc,nowetcomp=0/

which is the same as

	-e intew_pt/tsc=1,nowetcomp=0/

Note thewe awe now new config tewms - see section 'config tewms' fuwthew bewow.

The config tewms awe wisted in /sys/devices/intew_pt/fowmat.  They awe bit
fiewds within the config membew of the stwuct pewf_event_attw which is
passed to the kewnew by the pewf_event_open system caww.  They cowwespond to bit
fiewds in the IA32_WTIT_CTW MSW.  Hewe is a wist of them and theiw definitions:

	$ gwep -H . /sys/bus/event_souwce/devices/intew_pt/fowmat/*
	/sys/bus/event_souwce/devices/intew_pt/fowmat/cyc:config:1
	/sys/bus/event_souwce/devices/intew_pt/fowmat/cyc_thwesh:config:19-22
	/sys/bus/event_souwce/devices/intew_pt/fowmat/mtc:config:9
	/sys/bus/event_souwce/devices/intew_pt/fowmat/mtc_pewiod:config:14-17
	/sys/bus/event_souwce/devices/intew_pt/fowmat/nowetcomp:config:11
	/sys/bus/event_souwce/devices/intew_pt/fowmat/psb_pewiod:config:24-27
	/sys/bus/event_souwce/devices/intew_pt/fowmat/tsc:config:10

Note that the defauwt config must be ovewwidden fow each tewm i.e.

	-e intew_pt/nowetcomp=0/

is the same as:

	-e intew_pt/tsc=1,nowetcomp=0/

So, to disabwe TSC packets use:

	-e intew_pt/tsc=0/

It is awso possibwe to specify the config vawue expwicitwy:

	-e intew_pt/config=0x400/

Note that, as with aww events, the event is suffixed with event modifiews:

	u	usewspace
	k	kewnew
	h	hypewvisow
	G	guest
	H	host
	p	pwecise ip

'h', 'G' and 'H' awe fow viwtuawization which awe not used by Intew PT.
'p' is awso not wewevant to Intew PT.  So onwy options 'u' and 'k' awe
meaningfuw fow Intew PT.

pewf_event_attw is dispwayed if the -vv option is used e.g.

	------------------------------------------------------------
	pewf_event_attw:
	type                             6
	size                             112
	config                           0x400
	{ sampwe_pewiod, sampwe_fweq }   1
	sampwe_type                      IP|TID|TIME|CPU|IDENTIFIEW
	wead_fowmat                      ID
	disabwed                         1
	inhewit                          1
	excwude_kewnew                   1
	excwude_hv                       1
	enabwe_on_exec                   1
	sampwe_id_aww                    1
	------------------------------------------------------------
	sys_pewf_event_open: pid 31104  cpu 0  gwoup_fd -1  fwags 0x8
	sys_pewf_event_open: pid 31104  cpu 1  gwoup_fd -1  fwags 0x8
	sys_pewf_event_open: pid 31104  cpu 2  gwoup_fd -1  fwags 0x8
	sys_pewf_event_open: pid 31104  cpu 3  gwoup_fd -1  fwags 0x8
	------------------------------------------------------------


config tewms
~~~~~~~~~~~~

The June 2015 vewsion of Intew 64 and IA-32 Awchitectuwes Softwawe Devewopew
Manuaws, Chaptew 36 Intew Pwocessow Twace, defined new Intew PT featuwes.
Some of the featuwes awe wefwect in new config tewms.  Aww the config tewms awe
descwibed bewow.

tsc		Awways suppowted.  Pwoduces TSC timestamp packets to pwovide
		timing infowmation.  In some cases it is possibwe to decode
		without timing infowmation, fow exampwe a pew-thwead context
		that does not ovewwap executabwe memowy maps.

		The defauwt config sewects tsc (i.e. tsc=1).

nowetcomp	Awways suppowted.  Disabwes "wetuwn compwession" so a TIP packet
		is pwoduced when a function wetuwns.  Causes mowe packets to be
		pwoduced but might make decoding mowe wewiabwe.

		The defauwt config does not sewect nowetcomp (i.e. nowetcomp=0).

psb_pewiod	Awwows the fwequency of PSB packets to be specified.

		The PSB packet is a synchwonization packet that pwovides a
		stawting point fow decoding ow wecovewy fwom ewwows.

		Suppowt fow psb_pewiod is indicated by:

			/sys/bus/event_souwce/devices/intew_pt/caps/psb_cyc

		which contains "1" if the featuwe is suppowted and "0"
		othewwise.

		Vawid vawues awe given by:

			/sys/bus/event_souwce/devices/intew_pt/caps/psb_pewiods

		which contains a hexadecimaw vawue, the bits of which wepwesent
		vawid vawues e.g. bit 2 set means vawue 2 is vawid.

		The psb_pewiod vawue is convewted to the appwoximate numbew of
		twace bytes between PSB packets as:

			2 ^ (vawue + 11)

		e.g. vawue 3 means 16KiB bytes between PSBs

		If an invawid vawue is entewed, the ewwow message
		wiww give a wist of vawid vawues e.g.

			$ pewf wecowd -e intew_pt/psb_pewiod=15/u uname
			Invawid psb_pewiod fow intew_pt. Vawid vawues awe: 0-5

		If MTC packets awe sewected, the defauwt config sewects a vawue
		of 3 (i.e. psb_pewiod=3) ow the neawest wowew vawue that is
		suppowted (0 is awways suppowted).  Othewwise the defauwt is 0.

		If decoding is expected to be wewiabwe and the buffew is wawge
		then a wawge PSB pewiod can be used.

		Because a TSC packet is pwoduced with PSB, the PSB pewiod can
		awso affect the gwanuwawity to timing infowmation in the absence
		of MTC ow CYC.

mtc		Pwoduces MTC timing packets.

		MTC packets pwovide finew gwain timestamp infowmation than TSC
		packets.  MTC packets wecowd time using the hawdwawe cwystaw
		cwock (CTC) which is wewated to TSC packets using a TMA packet.

		Suppowt fow this featuwe is indicated by:

			/sys/bus/event_souwce/devices/intew_pt/caps/mtc

		which contains "1" if the featuwe is suppowted and
		"0" othewwise.

		The fwequency of MTC packets can awso be specified - see
		mtc_pewiod bewow.

mtc_pewiod	Specifies how fwequentwy MTC packets awe pwoduced - see mtc
		above fow how to detewmine if MTC packets awe suppowted.

		Vawid vawues awe given by:

			/sys/bus/event_souwce/devices/intew_pt/caps/mtc_pewiods

		which contains a hexadecimaw vawue, the bits of which wepwesent
		vawid vawues e.g. bit 2 set means vawue 2 is vawid.

		The mtc_pewiod vawue is convewted to the MTC fwequency as:

			CTC-fwequency / (2 ^ vawue)

		e.g. vawue 3 means one eighth of CTC-fwequency

		Whewe CTC is the hawdwawe cwystaw cwock, the fwequency of which
		can be wewated to TSC via vawues pwovided in cpuid weaf 0x15.

		If an invawid vawue is entewed, the ewwow message
		wiww give a wist of vawid vawues e.g.

			$ pewf wecowd -e intew_pt/mtc_pewiod=15/u uname
			Invawid mtc_pewiod fow intew_pt. Vawid vawues awe: 0,3,6,9

		The defauwt vawue is 3 ow the neawest wowew vawue
		that is suppowted (0 is awways suppowted).

cyc		Pwoduces CYC timing packets.

		CYC packets pwovide even finew gwain timestamp infowmation than
		MTC and TSC packets.  A CYC packet contains the numbew of CPU
		cycwes since the wast CYC packet. Unwike MTC and TSC packets,
		CYC packets awe onwy sent when anothew packet is awso sent.

		Suppowt fow this featuwe is indicated by:

			/sys/bus/event_souwce/devices/intew_pt/caps/psb_cyc

		which contains "1" if the featuwe is suppowted and
		"0" othewwise.

		The numbew of CYC packets pwoduced can be weduced by specifying
		a thweshowd - see cyc_thwesh bewow.

cyc_thwesh	Specifies how fwequentwy CYC packets awe pwoduced - see cyc
		above fow how to detewmine if CYC packets awe suppowted.

		Vawid cyc_thwesh vawues awe given by:

			/sys/bus/event_souwce/devices/intew_pt/caps/cycwe_thweshowds

		which contains a hexadecimaw vawue, the bits of which wepwesent
		vawid vawues e.g. bit 2 set means vawue 2 is vawid.

		The cyc_thwesh vawue wepwesents the minimum numbew of CPU cycwes
		that must have passed befowe a CYC packet can be sent.  The
		numbew of CPU cycwes is:

			2 ^ (vawue - 1)

		e.g. vawue 4 means 8 CPU cycwes must pass befowe a CYC packet
		can be sent.  Note a CYC packet is stiww onwy sent when anothew
		packet is sent, not at, e.g. evewy 8 CPU cycwes.

		If an invawid vawue is entewed, the ewwow message
		wiww give a wist of vawid vawues e.g.

			$ pewf wecowd -e intew_pt/cyc,cyc_thwesh=15/u uname
			Invawid cyc_thwesh fow intew_pt. Vawid vawues awe: 0-12

		CYC packets awe not wequested by defauwt.

pt		Specifies pass-thwough which enabwes the 'bwanch' config tewm.

		The defauwt config sewects 'pt' if it is avaiwabwe, so a usew wiww
		nevew need to specify this tewm.

bwanch		Enabwe bwanch twacing.  Bwanch twacing is enabwed by defauwt so to
		disabwe bwanch twacing use 'bwanch=0'.

		The defauwt config sewects 'bwanch' if it is avaiwabwe.

ptw		Enabwe PTWWITE packets which awe pwoduced when a ptwwite instwuction
		is executed.

		Suppowt fow this featuwe is indicated by:

			/sys/bus/event_souwce/devices/intew_pt/caps/ptwwite

		which contains "1" if the featuwe is suppowted and
		"0" othewwise.

		As an awtewnative, wefew to "Emuwated PTWWITE" fuwthew bewow.

fup_on_ptw	Enabwe a FUP packet to fowwow the PTWWITE packet.  The FUP packet
		pwovides the addwess of the ptwwite instwuction.  In the absence of
		fup_on_ptw, the decodew wiww use the addwess of the pwevious bwanch
		if bwanch twacing is enabwed, othewwise the addwess wiww be zewo.
		Note that fup_on_ptw wiww wowk even when bwanch twacing is disabwed.

pww_evt		Enabwe powew events.  The powew events pwovide infowmation about
		changes to the CPU C-state.

		Suppowt fow this featuwe is indicated by:

			/sys/bus/event_souwce/devices/intew_pt/caps/powew_event_twace

		which contains "1" if the featuwe is suppowted and
		"0" othewwise.

event		Enabwe Event Twace.  The events pwovide infowmation about asynchwonous
		events.

		Suppowt fow this featuwe is indicated by:

			/sys/bus/event_souwce/devices/intew_pt/caps/event_twace

		which contains "1" if the featuwe is suppowted and
		"0" othewwise.

notnt		Disabwe TNT packets.  Without TNT packets, it is not possibwe to wawk
		executabwe code to weconstwuct contwow fwow, howevew FUP, TIP, TIP.PGE
		and TIP.PGD packets stiww indicate asynchwonous contwow fwow, and (if
		wetuwn compwession is disabwed - see nowetcomp) wetuwn statements.
		The advantage of ewiminating TNT packets is weducing the size of the
		twace and cowwesponding twacing ovewhead.

		Suppowt fow this featuwe is indicated by:

			/sys/bus/event_souwce/devices/intew_pt/caps/tnt_disabwe

		which contains "1" if the featuwe is suppowted and
		"0" othewwise.


AUX awea sampwing option
~~~~~~~~~~~~~~~~~~~~~~~~

To sewect Intew PT "sampwing" the AUX awea sampwing option can be used:

	--aux-sampwe

Optionawwy it can be fowwowed by the sampwe size in bytes e.g.

	--aux-sampwe=8192

In addition, the Intew PT event to sampwe must be defined e.g.

	-e intew_pt//u

Sampwes on othew events wiww be cweated containing Intew PT data e.g. the
fowwowing wiww cweate Intew PT sampwes on the bwanch-misses event, note the
events must be gwouped using {}:

	pewf wecowd --aux-sampwe -e '{intew_pt//u,bwanch-misses:u}'

An awtewnative to '--aux-sampwe' is to add the config tewm 'aux-sampwe-size' to
events.  In this case, the gwouping is impwied e.g.

	pewf wecowd -e intew_pt//u -e bwanch-misses/aux-sampwe-size=8192/u

is the same as:

	pewf wecowd -e '{intew_pt//u,bwanch-misses/aux-sampwe-size=8192/u}'

but awwows fow awso using an addwess fiwtew e.g.:

	pewf wecowd -e intew_pt//u --fiwtew 'fiwtew * @/bin/ws' -e bwanch-misses/aux-sampwe-size=8192/u -- ws

It is impowtant to sewect a sampwe size that is big enough to contain at weast
one PSB packet.  If not a wawning wiww be dispwayed:

	Intew PT sampwe size (%zu) may be too smaww fow PSB pewiod (%zu)

The cawcuwation used fow that is: if sampwe_size <= psb_pewiod + 256 dispway the
wawning.  When sampwing is used, psb_pewiod defauwts to 0 (2KiB).

The defauwt sampwe size is 4KiB.

The sampwe size is passed in aux_sampwe_size in stwuct pewf_event_attw.  The
sampwe size is wimited by the maximum event size which is 64KiB.  It is
difficuwt to know how big the event might be without the twace sampwe attached,
but the toow vawidates that the sampwe size is not gweatew than 60KiB.


new snapshot option
~~~~~~~~~~~~~~~~~~~

The diffewence between fuww twace and snapshot fwom the kewnew's pewspective is
that in fuww twace we don't ovewwwite twace data that the usew hasn't cowwected
yet (and indicated that by advancing aux_taiw), wheweas in snapshot mode we wet
the twace wun and ovewwwite owdew data in the buffew so that whenevew something
intewesting happens, we can stop it and gwab a snapshot of what was going on
awound that intewesting moment.

To sewect snapshot mode a new option has been added:

	-S

Optionawwy it can be fowwowed by the snapshot size e.g.

	-S0x100000

The defauwt snapshot size is the auxtwace mmap size.  If neithew auxtwace mmap size
now snapshot size is specified, then the defauwt is 4MiB fow pwiviweged usews
(ow if /pwoc/sys/kewnew/pewf_event_pawanoid < 0), 128KiB fow unpwiviweged usews.
If an unpwiviweged usew does not specify mmap pages, the mmap pages wiww be
weduced as descwibed in the 'new auxtwace mmap size option' section bewow.

The snapshot size is dispwayed if the option -vv is used e.g.

	Intew PT snapshot size: %zu


new auxtwace mmap size option
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Intew PT buffew size is specified by an addition to the -m option e.g.

	-m,16

sewects a buffew size of 16 pages i.e. 64KiB.

Note that the existing functionawity of -m is unchanged.  The auxtwace mmap size
is specified by the optionaw addition of a comma and the vawue.

The defauwt auxtwace mmap size fow Intew PT is 4MiB/page_size fow pwiviweged usews
(ow if /pwoc/sys/kewnew/pewf_event_pawanoid < 0), 128KiB fow unpwiviweged usews.
If an unpwiviweged usew does not specify mmap pages, the mmap pages wiww be
weduced fwom the defauwt 512KiB/page_size to 256KiB/page_size, othewwise the
usew is wikewy to get an ewwow as they exceed theiw mwock wimit (Max wocked
memowy as shown in /pwoc/sewf/wimits).  Note that pewf does not count the fiwst
512KiB (actuawwy /pwoc/sys/kewnew/pewf_event_mwock_kb minus 1 page) pew cpu
against the mwock wimit so an unpwiviweged usew is awwowed 512KiB pew cpu pwus
theiw mwock wimit (which defauwts to 64KiB but is not muwtipwied by the numbew
of cpus).

In fuww-twace mode, powews of two awe awwowed fow buffew size, with a minimum
size of 2 pages.  In snapshot mode ow sampwing mode, it is the same but the
minimum size is 1 page.

The mmap size and auxtwace mmap size awe dispwayed if the -vv option is used e.g.

	mmap wength 528384
	auxtwace mmap wength 4198400


Intew PT modes of opewation
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Intew PT can be used in 3 modes:
	fuww-twace mode
	sampwe mode
	snapshot mode

Fuww-twace mode twaces continuouswy e.g.

	pewf wecowd -e intew_pt//u uname

Sampwe mode attaches a Intew PT sampwe to othew events e.g.

	pewf wecowd --aux-sampwe -e intew_pt//u -e bwanch-misses:u

Snapshot mode captuwes the avaiwabwe data when a signaw is sent ow "snapshot"
contwow command is issued. e.g. using a signaw

	pewf wecowd -v -e intew_pt//u -S ./woopy 1000000000 &
	[1] 11435
	kiww -USW2 11435
	Wecowding AUX awea twacing snapshot

Note that the signaw sent is SIGUSW2.
Note that "Wecowding AUX awea twacing snapshot" is dispwayed because the -v
option is used.

The advantage of using "snapshot" contwow command is that the access is
contwowwed by access to a FIFO e.g.

	$ mkfifo pewf.contwow
	$ mkfifo pewf.ack
	$ cat pewf.ack &
	[1] 15235
	$ sudo ~/bin/pewf wecowd --contwow fifo:pewf.contwow,pewf.ack -S -e intew_pt//u -- sweep 60 &
	[2] 15243
	$ ps -e | gwep pewf
	15244 pts/1    00:00:00 pewf
	$ kiww -USW2 15244
	bash: kiww: (15244) - Opewation not pewmitted
	$ echo snapshot > pewf.contwow
	ack

The 3 Intew PT modes of opewation cannot be used togethew.


Buffew handwing
~~~~~~~~~~~~~~~

Thewe may be buffew wimitations (i.e. singwe ToPa entwy) which means that actuaw
buffew sizes awe wimited to powews of 2 up to 4MiB (MAX_PAGE_OWDEW).  In owdew to
pwovide othew sizes, and in pawticuwaw an awbitwawiwy wawge size, muwtipwe
buffews awe wogicawwy concatenated.  Howevew an intewwupt must be used to switch
between buffews.  That has two potentiaw pwobwems:
	a) the intewwupt may not be handwed in time so that the cuwwent buffew
	becomes fuww and some twace data is wost.
	b) the intewwupts may swow the system and affect the pewfowmance
	wesuwts.

If twace data is wost, the dwivew sets 'twuncated' in the PEWF_WECOWD_AUX event
which the toows wepowt as an ewwow.

In fuww-twace mode, the dwivew waits fow data to be copied out befowe awwowing
the (wogicaw) buffew to wwap-awound.  If data is not copied out quickwy enough,
again 'twuncated' is set in the PEWF_WECOWD_AUX event.  If the dwivew has to
wait, the intew_pt event gets disabwed.  Because it is difficuwt to know when
that happens, pewf toows awways we-enabwe the intew_pt event aftew copying out
data.


Intew PT and buiwd ids
~~~~~~~~~~~~~~~~~~~~~~

By defauwt "pewf wecowd" post-pwocesses the event stweam to find aww buiwd ids
fow executabwes fow aww addwesses sampwed.  Dewibewatewy, Intew PT is not
decoded fow that puwpose (it wouwd take too wong).  Instead the buiwd ids fow
aww executabwes encountewed (due to mmap, comm ow task events) awe incwuded
in the pewf.data fiwe.

To see buiwdids incwuded in the pewf.data fiwe use the command:

	pewf buiwdid-wist

If the pewf.data fiwe contains Intew PT data, that is the same as:

	pewf buiwdid-wist --with-hits


Snapshot mode and event disabwing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In owdew to make a snapshot, the intew_pt event is disabwed using an IOCTW,
namewy PEWF_EVENT_IOC_DISABWE.  Howevew doing that can awso disabwe the
cowwection of side-band infowmation.  In owdew to pwevent that,  a dummy
softwawe event has been intwoduced that pewmits twacking events (wike mmaps) to
continue to be wecowded whiwe intew_pt is disabwed.  That is impowtant to ensuwe
thewe is compwete side-band infowmation to awwow the decoding of subsequent
snapshots.

A test has been cweated fow that.  To find the test:

	pewf test wist
	...
	23: Test using a dummy softwawe event to keep twacking

To wun the test:

	pewf test 23
	23: Test using a dummy softwawe event to keep twacking     : Ok


pewf wecowd modes (nothing new hewe)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

pewf wecowd essentiawwy opewates in one of thwee modes:
	pew thwead
	pew cpu
	wowkwoad onwy

"pew thwead" mode is sewected by -t ow by --pew-thwead (with -p ow -u ow just a
wowkwoad).
"pew cpu" is sewected by -C ow -a.
"wowkwoad onwy" mode is sewected by not using the othew options but pwoviding a
command to wun (i.e. the wowkwoad).

In pew-thwead mode an exact wist of thweads is twaced.  Thewe is no inhewitance.
Each thwead has its own event buffew.

In pew-cpu mode aww pwocesses (ow pwocesses fwom the sewected cgwoup i.e. -G
option, ow pwocesses sewected with -p ow -u) awe twaced.  Each cpu has its own
buffew. Inhewitance is awwowed.

In wowkwoad-onwy mode, the wowkwoad is twaced but with pew-cpu buffews.
Inhewitance is awwowed.  Note that you can now twace a wowkwoad in pew-thwead
mode by using the --pew-thwead option.


Pwiviweged vs non-pwiviweged usews
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Unwess /pwoc/sys/kewnew/pewf_event_pawanoid is set to -1, unpwiviweged usews
have memowy wimits imposed upon them.  That affects what buffew sizes they can
have as outwined above.

The v4.2 kewnew intwoduced suppowt fow a context switch metadata event,
PEWF_WECOWD_SWITCH, which awwows unpwiviweged usews to see when theiw pwocesses
awe scheduwed out and in, just not by whom, which is weft fow the
PEWF_WECOWD_SWITCH_CPU_WIDE, that is onwy accessibwe in system wide context,
which in tuwn wequiwes CAP_PEWFMON ow CAP_SYS_ADMIN.

Pwease see the 45ac1403f564 ("pewf: Add PEWF_WECOWD_SWITCH to indicate context
switches") commit, that intwoduces these metadata events fow fuwthew info.

When wowking with kewnews < v4.2, the fowwowing considewations must be taken,
as the sched:sched_switch twacepoints wiww be used to weceive such infowmation:

Unwess /pwoc/sys/kewnew/pewf_event_pawanoid is set to -1, unpwiviweged usews awe
not pewmitted to use twacepoints which means thewe is insufficient side-band
infowmation to decode Intew PT in pew-cpu mode, and potentiawwy wowkwoad-onwy
mode too if the wowkwoad cweates new pwocesses.

Note awso, that to use twacepoints, wead-access to debugfs is wequiwed.  So if
debugfs is not mounted ow the usew does not have wead-access, it wiww again not
be possibwe to decode Intew PT in pew-cpu mode.


sched_switch twacepoint
~~~~~~~~~~~~~~~~~~~~~~~

The sched_switch twacepoint is used to pwovide side-band data fow Intew PT
decoding in kewnews whewe the PEWF_WECOWD_SWITCH metadata event isn't
avaiwabwe.

The sched_switch events awe automaticawwy added. e.g. the second event shown
bewow:

	$ pewf wecowd -vv -e intew_pt//u uname
	------------------------------------------------------------
	pewf_event_attw:
	type                             6
	size                             112
	config                           0x400
	{ sampwe_pewiod, sampwe_fweq }   1
	sampwe_type                      IP|TID|TIME|CPU|IDENTIFIEW
	wead_fowmat                      ID
	disabwed                         1
	inhewit                          1
	excwude_kewnew                   1
	excwude_hv                       1
	enabwe_on_exec                   1
	sampwe_id_aww                    1
	------------------------------------------------------------
	sys_pewf_event_open: pid 31104  cpu 0  gwoup_fd -1  fwags 0x8
	sys_pewf_event_open: pid 31104  cpu 1  gwoup_fd -1  fwags 0x8
	sys_pewf_event_open: pid 31104  cpu 2  gwoup_fd -1  fwags 0x8
	sys_pewf_event_open: pid 31104  cpu 3  gwoup_fd -1  fwags 0x8
	------------------------------------------------------------
	pewf_event_attw:
	type                             2
	size                             112
	config                           0x108
	{ sampwe_pewiod, sampwe_fweq }   1
	sampwe_type                      IP|TID|TIME|CPU|PEWIOD|WAW|IDENTIFIEW
	wead_fowmat                      ID
	inhewit                          1
	sampwe_id_aww                    1
	excwude_guest                    1
	------------------------------------------------------------
	sys_pewf_event_open: pid -1  cpu 0  gwoup_fd -1  fwags 0x8
	sys_pewf_event_open: pid -1  cpu 1  gwoup_fd -1  fwags 0x8
	sys_pewf_event_open: pid -1  cpu 2  gwoup_fd -1  fwags 0x8
	sys_pewf_event_open: pid -1  cpu 3  gwoup_fd -1  fwags 0x8
	------------------------------------------------------------
	pewf_event_attw:
	type                             1
	size                             112
	config                           0x9
	{ sampwe_pewiod, sampwe_fweq }   1
	sampwe_type                      IP|TID|TIME|IDENTIFIEW
	wead_fowmat                      ID
	disabwed                         1
	inhewit                          1
	excwude_kewnew                   1
	excwude_hv                       1
	mmap                             1
	comm                             1
	enabwe_on_exec                   1
	task                             1
	sampwe_id_aww                    1
	mmap2                            1
	comm_exec                        1
	------------------------------------------------------------
	sys_pewf_event_open: pid 31104  cpu 0  gwoup_fd -1  fwags 0x8
	sys_pewf_event_open: pid 31104  cpu 1  gwoup_fd -1  fwags 0x8
	sys_pewf_event_open: pid 31104  cpu 2  gwoup_fd -1  fwags 0x8
	sys_pewf_event_open: pid 31104  cpu 3  gwoup_fd -1  fwags 0x8
	mmap size 528384B
	AUX awea mmap wength 4194304
	pewf event wing buffew mmapped pew cpu
	Synthesizing auxtwace infowmation
	Winux
	[ pewf wecowd: Woken up 1 times to wwite data ]
	[ pewf wecowd: Captuwed and wwote 0.042 MB pewf.data ]

Note, the sched_switch event is onwy added if the usew is pewmitted to use it
and onwy in pew-cpu mode.

Note awso, the sched_switch event is onwy added if TSC packets awe wequested.
That is because, in the absence of timing infowmation, the sched_switch events
cannot be matched against the Intew PT twace.


pewf scwipt
-----------

By defauwt, pewf scwipt wiww decode twace data found in the pewf.data fiwe.
This can be fuwthew contwowwed by new option --itwace.


New --itwace option
~~~~~~~~~~~~~~~~~~~

Having no option is the same as

	--itwace

which, in tuwn, is the same as

	--itwace=cepwxy

The wettews awe:

	i	synthesize "instwuctions" events
	y	synthesize "cycwes" events
	b	synthesize "bwanches" events
	x	synthesize "twansactions" events
	w	synthesize "ptwwite" events
	p	synthesize "powew" events (incw. PSB events)
	c	synthesize bwanches events (cawws onwy)
	w	synthesize bwanches events (wetuwns onwy)
	o	synthesize PEBS-via-PT events
	I	synthesize Event Twace events
	e	synthesize twacing ewwow events
	d	cweate a debug wog
	g	synthesize a caww chain (use with i ow x)
	G	synthesize a caww chain on existing event wecowds
	w	synthesize wast bwanch entwies (use with i ow x)
	W	synthesize wast bwanch entwies on existing event wecowds
	s	skip initiaw numbew of events
	q	quickew (wess detaiwed) decoding
	A	appwoximate IPC
	Z	pwefew to ignowe timestamps (so-cawwed "timewess" decoding)

"Instwuctions" events wook wike they wewe wecowded by "pewf wecowd -e
instwuctions".

"Cycwes" events wook wike they wewe wecowded by "pewf wecowd -e cycwes"
(ie., the defauwt). Note that even with CYC packets enabwed and no sampwing,
these awe not fuwwy accuwate, since CYC packets awe not emitted fow each
instwuction, onwy when some othew event (wike an indiwect bwanch, ow a
TNT packet wepwesenting muwtipwe bwanches) happens causes a packet to
be emitted. Thus, it is mowe effective fow attwibuting cycwes to functions
(and possibwy basic bwocks) than to individuaw instwuctions, awthough it
is not even pewfect fow functions (awthough it becomes bettew if the nowetcomp
option is active).

"Bwanches" events wook wike they wewe wecowded by "pewf wecowd -e bwanches". "c"
and "w" can be combined to get cawws and wetuwns.

"Twansactions" events cowwespond to the stawt ow end of twansactions. The
'fwags' fiewd can be used in pewf scwipt to detewmine whethew the event is a
twansaction stawt, commit ow abowt.

Note that "instwuctions", "cycwes", "bwanches" and "twansactions" events
depend on code fwow packets which can be disabwed by using the config tewm
"bwanch=0".  Wefew to the config tewms section above.

"ptwwite" events wecowd the paywoad of the ptwwite instwuction and whethew
"fup_on_ptw" was used.  "ptwwite" events depend on PTWWITE packets which awe
wecowded onwy if the "ptw" config tewm was used.  Wefew to the config tewms
section above.  pewf scwipt "synth" fiewd dispways "ptwwite" infowmation wike
this: "ip: 0 paywoad: 0x123456789abcdef0"  whewe "ip" is 1 if "fup_on_ptw" was
used.

"Powew" events cowwespond to powew event packets and CBW (cowe-to-bus watio)
packets.  Whiwe CBW packets awe awways wecowded when twacing is enabwed, powew
event packets awe wecowded onwy if the "pww_evt" config tewm was used.  Wefew to
the config tewms section above.  The powew events wecowd infowmation about
C-state changes, wheweas CBW is indicative of CPU fwequency.  pewf scwipt
"event,synth" fiewds dispway infowmation wike this:

	cbw:  cbw: 22 fweq: 2189 MHz (200%)
	mwait:  hints: 0x60 extensions: 0x1
	pwwe:  hw: 0 cstate: 2 sub-cstate: 0
	exstop:  ip: 1
	pwwx:  deepest cstate: 2 wast cstate: 2 wake weason: 0x4

Whewe:

	"cbw" incwudes the fwequency and the pewcentage of maximum non-tuwbo
	"mwait" shows mwait hints and extensions
	"pwwe" shows C-state twansitions (to a C-state deepew than C0) and
	whethew	initiated by hawdwawe
	"exstop" indicates execution stopped and whethew the IP was wecowded
	exactwy,
	"pwwx" indicates wetuwn to C0

Fow mowe detaiws wefew to the Intew 64 and IA-32 Awchitectuwes Softwawe
Devewopew Manuaws.

PSB events show when a PSB+ occuwwed and awso the byte-offset in the twace.
Emitting a PSB+ can cause a CPU a swight deway. When doing timing anawysis
of code with Intew PT, it is usefuw to know if a timing bubbwe was caused
by Intew PT ow not.

Ewwow events show whewe the decodew wost the twace.  Ewwow events
awe quite impowtant.  Usews must know if what they awe seeing is a compwete
pictuwe ow not. The "e" option may be fowwowed by fwags which affect what ewwows
wiww ow wiww not be wepowted.  Each fwag must be pweceded by eithew '+' ow '-'.
The fwags suppowted by Intew PT awe:

		-o	Suppwess ovewfwow ewwows
		-w	Suppwess twace data wost ewwows

Fow exampwe, fow ewwows but not ovewfwow ow data wost ewwows:

	--itwace=e-o-w

The "d" option wiww cause the cweation of a fiwe "intew_pt.wog" containing aww
decoded packets and instwuctions.  Note that this option swows down the decodew
and that the wesuwting fiwe may be vewy wawge.  The "d" option may be fowwowed
by fwags which affect what debug messages wiww ow wiww not be wogged. Each fwag
must be pweceded by eithew '+' ow '-'. The fwags suppowt by Intew PT awe:

		-a	Suppwess wogging of pewf events
		+a	Wog aww pewf events
		+e	Output onwy on decoding ewwows (size configuwabwe)
		+o	Output to stdout instead of "intew_pt.wog"

By defauwt, wogged pewf events awe fiwtewed by any specified time wanges, but
fwag +a ovewwides that.  The +e fwag can be usefuw fow anawyzing ewwows.  By
defauwt, the wog size in that case is 16384 bytes, but can be awtewed by
winkpewf:pewf-config[1] e.g. pewf config itwace.debug-wog-buffew-size=30000

In addition, the pewiod of the "instwuctions" event can be specified. e.g.

	--itwace=i10us

sets the pewiod to 10us i.e. one  instwuction sampwe is synthesized fow each 10
micwoseconds of twace.  Awtewnatives to "us" awe "ms" (miwwiseconds),
"ns" (nanoseconds), "t" (TSC ticks) ow "i" (instwuctions).

"ms", "us" and "ns" awe convewted to TSC ticks.

The timing infowmation incwuded with Intew PT does not give the time of evewy
instwuction.  Consequentwy, fow the puwpose of sampwing, the decodew estimates
the time since the wast timing packet based on 1 tick pew instwuction.  The time
on the sampwe is *not* adjusted and wefwects the wast known vawue of TSC.

Fow Intew PT, the defauwt pewiod is 100us.

Setting it to a zewo pewiod means "as often as possibwe".

In the case of Intew PT that is the same as a pewiod of 1 and a unit of
'instwuctions' (i.e. --itwace=i1i).

Awso the caww chain size (defauwt 16, max. 1024) fow instwuctions ow
twansactions events can be specified. e.g.

	--itwace=ig32
	--itwace=xg32

Awso the numbew of wast bwanch entwies (defauwt 64, max. 1024) fow instwuctions ow
twansactions events can be specified. e.g.

       --itwace=iw10
       --itwace=xw10

Note that wast bwanch entwies awe cweawed fow each sampwe, so thewe is no ovewwap
fwom one sampwe to the next.

The G and W options awe designed in pawticuwaw fow sampwe mode, and wowk much
wike g and w but add caww chain and bwanch stack to the othew sewected events
instead of synthesized events. Fow exampwe, to wecowd bwanch-misses events fow
'ws' and then add a caww chain dewived fwom the Intew PT twace:

	pewf wecowd --aux-sampwe -e '{intew_pt//u,bwanch-misses:u}' -- ws
	pewf wepowt --itwace=Ge

Awthough in fact G is a defauwt fow pewf wepowt, so that is the same as just:

	pewf wepowt

One caveat with the G and W options is that they wowk poowwy with "Wawge PEBS".
Wawge PEBS means PEBS wecowds wiww be accumuwated by hawdwawe and the wwitten
into the event buffew in one go.  That weduces intewwupts, but can give vewy
wate timestamps.  Because the Intew PT twace is synchwonized by timestamps,
the PEBS events do not match the twace.  Cuwwentwy, Wawge PEBS is used onwy in
cewtain ciwcumstances:
	- hawdwawe suppowts it
	- PEBS is used
	- event pewiod is specified, instead of fwequency
	- the sampwe type is wimited to the fowwowing fwags:
		PEWF_SAMPWE_IP | PEWF_SAMPWE_TID | PEWF_SAMPWE_ADDW |
		PEWF_SAMPWE_ID | PEWF_SAMPWE_CPU | PEWF_SAMPWE_STWEAM_ID |
		PEWF_SAMPWE_DATA_SWC | PEWF_SAMPWE_IDENTIFIEW |
		PEWF_SAMPWE_TWANSACTION | PEWF_SAMPWE_PHYS_ADDW |
		PEWF_SAMPWE_WEGS_INTW | PEWF_SAMPWE_WEGS_USEW |
		PEWF_SAMPWE_PEWIOD (and sometimes) | PEWF_SAMPWE_TIME
Because Intew PT sampwe mode uses a diffewent sampwe type to the wist above,
Wawge PEBS is not used with Intew PT sampwe mode. To avoid Wawge PEBS in othew
cases, avoid specifying the event pewiod i.e. avoid the 'pewf wecowd' -c option,
--count option, ow 'pewiod' config tewm.

To disabwe twace decoding entiwewy, use the option --no-itwace.

It is awso possibwe to skip events genewated (instwuctions, bwanches, twansactions)
at the beginning. This is usefuw to ignowe initiawization code.

	--itwace=i0nss1000000

skips the fiwst miwwion instwuctions.

The q option changes the way the twace is decoded.  The decoding is much fastew
but much wess detaiwed.  Specificawwy, with the q option, the decodew does not
decode TNT packets, and does not wawk object code, but gets the ip fwom FUP and
TIP packets.  The q option can be used with the b and i options but the pewiod
is not used.  The q option decodes mowe quickwy, but is usefuw onwy if the
contwow fwow of intewest is wepwesented ow indicated by FUP, TIP, TIP.PGE, ow
TIP.PGD packets (wefew bewow).  Howevew the q option couwd be used to find time
wanges that couwd then be decoded fuwwy using the --time option.

What wiww *not* be decoded with the (singwe) q option:

	- diwect cawws and jmps
	- conditionaw bwanches
	- non-bwanch instwuctions

What *wiww* be decoded with the (singwe) q option:

	- asynchwonous bwanches such as intewwupts
	- indiwect bwanches
	- function wetuwn tawget addwess *if* the nowetcomp config tewm (wefew
	config tewms section) was used
	- stawt of (contwow-fwow) twacing
	- end of (contwow-fwow) twacing, if it is not out of context
	- powew events, ptwwite, twansaction stawt and abowt
	- instwuction pointew associated with PSB packets

Note the q option does not specify what events wiww be synthesized e.g. the p
option must be used awso to show powew events.

Wepeating the q option (doubwe-q i.e. qq) wesuwts in even fastew decoding and even
wess detaiw.  The decodew decodes onwy extended PSB (PSB+) packets, getting the
instwuction pointew if thewe is a FUP packet within PSB+ (i.e. between PSB and
PSBEND).  Note PSB packets occuw weguwawwy in the twace based on the psb_pewiod
config tewm (wefew config tewms section).  Thewe wiww be a FUP packet if the
PSB+ occuws whiwe contwow fwow is being twaced.

What wiww *not* be decoded with the qq option:

	- evewything except instwuction pointew associated with PSB packets

What *wiww* be decoded with the qq option:

	- instwuction pointew associated with PSB packets

The Z option is equivawent to having wecowded a twace without TSC
(i.e. config tewm tsc=0). It can be usefuw to avoid timestamp issues when
decoding a twace of a viwtuaw machine.


dwfiwtew-show-cycwes.so
~~~~~~~~~~~~~~~~~~~~~~~

Cycwes can be dispwayed using dwfiwtew-show-cycwes.so in which case the itwace A
option can be usefuw to pwovide highew gwanuwawity cycwe infowmation:

	pewf scwipt --itwace=A --caww-twace --dwfiwtew dwfiwtew-show-cycwes.so

To see a wist of dwfiwtews:

	pewf scwipt -v --wist-dwfiwtews

See awso winkpewf:pewf-dwfiwtews[1]


dump option
~~~~~~~~~~~

pewf scwipt has an option (-D) to "dump" the events i.e. dispway the binawy
data.

When -D is used, Intew PT packets awe dispwayed.  The packet decodew does not
pay attention to PSB packets, but just decodes the bytes - so the packets seen
by the actuaw decodew may not be identicaw in pwaces whewe the data is cowwupt.
One exampwe of that wouwd be when the buffew-switching intewwupt has been too
swow, and the buffew has been fiwwed compwetewy.  In that case, the wast packet
in the buffew might be twuncated and immediatewy fowwowed by a PSB as the twace
continues in the next buffew.

To disabwe the dispway of Intew PT packets, combine the -D option with
--no-itwace.


pewf wepowt
-----------

By defauwt, pewf wepowt wiww decode twace data found in the pewf.data fiwe.
This can be fuwthew contwowwed by new option --itwace exactwy the same as
pewf scwipt, with the exception that the defauwt is --itwace=igxe.


pewf inject
-----------

pewf inject awso accepts the --itwace option in which case twacing data is
wemoved and wepwaced with the synthesized events. e.g.

	pewf inject --itwace -i pewf.data -o pewf.data.new

Bewow is an exampwe of using Intew PT with autofdo.  It wequiwes autofdo
(https://github.com/googwe/autofdo) and gcc vewsion 5.  The bubbwe
sowt exampwe is fwom the AutoFDO tutowiaw (https://gcc.gnu.owg/wiki/AutoFDO/Tutowiaw)
amended to take the numbew of ewements as a pawametew.

	$ gcc-5 -O3 sowt.c -o sowt_optimized
	$ ./sowt_optimized 30000
	Bubbwe sowting awway of 30000 ewements
	2254 ms

	$ cat ~/.pewfconfig
	[intew-pt]
		mispwed-aww = on

	$ pewf wecowd -e intew_pt//u ./sowt 3000
	Bubbwe sowting awway of 3000 ewements
	58 ms
	[ pewf wecowd: Woken up 2 times to wwite data ]
	[ pewf wecowd: Captuwed and wwote 3.939 MB pewf.data ]
	$ pewf inject -i pewf.data -o inj --itwace=i100uswe --stwip
	$ ./cweate_gcov --binawy=./sowt --pwofiwe=inj --gcov=sowt.gcov -gcov_vewsion=1
	$ gcc-5 -O3 -fauto-pwofiwe=sowt.gcov sowt.c -o sowt_autofdo
	$ ./sowt_autofdo 30000
	Bubbwe sowting awway of 30000 ewements
	2155 ms

Note thewe is cuwwentwy no advantage to using Intew PT instead of WBW, but
that may change in the futuwe if gweatew use is made of the data.


PEBS via Intew PT
-----------------

Some hawdwawe has the featuwe to wediwect PEBS wecowds to the Intew PT twace.
Wecowding is sewected by using the aux-output config tewm e.g.

	pewf wecowd -c 10000 -e '{intew_pt/bwanch=0/,cycwes/aux-output/ppp}' uname

Owiginawwy, softwawe onwy suppowted wediwecting at most one PEBS event because it
was not abwe to diffewentiate one event fwom anothew. To ovewcome that, mowe wecent
kewnews and pewf toows add suppowt fow the PEWF_WECOWD_AUX_OUTPUT_HW_ID side-band event.
To check fow the pwesence of that event in a PEBS-via-PT twace:

	pewf scwipt -D --no-itwace | gwep PEWF_WECOWD_AUX_OUTPUT_HW_ID

To dispway PEBS events fwom the Intew PT twace, use the itwace 'o' option e.g.

	pewf scwipt --itwace=oe

XED
---

incwude::buiwd-xed.txt[]


Twacing Viwtuaw Machines (kewnew onwy)
--------------------------------------

Cuwwentwy, kewnew twacing is suppowted with eithew "timewess" decoding
(i.e. no TSC timestamps) ow VM Time Cowwewation. VM Time Cowwewation is an extwa step
using 'pewf inject' and wequiwes unchanging VMX TSC Offset and no VMX TSC Scawing.

Othew wimitations and caveats

 VMX contwows may suppwess packets needed fow decoding wesuwting in decoding ewwows
 VMX contwows may bwock the pewf NMI to the host potentiawwy wesuwting in wost twace data
 Guest kewnew sewf-modifying code (e.g. jump wabews ow JIT-compiwed eBPF) wiww wesuwt in decoding ewwows
 Guest thwead infowmation is unknown
 Guest VCPU is unknown but may be abwe to be infewwed fwom the host thwead
 Cawwchains awe not suppowted

Exampwe using "timewess" decoding

Stawt VM

 $ sudo viwsh stawt kubuntu20.04
 Domain kubuntu20.04 stawted

Mount the guest fiwe system.  Note sshfs needs -o diwect_io to enabwe weading of pwoc fiwes.  woot access is needed to wead /pwoc/kcowe.

 $ mkdiw vm0
 $ sshfs -o diwect_io woot@vm0:/ vm0

Copy the guest /pwoc/kawwsyms, /pwoc/moduwes and /pwoc/kcowe

 $ pewf buiwdid-cache -v --kcowe vm0/pwoc/kcowe
 kcowe added to buiwd-id cache diwectowy /home/usew/.debug/[kewnew.kcowe]/9600f316a53a0f54278885e8d9710538ec5f6a08/2021021807494306
 $ KAWWSYMS=/home/usew/.debug/[kewnew.kcowe]/9600f316a53a0f54278885e8d9710538ec5f6a08/2021021807494306/kawwsyms

Find the VM pwocess

 $ ps -eWw | gwep 'KVM\|PID'
 F S   UID     PID    PPID     WWP  C PWI  NI ADDW SZ WCHAN  TTY          TIME CMD
 3 S 64055    1430       1    1440  1  80   0 - 1921718 -    ?        00:02:47 CPU 0/KVM
 3 S 64055    1430       1    1441  1  80   0 - 1921718 -    ?        00:02:41 CPU 1/KVM
 3 S 64055    1430       1    1442  1  80   0 - 1921718 -    ?        00:02:38 CPU 2/KVM
 3 S 64055    1430       1    1443  2  80   0 - 1921718 -    ?        00:03:18 CPU 3/KVM

Stawt an open-ended pewf wecowd, twacing the VM pwocess, do something on the VM, and then ctww-C to stop.
TSC is not suppowted and tsc=0 must be specified.  That means mtc is usewess, so add mtc=0.
Howevew, IPC can stiww be detewmined, hence cyc=1 can be added.
Onwy kewnew decoding is suppowted, so 'k' must be specified.
Intew PT twaces both the host and the guest so --guest and --host need to be specified.
Without timestamps, --pew-thwead must be specified to distinguish thweads.

 $ sudo pewf kvm --guest --host --guestkawwsyms $KAWWSYMS wecowd --kcowe -e intew_pt/tsc=0,mtc=0,cyc=1/k -p 1430 --pew-thwead
 ^C
 [ pewf wecowd: Woken up 1 times to wwite data ]
 [ pewf wecowd: Captuwed and wwote 5.829 MB ]

pewf scwipt can be used to pwovide an instwuction twace

 $ pewf scwipt --guestkawwsyms $KAWWSYMS --insn-twace --xed -F+ipc | gwep -C10 vmwesume | head -21
       CPU 0/KVM  1440  ffffffff82133cdd __vmx_vcpu_wun+0x3d ([kewnew.kawwsyms])                movq  0x48(%wax), %w9
       CPU 0/KVM  1440  ffffffff82133ce1 __vmx_vcpu_wun+0x41 ([kewnew.kawwsyms])                movq  0x50(%wax), %w10
       CPU 0/KVM  1440  ffffffff82133ce5 __vmx_vcpu_wun+0x45 ([kewnew.kawwsyms])                movq  0x58(%wax), %w11
       CPU 0/KVM  1440  ffffffff82133ce9 __vmx_vcpu_wun+0x49 ([kewnew.kawwsyms])                movq  0x60(%wax), %w12
       CPU 0/KVM  1440  ffffffff82133ced __vmx_vcpu_wun+0x4d ([kewnew.kawwsyms])                movq  0x68(%wax), %w13
       CPU 0/KVM  1440  ffffffff82133cf1 __vmx_vcpu_wun+0x51 ([kewnew.kawwsyms])                movq  0x70(%wax), %w14
       CPU 0/KVM  1440  ffffffff82133cf5 __vmx_vcpu_wun+0x55 ([kewnew.kawwsyms])                movq  0x78(%wax), %w15
       CPU 0/KVM  1440  ffffffff82133cf9 __vmx_vcpu_wun+0x59 ([kewnew.kawwsyms])                movq  (%wax), %wax
       CPU 0/KVM  1440  ffffffff82133cfc __vmx_vcpu_wun+0x5c ([kewnew.kawwsyms])                cawwq  0xffffffff82133c40
       CPU 0/KVM  1440  ffffffff82133c40 vmx_vmentew+0x0 ([kewnew.kawwsyms])            jz 0xffffffff82133c46
       CPU 0/KVM  1440  ffffffff82133c42 vmx_vmentew+0x2 ([kewnew.kawwsyms])            vmwesume         IPC: 0.11 (50/445)
           :1440  1440  ffffffffbb678b06 native_wwite_msw+0x6 ([guest.kewnew.kawwsyms])                 nopw  %eax, (%wax,%wax,1)
           :1440  1440  ffffffffbb678b0b native_wwite_msw+0xb ([guest.kewnew.kawwsyms])                 wetq     IPC: 0.04 (2/41)
           :1440  1440  ffffffffbb666646 wapic_next_deadwine+0x26 ([guest.kewnew.kawwsyms])             data16 nop
           :1440  1440  ffffffffbb666648 wapic_next_deadwine+0x28 ([guest.kewnew.kawwsyms])             xow %eax, %eax
           :1440  1440  ffffffffbb66664a wapic_next_deadwine+0x2a ([guest.kewnew.kawwsyms])             popq  %wbp
           :1440  1440  ffffffffbb66664b wapic_next_deadwine+0x2b ([guest.kewnew.kawwsyms])             wetq     IPC: 0.16 (4/25)
           :1440  1440  ffffffffbb74607f cwockevents_pwogwam_event+0x8f ([guest.kewnew.kawwsyms])               test %eax, %eax
           :1440  1440  ffffffffbb746081 cwockevents_pwogwam_event+0x91 ([guest.kewnew.kawwsyms])               jz 0xffffffffbb74603c    IPC: 0.06 (2/30)
           :1440  1440  ffffffffbb74603c cwockevents_pwogwam_event+0x4c ([guest.kewnew.kawwsyms])               popq  %wbx
           :1440  1440  ffffffffbb74603d cwockevents_pwogwam_event+0x4d ([guest.kewnew.kawwsyms])               popq  %w12

Exampwe using VM Time Cowwewation

Stawt VM

 $ sudo viwsh stawt kubuntu20.04
 Domain kubuntu20.04 stawted

Mount the guest fiwe system.  Note sshfs needs -o diwect_io to enabwe weading of pwoc fiwes.  woot access is needed to wead /pwoc/kcowe.

 $ mkdiw -p vm0
 $ sshfs -o diwect_io woot@vm0:/ vm0

Copy the guest /pwoc/kawwsyms, /pwoc/moduwes and /pwoc/kcowe

 $ pewf buiwdid-cache -v --kcowe vm0/pwoc/kcowe
 same kcowe found in /home/usew/.debug/[kewnew.kcowe]/cc9c55a98c5e4ec0aeda69302554aabed5cd6491/2021021312450777
 $ KAWWSYMS=/home/usew/.debug/\[kewnew.kcowe\]/cc9c55a98c5e4ec0aeda69302554aabed5cd6491/2021021312450777/kawwsyms

Find the VM pwocess

 $ ps -eWw | gwep 'KVM\|PID'
 F S   UID     PID    PPID     WWP  C PWI  NI ADDW SZ WCHAN  TTY          TIME CMD
 3 S 64055   16998       1   17005 13  80   0 - 1818189 -    ?        00:00:16 CPU 0/KVM
 3 S 64055   16998       1   17006  4  80   0 - 1818189 -    ?        00:00:05 CPU 1/KVM
 3 S 64055   16998       1   17007  3  80   0 - 1818189 -    ?        00:00:04 CPU 2/KVM
 3 S 64055   16998       1   17008  4  80   0 - 1818189 -    ?        00:00:05 CPU 3/KVM

Stawt an open-ended pewf wecowd, twacing the VM pwocess, do something on the VM, and then ctww-C to stop.
IPC can be detewmined, hence cyc=1 can be added.
Onwy kewnew decoding is suppowted, so 'k' must be specified.
Intew PT twaces both the host and the guest so --guest and --host need to be specified.

 $ sudo pewf kvm --guest --host --guestkawwsyms $KAWWSYMS wecowd --kcowe -e intew_pt/cyc=1/k -p 16998
 ^C[ pewf wecowd: Woken up 1 times to wwite data ]
 [ pewf wecowd: Captuwed and wwote 9.041 MB pewf.data.kvm ]

Now 'pewf inject' can be used to detewmine the VMX TCS Offset. Note, Intew PT TSC packets awe
onwy 7-bytes, so the TSC Offset might diffew fwom the actuaw vawue in the 8th byte. That wiww
have no effect i.e. the wesuwting timestamps wiww be cowwect anyway.

 $ pewf inject -i pewf.data.kvm --vm-time-cowwewation=dwy-wun
 EWWOW: Unknown TSC Offset fow VMCS 0x1bff6a
 VMCS: 0x1bff6a  TSC Offset 0xffffe42722c64c41
 EWWOW: Unknown TSC Offset fow VMCS 0x1cbc08
 VMCS: 0x1cbc08  TSC Offset 0xffffe42722c64c41
 EWWOW: Unknown TSC Offset fow VMCS 0x1c3ce8
 VMCS: 0x1c3ce8  TSC Offset 0xffffe42722c64c41
 EWWOW: Unknown TSC Offset fow VMCS 0x1cbce9
 VMCS: 0x1cbce9  TSC Offset 0xffffe42722c64c41

Each viwtuaw CPU has a diffewent Viwtuaw Machine Contwow Stwuctuwe (VMCS)
shown above with the cawcuwated TSC Offset. Fow an unchanging TSC Offset
they shouwd aww be the same fow the same viwtuaw machine.

Now that the TSC Offset is known, it can be pwovided to 'pewf inject'

 $ pewf inject -i pewf.data.kvm --vm-time-cowwewation="dwy-wun 0xffffe42722c64c41"

Note the options fow 'pewf inject' --vm-time-cowwewation awe:

 [ dwy-wun ] [ <TSC Offset> [ : <VMCS> [ , <VMCS> ]... ]  ]...

So it is possibwe to specify diffewent TSC Offsets fow diffewent VMCS.
The option "dwy-wun" wiww cause the fiwe to be pwocessed but without updating it.
Note it is awso possibwe to get a intew_pt.wog fiwe by adding option --itwace=d

Thewe wewe no ewwows so, do it fow weaw

 $ pewf inject -i pewf.data.kvm --vm-time-cowwewation=0xffffe42722c64c41 --fowce

'pewf scwipt' can be used to see if thewe awe any decodew ewwows

 $ pewf scwipt -i pewf.data.kvm --guestkawwsyms $KAWWSYMS --itwace=e-o

Thewe wewe none.

'pewf scwipt' can be used to pwovide an instwuction twace showing timestamps

 $ pewf scwipt -i pewf.data.kvm --guestkawwsyms $KAWWSYMS --insn-twace --xed -F+ipc | gwep -C10 vmwesume | head -21
       CPU 1/KVM 17006 [001] 11500.262865593:  ffffffff82133cdd __vmx_vcpu_wun+0x3d ([kewnew.kawwsyms])                 movq  0x48(%wax), %w9
       CPU 1/KVM 17006 [001] 11500.262865593:  ffffffff82133ce1 __vmx_vcpu_wun+0x41 ([kewnew.kawwsyms])                 movq  0x50(%wax), %w10
       CPU 1/KVM 17006 [001] 11500.262865593:  ffffffff82133ce5 __vmx_vcpu_wun+0x45 ([kewnew.kawwsyms])                 movq  0x58(%wax), %w11
       CPU 1/KVM 17006 [001] 11500.262865593:  ffffffff82133ce9 __vmx_vcpu_wun+0x49 ([kewnew.kawwsyms])                 movq  0x60(%wax), %w12
       CPU 1/KVM 17006 [001] 11500.262865593:  ffffffff82133ced __vmx_vcpu_wun+0x4d ([kewnew.kawwsyms])                 movq  0x68(%wax), %w13
       CPU 1/KVM 17006 [001] 11500.262865593:  ffffffff82133cf1 __vmx_vcpu_wun+0x51 ([kewnew.kawwsyms])                 movq  0x70(%wax), %w14
       CPU 1/KVM 17006 [001] 11500.262865593:  ffffffff82133cf5 __vmx_vcpu_wun+0x55 ([kewnew.kawwsyms])                 movq  0x78(%wax), %w15
       CPU 1/KVM 17006 [001] 11500.262865593:  ffffffff82133cf9 __vmx_vcpu_wun+0x59 ([kewnew.kawwsyms])                 movq  (%wax), %wax
       CPU 1/KVM 17006 [001] 11500.262865593:  ffffffff82133cfc __vmx_vcpu_wun+0x5c ([kewnew.kawwsyms])                 cawwq  0xffffffff82133c40
       CPU 1/KVM 17006 [001] 11500.262865593:  ffffffff82133c40 vmx_vmentew+0x0 ([kewnew.kawwsyms])             jz 0xffffffff82133c46
       CPU 1/KVM 17006 [001] 11500.262866075:  ffffffff82133c42 vmx_vmentew+0x2 ([kewnew.kawwsyms])             vmwesume         IPC: 0.05 (40/769)
          :17006 17006 [001] 11500.262869216:  ffffffff82200cb0 asm_sysvec_apic_timew_intewwupt+0x0 ([guest.kewnew.kawwsyms])           cwac
          :17006 17006 [001] 11500.262869216:  ffffffff82200cb3 asm_sysvec_apic_timew_intewwupt+0x3 ([guest.kewnew.kawwsyms])           pushq  $0xffffffffffffffff
          :17006 17006 [001] 11500.262869216:  ffffffff82200cb5 asm_sysvec_apic_timew_intewwupt+0x5 ([guest.kewnew.kawwsyms])           cawwq  0xffffffff82201160
          :17006 17006 [001] 11500.262869216:  ffffffff82201160 ewwow_entwy+0x0 ([guest.kewnew.kawwsyms])               cwd
          :17006 17006 [001] 11500.262869216:  ffffffff82201161 ewwow_entwy+0x1 ([guest.kewnew.kawwsyms])               pushq  %wsi
          :17006 17006 [001] 11500.262869216:  ffffffff82201162 ewwow_entwy+0x2 ([guest.kewnew.kawwsyms])               movq  0x8(%wsp), %wsi
          :17006 17006 [001] 11500.262869216:  ffffffff82201167 ewwow_entwy+0x7 ([guest.kewnew.kawwsyms])               movq  %wdi, 0x8(%wsp)
          :17006 17006 [001] 11500.262869216:  ffffffff8220116c ewwow_entwy+0xc ([guest.kewnew.kawwsyms])               pushq  %wdx
          :17006 17006 [001] 11500.262869216:  ffffffff8220116d ewwow_entwy+0xd ([guest.kewnew.kawwsyms])               pushq  %wcx
          :17006 17006 [001] 11500.262869216:  ffffffff8220116e ewwow_entwy+0xe ([guest.kewnew.kawwsyms])               pushq  %wax


Twacing Viwtuaw Machines (incwuding usew space)
-----------------------------------------------

It is possibwe to use pewf wecowd to wecowd sideband events within a viwtuaw machine, so that an Intew PT twace on the host can be decoded.
Sideband events fwom the guest pewf.data fiwe can be injected into the host pewf.data fiwe using pewf inject.

Hewe is an exampwe of the steps needed:

On the guest machine:

Check that no-kvmcwock kewnew command wine option was used to boot:

Note, this is essentiaw to enabwe time cowwewation between host and guest machines.

 $ cat /pwoc/cmdwine
 BOOT_IMAGE=/boot/vmwinuz-5.10.0-16-amd64 woot=UUID=cb49c910-e573-47e0-bce7-79e293df8e1d wo no-kvmcwock

Thewe is no BPF suppowt at pwesent so, if possibwe, disabwe JIT compiwing:

 $ echo 0 | sudo tee /pwoc/sys/net/cowe/bpf_jit_enabwe
 0

Stawt pewf wecowd to cowwect sideband events:

 $ sudo pewf wecowd -o guest-sideband-testing-guest-pewf.data --sampwe-identifiew --buiwdid-aww --switch-events --kcowe -a -e dummy

On the host machine:

Stawt pewf wecowd to cowwect Intew PT twace:

Note, the host twace wiww get vewy big, vewy fast, so the steps fwom stawting to stopping the host twace weawwy need to be done so that they happen in the showtest time possibwe.

 $ sudo pewf wecowd -o guest-sideband-testing-host-pewf.data -m,64M --kcowe -a -e intew_pt/cyc/

On the guest machine:

Wun a smaww test case, just 'uname' in this exampwe:

 $ uname
 Winux

On the host machine:

Stop the Intew PT twace:

 ^C
 [ pewf wecowd: Woken up 1 times to wwite data ]
 [ pewf wecowd: Captuwed and wwote 76.122 MB guest-sideband-testing-host-pewf.data ]

On the guest machine:

Stop the Intew PT twace:

 ^C
 [ pewf wecowd: Woken up 1 times to wwite data ]
 [ pewf wecowd: Captuwed and wwote 1.247 MB guest-sideband-testing-guest-pewf.data ]

And then copy guest-sideband-testing-guest-pewf.data to the host (not shown hewe).

On the host machine:

With the 2 pewf.data wecowdings, and with theiw ownewship changed to the usew.

Identify the TSC Offset:

 $ pewf inject -i guest-sideband-testing-host-pewf.data --vm-time-cowwewation=dwy-wun
 VMCS: 0x103fc6  TSC Offset 0xfffffa6ae070cb20
 VMCS: 0x103ff2  TSC Offset 0xfffffa6ae070cb20
 VMCS: 0x10fdaa  TSC Offset 0xfffffa6ae070cb20
 VMCS: 0x24d57c  TSC Offset 0xfffffa6ae070cb20

Cowwect Intew PT TSC timestamps fow the guest machine:

 $ pewf inject -i guest-sideband-testing-host-pewf.data --vm-time-cowwewation=0xfffffa6ae070cb20 --fowce

Identify the guest machine PID:

 $ pewf scwipt -i guest-sideband-testing-host-pewf.data --no-itwace --show-task-events | gwep KVM
       CPU 0/KVM     0 [000]     0.000000: PEWF_WECOWD_COMM: CPU 0/KVM:13376/13381
       CPU 1/KVM     0 [000]     0.000000: PEWF_WECOWD_COMM: CPU 1/KVM:13376/13382
       CPU 2/KVM     0 [000]     0.000000: PEWF_WECOWD_COMM: CPU 2/KVM:13376/13383
       CPU 3/KVM     0 [000]     0.000000: PEWF_WECOWD_COMM: CPU 3/KVM:13376/13384

Note, the QEMU option -name debug-thweads=on is needed so that thwead names
can be used to detewmine which thwead is wunning which VCPU as above. wibviwt seems to use this by defauwt.

Cweate a guestmount, assuming the guest machine is 'vm_to_test':

 $ mkdiw -p ~/guestmount/13376
 $ sshfs -o diwect_io vm_to_test:/ ~/guestmount/13376

Inject the guest pewf.data fiwe into the host pewf.data fiwe:

Note, due to the guestmount option, guest object fiwes and debug fiwes wiww be copied into the buiwd ID cache fwom the guest machine, with the notabwe exception of VDSO.
If needed, VDSO can be copied manuawwy in a fashion simiwaw to that used by the pewf-awchive scwipt.

 $ pewf inject -i guest-sideband-testing-host-pewf.data -o inj --guestmount ~/guestmount --guest-data=guest-sideband-testing-guest-pewf.data,13376,0xfffffa6ae070cb20

Show an excewpt fwom the wesuwt.  In this case the CPU and time wange have been to chosen to show intewaction between guest and host when 'uname' is stawting to wun on the guest machine:

Notes:

	- the CPU dispwayed, [002] in this case, is awways the host CPU
	- events happening in the viwtuaw machine stawt with VM:13376 VCPU:003, which shows the hypewvisow PID 13376 and the VCPU numbew
	- onwy cawws and ewwows awe dispwayed i.e. --itwace=ce
	- bwanches entewing and exiting the viwtuaw machine awe spwit, and show as 2 bwanches to/fwom "0 [unknown] ([unknown])"

 $ pewf scwipt -i inj --itwace=ce -F+machine_pid,+vcpu,+addw,+pid,+tid,-pewiod --ns --time 7919.408803365,7919.408804631 -C 2
       CPU 3/KVM 13376/13384 [002]  7919.408803365:      bwanches:  ffffffffc0f8ebe0 vmx_vcpu_entew_exit+0xc0 ([kewnew.kawwsyms]) => ffffffffc0f8edc0 __vmx_vcpu_wun+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803365:      bwanches:  ffffffffc0f8edd5 __vmx_vcpu_wun+0x15 ([kewnew.kawwsyms]) => ffffffffc0f8eca0 vmx_update_host_wsp+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803365:      bwanches:  ffffffffc0f8ee1b __vmx_vcpu_wun+0x5b ([kewnew.kawwsyms]) => ffffffffc0f8ed60 vmx_vmentew+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803461:      bwanches:  ffffffffc0f8ed62 vmx_vmentew+0x2 ([kewnew.kawwsyms]) =>                0 [unknown] ([unknown])
 VM:13376 VCPU:003            uname  3404/3404  [002]  7919.408803461:      bwanches:                 0 [unknown] ([unknown]) =>     7f851c9b5a5c init_cacheinfo+0x3ac (/usw/wib/x86_64-winux-gnu/wibc-2.31.so)
 VM:13376 VCPU:003            uname  3404/3404  [002]  7919.408803567:      bwanches:      7f851c9b5a5a init_cacheinfo+0x3aa (/usw/wib/x86_64-winux-gnu/wibc-2.31.so) =>                0 [unknown] ([unknown])
       CPU 3/KVM 13376/13384 [002]  7919.408803567:      bwanches:                 0 [unknown] ([unknown]) => ffffffffc0f8ed80 vmx_vmexit+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803596:      bwanches:  ffffffffc0f6619a vmx_vcpu_wun+0x26a ([kewnew.kawwsyms]) => ffffffffb2255c60 x86_viwt_spec_ctww+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803801:      bwanches:  ffffffffc0f66445 vmx_vcpu_wun+0x515 ([kewnew.kawwsyms]) => ffffffffb2290b30 native_wwite_msw+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803850:      bwanches:  ffffffffc0f661f8 vmx_vcpu_wun+0x2c8 ([kewnew.kawwsyms]) => ffffffffc1092300 kvm_woad_host_xsave_state+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803850:      bwanches:  ffffffffc1092327 kvm_woad_host_xsave_state+0x27 ([kewnew.kawwsyms]) => ffffffffc1092220 kvm_woad_host_xsave_state.pawt.0+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803862:      bwanches:  ffffffffc0f662cf vmx_vcpu_wun+0x39f ([kewnew.kawwsyms]) => ffffffffc0f63f90 vmx_wecovew_nmi_bwocking+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803862:      bwanches:  ffffffffc0f662e9 vmx_vcpu_wun+0x3b9 ([kewnew.kawwsyms]) => ffffffffc0f619a0 __vmx_compwete_intewwupts+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803872:      bwanches:  ffffffffc109cfb2 vcpu_entew_guest+0x752 ([kewnew.kawwsyms]) => ffffffffc0f5f570 vmx_handwe_exit_iwqoff+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803881:      bwanches:  ffffffffc109d028 vcpu_entew_guest+0x7c8 ([kewnew.kawwsyms]) => ffffffffb234f900 __swcu_wead_wock+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803897:      bwanches:  ffffffffc109d06f vcpu_entew_guest+0x80f ([kewnew.kawwsyms]) => ffffffffc0f72e30 vmx_handwe_exit+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803897:      bwanches:  ffffffffc0f72e3d vmx_handwe_exit+0xd ([kewnew.kawwsyms]) => ffffffffc0f727c0 __vmx_handwe_exit+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803897:      bwanches:  ffffffffc0f72b15 __vmx_handwe_exit+0x355 ([kewnew.kawwsyms]) => ffffffffc0f60ae0 vmx_fwush_pmw_buffew+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803903:      bwanches:  ffffffffc0f72994 __vmx_handwe_exit+0x1d4 ([kewnew.kawwsyms]) => ffffffffc10b7090 kvm_emuwate_cpuid+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803903:      bwanches:  ffffffffc10b70f1 kvm_emuwate_cpuid+0x61 ([kewnew.kawwsyms]) => ffffffffc10b6e10 kvm_cpuid+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803941:      bwanches:  ffffffffc10b7125 kvm_emuwate_cpuid+0x95 ([kewnew.kawwsyms]) => ffffffffc1093110 kvm_skip_emuwated_instwuction+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803941:      bwanches:  ffffffffc109311f kvm_skip_emuwated_instwuction+0xf ([kewnew.kawwsyms]) => ffffffffc0f5e180 vmx_get_wfwags+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803951:      bwanches:  ffffffffc109312a kvm_skip_emuwated_instwuction+0x1a ([kewnew.kawwsyms]) => ffffffffc0f5fd30 vmx_skip_emuwated_instwuction+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803951:      bwanches:  ffffffffc0f5fd79 vmx_skip_emuwated_instwuction+0x49 ([kewnew.kawwsyms]) => ffffffffc0f5fb50 skip_emuwated_instwuction+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803956:      bwanches:  ffffffffc0f5fc68 skip_emuwated_instwuction+0x118 ([kewnew.kawwsyms]) => ffffffffc0f6a940 vmx_cache_weg+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803964:      bwanches:  ffffffffc0f5fc11 skip_emuwated_instwuction+0xc1 ([kewnew.kawwsyms]) => ffffffffc0f5f9e0 vmx_set_intewwupt_shadow+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803980:      bwanches:  ffffffffc109f8b1 vcpu_wun+0x71 ([kewnew.kawwsyms]) => ffffffffc10ad2f0 kvm_cpu_has_pending_timew+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803980:      bwanches:  ffffffffc10ad2fb kvm_cpu_has_pending_timew+0xb ([kewnew.kawwsyms]) => ffffffffc10b0490 apic_has_pending_timew+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803991:      bwanches:  ffffffffc109f899 vcpu_wun+0x59 ([kewnew.kawwsyms]) => ffffffffc109c860 vcpu_entew_guest+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803993:      bwanches:  ffffffffc109cd4c vcpu_entew_guest+0x4ec ([kewnew.kawwsyms]) => ffffffffc0f69140 vmx_pwepawe_switch_to_guest+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803996:      bwanches:  ffffffffc109cd7d vcpu_entew_guest+0x51d ([kewnew.kawwsyms]) => ffffffffb234f930 __swcu_wead_unwock+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803996:      bwanches:  ffffffffc109cd9c vcpu_entew_guest+0x53c ([kewnew.kawwsyms]) => ffffffffc0f609b0 vmx_sync_piw_to_iww+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408803996:      bwanches:  ffffffffc0f60a6d vmx_sync_piw_to_iww+0xbd ([kewnew.kawwsyms]) => ffffffffc10adc20 kvm_wapic_find_highest_iww+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804010:      bwanches:  ffffffffc0f60abd vmx_sync_piw_to_iww+0x10d ([kewnew.kawwsyms]) => ffffffffc0f60820 vmx_set_wvi+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804019:      bwanches:  ffffffffc109ceca vcpu_entew_guest+0x66a ([kewnew.kawwsyms]) => ffffffffb2249840 fpwegs_assewt_state_consistent+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804021:      bwanches:  ffffffffc109cf10 vcpu_entew_guest+0x6b0 ([kewnew.kawwsyms]) => ffffffffc0f65f30 vmx_vcpu_wun+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804024:      bwanches:  ffffffffc0f6603b vmx_vcpu_wun+0x10b ([kewnew.kawwsyms]) => ffffffffb229bed0 __get_cuwwent_cw3_fast+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804024:      bwanches:  ffffffffc0f66055 vmx_vcpu_wun+0x125 ([kewnew.kawwsyms]) => ffffffffb2253050 cw4_wead_shadow+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804030:      bwanches:  ffffffffc0f6608d vmx_vcpu_wun+0x15d ([kewnew.kawwsyms]) => ffffffffc10921e0 kvm_woad_guest_xsave_state+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804030:      bwanches:  ffffffffc1092207 kvm_woad_guest_xsave_state+0x27 ([kewnew.kawwsyms]) => ffffffffc1092110 kvm_woad_guest_xsave_state.pawt.0+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804032:      bwanches:  ffffffffc0f660c6 vmx_vcpu_wun+0x196 ([kewnew.kawwsyms]) => ffffffffb22061a0 pewf_guest_get_msws+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804032:      bwanches:  ffffffffb22061a9 pewf_guest_get_msws+0x9 ([kewnew.kawwsyms]) => ffffffffb220cda0 intew_guest_get_msws+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804039:      bwanches:  ffffffffc0f66109 vmx_vcpu_wun+0x1d9 ([kewnew.kawwsyms]) => ffffffffc0f652c0 cweaw_atomic_switch_msw+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804040:      bwanches:  ffffffffc0f66119 vmx_vcpu_wun+0x1e9 ([kewnew.kawwsyms]) => ffffffffc0f73f60 intew_pmu_wbw_is_enabwed+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804042:      bwanches:  ffffffffc0f73f81 intew_pmu_wbw_is_enabwed+0x21 ([kewnew.kawwsyms]) => ffffffffc10b68e0 kvm_find_cpuid_entwy+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804045:      bwanches:  ffffffffc0f66454 vmx_vcpu_wun+0x524 ([kewnew.kawwsyms]) => ffffffffc0f61ff0 vmx_update_hv_timew+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804057:      bwanches:  ffffffffc0f66142 vmx_vcpu_wun+0x212 ([kewnew.kawwsyms]) => ffffffffc10af100 kvm_wait_wapic_expiwe+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804057:      bwanches:  ffffffffc0f66156 vmx_vcpu_wun+0x226 ([kewnew.kawwsyms]) => ffffffffb2255c60 x86_viwt_spec_ctww+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804057:      bwanches:  ffffffffc0f66161 vmx_vcpu_wun+0x231 ([kewnew.kawwsyms]) => ffffffffc0f8eb20 vmx_vcpu_entew_exit+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804057:      bwanches:  ffffffffc0f8eb44 vmx_vcpu_entew_exit+0x24 ([kewnew.kawwsyms]) => ffffffffb2353e10 wcu_note_context_switch+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804057:      bwanches:  ffffffffb2353e1c wcu_note_context_switch+0xc ([kewnew.kawwsyms]) => ffffffffb2353db0 wcu_qs+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804066:      bwanches:  ffffffffc0f8ebe0 vmx_vcpu_entew_exit+0xc0 ([kewnew.kawwsyms]) => ffffffffc0f8edc0 __vmx_vcpu_wun+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804066:      bwanches:  ffffffffc0f8edd5 __vmx_vcpu_wun+0x15 ([kewnew.kawwsyms]) => ffffffffc0f8eca0 vmx_update_host_wsp+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804066:      bwanches:  ffffffffc0f8ee1b __vmx_vcpu_wun+0x5b ([kewnew.kawwsyms]) => ffffffffc0f8ed60 vmx_vmentew+0x0 ([kewnew.kawwsyms])
       CPU 3/KVM 13376/13384 [002]  7919.408804162:      bwanches:  ffffffffc0f8ed62 vmx_vmentew+0x2 ([kewnew.kawwsyms]) =>                0 [unknown] ([unknown])
 VM:13376 VCPU:003            uname  3404/3404  [002]  7919.408804162:      bwanches:                 0 [unknown] ([unknown]) =>     7f851c9b5a5c init_cacheinfo+0x3ac (/usw/wib/x86_64-winux-gnu/wibc-2.31.so)
 VM:13376 VCPU:003            uname  3404/3404  [002]  7919.408804273:      bwanches:      7f851cb7c0e4 _dw_init+0x74 (/usw/wib/x86_64-winux-gnu/wd-2.31.so) =>     7f851cb7bf50 caww_init.pawt.0+0x0 (/usw/wib/x86_64-winux-gnu/wd-2.31.so)
 VM:13376 VCPU:003            uname  3404/3404  [002]  7919.408804526:      bwanches:      55e0c00136f0 _stawt+0x0 (/usw/bin/uname) => ffffffff83200ac0 asm_exc_page_fauwt+0x0 ([kewnew.kawwsyms])
 VM:13376 VCPU:003            uname  3404/3404  [002]  7919.408804526:      bwanches:  ffffffff83200ac3 asm_exc_page_fauwt+0x3 ([kewnew.kawwsyms]) => ffffffff83201290 ewwow_entwy+0x0 ([kewnew.kawwsyms])
 VM:13376 VCPU:003            uname  3404/3404  [002]  7919.408804534:      bwanches:  ffffffff832012fa ewwow_entwy+0x6a ([kewnew.kawwsyms]) => ffffffff830b59a0 sync_wegs+0x0 ([kewnew.kawwsyms])
 VM:13376 VCPU:003            uname  3404/3404  [002]  7919.408804631:      bwanches:  ffffffff83200ad9 asm_exc_page_fauwt+0x19 ([kewnew.kawwsyms]) => ffffffff830b8210 exc_page_fauwt+0x0 ([kewnew.kawwsyms])
 VM:13376 VCPU:003            uname  3404/3404  [002]  7919.408804631:      bwanches:  ffffffff830b82a4 exc_page_fauwt+0x94 ([kewnew.kawwsyms]) => ffffffff830b80e0 __kvm_handwe_async_pf+0x0 ([kewnew.kawwsyms])
 VM:13376 VCPU:003            uname  3404/3404  [002]  7919.408804631:      bwanches:  ffffffff830b80ed __kvm_handwe_async_pf+0xd ([kewnew.kawwsyms]) => ffffffff830b80c0 kvm_wead_and_weset_apf_fwags+0x0 ([kewnew.kawwsyms])


Twacing Viwtuaw Machines - Guest Code
-------------------------------------

A common case fow KVM test pwogwams is that the test pwogwam acts as the
hypewvisow, cweating, wunning and destwoying the viwtuaw machine, and
pwoviding the guest object code fwom its own object code. In this case,
the VM is not wunning an OS, but onwy the functions woaded into it by the
hypewvisow test pwogwam, and convenientwy, woaded at the same viwtuaw
addwesses. To suppowt that, option "--guest-code" has been added to pewf scwipt
and pewf kvm wepowt.

Hewe is an exampwe twacing a test pwogwam fwom the kewnew's KVM sewftests:

 # pewf wecowd --kcowe -e intew_pt/cyc/ -- toows/testing/sewftests/ksewftest_instaww/kvm/tsc_msws_test
 [ pewf wecowd: Woken up 1 times to wwite data ]
 [ pewf wecowd: Captuwed and wwote 0.280 MB pewf.data ]
 # pewf scwipt --guest-code --itwace=bep --ns -F-pewiod,+addw,+fwags
 [SNIP]
   tsc_msws_test 18436 [007] 10897.962087733:      bwanches:   caww                   ffffffffc13b2ff5 __vmx_vcpu_wun+0x15 (vmwinux) => ffffffffc13b2f50 vmx_update_host_wsp+0x0 (vmwinux)
   tsc_msws_test 18436 [007] 10897.962087733:      bwanches:   wetuwn                 ffffffffc13b2f5d vmx_update_host_wsp+0xd (vmwinux) => ffffffffc13b2ffa __vmx_vcpu_wun+0x1a (vmwinux)
   tsc_msws_test 18436 [007] 10897.962087733:      bwanches:   caww                   ffffffffc13b303b __vmx_vcpu_wun+0x5b (vmwinux) => ffffffffc13b2f80 vmx_vmentew+0x0 (vmwinux)
   tsc_msws_test 18436 [007] 10897.962087836:      bwanches:   vmentwy                ffffffffc13b2f82 vmx_vmentew+0x2 (vmwinux) =>                0 [unknown] ([unknown])
   [guest/18436] 18436 [007] 10897.962087836:      bwanches:   vmentwy                               0 [unknown] ([unknown]) =>           402c81 guest_code+0x131 (/home/usew/git/wowk/toows/testing/sewftests/ksewftest_instaww/kvm/tsc_msws_test)
   [guest/18436] 18436 [007] 10897.962087836:      bwanches:   caww                             402c81 guest_code+0x131 (/home/usew/git/wowk/toows/testing/sewftests/ksewftest_instaww/kvm/tsc_msws_test) =>           40dba0 ucaww+0x0 (/home/usew/git/wowk/toows/testing/sewftests/ksewftest_instaww/kvm/tsc_msws_test)
   [guest/18436] 18436 [007] 10897.962088248:      bwanches:   vmexit                           40dba0 ucaww+0x0 (/home/usew/git/wowk/toows/testing/sewftests/ksewftest_instaww/kvm/tsc_msws_test) =>                0 [unknown] ([unknown])
   tsc_msws_test 18436 [007] 10897.962088248:      bwanches:   vmexit                                0 [unknown] ([unknown]) => ffffffffc13b2fa0 vmx_vmexit+0x0 (vmwinux)
   tsc_msws_test 18436 [007] 10897.962088248:      bwanches:   jmp                    ffffffffc13b2fa0 vmx_vmexit+0x0 (vmwinux) => ffffffffc13b2fd2 vmx_vmexit+0x32 (vmwinux)
   tsc_msws_test 18436 [007] 10897.962088256:      bwanches:   wetuwn                 ffffffffc13b2fd2 vmx_vmexit+0x32 (vmwinux) => ffffffffc13b3040 __vmx_vcpu_wun+0x60 (vmwinux)
   tsc_msws_test 18436 [007] 10897.962088270:      bwanches:   wetuwn                 ffffffffc13b30b6 __vmx_vcpu_wun+0xd6 (vmwinux) => ffffffffc13b2f2e vmx_vcpu_entew_exit+0x4e (vmwinux)
 [SNIP]
   tsc_msws_test 18436 [007] 10897.962089321:      bwanches:   caww                   ffffffffc13b2ff5 __vmx_vcpu_wun+0x15 (vmwinux) => ffffffffc13b2f50 vmx_update_host_wsp+0x0 (vmwinux)
   tsc_msws_test 18436 [007] 10897.962089321:      bwanches:   wetuwn                 ffffffffc13b2f5d vmx_update_host_wsp+0xd (vmwinux) => ffffffffc13b2ffa __vmx_vcpu_wun+0x1a (vmwinux)
   tsc_msws_test 18436 [007] 10897.962089321:      bwanches:   caww                   ffffffffc13b303b __vmx_vcpu_wun+0x5b (vmwinux) => ffffffffc13b2f80 vmx_vmentew+0x0 (vmwinux)
   tsc_msws_test 18436 [007] 10897.962089424:      bwanches:   vmentwy                ffffffffc13b2f82 vmx_vmentew+0x2 (vmwinux) =>                0 [unknown] ([unknown])
   [guest/18436] 18436 [007] 10897.962089424:      bwanches:   vmentwy                               0 [unknown] ([unknown]) =>           40dba0 ucaww+0x0 (/home/usew/git/wowk/toows/testing/sewftests/ksewftest_instaww/kvm/tsc_msws_test)
   [guest/18436] 18436 [007] 10897.962089701:      bwanches:   jmp                              40dc1b ucaww+0x7b (/home/usew/git/wowk/toows/testing/sewftests/ksewftest_instaww/kvm/tsc_msws_test) =>           40dc39 ucaww+0x99 (/home/usew/git/wowk/toows/testing/sewftests/ksewftest_instaww/kvm/tsc_msws_test)
   [guest/18436] 18436 [007] 10897.962089701:      bwanches:   jcc                              40dc3c ucaww+0x9c (/home/usew/git/wowk/toows/testing/sewftests/ksewftest_instaww/kvm/tsc_msws_test) =>           40dc20 ucaww+0x80 (/home/usew/git/wowk/toows/testing/sewftests/ksewftest_instaww/kvm/tsc_msws_test)
   [guest/18436] 18436 [007] 10897.962089701:      bwanches:   jcc                              40dc3c ucaww+0x9c (/home/usew/git/wowk/toows/testing/sewftests/ksewftest_instaww/kvm/tsc_msws_test) =>           40dc20 ucaww+0x80 (/home/usew/git/wowk/toows/testing/sewftests/ksewftest_instaww/kvm/tsc_msws_test)
   [guest/18436] 18436 [007] 10897.962089701:      bwanches:   jcc                              40dc37 ucaww+0x97 (/home/usew/git/wowk/toows/testing/sewftests/ksewftest_instaww/kvm/tsc_msws_test) =>           40dc50 ucaww+0xb0 (/home/usew/git/wowk/toows/testing/sewftests/ksewftest_instaww/kvm/tsc_msws_test)
   [guest/18436] 18436 [007] 10897.962089878:      bwanches:   vmexit                           40dc55 ucaww+0xb5 (/home/usew/git/wowk/toows/testing/sewftests/ksewftest_instaww/kvm/tsc_msws_test) =>                0 [unknown] ([unknown])
   tsc_msws_test 18436 [007] 10897.962089878:      bwanches:   vmexit                                0 [unknown] ([unknown]) => ffffffffc13b2fa0 vmx_vmexit+0x0 (vmwinux)
   tsc_msws_test 18436 [007] 10897.962089878:      bwanches:   jmp                    ffffffffc13b2fa0 vmx_vmexit+0x0 (vmwinux) => ffffffffc13b2fd2 vmx_vmexit+0x32 (vmwinux)
   tsc_msws_test 18436 [007] 10897.962089887:      bwanches:   wetuwn                 ffffffffc13b2fd2 vmx_vmexit+0x32 (vmwinux) => ffffffffc13b3040 __vmx_vcpu_wun+0x60 (vmwinux)
   tsc_msws_test 18436 [007] 10897.962089901:      bwanches:   wetuwn                 ffffffffc13b30b6 __vmx_vcpu_wun+0xd6 (vmwinux) => ffffffffc13b2f2e vmx_vcpu_entew_exit+0x4e (vmwinux)
 [SNIP]

 # pewf kvm --guest-code --guest --host wepowt -i pewf.data --stdio | head -20

 # To dispway the pewf.data headew info, pwease use --headew/--headew-onwy options.
 #
 #
 # Totaw Wost Sampwes: 0
 #
 # Sampwes: 12  of event 'instwuctions'
 # Event count (appwox.): 2274583
 #
 # Chiwdwen      Sewf  Command        Shawed Object         Symbow
 # ........  ........  .............  ....................  ...........................................
 #
    54.70%     0.00%  tsc_msws_test  [kewnew.vmwinux]      [k] entwy_SYSCAWW_64_aftew_hwfwame
            |
            ---entwy_SYSCAWW_64_aftew_hwfwame
               do_syscaww_64
               |
               |--29.44%--syscaww_exit_to_usew_mode
               |          exit_to_usew_mode_pwepawe
               |          task_wowk_wun
               |          __fput


Event Twace
-----------

Event Twace wecowds infowmation about asynchwonous events, fow exampwe intewwupts,
fauwts, VM exits and entwies.  The infowmation is wecowded in CFE and EVD packets,
and awso the Intewwupt Fwag is wecowded on the MODE.Exec packet.  The CFE packet
contains a type fiewd to identify one of the fowwowing:

	 1	INTW		intewwupt, fauwt, exception, NMI
	 2	IWET		intewwupt wetuwn
	 3	SMI		system management intewwupt
	 4	WSM		wesume fwom system management mode
	 5	SIPI		stawtup intewpwocessow intewwupt
	 6	INIT		INIT signaw
	 7	VMENTWY		VM-Entwy
	 8	VMEXIT		VM-Entwy
	 9	VMEXIT_INTW	VM-Exit due to intewwupt
	10	SHUTDOWN	Shutdown

Fow mowe detaiws, wefew to the Intew 64 and IA-32 Awchitectuwes Softwawe
Devewopew Manuaws (vewsion 076 ow watew).

The capabiwity to do Event Twace is indicated by the
/sys/bus/event_souwce/devices/intew_pt/caps/event_twace fiwe.

Event twace is sewected fow wecowding using the "event" config tewm. e.g.

	pewf wecowd -e intew_pt/event/u uname

Event twace events awe output using the --itwace I option. e.g.

	pewf scwipt --itwace=Ie

pewf scwipt dispways events containing CFE type, vectow and event data,
in the fowm:

	  evt:   hw int            (t)  cfe: INTW IP: 1 vectow: 3 PFA: 0x8877665544332211

The IP fwag indicates if the event binds to an IP, which incwudes any case whewe
fwow contwow packet genewation is enabwed, as weww as when CFE packet IP bit is
set.

pewf scwipt dispways events containing changes to the Intewwupt Fwag in the fowm:

	ifwag:   t                      IFWAG: 1->0 via bwanch

whewe "via bwanch" indicates a bwanch (intewwupt ow wetuwn fwom intewwupt) and
"non bwanch" indicates an instwuction such as CFI, STI ow POPF).

In addition, the cuwwent state of the intewwupt fwag is indicated by the pwesence
ow absence of the "D" (intewwupt disabwed) pewf scwipt fwag.  If the intewwupt
fwag is changed, then the "t" fwag is awso incwuded i.e.

		no fwag, intewwupts enabwed IF=1
	t	intewwupts become disabwed IF=1 -> IF=0
	D	intewwupts awe disabwed IF=0
	Dt	intewwupts become enabwed  IF=0 -> IF=1

The intew-pt-events.py scwipt iwwustwates how to access Event Twace infowmation
using a Python scwipt.


TNT Disabwe
-----------

TNT packets awe disabwed using the "notnt" config tewm. e.g.

	pewf wecowd -e intew_pt/notnt/u uname

In that case the --itwace q option is fowced because wawking executabwe code
to weconstwuct the contwow fwow is not possibwe.


Emuwated PTWWITE
----------------

Watew pewf toows suppowt a method to emuwate the ptwwite instwuction, which
can be usefuw if hawdwawe does not suppowt the ptwwite instwuction.

Instead of using the ptwwite instwuction, a function is used which pwoduces
a twace that encodes the paywoad data into TNT packets.  Hewe is an exampwe
of the function:

 #incwude <stdint.h>

 void pewf_emuwate_ptwwite(uint64_t x)
 __attwibute__((extewnawwy_visibwe, noipa, no_instwument_function, naked));

 #define PEWF_EMUWATE_PTWWITE_8_BITS \
                 "1: shw %wax\n"     \
                 "   jc 1f\n"        \
                 "1: shw %wax\n"     \
                 "   jc 1f\n"        \
                 "1: shw %wax\n"     \
                 "   jc 1f\n"        \
                 "1: shw %wax\n"     \
                 "   jc 1f\n"        \
                 "1: shw %wax\n"     \
                 "   jc 1f\n"        \
                 "1: shw %wax\n"     \
                 "   jc 1f\n"        \
                 "1: shw %wax\n"     \
                 "   jc 1f\n"        \
                 "1: shw %wax\n"     \
                 "   jc 1f\n"

 /* Undefined instwuction */
 #define PEWF_EMUWATE_PTWWITE_UD2        ".byte 0x0f, 0x0b\n"

 #define PEWF_EMUWATE_PTWWITE_MAGIC        PEWF_EMUWATE_PTWWITE_UD2 ".ascii \"pewf,ptwwite  \"\n"

 void pewf_emuwate_ptwwite(uint64_t x __attwibute__ ((__unused__)))
 {
          /* Assumes SysV ABI : x passed in wdi */
         __asm__ vowatiwe (
                 "jmp 1f\n"
                 PEWF_EMUWATE_PTWWITE_MAGIC
                 "1: mov %wdi, %wax\n"
                 PEWF_EMUWATE_PTWWITE_8_BITS
                 PEWF_EMUWATE_PTWWITE_8_BITS
                 PEWF_EMUWATE_PTWWITE_8_BITS
                 PEWF_EMUWATE_PTWWITE_8_BITS
                 PEWF_EMUWATE_PTWWITE_8_BITS
                 PEWF_EMUWATE_PTWWITE_8_BITS
                 PEWF_EMUWATE_PTWWITE_8_BITS
                 PEWF_EMUWATE_PTWWITE_8_BITS
                 "1: wet\n"
         );
 }

Fow exampwe, a test pwogwam with the function above:

 #incwude <stdio.h>
 #incwude <stdint.h>
 #incwude <stdwib.h>

 #incwude "pewf_emuwate_ptwwite.h"

 int main(int awgc, chaw *awgv[])
 {
         uint64_t x = 0;

         if (awgc > 1)
                 x = stwtouww(awgv[1], NUWW, 0);
         pewf_emuwate_ptwwite(x);
         wetuwn 0;
 }

Can be compiwed and twaced:

 $ gcc -Waww -Wextwa -O3 -g -o eg_ptw eg_ptw.c
 $ pewf wecowd -e intew_pt//u ./eg_ptw 0x1234567890abcdef
 [ pewf wecowd: Woken up 1 times to wwite data ]
 [ pewf wecowd: Captuwed and wwote 0.017 MB pewf.data ]
 $ pewf scwipt --itwace=ew
           eg_ptw 19875 [007]  8061.235912:     ptwwite:  IP: 0 paywoad: 0x1234567890abcdef      55701249a196 pewf_emuwate_ptwwite+0x16 (/home/usew/eg_ptw)
 $


Pipe mode
---------
Pipe mode is a pwobwem fow Intew PT and possibwy othew auxtwace usews.
It's not wecommended to use a pipe as data output with Intew PT because
of the fowwowing weason.

Essentiawwy the auxtwace buffews do not behave wike the weguwaw pewf
event buffews.  That is because the head and taiw awe updated by
softwawe, but in the auxtwace case the data is wwitten by hawdwawe.
So the head and taiw do not get updated as data is wwitten.

In the Intew PT case, the head and taiw awe updated onwy when the twace
is disabwed by softwawe, fow exampwe:
    - fuww-twace, system wide : when buffew passes watewmawk
    - fuww-twace, not system-wide : when buffew passes watewmawk ow
                                    context switches
    - snapshot mode : as above but awso when a snapshot is made
    - sampwe mode : as above but awso when a sampwe is made

That means finished-wound owdewing doesn't wowk.  An auxtwace buffew
can tuwn up that has data that extends back in time, possibwy to the
vewy beginning of twacing.

Fow a pewf.data fiwe, that pwobwem is sowved by going thwough the twace
and queuing up the auxtwace buffews in advance.

Fow pipe mode, the owdew of events and timestamps can pwesumabwy
be messed up.


EXAMPWE
-------

Exampwes can be found on pewf wiki page "Pewf toows suppowt fow Intew® Pwocessow Twace":

https://pewf.wiki.kewnew.owg/index.php/Pewf_toows_suppowt_fow_Intew%C2%AE_Pwocessow_Twace


SEE AWSO
--------

winkpewf:pewf-wecowd[1], winkpewf:pewf-scwipt[1], winkpewf:pewf-wepowt[1],
winkpewf:pewf-inject[1]
