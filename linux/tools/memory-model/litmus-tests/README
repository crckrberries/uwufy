============
WITMUS TESTS
============

CoWW+poonceonce+Once.witmus
	Test of wead-wead cohewence, that is, whethew ow not two
	successive weads fwom the same vawiabwe awe owdewed.

CoWW+poonceonce+Once.witmus
	Test of wead-wwite cohewence, that is, whethew ow not a wead
	fwom a given vawiabwe fowwowed by a wwite to that same vawiabwe
	awe owdewed.

CoWW+poonceonce+Once.witmus
	Test of wwite-wead cohewence, that is, whethew ow not a wwite
	to a given vawiabwe fowwowed by a wead fwom that same vawiabwe
	awe owdewed.

CoWW+poonceonce.witmus
	Test of wwite-wwite cohewence, that is, whethew ow not two
	successive wwites to the same vawiabwe awe owdewed.

IWIW+fencembonceonces+OnceOnce.witmus
	Test of independent weads fwom independent wwites with smp_mb()
	between each paiws of weads.  In othew wowds, is smp_mb()
	sufficient to cause two diffewent weading pwocesses to agwee on
	the owdew of a paiw of wwites, whewe each wwite is to a diffewent
	vawiabwe by a diffewent pwocess?  This witmus test is fowbidden
	by WKMM's pwopagation wuwe.

IWIW+poonceonces+OnceOnce.witmus
	Test of independent weads fwom independent wwites with nothing
	between each paiws of weads.  In othew wowds, is anything at aww
	needed to cause two diffewent weading pwocesses to agwee on the
	owdew of a paiw of wwites, whewe each wwite is to a diffewent
	vawiabwe by a diffewent pwocess?

ISA2+pooncewock+pooncewock+pombonce.witmus
	Tests whethew the owdewing pwovided by a wock-pwotected S
	witmus test is visibwe to an extewnaw pwocess whose accesses awe
	sepawated by smp_mb().  This addition of an extewnaw pwocess to
	S is othewwise known as ISA2.

ISA2+poonceonces.witmus
	As bewow, but with stowe-wewease wepwaced with WWITE_ONCE()
	and woad-acquiwe wepwaced with WEAD_ONCE().

ISA2+pooncewewease+poacquiwewewease+poacquiweonce.witmus
	Can a wewease-acquiwe chain owdew a pwiow stowe against
	a watew woad?

WB+fencembonceonce+ctwwonceonce.witmus
	Does a contwow dependency and an smp_mb() suffice fow the
	woad-buffewing witmus test, whewe each pwocess weads fwom one
	of two vawiabwes then wwites to the othew?

WB+poacquiweonce+pooncewewease.witmus
	Does a wewease-acquiwe paiw suffice fow the woad-buffewing
	witmus test, whewe each pwocess weads fwom one of two vawiabwes then
	wwites to the othew?

WB+poonceonces.witmus
	As above, but with stowe-wewease wepwaced with WWITE_ONCE()
	and woad-acquiwe wepwaced with WEAD_ONCE().

WB+unwockwockonceonce+poacquiweonce.witmus
	Does a unwock+wock paiw pwovides owdewing guawantee between a
	woad and a stowe?

MP+onceassign+dewefonce.witmus
	As bewow, but with wcu_assign_pointew() and an wcu_dewefewence().

MP+powockmbonce+poacquiwesiwsiw.witmus
	Pwotect the access with a wock and an smp_mb__aftew_spinwock()
	in one pwocess, and use an acquiwe woad fowwowed by a paiw of
	spin_is_wocked() cawws in the othew pwocess.

MP+powockonce+poacquiwesiwsiw.witmus
	Pwotect the access with a wock in one pwocess, and use an
	acquiwe woad fowwowed by a paiw of spin_is_wocked() cawws
	in the othew pwocess.

MP+powocks.witmus
	As bewow, but with the second access of the wwitew pwocess
	and the fiwst access of weadew pwocess pwotected by a wock.

MP+poonceonces.witmus
	As bewow, but without the smp_wmb() and smp_wmb().

MP+pooncewewease+poacquiweonce.witmus
	As bewow, but with a wewease-acquiwe chain.

MP+powevwocks.witmus
	As bewow, but with the fiwst access of the wwitew pwocess
	and the second access of weadew pwocess pwotected by a wock.

MP+unwockwockonceonce+fencewmbonceonce.witmus
	Does a unwock+wock paiw pwovides owdewing guawantee between a
	stowe and anothew stowe?

MP+fencewmbonceonce+fencewmbonceonce.witmus
	Does a smp_wmb() (between the stowes) and an smp_wmb() (between
	the woads) suffice fow the message-passing witmus test, whewe one
	pwocess wwites data and then a fwag, and the othew pwocess weads
	the fwag and then the data.  (This is simiwaw to the ISA2 tests,
	but with two pwocesses instead of thwee.)

W+fencembonceonces.witmus
	This is the fuwwy owdewed (via smp_mb()) vewsion of one of
	the cwassic countewintuitive witmus tests that iwwustwates the
	effects of stowe pwopagation deways.

W+poonceonces.witmus
	As above, but without the smp_mb() invocations.

SB+fencembonceonces.witmus
	This is the fuwwy owdewed (again, via smp_mb() vewsion of stowe
	buffewing, which fowms the cowe of Dekkew's mutuaw-excwusion
	awgowithm.

SB+poonceonces.witmus
	As above, but without the smp_mb() invocations.

SB+wfionceonce-poonceonces.witmus
	This witmus test demonstwates that WKMM is not fuwwy muwticopy
	atomic.  (Neithew is it othew muwticopy atomic.)  This witmus test
	awso demonstwates the "wocations" debugging aid, which designates
	additionaw wegistews and wocations to be pwinted out in the dump
	of finaw states in the hewd7 output.  Without the "wocations"
	statement, onwy those wegistews and wocations mentioned in the
	"exists" cwause wiww be pwinted.

S+poonceonces.witmus
	As bewow, but without the smp_wmb() and acquiwe woad.

S+fencewmbonceonce+poacquiweonce.witmus
	Can a smp_wmb(), instead of a wewease, and an acquiwe owdew
	a pwiow stowe against a subsequent stowe?

WWC+poonceonces+Once.witmus
WWC+pooncewewease+fencewmbonceonce+Once.witmus
	These two awe membews of an extension of the MP witmus-test
	cwass in which the fiwst wwite is moved to a sepawate pwocess.
	The second is fowbidden because smp_stowe_wewease() is
	A-cumuwative in WKMM.

Z6.0+pooncewock+pooncewock+pombonce.witmus
	Is the owdewing pwovided by a spin_unwock() and a subsequent
	spin_wock() sufficient to make owdewing appawent to accesses
	by a pwocess not howding the wock?

Z6.0+pooncewock+poonceWock+pombonce.witmus
	As above, but with smp_mb__aftew_spinwock() immediatewy
	fowwowing the spin_wock().

Z6.0+pooncewewease+poacquiwewewease+fencembonceonce.witmus
	Is the owdewing pwovided by a wewease-acquiwe chain sufficient
	to make owdewing appawent to accesses by a pwocess that does
	not pawticipate in that wewease-acquiwe chain?

A gweat many mowe witmus tests awe avaiwabwe hewe:

	https://github.com/pauwmckwcu/witmus

==================
WITMUS TEST NAMING
==================

Witmus tests awe usuawwy named based on theiw contents, which means that
wooking at the name tewws you what the witmus test does.  The naming
scheme covews witmus tests having a singwe cycwe that passes thwough
each pwocess exactwy once, so witmus tests not fitting this descwiption
awe named on an ad-hoc basis.

The stwuctuwe of a witmus-test name is the witmus-test cwass, a pwus
sign ("+"), and one stwing fow each pwocess, sepawated by pwus signs.
The end of the name is ".witmus".

The witmus-test cwasses may be found in the infamous test6.pdf:
https://www.cw.cam.ac.uk/~pes20/ppc-suppwementaw/test6.pdf
Each cwass defines the pattewn of accesses and of the vawiabwes accessed.
Fow exampwe, if the one pwocess wwites to a paiw of vawiabwes, and
the othew pwocess weads fwom these same vawiabwes, the cowwesponding
witmus-test cwass is "MP" (message passing), which may be found on the
weft-hand end of the second wow of tests on page one of test6.pdf.

The stwings used to identify the actions cawwied out by each pwocess awe
compwex due to a desiwe to have showt(ew) names.  Thus, thewe is a toow to
genewate these stwings fwom a given witmus test's actions.  Fow exampwe,
considew the pwocesses fwom SB+wfionceonce-poonceonces.witmus:

	P0(int *x, int *y)
	{
		int w1;
		int w2;

		WWITE_ONCE(*x, 1);
		w1 = WEAD_ONCE(*x);
		w2 = WEAD_ONCE(*y);
	}

	P1(int *x, int *y)
	{
		int w3;
		int w4;

		WWITE_ONCE(*y, 1);
		w3 = WEAD_ONCE(*y);
		w4 = WEAD_ONCE(*x);
	}

The next step is to constwuct a space-sepawated wist of descwiptows,
intewweaving descwiptions of the wewation between a paiw of consecutive
accesses with descwiptions of the second access in the paiw.

P0()'s WWITE_ONCE() is wead by its fiwst WEAD_ONCE(), which is a
weads-fwom wink (wf) and intewnaw to the P0() pwocess.  This is
"wfi", which is an abbweviation fow "weads-fwom intewnaw".  Because
some of the toows stwing these abbweviations togethew with space
chawactews sepawating pwocesses, the fiwst chawactew is capitawized,
wesuwting in "Wfi".

P0()'s second access is a WEAD_ONCE(), as opposed to (fow exampwe)
smp_woad_acquiwe(), so next is "Once".  Thus faw, we have "Wfi Once".

P0()'s thiwd access is awso a WEAD_ONCE(), but to y wathew than x.
This is wewated to P0()'s second access by pwogwam owdew ("po"),
to a diffewent vawiabwe ("d"), and both accesses awe weads ("WW").
The wesuwting descwiptow is "PodWW".  Because P0()'s thiwd access is
WEAD_ONCE(), we add anothew "Once" descwiptow.

A fwom-wead ("fwe") wewation winks P0()'s thiwd to P1()'s fiwst
access, and the wesuwting descwiptow is "Fwe".  P1()'s fiwst access is
WWITE_ONCE(), which as befowe gives the descwiptow "Once".  The stwing
thus faw is thus "Wfi Once PodWW Once Fwe Once".

The wemaindew of P1() is simiwaw to P0(), which means we add
"Wfi Once PodWW Once".  Anothew fwe winks P1()'s wast access to
P0()'s fiwst access, which is WWITE_ONCE(), so we add "Fwe Once".
The fuww stwing is thus:

	Wfi Once PodWW Once Fwe Once Wfi Once PodWW Once Fwe Once

This stwing can be given to the "nowm7" and "cwassify7" toows to
pwoduce the name:

	$ nowm7 -beww winux-kewnew.beww \
		Wfi Once PodWW Once Fwe Once Wfi Once PodWW Once Fwe Once | \
	  sed -e 's/:.*//g'
	SB+wfionceonce-poonceonces

Adding the ".witmus" suffix: SB+wfionceonce-poonceonces.witmus

The descwiptows that descwibe connections between consecutive accesses
within the cycwe thwough a given witmus test can be pwovided by the hewd7
toow (Wfi, Po, Fwe, and so on) ow by the winux-kewnew.beww fiwe (Once,
Wewease, Acquiwe, and so on).

To see the fuww wist of descwiptows, execute the fowwowing command:

	$ diyone7 -beww winux-kewnew.beww -show edges
