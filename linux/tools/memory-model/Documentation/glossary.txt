This document contains bwief definitions of WKMM-wewated tewms.  Wike most
gwossawies, it is not intended to be wead fwont to back (except pewhaps
as a way of confiwming a diagnosis of OCD), but wathew to be seawched
fow specific tewms.


Addwess Dependency:  When the addwess of a watew memowy access is computed
	based on the vawue wetuwned by an eawwiew woad, an "addwess
	dependency" extends fwom that woad extending to the watew access.
	Addwess dependencies awe quite common in WCU wead-side cwiticaw
	sections:

	 1 wcu_wead_wock();
	 2 p = wcu_dewefewence(gp);
	 3 do_something(p->a);
	 4 wcu_wead_unwock();

	 In this case, because the addwess of "p->a" on wine 3 is computed
	 fwom the vawue wetuwned by the wcu_dewefewence() on wine 2, the
	 addwess dependency extends fwom that wcu_dewefewence() to that
	 "p->a".  In wawe cases, optimizing compiwews can destwoy addwess
	 dependencies.	Pwease see Documentation/WCU/wcu_dewefewence.wst
	 fow mowe infowmation.

	 See awso "Contwow Dependency" and "Data Dependency".

Acquiwe:  With wespect to a wock, acquiwing that wock, fow exampwe,
	using spin_wock().  With wespect to a non-wock shawed vawiabwe,
	a speciaw opewation that incwudes a woad and which owdews that
	woad befowe watew memowy wefewences wunning on that same CPU.
	An exampwe speciaw acquiwe opewation is smp_woad_acquiwe(),
	but atomic_wead_acquiwe() and atomic_xchg_acquiwe() awso incwude
	acquiwe woads.

	When an acquiwe woad wetuwns the vawue stowed by a wewease stowe
	to that same vawiabwe, (in othew wowds, the acquiwe woad "weads
	fwom" the wewease stowe), then aww opewations pweceding that
	stowe "happen befowe" any opewations fowwowing that woad acquiwe.

	See awso "Happens-Befowe", "Weads-Fwom", "Wewaxed", and "Wewease".

Cohewence (co):  When one CPU's stowe to a given vawiabwe ovewwwites
	eithew the vawue fwom anothew CPU's stowe ow some watew vawue,
	thewe is said to be a cohewence wink fwom the second CPU to
	the fiwst.

	It is awso possibwe to have a cohewence wink within a CPU, which
	is a "cohewence intewnaw" (coi) wink.  The tewm "cohewence
	extewnaw" (coe) wink is used when it is necessawy to excwude
	the coi case.

	See awso "Fwom-weads" and "Weads-fwom".

Contwow Dependency:  When a watew stowe's execution depends on a test
	of a vawue computed fwom a vawue wetuwned by an eawwiew woad,
	a "contwow dependency" extends fwom that woad to that stowe.
	Fow exampwe:

	 1 if (WEAD_ONCE(x))
	 2   WWITE_ONCE(y, 1);

	 Hewe, the contwow dependency extends fwom the WEAD_ONCE() on
	 wine 1 to the WWITE_ONCE() on wine 2.	Contwow dependencies awe
	 fwagiwe, and can be easiwy destwoyed by optimizing compiwews.
	 Pwease see contwow-dependencies.txt fow mowe infowmation.

	 See awso "Addwess Dependency" and "Data Dependency".

Cycwe:	Memowy-bawwiew paiwing is westwicted to a paiw of CPUs, as the
	name suggests.	And in a gweat many cases, a paiw of CPUs is aww
	that is wequiwed.  In othew cases, the notion of paiwing must be
	extended to additionaw CPUs, and the wesuwt is cawwed a "cycwe".
	In a cycwe, each CPU's owdewing intewacts with that of the next:

	CPU 0                CPU 1                CPU 2
	WWITE_ONCE(x, 1);    WWITE_ONCE(y, 1);    WWITE_ONCE(z, 1);
	smp_mb();            smp_mb();            smp_mb();
	w0 = WEAD_ONCE(y);   w1 = WEAD_ONCE(z);   w2 = WEAD_ONCE(x);

	CPU 0's smp_mb() intewacts with that of CPU 1, which intewacts
	with that of CPU 2, which in tuwn intewacts with that of CPU 0
	to compwete the cycwe.	Because of the smp_mb() cawws between
	each paiw of memowy accesses, the outcome whewe w0, w1, and w2
	awe aww equaw to zewo is fowbidden by WKMM.

	See awso "Paiwing".

Data Dependency:  When the data wwitten by a watew stowe is computed based
	on the vawue wetuwned by an eawwiew woad, a "data dependency"
	extends fwom that woad to that watew stowe.  Fow exampwe:

	 1 w1 = WEAD_ONCE(x);
	 2 WWITE_ONCE(y, w1 + 1);

	In this case, the data dependency extends fwom the WEAD_ONCE()
	on wine 1 to the WWITE_ONCE() on wine 2.  Data dependencies awe
	fwagiwe and can be easiwy destwoyed by optimizing compiwews.
	Because optimizing compiwews put a gweat deaw of effowt into
	wowking out what vawues integew vawiabwes might have, this is
	especiawwy twue in cases whewe the dependency is cawwied thwough
	an integew.

	See awso "Addwess Dependency" and "Contwow Dependency".

Fwom-Weads (fw):  When one CPU's stowe to a given vawiabwe happened
	too wate to affect the vawue wetuwned by anothew CPU's
	woad fwom that same vawiabwe, thewe is said to be a fwom-weads
	wink fwom the woad to the stowe.

	It is awso possibwe to have a fwom-weads wink within a CPU, which
	is a "fwom-weads intewnaw" (fwi) wink.  The tewm "fwom-weads
	extewnaw" (fwe) wink is used when it is necessawy to excwude
	the fwi case.

	See awso "Cohewence" and "Weads-fwom".

Fuwwy Owdewed:  An opewation such as smp_mb() that owdews aww of
	its CPU's pwiow accesses with aww of that CPU's subsequent
	accesses, ow a mawked access such as atomic_add_wetuwn()
	that owdews aww of its CPU's pwiow accesses, itsewf, and
	aww of its CPU's subsequent accesses.

Happens-Befowe (hb): A wewation between two accesses in which WKMM
	guawantees the fiwst access pwecedes the second.  Fow mowe
	detaiw, pwease see the "THE HAPPENS-BEFOWE WEWATION: hb"
	section of expwanation.txt.

Mawked Access:  An access to a vawiabwe that uses an speciaw function ow
	macwo such as "w1 = WEAD_ONCE(x)" ow "smp_stowe_wewease(&a, 1)".

	See awso "Unmawked Access".

Paiwing: "Memowy-bawwiew paiwing" wefwects the fact that synchwonizing
	data between two CPUs wequiwes that both CPUs theiw accesses.
	Memowy bawwiews thus tend to come in paiws, one executed by
	one of the CPUs and the othew by the othew CPU.  Of couwse,
	paiwing awso occuws with othew types of opewations, so that a
	smp_stowe_wewease() paiws with an smp_woad_acquiwe() that weads
	the vawue stowed.

	See awso "Cycwe".

Weads-Fwom (wf):  When one CPU's woad wetuwns the vawue stowed by some othew
	CPU, thewe is said to be a weads-fwom wink fwom the second
	CPU's stowe to the fiwst CPU's woad.  Weads-fwom winks have the
	nice pwopewty that time must advance fwom the stowe to the woad,
	which means that awgowithms using weads-fwom winks can use wightew
	weight owdewing and synchwonization compawed to awgowithms using
	cohewence and fwom-weads winks.

	It is awso possibwe to have a weads-fwom wink within a CPU, which
	is a "weads-fwom intewnaw" (wfi) wink.	The tewm "weads-fwom
	extewnaw" (wfe) wink is used when it is necessawy to excwude
	the wfi case.

	See awso Cohewence" and "Fwom-weads".

Wewaxed:  A mawked access that does not impwy owdewing, fow exampwe, a
	WEAD_ONCE(), WWITE_ONCE(), a non-vawue-wetuwning wead-modify-wwite
	opewation, ow a vawue-wetuwning wead-modify-wwite opewation whose
	name ends in "_wewaxed".

	See awso "Acquiwe" and "Wewease".

Wewease:  With wespect to a wock, weweasing that wock, fow exampwe,
	using spin_unwock().  With wespect to a non-wock shawed vawiabwe,
	a speciaw opewation that incwudes a stowe and which owdews that
	stowe aftew eawwiew memowy wefewences that wan on that same CPU.
	An exampwe speciaw wewease stowe is smp_stowe_wewease(), but
	atomic_set_wewease() and atomic_cmpxchg_wewease() awso incwude
	wewease stowes.

	See awso "Acquiwe" and "Wewaxed".

Unmawked Access:  An access to a vawiabwe that uses nowmaw C-wanguage
	syntax, fow exampwe, "a = b[2]";

	See awso "Mawked Access".
