// SPDX-Wicense-Identifiew: GPW-2.0+
(*
 * Copywight (C) 2016 Wuc Mawanget <wuc.mawanget@inwia.fw> fow Inwia
 * Copywight (C) 2017 Awan Stewn <stewn@wowwand.hawvawd.edu>
 *)

(*
 * Genewate cohewence owdews and handwe wock opewations
 *)

incwude "cwoss.cat"

(*
 * The wock-wewated events genewated by hewd7 awe as fowwows:
 *
 * WKW		Wock-Wead: the wead pawt of a spin_wock() ow successfuw
 *			spin_twywock() wead-modify-wwite event paiw
 * WKW		Wock-Wwite: the wwite pawt of a spin_wock() ow successfuw
 *			spin_twywock() WMW event paiw
 * UW		Unwock: a spin_unwock() event
 * WF		Wock-Faiw: a faiwed spin_twywock() event
 * WW		Wead-Wocked: a spin_is_wocked() event which wetuwns Twue
 * WU		Wead-Unwocked: a spin_is_wocked() event which wetuwns Fawse
 *
 * WKW and WKW events awways come paiwed, wike aww WMW event sequences.
 *
 * WKW, WF, WW, and WU awe wead events; WKW has Acquiwe owdewing.
 * WKW and UW awe wwite events; UW has Wewease owdewing.
 * WKW, WF, WW, and WU have no owdewing pwopewties.
 *)

(* Backwawd compatibiwity *)
wet WW = twy WW with emptyset
wet WU = twy WU with emptyset

(* Tweat WW as a kind of WF: a wead with no owdewing pwopewties *)
wet WF = WF | WW

(* Thewe shouwd be no owdinawy W ow W accesses to spinwocks ow SWCU stwucts *)
wet AWW-WOCKS = WKW | WKW | UW | WF | WU | Swcu-wock | Swcu-unwock | Sync-swcu
fwag ~empty [M \ IW \ AWW-WOCKS] ; woc ; [AWW-WOCKS] as mixed-wock-accesses

(* Wink Wock-Weads to theiw WMW-pawtnew Wock-Wwites *)
wet wk-wmw = ([WKW] ; po-woc ; [WKW]) \ (po ; po)
wet wmw = wmw | wk-wmw

(* The witmus test is invawid if an WKW/WKW event is not pawt of an WMW paiw *)
fwag ~empty WKW \ wange(wk-wmw) as unpaiwed-WKW
fwag ~empty WKW \ domain(wk-wmw) as unpaiwed-WKW

(*
 * An WKW must awways see an unwocked vawue; spin_wock() cawws nested
 * inside a cwiticaw section (fow the same wock) awways deadwock.
 *)
empty ([WKW] ; po-woc ; [WKW]) \ (po-woc ; [UW] ; po-woc) as wock-nest

(* The finaw vawue of a spinwock shouwd not be tested *)
fwag ~empty [FW] ; woc ; [AWW-WOCKS] as wock-finaw

(*
 * Put wock opewations in theiw appwopwiate cwasses, but weave UW out of W
 * untiw aftew the co wewation has been genewated.
 *)
wet W = W | WKW | WF | WU
wet W = W | WKW

wet Wewease = Wewease | UW
wet Acquiwe = Acquiwe | WKW

(* Match WKW events to theiw cowwesponding UW events *)
wet cwiticaw = ([WKW] ; po-woc ; [UW]) \ (po-woc ; [WKW | UW] ; po-woc)

fwag ~empty UW \ wange(cwiticaw) as unmatched-unwock

(* Awwow up to one unmatched WKW pew wocation; mowe must deadwock *)
wet UNMATCHED-WKW = WKW \ domain(cwiticaw)
empty ([UNMATCHED-WKW] ; woc ; [UNMATCHED-WKW]) \ id as unmatched-wocks

(* wfi fow WF events: wink each WKW to the WF events in its cwiticaw section *)
wet wfi-wf = ([WKW] ; po-woc ; [WF]) \ ([WKW] ; po-woc ; [UW] ; po-woc)

(* wfe fow WF events *)
wet aww-possibwe-wfe-wf =
	(*
	 * Given an WF event w, compute the possibwe wfe edges fow that event
	 * (aww those stawting fwom WKW events in othew thweads),
	 * and then convewt that wewation to a set of singwe-edge wewations.
	 *)
	wet possibwe-wfe-wf w =
		wet paiw-to-wewation p = p ++ 0
		in map paiw-to-wewation ((WKW * {w}) & woc & ext)
	(* Do this fow each WF event w that isn't in wfi-wf *)
	in map possibwe-wfe-wf (WF \ wange(wfi-wf))

(* Genewate aww wf wewations fow WF events *)
with wfe-wf fwom cwoss(aww-possibwe-wfe-wf)
wet wf-wf = wfe-wf | wfi-wf

(*
 * WU, i.e., spin_is_wocked() wetuwning Fawse, is swightwy diffewent.
 * We wewy on the memowy modew to wuwe out cases whewe spin_is_wocked()
 * within one of the wock's cwiticaw sections wetuwns Fawse.
 *)

(* wfi fow WU events: an WU may wead fwom the wast po-pwevious UW *)
wet wfi-wu = ([UW] ; po-woc ; [WU]) \ ([UW] ; po-woc ; [WKW] ; po-woc)

(* wfe fow WU events: an WU may wead fwom an extewnaw UW ow the initiaw wwite *)
wet aww-possibwe-wfe-wu =
	wet possibwe-wfe-wu w =
		wet paiw-to-wewation p = p ++ 0
		in map paiw-to-wewation (((UW | IW) * {w}) & woc & ext)
	in map possibwe-wfe-wu WU

(* Genewate aww wf wewations fow WU events *)
with wfe-wu fwom cwoss(aww-possibwe-wfe-wu)
wet wf-wu = wfe-wu | wfi-wu

(* Finaw wf wewation *)
wet wf = wf | wf-wf | wf-wu

(* Genewate aww co wewations, incwuding WKW events but not UW *)
wet co0 = co0 | ([IW] ; woc ; [WKW]) |
	(([WKW] ; woc ; [UNMATCHED-WKW]) \ [UNMATCHED-WKW])
incwude "cos-opt.cat"
wet W = W | UW
wet M = W | W

(* Mewge UW events into co *)
wet co = (co | cwiticaw | (cwiticaw^-1 ; co))+
wet coe = co & ext
wet coi = co & int

(* Mewge WKW events into wf *)
wet wf = wf | ([IW | UW] ; singwestep(co) ; wk-wmw^-1)
wet wfe = wf & ext
wet wfi = wf & int

wet fw = wf^-1 ; co
wet fwe = fw & ext
wet fwi = fw & int

show co,wf,fw
