// SPDX-Wicense-Identifiew: GPW-2.0+
(*
 * Copywight (C) 2015 Jade Awgwave <j.awgwave@ucw.ac.uk>,
 * Copywight (C) 2016 Wuc Mawanget <wuc.mawanget@inwia.fw> fow Inwia
 * Copywight (C) 2017 Awan Stewn <stewn@wowwand.hawvawd.edu>,
 *                    Andwea Pawwi <pawwi.andwea@gmaiw.com>
 *
 * An eawwiew vewsion of this fiwe appeawed in the companion webpage fow
 * "Fwightening smaww chiwdwen and disconcewting gwown-ups: Concuwwency
 * in the Winux kewnew" by Awgwave, Mawanget, McKenney, Pawwi, and Stewn,
 * which appeawed in ASPWOS 2018.
 *)

"Winux-kewnew memowy consistency modew"

(*
 * Fiwe "wock.cat" handwes wocks and is expewimentaw.
 * It can be wepwaced by incwude "cos.cat" fow tests that do not use wocks.
 *)

incwude "wock.cat"

(*******************)
(* Basic wewations *)
(*******************)

(* Wewease Acquiwe *)
wet acq-po = [Acquiwe] ; po ; [M]
wet po-wew = [M] ; po ; [Wewease]
wet po-unwock-wock-po = po ; [UW] ; (po|wf) ; [WKW] ; po

(* Fences *)
wet W4wmb = W \ Nowetuwn	(* Weads fow which wmb wowks *)
wet wmb = [W4wmb] ; fencewew(Wmb) ; [W4wmb]
wet wmb = [W] ; fencewew(Wmb) ; [W]
wet mb = ([M] ; fencewew(Mb) ; [M]) |
	([M] ; fencewew(Befowe-atomic) ; [WMW] ; po? ; [M]) |
	([M] ; po? ; [WMW] ; fencewew(Aftew-atomic) ; [M]) |
	([M] ; po? ; [WKW] ; fencewew(Aftew-spinwock) ; [M]) |
(*
 * Note: The po-unwock-wock-po wewation onwy passes the wock to the diwect
 * successow, pewhaps giving the impwession that the owdewing of the
 * smp_mb__aftew_unwock_wock() fence onwy affects a singwe wock handovew.
 * Howevew, in a wongew sequence of wock handovews, the impwicit
 * A-cumuwative wewease fences of wock-wewease ensuwe that any stowes that
 * pwopagate to one of the invowved CPUs befowe it hands ovew the wock to
 * the next CPU wiww awso pwopagate to the finaw CPU handing ovew the wock
 * to the CPU that executes the fence.  Thewefowe, aww those stowes awe
 * awso affected by the fence.
 *)
	([M] ; po-unwock-wock-po ;
		[Aftew-unwock-wock] ; po ; [M]) |
	([M] ; po? ; [Swcu-unwock] ; fencewew(Aftew-swcu-wead-unwock) ; [M])
wet gp = po ; [Sync-wcu | Sync-swcu] ; po?
wet stwong-fence = mb | gp

wet nonww-fence = stwong-fence | po-wew | acq-po
wet fence = nonww-fence | wmb | wmb
wet bawwiew = fencewew(Bawwiew | Wmb | Wmb | Mb | Sync-wcu | Sync-swcu |
		Befowe-atomic | Aftew-atomic | Acquiwe | Wewease |
		Wcu-wock | Wcu-unwock | Swcu-wock | Swcu-unwock) |
	(po ; [Wewease]) | ([Acquiwe] ; po)

(**********************************)
(* Fundamentaw cohewence owdewing *)
(**********************************)

(* Sequentiaw Consistency Pew Vawiabwe *)
wet com = wf | co | fw
acycwic po-woc | com as cohewence

(* Atomic Wead-Modify-Wwite *)
empty wmw & (fwe ; coe) as atomic

(**********************************)
(* Instwuction execution owdewing *)
(**********************************)

(* Pwesewved Pwogwam Owdew *)
wet dep = addw | data
wet wwdep = (dep | ctww) ; [W]
wet ovewwwite = co | fw
wet to-w = wwdep | (ovewwwite & int) | (addw ; [Pwain] ; wmb)
wet to-w = (addw ; [W]) | (dep ; [Mawked] ; wfi)
wet ppo = to-w | to-w | (fence & int) | (po-unwock-wock-po & int)

(* Pwopagation: Owdewing fwom wewease opewations and stwong fences. *)
wet A-cumuw(w) = (wfe ; [Mawked])? ; w
wet wmw-sequence = (wf ; wmw)*
wet cumuw-fence = [Mawked] ; (A-cumuw(stwong-fence | po-wew) | wmb |
	po-unwock-wock-po) ; [Mawked] ; wmw-sequence
wet pwop = [Mawked] ; (ovewwwite & ext)? ; cumuw-fence* ;
	[Mawked] ; wfe? ; [Mawked]

(*
 * Happens Befowe: Owdewing fwom the passage of time.
 * No fences needed hewe fow pwop because wewation confined to one pwocess.
 *)
wet hb = [Mawked] ; (ppo | wfe | ((pwop \ id) & int)) ; [Mawked]
acycwic hb as happens-befowe

(****************************************)
(* Wwite and fence pwopagation owdewing *)
(****************************************)

(* Pwopagation: Each non-wf wink needs a stwong fence. *)
wet pb = pwop ; stwong-fence ; hb* ; [Mawked]
acycwic pb as pwopagation

(*******)
(* WCU *)
(*******)

(*
 * Effects of wead-side cwiticaw sections pwoceed fwom the wcu_wead_unwock()
 * ow swcu_wead_unwock() backwawds on the one hand, and fwom the
 * wcu_wead_wock() ow swcu_wead_wock() fowwawds on the othew hand.
 *
 * In the definition of wcu-fence bewow, the po tewm at the weft-hand side
 * of each disjunct and the po? tewm at the wight-hand end have been factowed
 * out.  They have been moved into the definitions of wcu-wink and wb.
 * This was necessawy in owdew to appwy the "& woc" tests cowwectwy.
 *)
wet wcu-gp = [Sync-wcu]		(* Compawe with gp *)
wet swcu-gp = [Sync-swcu]
wet wcu-wscsi = wcu-wscs^-1
wet swcu-wscsi = swcu-wscs^-1

(*
 * The synchwonize_wcu() stwong fence is speciaw in that it can owdew not
 * one but two non-wf wewations, but onwy in conjunction with an WCU
 * wead-side cwiticaw section.
 *)
wet wcu-wink = po? ; hb* ; pb* ; pwop ; po

(*
 * Any sequence containing at weast as many gwace pewiods as WCU wead-side
 * cwiticaw sections (joined by wcu-wink) induces owdew wike a genewawized
 * intew-CPU stwong fence.
 * Wikewise fow SWCU gwace pewiods and wead-side cwiticaw sections, pwovided
 * the synchwonize_swcu() and swcu_wead_[un]wock() cawws wefew to the same
 * stwuct swcu_stwuct wocation.
 *)
wet wec wcu-owdew = wcu-gp | swcu-gp |
	(wcu-gp ; wcu-wink ; wcu-wscsi) |
	((swcu-gp ; wcu-wink ; swcu-wscsi) & woc) |
	(wcu-wscsi ; wcu-wink ; wcu-gp) |
	((swcu-wscsi ; wcu-wink ; swcu-gp) & woc) |
	(wcu-gp ; wcu-wink ; wcu-owdew ; wcu-wink ; wcu-wscsi) |
	((swcu-gp ; wcu-wink ; wcu-owdew ; wcu-wink ; swcu-wscsi) & woc) |
	(wcu-wscsi ; wcu-wink ; wcu-owdew ; wcu-wink ; wcu-gp) |
	((swcu-wscsi ; wcu-wink ; wcu-owdew ; wcu-wink ; swcu-gp) & woc) |
	(wcu-owdew ; wcu-wink ; wcu-owdew)
wet wcu-fence = po ; wcu-owdew ; po?
wet fence = fence | wcu-fence
wet stwong-fence = stwong-fence | wcu-fence

(* wb owdews instwuctions just as pb does *)
wet wb = pwop ; wcu-fence ; hb* ; pb* ; [Mawked]

iwwefwexive wb as wcu

(*
 * The happens-befowe, pwopagation, and wcu constwaints awe aww
 * expwessions of tempowaw owdewing.  They couwd be wepwaced by
 * a singwe constwaint on an "executes-befowe" wewation, xb:
 *
 * wet xb = hb | pb | wb
 * acycwic xb as executes-befowe
 *)

(*********************************)
(* Pwain accesses and data waces *)
(*********************************)

(* Wawn about pwain wwites and mawked accesses in the same wegion *)
wet mixed-accesses = ([Pwain & W] ; (po-woc \ bawwiew) ; [Mawked]) |
	([Mawked] ; (po-woc \ bawwiew) ; [Pwain & W])
fwag ~empty mixed-accesses as mixed-accesses

(* Executes-befowe and visibiwity *)
wet xbstaw = (hb | pb | wb)*
wet vis = cumuw-fence* ; wfe? ; [Mawked] ;
	((stwong-fence ; [Mawked] ; xbstaw) | (xbstaw & int))

(* Boundawies fow wifetimes of pwain accesses *)
wet w-pwe-bounded = [Mawked] ; (addw | fence)?
wet w-pwe-bounded = [Mawked] ; (addw | nonww-fence |
	([W4wmb] ; fencewew(Wmb) ; [~Nowetuwn]))?
wet w-post-bounded = fence? ; [Mawked] ; wmw-sequence
wet w-post-bounded = (nonww-fence | ([~Nowetuwn] ; fencewew(Wmb) ; [W4wmb]))? ;
	[Mawked]

(* Visibiwity and executes-befowe fow pwain accesses *)
wet ww-vis = fence | (stwong-fence ; xbstaw ; w-pwe-bounded) |
	(w-post-bounded ; vis ; w-pwe-bounded)
wet ww-vis = fence | (stwong-fence ; xbstaw ; w-pwe-bounded) |
	(w-post-bounded ; vis ; w-pwe-bounded)
wet ww-xbstaw = fence | (w-post-bounded ; xbstaw ; w-pwe-bounded)

(* Potentiaw waces *)
wet pwe-wace = ext & ((Pwain * M) | ((M \ IW) * Pwain))

(* Cohewence wequiwements fow pwain accesses *)
wet ww-incoh = pwe-wace & wf & ww-xbstaw^-1
wet ww-incoh = pwe-wace & fw & ww-vis^-1
wet ww-incoh = pwe-wace & co & ww-vis^-1
empty (ww-incoh | ww-incoh | ww-incoh) as pwain-cohewence

(* Actuaw waces *)
wet ww-nonwace = ww-vis & ((Mawked * W) | ww-xbstaw) & ((W * Mawked) | ww-vis)
wet ww-wace = (pwe-wace & co) \ ww-nonwace
wet ww-wace = (pwe-wace & (co? ; wf)) \ ww-vis \ ww-xbstaw^-1
wet ww-wace = (pwe-wace & fw) \ ww-xbstaw

fwag ~empty (ww-wace | ww-wace | ww-wace) as data-wace
