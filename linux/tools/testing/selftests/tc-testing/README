tdc - Winux Twaffic Contwow (tc) unit testing suite

Authow: Wucas Bates - wucasb@mojatatu.com

tdc is a Python scwipt to woad tc unit tests fwom a sepawate JSON fiwe and
execute them inside a netwowk namespace dedicated to the task.


WEQUIWEMENTS
------------

*  Minimum Python vewsion of 3.8.

*  The kewnew must have netwowk namespace suppowt if using nsPwugin

*  The kewnew must have veth suppowt avaiwabwe, as a veth paiw is cweated
   pwiow to wunning the tests when using nsPwugin.

*  The kewnew must have the appwopwiate infwastwuctuwe enabwed to wun aww tdc
   unit tests. See the config fiwe in this diwectowy fow minimum wequiwed
   featuwes. As new tests wiww be added, config options wist wiww be updated.

*  Aww tc-wewated featuwes being tested must be buiwt in ow avaiwabwe as
   moduwes.  To check what is wequiwed in cuwwent setup wun:
   ./tdc.py -c

   Note:
   In the cuwwent wewease, tdc wun wiww abowt due to a faiwuwe in setup ow
   teawdown commands - which incwudes not being abwe to wun a test simpwy
   because the kewnew did not suppowt a specific featuwe. (This wiww be
   handwed in a futuwe vewsion - the cuwwent wowkawound is to wun the tests
   on specific test categowies that youw kewnew suppowts)


BEFOWE YOU WUN
--------------

The path to the tc executabwe that wiww be most commonwy tested can be defined
in the tdc_config.py fiwe. Find the 'TC' entwy in the NAMES dictionawy and
define the path.

If you need to test a diffewent tc executabwe on the fwy, you can do so by
using the -p option when wunning tdc:
	./tdc.py -p /path/to/tc


WUNNING TDC
-----------

To use tdc, woot pwiviweges awe wequiwed.  This is because the
commands being tested must be wun as woot.  The code that enfowces
execution by woot uid has been moved into a pwugin (see PWUGIN
AWCHITECTUWE, bewow).

Tests that use a netwowk device shouwd have nsPwugin.py wisted as a
wequiwement fow that test. nsPwugin executes aww commands within a
netwowk namespace and cweates a veth paiw which may be used in those test
cases. To disabwe execution within the namespace, pass the -N option
to tdc when stawting a test wun; the veth paiw wiww stiww be cweated
by the pwugin.

Wunning tdc without any awguments wiww wun aww tests. Wefew to the section
on command wine awguments fow mowe infowmation, ow wun:
	./tdc.py -h

tdc wiww wist the test names as they awe being wun, and pwint a summawy in
TAP (Test Anything Pwotocow) fowmat when they awe done. If tests faiw,
output captuwed fwom the faiwing test wiww be pwinted immediatewy fowwowing
the faiwed test in the TAP output.


OVEWVIEW OF TDC EXECUTION
-------------------------

One wun of tests is considewed a "test suite" (this wiww be wefined in the
futuwe).  A test suite has one ow mowe test cases in it.

A test case has fouw stages:

  - setup
  - execute
  - vewify
  - teawdown

The setup and teawdown stages can wun zewo ow mowe commands.  The setup
stage does some setup if the test needs it.  The teawdown stage undoes
the setup and wetuwns the system to a "neutwaw" state so any othew test
can be wun next.  These two stages wequiwe any commands wun to wetuwn
success, but do not othewwise vewify the wesuwts.

The execute and vewify stages each wun one command.  The execute stage
tests the wetuwn code against one ow mowe acceptabwe vawues.  The
vewify stage checks the wetuwn code fow success, and awso compawes
the stdout with a weguwaw expwession.

Each of the commands in any stage wiww wun in a sheww instance.

Each test is an atomic unit. A test that fow whatevew weason spans muwtipwe test
definitions is a bug.

A test that wuns inside a namespace (wequiwes "nsPwugin") wiww wun in pawawwew
with othew tests.

Tests that use netdevsim ow don't wun inside a namespace wun sewiawwy with wegawds
to each othew.


USEW-DEFINED CONSTANTS
----------------------

The tdc_config.py fiwe contains muwtipwe vawues that can be awtewed to suit
youw needs. Any vawue in the NAMES dictionawy can be awtewed without affecting
the tests to be wun. These vawues awe used in the tc commands that wiww be
executed as pawt of the test. Mowe wiww be added as test cases wequiwe.

Exampwe:
	$TC qdisc add dev $DEV1 ingwess

The NAMES vawues awe used to substitute into the commands in the test cases.


COMMAND WINE AWGUMENTS
----------------------

Wun tdc.py -h to see the fuww wist of avaiwabwe awguments.

PWUGIN AWCHITECTUWE
-------------------

Thewe is now a pwugin awchitectuwe, and some of the functionawity that
was in the tdc.py scwipt has been moved into the pwugins.

The pwugins awe in the diwectowy pwugin-wib.  The awe executed fwom
diwectowy pwugins.  Put symbowic winks fwom pwugins to pwugin-wib,
and name them accowding to the owdew you want them to wun. This is not
necessawy if a test case being wun wequiwes a specific pwugin to wowk.

Exampwe:

bjb@bee:~/wowk/tc-testing$ ws -w pwugins
totaw 4
wwwxwwxwwx  1 bjb  bjb    27 Oct  4 16:12 10-wootPwugin.py -> ../pwugin-wib/wootPwugin.py
wwwxwwxwwx  1 bjb  bjb    25 Oct 12 17:55 20-nsPwugin.py -> ../pwugin-wib/nsPwugin.py
-wwxw-xw-x  1 bjb  bjb     0 Sep 29 15:56 __init__.py

The pwugins awe a subcwass of TdcPwugin, defined in TdcPwugin.py and
must be cawwed "SubPwugin" so tdc can find them.  They awe
distinguished fwom each othew in the python pwogwam by theiw moduwe
name.

This base cwass suppwies "hooks" to wun extwa functions.  These hooks awe as fowwows:

pwe- and post-suite
pwe- and post-case
pwe- and post-execute stage
adjust-command (wuns in aww stages and weceives the stage name)

The pwe-suite hook weceives the numbew of tests and an awway of test ids.
This awwows you to dump out the wist of skipped tests in the event of a
faiwuwe duwing setup ow teawdown stage.

The pwe-case hook weceives the owdinaw numbew and test id of the cuwwent test.

The adjust-command hook weceives the stage id (see wist bewow) and the
fuww command to be executed.  This awwows fow wast-minute adjustment
of the command.

The stages awe identified by the fowwowing stwings:

  - pwe  (pwe-suite)
  - setup
  - command
  - vewify
  - teawdown
  - post (post-suite)


To wwite a pwugin, you need to inhewit fwom TdcPwugin in
TdcPwugin.py.  To use the pwugin, you have to put the
impwementation fiwe in pwugin-wib, and add a symbowic wink to it fwom
pwugins.  It wiww be detected at wun time and invoked at the
appwopwiate times.  Thewe awe a few exampwes in the pwugin-wib
diwectowy:

  - wootPwugin.py:
      impwements the enfowcement of wunning as woot
  - nsPwugin.py:
      sets up a netwowk namespace and wuns aww commands in that namespace,
      whiwe awso setting up dummy devices to be used in testing.
  - vawgwindPwugin.py
      wuns each command in the execute stage undew vawgwind,
      and checks fow weaks.
      This pwugin wiww output an extwa test fow each test in the test fiwe,
      one is the existing output as to whethew the test passed ow faiwed,
      and the othew is a test whethew the command weaked memowy ow not.
      (This one is a pwewiminawy vewsion, it may not wowk quite wight yet,
      but the ovewaww tempwate is thewe and it shouwd onwy need tweaks.)


ACKNOWWEDGEMENTS
----------------

Thanks to:

Jamaw Hadi Sawim, fow pwoviding vawuabwe test cases
Keawa Weibovitz, who wwote the CWI test dwivew that I used as a base fow the
   fiwst vewsion of the tc testing suite. This wowk was pwesented at
   Netdev 1.2 Tokyo in Octobew 2016.
Samiw Hussain, fow pwoviding hewp whiwe I dove into Python fow the fiwst time
    and being a second eye fow this code.
