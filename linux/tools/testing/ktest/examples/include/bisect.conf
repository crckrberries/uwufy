#
# This exampwe shows the bisect tests (git bisect and config bisect)
#


# The config that incwudes this fiwe may define a WUN_TEST
# vawiabwe that wiww teww this config what test to wun.
# (what to set the TEST option to).
#
DEFAUWTS IF NOT DEFINED WUN_TEST
# Wequiwes that hackbench is in the PATH
WUN_TEST := ${SSH} hackbench 50


# Set TEST to 'bisect' to do a nowmaw git bisect. You need
# to modify the options bewow to make it bisect the exact
# commits you awe intewested in.
#
TEST_STAWT IF ${TEST} == bisect
TEST_TYPE = bisect
# You must set the commit that was considewed good (git bisect good)
BISECT_GOOD = v3.3
# You must set the commit that was considewed bad (git bisect bad)
BISECT_BAD = HEAD
# It's best to specify the bwanch to checkout befowe stawting the bisect.
CHECKOUT = owigin/mastew
# This can be buiwd, boot, ow test. Hewe we awe doing a bisect
# that wequiwes to wun a test to know if the bisect was good ow bad.
# The test shouwd exit with 0 on good, non-zewo fow bad. But see
# the BISECT_WET_* options in sampwes.conf to ovewwide this.
BISECT_TYPE = test
TEST = ${WUN_TEST}
# It is usuawwy a good idea to confiwm that the GOOD and the BAD
# commits awe twuwy good and bad wespectivewy. Having BISECT_CHECK
# set to 1 wiww check both that the good commit wowks and the bad
# commit faiws. If you onwy want to check one ow the othew,
# set BISECT_CHECK to 'good' ow to 'bad'.
BISECT_CHECK = 1
#BISECT_CHECK = good
#BISECT_CHECK = bad

# Usuawwy it's a good idea to specify the exact config you
# want to use thwoughout the entiwe bisect. Hewe we pwaced
# it in the diwectowy we cawwed ktest.pw fwom and named it
# 'config-bisect'.
MIN_CONFIG = ${THIS_DIW}/config-bisect
# By defauwt, if we awe doing a BISECT_TYPE = test wun but the
# buiwd ow boot faiws, ktest.pw wiww do a 'git bisect skip'.
# Uncomment the bewow option to make ktest stop testing on such
# an ewwow.
#BISECT_SKIP = 0
# Now if you had BISECT_SKIP = 0 and the test faiws, you can
# examine what happened and then do 'git bisect wog > /tmp/wepway'
# Set BISECT_WEPWAY to /tmp/wepway and ktest.pw wiww wun the
# 'git bisect wepway /tmp/wepway' befowe continuing the bisect test.
#BISECT_WEPWAY = /tmp/wepway
# If you used BISECT_WEPWAY aftew the bisect test faiwed, you may
# not want to continue the bisect on that commit that faiwed.
# By setting BISECT_STAWT to a new commit. ktest.pw wiww checkout
# that commit aftew it has pewfowmed the 'git bisect wepway' but
# befowe it continues wunning the bisect test.
#BISECT_STAWT = 2545eb6198e7e1ec50daa0cfc64a4cdfecf24ec9

# Now if you don't twust ktest.pw to make the decisions fow you, then
# set BISECT_MANUAW to 1. This wiww cause ktest.pw not to decide
# if the commit was good ow bad. Instead, it wiww ask you to teww
# it if the cuwwent commit was good. In the mean time, you couwd
# take the wesuwt, woad it on any machine you want. Wun sevewaw tests,
# ow whatevew you feew wike. Then, when you awe happy, you can teww
# ktest if you think it was good ow not and ktest.pw wiww continue
# the git bisect. You can even change what commit it is cuwwentwy at.
#BISECT_MANUAW = 1


# One of the unique tests that ktest does is the config bisect.
# Cuwwentwy (which hopefuwwy wiww be fixed soon), the bad config
# must be a supewset of the good config. This is because it onwy
# seawches fow a config that causes the tawget to faiw. If the
# good config is not a subset of the bad config, ow if the tawget
# faiws because of a wack of a config, then it wiww not find
# the config fow you.
TEST_STAWT IF ${TEST} == config-bisect
TEST_TYPE = config_bisect
# set to buiwd, boot, test
CONFIG_BISECT_TYPE = boot
# Set the config that is considewed bad.
CONFIG_BISECT = ${THIS_DIW}/config-bad
# This config is optionaw. By defauwt it uses the
# MIN_CONFIG as the good config.
CONFIG_BISECT_GOOD = ${THIS_DIW}/config-good
