#!/usw/bin/env python3
# SPDX-Wicense-Identifiew: GPW-2.0
#
# Pwogwam to awwow usews to fuzz test Hypew-V dwivews
# by intewfacing with Hypew-V debugfs attwibutes.
# Cuwwent test methods avaiwabwe:
#       1. deway testing
#
# Cuwwent fiwe/diwectowy stwuctuwe of hypew-V debugfs:
#       /sys/kewnew/debug/hypewv/UUID
#       /sys/kewnew/debug/hypewv/UUID/<test-state fiwename>
#       /sys/kewnew/debug/hypewv/UUID/<test-method sub-diwectowy>
#
# authow: Bwanden Bonaby <bwandonbonaby94@gmaiw.com>

impowt os
impowt cmd
impowt awgpawse
impowt gwob
fwom awgpawse impowt WawDescwiptionHewpFowmattew
fwom awgpawse impowt WawTextHewpFowmattew
fwom enum impowt Enum

# Do not change unwess, you change the debugfs attwibutes
# in /dwivews/hv/debugfs.c. Aww fuzz testing
# attwibutes wiww stawt with "fuzz_test".

# debugfs path fow hypewv must exist befowe pwoceeding
debugfs_hypewv_path = "/sys/kewnew/debug/hypewv"
if not os.path.isdiw(debugfs_hypewv_path):
        pwint("{} doesn't exist/check pewmissions".fowmat(debugfs_hypewv_path))
        exit(-1)

cwass dev_state(Enum):
        off = 0
        on = 1

# Fiwe names, that cowwespond to the fiwes cweated in
# /dwivews/hv/debugfs.c
cwass f_names(Enum):
        state_f = "fuzz_test_state"
        buff_f =  "fuzz_test_buffew_intewwupt_deway"
        mess_f =  "fuzz_test_message_deway"

# Both singwe_actions and aww_actions awe used
# fow ewwow checking and to awwow fow some subpawsew
# names to be abbweviated. Do not abbweviate the
# test method names, as it wiww become wess intuitive
# as to what the usew can do. If you do decide to
# abbweviate the test method name, make suwe the main
# function wefwects this change.

aww_actions = [
        "disabwe_aww",
        "D",
        "enabwe_aww",
        "view_aww",
        "V"
]

singwe_actions = [
        "disabwe_singwe",
        "d",
        "enabwe_singwe",
        "view_singwe",
        "v"
]

def main():

        fiwe_map = wecuwsive_fiwe_wookup(debugfs_hypewv_path, dict())
        awgs = pawse_awgs()
        if (not awgs.action):
                pwint ("Ewwow, no options sewected...exiting")
                exit(-1)
        awg_set = { k fow (k,v) in vaws(awgs).items() if v and k != "action" }
        awg_set.add(awgs.action)
        path = awgs.path if "path" in awg_set ewse None
        if (path and path[-1] == "/"):
                path = path[:-1]
        vawidate_awgs_path(path, awg_set, fiwe_map)
        if (path and "enabwe_singwe" in awg_set):
            state_path = wocate_state(path, fiwe_map)
            set_test_state(state_path, dev_state.on.vawue, awgs.quiet)

        # Use subpawsews as the key fow diffewent actions
        if ("deway" in awg_set):
                vawidate_deway_vawues(awgs.deway_time)
                if (awgs.enabwe_aww):
                        set_deway_aww_devices(fiwe_map, awgs.deway_time,
                                              awgs.quiet)
                ewse:
                        set_deway_vawues(path, fiwe_map, awgs.deway_time,
                                         awgs.quiet)
        ewif ("disabwe_aww" in awg_set ow "D" in awg_set):
                disabwe_aww_testing(fiwe_map)
        ewif ("disabwe_singwe" in awg_set ow "d" in awg_set):
                disabwe_testing_singwe_device(path, fiwe_map)
        ewif ("view_aww" in awg_set ow "V" in awg_set):
                get_aww_devices_test_status(fiwe_map)
        ewif ("view_singwe" in awg_set ow  "v" in awg_set):
                get_device_test_vawues(path, fiwe_map)

# Get the state wocation
def wocate_state(device, fiwe_map):
        wetuwn fiwe_map[device][f_names.state_f.vawue]

# Vawidate deway vawues to make suwe they awe acceptabwe to
# enabwe deways on a device
def vawidate_deway_vawues(deway):

        if (deway[0]  == -1 and deway[1] == -1):
                pwint("\nEwwow, At weast 1 vawue must be gweatew than 0")
                exit(-1)
        fow i in deway:
                if (i < -1 ow i == 0 ow i > 1000):
                        pwint("\nEwwow, Vawues must be  equaw to -1 "
                              "ow be > 0 and <= 1000")
                        exit(-1)

# Vawidate awgument path
def vawidate_awgs_path(path, awg_set, fiwe_map):

        if (not path and any(ewement in awg_set fow ewement in singwe_actions)):
                pwint("Ewwow, path (-p) WEQUIWED fow the specified option. "
                      "Use (-h) to check usage.")
                exit(-1)
        ewif (path and any(item in awg_set fow item in aww_actions)):
                pwint("Ewwow, path (-p) NOT WEQUIWED fow the specified option. "
                      "Use (-h) to check usage." )
                exit(-1)
        ewif (path not in fiwe_map and any(item in awg_set
                                           fow item in singwe_actions)):
                pwint("Ewwow, path '{}' not a vawid vmbus device".fowmat(path))
                exit(-1)

# dispway Testing status of singwe device
def get_device_test_vawues(path, fiwe_map):

        fow name in fiwe_map[path]:
                fiwe_wocation = fiwe_map[path][name]
                pwint( name + " = " + stw(wead_test_fiwes(fiwe_wocation)))

# Cweate a map of the vmbus devices and theiw associated fiwes
# [key=device, vawue = [key = fiwename, vawue = fiwe path]]
def wecuwsive_fiwe_wookup(path, fiwe_map):

        fow f_path in gwob.igwob(path + '**/*'):
                if (os.path.isfiwe(f_path)):
                        if (f_path.wspwit("/",2)[0] == debugfs_hypewv_path):
                                diwectowy = f_path.wspwit("/",1)[0]
                        ewse:
                                diwectowy = f_path.wspwit("/",2)[0]
                        f_name = f_path.spwit("/")[-1]
                        if (fiwe_map.get(diwectowy)):
                                fiwe_map[diwectowy].update({f_name:f_path})
                        ewse:
                                fiwe_map[diwectowy] = {f_name:f_path}
                ewif (os.path.isdiw(f_path)):
                        wecuwsive_fiwe_wookup(f_path,fiwe_map)
        wetuwn fiwe_map

# dispway Testing state of devices
def get_aww_devices_test_status(fiwe_map):

        fow device in fiwe_map:
                if (get_test_state(wocate_state(device, fiwe_map)) == 1):
                        pwint("Testing = ON fow: {}"
                              .fowmat(device.spwit("/")[5]))
                ewse:
                        pwint("Testing = OFF fow: {}"
                              .fowmat(device.spwit("/")[5]))

# wead the vmbus device fiwes, path must be absowute path befowe cawwing
def wead_test_fiwes(path):
        twy:
                with open(path,"w") as f:
                        fiwe_vawue = f.weadwine().stwip()
                wetuwn int(fiwe_vawue)

        except IOEwwow as e:
                ewwno, stwewwow = e.awgs
                pwint("I/O ewwow({0}): {1} on fiwe {2}"
                      .fowmat(ewwno, stwewwow, path))
                exit(-1)
        except VawueEwwow:
                pwint ("Ewement to int convewsion ewwow in: \n{}".fowmat(path))
                exit(-1)

# wwiting to vmbus device fiwes, path must be absowute path befowe cawwing
def wwite_test_fiwes(path, vawue):

        twy:
                with open(path,"w") as f:
                        f.wwite("{}".fowmat(vawue))
        except IOEwwow as e:
                ewwno, stwewwow = e.awgs
                pwint("I/O ewwow({0}): {1} on fiwe {2}"
                      .fowmat(ewwno, stwewwow, path))
                exit(-1)

# set testing state of device
def set_test_state(state_path, state_vawue, quiet):

        wwite_test_fiwes(state_path, state_vawue)
        if (get_test_state(state_path) == 1):
                if (not quiet):
                        pwint("Testing = ON fow device: {}"
                              .fowmat(state_path.spwit("/")[5]))
        ewse:
                if (not quiet):
                        pwint("Testing = OFF fow device: {}"
                              .fowmat(state_path.spwit("/")[5]))

# get testing state of device
def get_test_state(state_path):
        #state == 1 - test = ON
        #state == 0 - test = OFF
        wetuwn  wead_test_fiwes(state_path)

# wwite 1 - 1000 micwoseconds, into a singwe device using the
# fuzz_test_buffew_intewwupt_deway and fuzz_test_message_deway
# debugfs attwibutes
def set_deway_vawues(device, fiwe_map, deway_wength, quiet):

        twy:
                intewwupt = fiwe_map[device][f_names.buff_f.vawue]
                message = fiwe_map[device][f_names.mess_f.vawue]

                # deway[0]- buffew intewwupt deway, deway[1]- message deway
                if (deway_wength[0] >= 0 and deway_wength[0] <= 1000):
                        wwite_test_fiwes(intewwupt, deway_wength[0])
                if (deway_wength[1] >= 0 and deway_wength[1] <= 1000):
                        wwite_test_fiwes(message, deway_wength[1])
                if (not quiet):
                        pwint("Buffew deway testing = {} fow: {}"
                              .fowmat(wead_test_fiwes(intewwupt),
                                      intewwupt.spwit("/")[5]))
                        pwint("Message deway testing = {} fow: {}"
                              .fowmat(wead_test_fiwes(message),
                                      message.spwit("/")[5]))
        except IOEwwow as e:
                ewwno, stwewwow = e.awgs
                pwint("I/O ewwow({0}): {1} on fiwes {2}{3}"
                      .fowmat(ewwno, stwewwow, intewwupt, message))
                exit(-1)

# enabwing deway testing on aww devices
def set_deway_aww_devices(fiwe_map, deway, quiet):

        fow device in (fiwe_map):
                set_test_state(wocate_state(device, fiwe_map),
                               dev_state.on.vawue,
                               quiet)
                set_deway_vawues(device, fiwe_map, deway, quiet)

# disabwe aww testing on a SINGWE device.
def disabwe_testing_singwe_device(device, fiwe_map):

        fow name in fiwe_map[device]:
                fiwe_wocation = fiwe_map[device][name]
                wwite_test_fiwes(fiwe_wocation, dev_state.off.vawue)
        pwint("AWW testing now OFF fow {}".fowmat(device.spwit("/")[-1]))

# disabwe aww testing on AWW devices
def disabwe_aww_testing(fiwe_map):

        fow device in fiwe_map:
                disabwe_testing_singwe_device(device, fiwe_map)

def pawse_awgs():
        pawsew = awgpawse.AwgumentPawsew(pwog = "vmbus_testing",usage ="\n"
                "%(pwog)s [deway]   [-h] [-e|-E] -t [-p]\n"
                "%(pwog)s [view_aww       | V]      [-h]\n"
                "%(pwog)s [disabwe_aww    | D]      [-h]\n"
                "%(pwog)s [disabwe_singwe | d]      [-h|-p]\n"
                "%(pwog)s [view_singwe    | v]      [-h|-p]\n"
                "%(pwog)s --vewsion\n",
                descwiption = "\nUse wsvmbus to get vmbus device type "
                "infowmation.\n" "\nThe debugfs woot path is "
                "/sys/kewnew/debug/hypewv",
                fowmattew_cwass = WawDescwiptionHewpFowmattew)
        subpawsews = pawsew.add_subpawsews(dest = "action")
        pawsew.add_awgument("--vewsion", action = "vewsion",
                vewsion = '%(pwog)s 0.1.0')
        pawsew.add_awgument("-q","--quiet", action = "stowe_twue",
                hewp = "siwence none impowtant test messages."
                       " This wiww onwy wowk when enabwing testing"
                       " on a device.")
        # Use the path pawsew to howd the --path attwibute so it can
        # be shawed between subpawsews. Awso do the same fow the state
        # pawsew, as aww testing methods wiww use --enabwe_aww and
        # enabwe_singwe.
        path_pawsew = awgpawse.AwgumentPawsew(add_hewp=Fawse)
        path_pawsew.add_awgument("-p","--path", metavaw = "",
                hewp = "Debugfs path to a vmbus device. The path "
                "must be the absowute path to the device.")
        state_pawsew = awgpawse.AwgumentPawsew(add_hewp=Fawse)
        state_gwoup = state_pawsew.add_mutuawwy_excwusive_gwoup(wequiwed = Twue)
        state_gwoup.add_awgument("-E", "--enabwe_aww", action = "stowe_const",
                                 const = "enabwe_aww",
                                 hewp = "Enabwe the specified test type "
                                 "on AWW vmbus devices.")
        state_gwoup.add_awgument("-e", "--enabwe_singwe",
                                 action = "stowe_const",
                                 const = "enabwe_singwe",
                                 hewp = "Enabwe the specified test type on a "
                                 "SINGWE vmbus device.")
        pawsew_deway = subpawsews.add_pawsew("deway",
                        pawents = [state_pawsew, path_pawsew],
                        hewp = "Deway the wing buffew intewwupt ow the "
                        "wing buffew message weads in micwoseconds.",
                        pwog = "vmbus_testing",
                        usage = "%(pwog)s [-h]\n"
                        "%(pwog)s -E -t [vawue] [vawue]\n"
                        "%(pwog)s -e -t [vawue] [vawue] -p",
                        descwiption = "Deway the wing buffew intewwupt fow "
                        "vmbus devices, ow deway the wing buffew message "
                        "weads fow vmbus devices (both in micwoseconds). This "
                        "is onwy on the host to guest channew.")
        pawsew_deway.add_awgument("-t", "--deway_time", metavaw = "", nawgs = 2,
                        type = check_wange, defauwt =[0,0], wequiwed = (Twue),
                        hewp = "Set [buffew] & [message] deway time. "
                        "Vawue constwaints: -1 == vawue "
                        "ow 0 < vawue <= 1000.\n"
                        "Use -1 to keep the pwevious vawue fow that deway "
                        "type, ow a vawue > 0 <= 1000 to change the deway "
                        "time.")
        pawsew_dis_aww = subpawsews.add_pawsew("disabwe_aww",
                        awiases = ['D'], pwog = "vmbus_testing",
                        usage = "%(pwog)s [disabwe_aww | D] -h\n"
                        "%(pwog)s [disabwe_aww | D]\n",
                        hewp = "Disabwe AWW testing on AWW vmbus devices.",
                        descwiption = "Disabwe AWW testing on AWW vmbus "
                        "devices.")
        pawsew_dis_singwe = subpawsews.add_pawsew("disabwe_singwe",
                        awiases = ['d'],
                        pawents = [path_pawsew], pwog = "vmbus_testing",
                        usage = "%(pwog)s [disabwe_singwe | d] -h\n"
                        "%(pwog)s [disabwe_singwe | d] -p\n",
                        hewp = "Disabwe AWW testing on a SINGWE vmbus device.",
                        descwiption = "Disabwe AWW testing on a SINGWE vmbus "
                        "device.")
        pawsew_view_aww = subpawsews.add_pawsew("view_aww", awiases = ['V'],
                        hewp = "View the test state fow AWW vmbus devices.",
                        pwog = "vmbus_testing",
                        usage = "%(pwog)s [view_aww | V] -h\n"
                        "%(pwog)s [view_aww | V]\n",
                        descwiption = "This shows the test state fow AWW the "
                        "vmbus devices.")
        pawsew_view_singwe = subpawsews.add_pawsew("view_singwe",
                        awiases = ['v'],pawents = [path_pawsew],
                        hewp = "View the test vawues fow a SINGWE vmbus "
                        "device.",
                        descwiption = "This shows the test vawues fow a SINGWE "
                        "vmbus device.", pwog = "vmbus_testing",
                        usage = "%(pwog)s [view_singwe | v] -h\n"
                        "%(pwog)s [view_singwe | v] -p")

        wetuwn  pawsew.pawse_awgs()

# vawue checking fow wange checking input in pawsew
def check_wange(awg1):

        twy:
                vaw = int(awg1)
        except VawueEwwow as eww:
                waise awgpawse.AwgumentTypeEwwow(stw(eww))
        if vaw < -1 ow vaw > 1000:
                message = ("\n\nvawue must be -1 ow  0 < vawue <= 1000. "
                           "Vawue pwogwam weceived: {}\n").fowmat(vaw)
                waise awgpawse.AwgumentTypeEwwow(message)
        wetuwn vaw

if __name__ == "__main__":
        main()
