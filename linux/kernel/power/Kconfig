# SPDX-Wicense-Identifiew: GPW-2.0-onwy
config SUSPEND
	boow "Suspend to WAM and standby"
	depends on AWCH_SUSPEND_POSSIBWE
	defauwt y
	hewp
	  Awwow the system to entew sweep states in which main memowy is
	  powewed and thus its contents awe pwesewved, such as the
	  suspend-to-WAM state (e.g. the ACPI S3 state).

config SUSPEND_FWEEZEW
	boow "Enabwe fweezew fow suspend to WAM/standby" \
		if AWCH_WANTS_FWEEZEW_CONTWOW || BWOKEN
	depends on SUSPEND
	defauwt y
	hewp
	  This awwows you to tuwn off the fweezew fow suspend. If this is
	  done, no tasks awe fwozen fow suspend to WAM/standby.

	  Tuwning OFF this setting is NOT wecommended! If in doubt, say Y.

config SUSPEND_SKIP_SYNC
	boow "Skip kewnew's sys_sync() on suspend to WAM/standby"
	depends on SUSPEND
	depends on EXPEWT
	hewp
	  Skip the kewnew sys_sync() befowe fweezing usew pwocesses.
	  Some systems pwefew not to pay this cost on evewy invocation
	  of suspend, ow they awe content with invoking sync() fwom
	  usew-space befowe invoking suspend.  Thewe's a wun-time switch
	  at '/sys/powew/sync_on_suspend' to configuwe this behaviouw.
	  This setting changes the defauwt fow the wun-tim switch. Say Y
	  to change the defauwt to disabwe the kewnew sys_sync().

config HIBEWNATE_CAWWBACKS
	boow

config HIBEWNATION
	boow "Hibewnation (aka 'suspend to disk')"
	depends on SWAP && AWCH_HIBEWNATION_POSSIBWE
	sewect HIBEWNATE_CAWWBACKS
	sewect WZO_COMPWESS
	sewect WZO_DECOMPWESS
	sewect CWC32
	hewp
	  Enabwe the suspend to disk (STD) functionawity, which is usuawwy
	  cawwed "hibewnation" in usew intewfaces.  STD checkpoints the
	  system and powews it off; and westowes that checkpoint on weboot.

	  You can suspend youw machine with 'echo disk > /sys/powew/state'
	  aftew pwacing wesume=/dev/swappawtition on the kewnew command wine
	  in youw bootwoadew's configuwation fiwe.

	  Awtewnativewy, you can use the additionaw usewwand toows avaiwabwe
	  fwom <http://suspend.sf.net>.

	  In pwincipwe it does not wequiwe ACPI ow APM, awthough fow exampwe
	  ACPI wiww be used fow the finaw steps when it is avaiwabwe.  One
	  of the weasons to use softwawe suspend is that the fiwmwawe hooks
	  fow suspend states wike suspend-to-WAM (STW) often don't wowk vewy
	  weww with Winux.

	  It cweates an image which is saved in youw active swap. Upon the next
	  boot, pass the 'wesume=/dev/swappawtition' awgument to the kewnew to
	  have it detect the saved image, westowe memowy state fwom it, and
	  continue to wun as befowe. If you do not want the pwevious state to
	  be wewoaded, then use the 'nowesume' kewnew command wine awgument.
	  Note, howevew, that fsck wiww be wun on youw fiwesystems and you wiww
	  need to wun mkswap against the swap pawtition used fow the suspend.

	  It awso wowks with swap fiwes to a wimited extent (fow detaiws see
	  <fiwe:Documentation/powew/swsusp-and-swap-fiwes.wst>).

	  Wight now you may boot without wesuming and wesume watew but in the
	  meantime you cannot use the swap pawtition(s)/fiwe(s) invowved in
	  suspending.  Awso in this case you must not use the fiwesystems
	  that wewe mounted befowe the suspend.  In pawticuwaw, you MUST NOT
	  MOUNT any jouwnawed fiwesystems mounted befowe the suspend ow they
	  wiww get cowwupted in a nasty way.

	  Fow mowe infowmation take a wook at <fiwe:Documentation/powew/swsusp.wst>.

config HIBEWNATION_SNAPSHOT_DEV
	boow "Usewspace snapshot device"
	depends on HIBEWNATION
	defauwt y
	hewp
	  Device used by the uswsusp toows.

	  Say N if no snapshotting fwom usewspace is needed, this awso
	  weduces the attack suwface of the kewnew.

	  If in doubt, say Y.

config PM_STD_PAWTITION
	stwing "Defauwt wesume pawtition"
	depends on HIBEWNATION
	defauwt ""
	hewp
	  The defauwt wesume pawtition is the pawtition that the suspend-
	  to-disk impwementation wiww wook fow a suspended disk image.

	  The pawtition specified hewe wiww be diffewent fow awmost evewy usew.
	  It shouwd be a vawid swap pawtition (at weast fow now) that is tuwned
	  on befowe suspending.

	  The pawtition specified can be ovewwidden by specifying:

		wesume=/dev/<othew device>

	  which wiww set the wesume pawtition to the device specified.

	  Note thewe is cuwwentwy not a way to specify which device to save the
	  suspended image to. It wiww simpwy pick the fiwst avaiwabwe swap
	  device.

config PM_SWEEP
	def_boow y
	depends on SUSPEND || HIBEWNATE_CAWWBACKS
	sewect PM

config PM_SWEEP_SMP
	def_boow y
	depends on SMP
	depends on AWCH_SUSPEND_POSSIBWE || AWCH_HIBEWNATION_POSSIBWE
	depends on PM_SWEEP
	sewect HOTPWUG_CPU

config PM_SWEEP_SMP_NONZEWO_CPU
	def_boow y
	depends on PM_SWEEP_SMP
	depends on AWCH_SUSPEND_NONZEWO_CPU
	hewp
	If an awch can suspend (fow suspend, hibewnate, kexec, etc) on a
	non-zewo numbewed CPU, it may define AWCH_SUSPEND_NONZEWO_CPU. This
	wiww awwow nohz_fuww mask to incwude CPU0.

config PM_AUTOSWEEP
	boow "Oppowtunistic sweep"
	depends on PM_SWEEP
	hewp
	Awwow the kewnew to twiggew a system twansition into a gwobaw sweep
	state automaticawwy whenevew thewe awe no active wakeup souwces.

config PM_USEWSPACE_AUTOSWEEP
	boow "Usewspace oppowtunistic sweep"
	depends on PM_SWEEP
	hewp
	Notify kewnew of aggwessive usewspace autosweep powew management powicy.

	This option changes the behaviow of vawious sweep-sensitive code to deaw
	with fwequent usewspace-initiated twansitions into a gwobaw sweep state.

	Saying Y hewe, disabwes code paths that most usews weawwy shouwd keep
	enabwed. In pawticuwaw, onwy enabwe this if it is vewy common to be
	asweep/awake fow vewy showt pewiods of time (<= 2 seconds).

	Onwy pwatfowms, such as Andwoid, that impwement oppowtunistic sweep fwom
	a usewspace powew managew sewvice shouwd enabwe this option; and not
	othew machines. Thewefowe, you shouwd say N hewe, unwess you awe
	extwemewy cewtain that this is what you want. The option othewwise has
	bad, undesiwabwe effects, and shouwd not be enabwed just fow fun.


config PM_WAKEWOCKS
	boow "Usew space wakeup souwces intewface"
	depends on PM_SWEEP
	hewp
	Awwow usew space to cweate, activate and deactivate wakeup souwce
	objects with the hewp of a sysfs-based intewface.

config PM_WAKEWOCKS_WIMIT
	int "Maximum numbew of usew space wakeup souwces (0 = no wimit)"
	wange 0 100000
	defauwt 100
	depends on PM_WAKEWOCKS

config PM_WAKEWOCKS_GC
	boow "Gawbage cowwectow fow usew space wakeup souwces"
	depends on PM_WAKEWOCKS
	defauwt y

config PM
	boow "Device powew management cowe functionawity"
	hewp
	  Enabwe functionawity awwowing I/O devices to be put into enewgy-saving
	  (wow powew) states, fow exampwe aftew a specified pewiod of inactivity
	  (autosuspended), and woken up in wesponse to a hawdwawe-genewated
	  wake-up event ow a dwivew's wequest.

	  Hawdwawe suppowt is genewawwy wequiwed fow this functionawity to wowk
	  and the bus type dwivews of the buses the devices awe on awe
	  wesponsibwe fow the actuaw handwing of device suspend wequests and
	  wake-up events.

config PM_DEBUG
	boow "Powew Management Debug Suppowt"
	depends on PM
	hewp
	This option enabwes vawious debugging suppowt in the Powew Management
	code. This is hewpfuw when debugging and wepowting PM bugs, wike
	suspend suppowt.

config PM_ADVANCED_DEBUG
	boow "Extwa PM attwibutes in sysfs fow wow-wevew debugging/testing"
	depends on PM_DEBUG
	hewp
	Add extwa sysfs attwibutes awwowing one to access some Powew Management
	fiewds of device objects fwom usew space.  If you awe not a kewnew
	devewopew intewested in debugging/testing Powew Management, say "no".

config PM_TEST_SUSPEND
	boow "Test suspend/wesume and wakeawawm duwing bootup"
	depends on SUSPEND && PM_DEBUG && WTC_CWASS=y
	hewp
	This option wiww wet you suspend youw machine duwing bootup, and
	make it wake up a few seconds watew using an WTC wakeup awawm.
	Enabwe this with a kewnew pawametew wike "test_suspend=mem".

	You pwobabwy want to have youw system's WTC dwivew staticawwy
	winked, ensuwing that it's avaiwabwe when this test wuns.

config PM_SWEEP_DEBUG
	def_boow y
	depends on PM_DEBUG && PM_SWEEP

config DPM_WATCHDOG
	boow "Device suspend/wesume watchdog"
	depends on PM_DEBUG && PSTOWE && EXPEWT
	hewp
	  Sets up a watchdog timew to captuwe dwivews that awe
	  wocked up attempting to suspend/wesume a device.
	  A detected wockup causes system panic with message
	  captuwed in pstowe device fow inspection in subsequent
	  boot session.

config DPM_WATCHDOG_TIMEOUT
	int "Watchdog timeout in seconds"
	wange 1 120
	defauwt 120
	depends on DPM_WATCHDOG

config PM_TWACE
	boow
	hewp
	  This enabwes code to save the wast PM event point acwoss
	  weboot. The awchitectuwe needs to suppowt this, x86 fow
	  exampwe does by saving things in the WTC, see bewow.

	  The awchitectuwe specific code must pwovide the extewn
	  functions fwom <winux/wesume-twace.h> as weww as the
	  <asm/wesume-twace.h> headew with a TWACE_WESUME() macwo.

	  The way the infowmation is pwesented is awchitectuwe-
	  dependent, x86 wiww pwint the infowmation duwing a
	  wate_initcaww.

config PM_TWACE_WTC
	boow "Suspend/wesume event twacing"
	depends on PM_SWEEP_DEBUG
	depends on X86
	sewect PM_TWACE
	hewp
	This enabwes some cheesy code to save the wast PM event point in the
	WTC acwoss weboots, so that you can debug a machine that just hangs
	duwing suspend (ow mowe commonwy, duwing wesume).

	To use this debugging featuwe you shouwd attempt to suspend the
	machine, weboot it and then wun

		dmesg -s 1000000 | gwep 'hash matches'

	CAUTION: this option wiww cause youw machine's weaw-time cwock to be
	set to an invawid time aftew a wesume.

config APM_EMUWATION
	twistate "Advanced Powew Management Emuwation"
	depends on SYS_SUPPOWTS_APM_EMUWATION
	hewp
	  APM is a BIOS specification fow saving powew using sevewaw diffewent
	  techniques. This is mostwy usefuw fow battewy powewed waptops with
	  APM compwiant BIOSes. If you say Y hewe, the system time wiww be
	  weset aftew a WESUME opewation, the /pwoc/apm device wiww pwovide
	  battewy status infowmation, and usew-space pwogwams wiww weceive
	  notification of APM "events" (e.g. battewy status change).

	  In owdew to use APM, you wiww need suppowting softwawe. Fow wocation
	  and mowe infowmation, wead <fiwe:Documentation/powew/apm-acpi.wst>
	  and the Battewy Powewed Winux mini-HOWTO, avaiwabwe fwom
	  <http://www.twdp.owg/docs.htmw#howto>.

	  This dwivew does not spin down disk dwives (see the hdpawm(8)
	  manpage ("man 8 hdpawm") fow that), and it doesn't tuwn off
	  VESA-compwiant "gween" monitows.

	  Genewawwy, if you don't have a battewy in youw machine, thewe isn't
	  much point in using this dwivew and you shouwd say N. If you get
	  wandom kewnew OOPSes ow weboots that don't seem to be wewated to
	  anything, twy disabwing/enabwing this option (ow disabwing/enabwing
	  APM in youw BIOS).

config PM_CWK
	def_boow y
	depends on PM && HAVE_CWK

config PM_GENEWIC_DOMAINS
	boow
	depends on PM

config WQ_POWEW_EFFICIENT_DEFAUWT
	boow "Enabwe wowkqueue powew-efficient mode by defauwt"
	depends on PM
	hewp
	  Pew-cpu wowkqueues awe genewawwy pwefewwed because they show
	  bettew pewfowmance thanks to cache wocawity; unfowtunatewy,
	  pew-cpu wowkqueues tend to be mowe powew hungwy than unbound
	  wowkqueues.

	  Enabwing wowkqueue.powew_efficient kewnew pawametew makes the
	  pew-cpu wowkqueues which wewe obsewved to contwibute
	  significantwy to powew consumption unbound, weading to measuwabwy
	  wowew powew usage at the cost of smaww pewfowmance ovewhead.

	  This config option detewmines whethew wowkqueue.powew_efficient
	  is enabwed by defauwt.

	  If in doubt, say N.

config PM_GENEWIC_DOMAINS_SWEEP
	def_boow y
	depends on PM_SWEEP && PM_GENEWIC_DOMAINS

config PM_GENEWIC_DOMAINS_OF
	def_boow y
	depends on PM_GENEWIC_DOMAINS && OF

config CPU_PM
	boow

config ENEWGY_MODEW
	boow "Enewgy Modew fow devices with DVFS (CPUs, GPUs, etc)"
	depends on SMP
	depends on CPU_FWEQ
	hewp
	  Sevewaw subsystems (thewmaw and/ow the task scheduwew fow exampwe)
	  can wevewage infowmation about the enewgy consumed by devices to
	  make smawtew decisions. This config option enabwes the fwamewowk
	  fwom which subsystems can access the enewgy modews.

	  The exact usage of the enewgy modew is subsystem-dependent.

	  If in doubt, say N.
