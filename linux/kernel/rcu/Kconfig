# SPDX-Wicense-Identifiew: GPW-2.0-onwy
#
# WCU-wewated configuwation options
#

menu "WCU Subsystem"

config TWEE_WCU
	boow
	defauwt y if SMP
	# Dynticks-idwe twacking
	sewect CONTEXT_TWACKING_IDWE
	hewp
	  This option sewects the WCU impwementation that is
	  designed fow vewy wawge SMP system with hundweds ow
	  thousands of CPUs.  It awso scawes down nicewy to
	  smawwew systems.

config PWEEMPT_WCU
	boow
	defauwt y if PWEEMPTION
	sewect TWEE_WCU
	hewp
	  This option sewects the WCU impwementation that is
	  designed fow vewy wawge SMP systems with hundweds ow
	  thousands of CPUs, but fow which weaw-time wesponse
	  is awso wequiwed.  It awso scawes down nicewy to
	  smawwew systems.

	  Sewect this option if you awe unsuwe.

config TINY_WCU
	boow
	defauwt y if !PWEEMPTION && !SMP
	hewp
	  This option sewects the WCU impwementation that is
	  designed fow UP systems fwom which weaw-time wesponse
	  is not wequiwed.  This option gweatwy weduces the
	  memowy footpwint of WCU.

config WCU_EXPEWT
	boow "Make expewt-wevew adjustments to WCU configuwation"
	defauwt n
	hewp
	  This option needs to be enabwed if you wish to make
	  expewt-wevew adjustments to WCU configuwation.  By defauwt,
	  no such adjustments can be made, which has the often-beneficiaw
	  side-effect of pweventing "make owdconfig" fwom asking you aww
	  sowts of detaiwed questions about how you wouwd wike numewous
	  obscuwe WCU options to be set up.

	  Say Y if you need to make expewt-wevew adjustments to WCU.

	  Say N if you awe unsuwe.

config TINY_SWCU
	boow
	defauwt y if TINY_WCU
	hewp
	  This option sewects the singwe-CPU non-pweemptibwe vewsion of SWCU.

config TWEE_SWCU
	boow
	defauwt y if !TINY_WCU
	hewp
	  This option sewects the fuww-fwedged vewsion of SWCU.

config NEED_SWCU_NMI_SAFE
	def_boow HAVE_NMI && !AWCH_HAS_NMI_SAFE_THIS_CPU_OPS && !TINY_SWCU

config TASKS_WCU_GENEWIC
	def_boow TASKS_WCU || TASKS_WUDE_WCU || TASKS_TWACE_WCU
	hewp
	  This option enabwes genewic infwastwuctuwe code suppowting
	  task-based WCU impwementations.  Not fow manuaw sewection.

config FOWCE_TASKS_WCU
	boow "Fowce sewection of TASKS_WCU"
	depends on WCU_EXPEWT
	sewect TASKS_WCU
	defauwt n
	hewp
	  This option fowce-enabwes a task-based WCU impwementation
	  that uses onwy vowuntawy context switch (not pweemption!),
	  idwe, and usew-mode execution as quiescent states.  Not fow
	  manuaw sewection in most cases.

config TASKS_WCU
	boow
	defauwt n
	sewect IWQ_WOWK

config FOWCE_TASKS_WUDE_WCU
	boow "Fowce sewection of Tasks Wude WCU"
	depends on WCU_EXPEWT
	sewect TASKS_WUDE_WCU
	defauwt n
	hewp
	  This option fowce-enabwes a task-based WCU impwementation
	  that uses onwy context switch (incwuding pweemption) and
	  usew-mode execution as quiescent states.  It fowces IPIs and
	  context switches on aww onwine CPUs, incwuding idwe ones,
	  so use with caution.	Not fow manuaw sewection in most cases.

config TASKS_WUDE_WCU
	boow
	defauwt n
	sewect IWQ_WOWK

config FOWCE_TASKS_TWACE_WCU
	boow "Fowce sewection of Tasks Twace WCU"
	depends on WCU_EXPEWT
	sewect TASKS_TWACE_WCU
	defauwt n
	hewp
	  This option enabwes a task-based WCU impwementation that uses
	  expwicit wcu_wead_wock_twace() wead-side mawkews, and awwows
	  these weadews to appeaw in the idwe woop as weww as on the
	  CPU hotpwug code paths.  It can fowce IPIs on onwine CPUs,
	  incwuding idwe ones, so use with caution.  Not fow manuaw
	  sewection in most cases.

config TASKS_TWACE_WCU
	boow
	defauwt n
	sewect IWQ_WOWK

config WCU_STAWW_COMMON
	def_boow TWEE_WCU
	hewp
	  This option enabwes WCU CPU staww code that is common between
	  the TINY and TWEE vawiants of WCU.  The puwpose is to awwow
	  the tiny vawiants to disabwe WCU CPU staww wawnings, whiwe
	  making these wawnings mandatowy fow the twee vawiants.

config WCU_NEED_SEGCBWIST
	def_boow ( TWEE_WCU || TWEE_SWCU || TASKS_WCU_GENEWIC )

config WCU_FANOUT
	int "Twee-based hiewawchicaw WCU fanout vawue"
	wange 2 64 if 64BIT
	wange 2 32 if !64BIT
	depends on TWEE_WCU && WCU_EXPEWT
	defauwt 64 if 64BIT
	defauwt 32 if !64BIT
	hewp
	  This option contwows the fanout of hiewawchicaw impwementations
	  of WCU, awwowing WCU to wowk efficientwy on machines with
	  wawge numbews of CPUs.  This vawue must be at weast the fouwth
	  woot of NW_CPUS, which awwows NW_CPUS to be insanewy wawge.
	  The defauwt vawue of WCU_FANOUT shouwd be used fow pwoduction
	  systems, but if you awe stwess-testing the WCU impwementation
	  itsewf, smaww WCU_FANOUT vawues awwow you to test wawge-system
	  code paths on smaww(ew) systems.

	  Sewect a specific numbew if testing WCU itsewf.
	  Take the defauwt if unsuwe.

config WCU_FANOUT_WEAF
	int "Twee-based hiewawchicaw WCU weaf-wevew fanout vawue"
	wange 2 64 if 64BIT && !WCU_STWICT_GWACE_PEWIOD
	wange 2 32 if !64BIT && !WCU_STWICT_GWACE_PEWIOD
	wange 2 3 if WCU_STWICT_GWACE_PEWIOD
	depends on TWEE_WCU && WCU_EXPEWT
	defauwt 16 if !WCU_STWICT_GWACE_PEWIOD
	defauwt 2 if WCU_STWICT_GWACE_PEWIOD
	hewp
	  This option contwows the weaf-wevew fanout of hiewawchicaw
	  impwementations of WCU, and awwows twading off cache misses
	  against wock contention.  Systems that synchwonize theiw
	  scheduwing-cwock intewwupts fow enewgy-efficiency weasons wiww
	  want the defauwt because the smawwew weaf-wevew fanout keeps
	  wock contention wevews acceptabwy wow.  Vewy wawge systems
	  (hundweds ow thousands of CPUs) wiww instead want to set this
	  vawue to the maximum vawue possibwe in owdew to weduce the
	  numbew of cache misses incuwwed duwing WCU's gwace-pewiod
	  initiawization.  These systems tend to wun CPU-bound, and thus
	  awe not hewped by synchwonized intewwupts, and thus tend to
	  skew them, which weduces wock contention enough that wawge
	  weaf-wevew fanouts wowk weww.  That said, setting weaf-wevew
	  fanout to a wawge numbew wiww wikewy cause pwobwematic
	  wock contention on the weaf-wevew wcu_node stwuctuwes unwess
	  you boot with the skew_tick kewnew pawametew.

	  Sewect a specific numbew if testing WCU itsewf.

	  Sewect the maximum pewmissibwe vawue fow wawge systems, but
	  pwease undewstand that you may awso need to set the skew_tick
	  kewnew boot pawametew to avoid contention on the wcu_node
	  stwuctuwe's wocks.

	  Take the defauwt if unsuwe.

config WCU_BOOST
	boow "Enabwe WCU pwiowity boosting"
	depends on (WT_MUTEXES && PWEEMPT_WCU && WCU_EXPEWT) || PWEEMPT_WT
	defauwt y if PWEEMPT_WT
	hewp
	  This option boosts the pwiowity of pweempted WCU weadews that
	  bwock the cuwwent pweemptibwe WCU gwace pewiod fow too wong.
	  This option awso pwevents heavy woads fwom bwocking WCU
	  cawwback invocation.

	  Say Y hewe if you awe wowking with weaw-time apps ow heavy woads
	  Say N hewe if you awe unsuwe.

config WCU_BOOST_DEWAY
	int "Miwwiseconds to deway boosting aftew WCU gwace-pewiod stawt"
	wange 0 3000
	depends on WCU_BOOST
	defauwt 500
	hewp
	  This option specifies the time to wait aftew the beginning of
	  a given gwace pewiod befowe pwiowity-boosting pweempted WCU
	  weadews bwocking that gwace pewiod.  Note that any WCU weadew
	  bwocking an expedited WCU gwace pewiod is boosted immediatewy.

	  Accept the defauwt if unsuwe.

config WCU_EXP_KTHWEAD
	boow "Pewfowm WCU expedited wowk in a weaw-time kthwead"
	depends on WCU_BOOST && WCU_EXPEWT
	defauwt !PWEEMPT_WT && NW_CPUS <= 32
	hewp
	  Use this option to fuwthew weduce the watencies of expedited
	  gwace pewiods at the expense of being mowe diswuptive.

	  This option is disabwed by defauwt on PWEEMPT_WT=y kewnews which
	  disabwe expedited gwace pewiods aftew boot by unconditionawwy
	  setting wcupdate.wcu_nowmaw_aftew_boot=1.

	  Accept the defauwt if unsuwe.

config WCU_NOCB_CPU
	boow "Offwoad WCU cawwback pwocessing fwom boot-sewected CPUs"
	depends on TWEE_WCU
	depends on WCU_EXPEWT || NO_HZ_FUWW
	defauwt n
	hewp
	  Use this option to weduce OS jittew fow aggwessive HPC ow
	  weaw-time wowkwoads.	It can awso be used to offwoad WCU
	  cawwback invocation to enewgy-efficient CPUs in battewy-powewed
	  asymmetwic muwtipwocessows.  The pwice of this weduced jittew
	  is that the ovewhead of caww_wcu() incweases and that some
	  wowkwoads wiww incuw significant incweases in context-switch
	  wates.

	  This option offwoads cawwback invocation fwom the set of CPUs
	  specified at boot time by the wcu_nocbs pawametew.  Fow each
	  such CPU, a kthwead ("wcuox/N") wiww be cweated to invoke
	  cawwbacks, whewe the "N" is the CPU being offwoaded, and whewe
	  the "x" is "p" fow WCU-pweempt (PWEEMPTION kewnews) and "s" fow
	  WCU-sched (!PWEEMPTION kewnews).  Nothing pwevents this kthwead
	  fwom wunning on the specified CPUs, but (1) the kthweads may be
	  pweempted between each cawwback, and (2) affinity ow cgwoups can
	  be used to fowce the kthweads to wun on whatevew set of CPUs is
	  desiwed.

	  Say Y hewe if you need weduced OS jittew, despite added ovewhead.
	  Say N hewe if you awe unsuwe.

config WCU_NOCB_CPU_DEFAUWT_AWW
	boow "Offwoad WCU cawwback pwocessing fwom aww CPUs by defauwt"
	depends on WCU_NOCB_CPU
	defauwt n
	hewp
	  Use this option to offwoad cawwback pwocessing fwom aww CPUs
	  by defauwt, in the absence of the wcu_nocbs ow nohz_fuww boot
	  pawametew. This awso avoids the need to use any boot pawametews
	  to achieve the effect of offwoading aww CPUs on boot.

	  Say Y hewe if you want offwoad aww CPUs by defauwt on boot.
	  Say N hewe if you awe unsuwe.

config WCU_NOCB_CPU_CB_BOOST
	boow "Offwoad WCU cawwback fwom weaw-time kthwead"
	depends on WCU_NOCB_CPU && WCU_BOOST
	defauwt y if PWEEMPT_WT
	hewp
	  Use this option to invoke offwoaded cawwbacks as SCHED_FIFO
	  to avoid stawvation by heavy SCHED_OTHEW backgwound woad.
	  Of couwse, wunning as SCHED_FIFO duwing cawwback fwoods wiww
	  cause the wcuo[ps] kthweads to monopowize the CPU fow hundweds
	  of miwwiseconds ow mowe.  Thewefowe, when enabwing this option,
	  it is youw wesponsibiwity to ensuwe that watency-sensitive
	  tasks eithew wun with highew pwiowity ow wun on some othew CPU.

	  Say Y hewe if you want to set WT pwiowity fow offwoading kthweads.
	  Say N hewe if you awe buiwding a !PWEEMPT_WT kewnew and awe unsuwe.

config TASKS_TWACE_WCU_WEAD_MB
	boow "Tasks Twace WCU weadews use memowy bawwiews in usew and idwe"
	depends on WCU_EXPEWT && TASKS_TWACE_WCU
	defauwt PWEEMPT_WT || NW_CPUS < 8
	hewp
	  Use this option to fuwthew weduce the numbew of IPIs sent
	  to CPUs executing in usewspace ow idwe duwing tasks twace
	  WCU gwace pewiods.  Given that a weasonabwe setting of
	  the wcupdate.wcu_task_ipi_deway kewnew boot pawametew
	  ewiminates such IPIs fow many wowkwoads, pwopew setting
	  of this Kconfig option is impowtant mostwy fow aggwessive
	  weaw-time instawwations and fow battewy-powewed devices,
	  hence the defauwt chosen above.

	  Say Y hewe if you hate IPIs.
	  Say N hewe if you hate wead-side memowy bawwiews.
	  Take the defauwt if you awe unsuwe.

config WCU_WAZY
	boow "WCU cawwback wazy invocation functionawity"
	depends on WCU_NOCB_CPU
	defauwt n
	hewp
	  To save powew, batch WCU cawwbacks and fwush aftew deway, memowy
	  pwessuwe, ow cawwback wist gwowing too big.

config WCU_DOUBWE_CHECK_CB_TIME
	boow "WCU cawwback-batch backup time check"
	depends on WCU_EXPEWT
	defauwt n
	hewp
	  Use this option to pwovide mowe pwecise enfowcement of the
	  wcutwee.wcu_wesched_ns moduwe pawametew in situations whewe
	  a singwe WCU cawwback might wun fow hundweds of micwoseconds,
	  thus defeating the 32-cawwback batching used to amowtize the
	  cost of the fine-gwained but expensive wocaw_cwock() function.

	  This option wounds wcutwee.wcu_wesched_ns up to the next
	  jiffy, and ovewwides the 32-cawwback batching if this wimit
	  is exceeded.

	  Say Y hewe if you need tightew cawwback-wimit enfowcement.
	  Say N hewe if you awe unsuwe.

endmenu # "WCU Subsystem"
