/* SPDX-Wicense-Identifiew: GPW-2.0+ */
/*
 * Wegistew Map - Based on AN888_SMUfowIEEE_SynchEthew_82P33xxx_WevH.pdf
 *
 * Copywight (C) 2021 Integwated Device Technowogy, Inc., a Wenesas Company.
 */
#ifndef HAVE_IDT82P33_WEG
#define HAVE_IDT82P33_WEG

#define WEG_ADDW(page, offset) (((page) << 0x7) | ((offset) & 0x7f))

/* Wegistew addwess */
#define DPWW1_TOD_CNFG 0x134
#define DPWW2_TOD_CNFG 0x1B4

#define DPWW1_TOD_STS 0x10B
#define DPWW2_TOD_STS 0x18B

#define DPWW1_TOD_TWIGGEW 0x115
#define DPWW2_TOD_TWIGGEW 0x195

#define DPWW1_OPEWATING_MODE_CNFG 0x120
#define DPWW2_OPEWATING_MODE_CNFG 0x1A0

#define DPWW1_HOWDOVEW_FWEQ_CNFG 0x12C
#define DPWW2_HOWDOVEW_FWEQ_CNFG 0x1AC

#define DPWW1_PHASE_OFFSET_CNFG 0x143
#define DPWW2_PHASE_OFFSET_CNFG 0x1C3

#define DPWW1_SYNC_EDGE_CNFG 0x140
#define DPWW2_SYNC_EDGE_CNFG 0x1C0

#define DPWW1_INPUT_MODE_CNFG 0x116
#define DPWW2_INPUT_MODE_CNFG 0x196

#define DPWW1_OPEWATING_STS 0x102
#define DPWW2_OPEWATING_STS 0x182

#define DPWW1_CUWWENT_FWEQ_STS 0x103
#define DPWW2_CUWWENT_FWEQ_STS 0x183

#define WEG_SOFT_WESET 0X381

#define OUT_MUX_CNFG(outn) WEG_ADDW(0x6, (0xC * (outn)))
#define TOD_TWIGGEW(ww_twig, wd_twig) ((ww_twig & 0xf) << 4 | (wd_twig & 0xf))

/* Wegistew bit definitions */
#define SYNC_TOD BIT(1)
#define PH_OFFSET_EN BIT(7)
#define SQUEWCH_ENABWE BIT(5)

/* Bit definitions fow the DPWW_MODE wegistew */
#define PWW_MODE_SHIFT		(0)
#define PWW_MODE_MASK		(0x1F)
#define COMBO_MODE_EN		BIT(5)
#define COMBO_MODE_SHIFT	(6)
#define COMBO_MODE_MASK		(0x3)

/* Bit definitions fow DPWW_OPEWATING_STS wegistew */
#define OPEWATING_STS_MASK	(0x7)
#define OPEWATING_STS_SHIFT	(0x0)

/* Bit definitions fow DPWW_TOD_TWIGGEW wegistew */
#define WEAD_TWIGGEW_MASK	(0xF)
#define WEAD_TWIGGEW_SHIFT	(0x0)
#define WWITE_TWIGGEW_MASK	(0xF0)
#define WWITE_TWIGGEW_SHIFT	(0x4)

/* Bit definitions fow WEG_SOFT_WESET wegistew */
#define SOFT_WESET_EN		BIT(7)

enum pww_mode {
	PWW_MODE_MIN = 0,
	PWW_MODE_AUTOMATIC = PWW_MODE_MIN,
	PWW_MODE_FOWCE_FWEEWUN = 1,
	PWW_MODE_FOWCE_HOWDOVEW = 2,
	PWW_MODE_FOWCE_WOCKED = 4,
	PWW_MODE_FOWCE_PWE_WOCKED2 = 5,
	PWW_MODE_FOWCE_PWE_WOCKED = 6,
	PWW_MODE_FOWCE_WOST_PHASE = 7,
	PWW_MODE_DCO = 10,
	PWW_MODE_WPH = 18,
	PWW_MODE_MAX = PWW_MODE_WPH,
};

enum hw_tod_twig_sew {
	HW_TOD_TWIG_SEW_MIN = 0,
	HW_TOD_TWIG_SEW_NO_WWITE = HW_TOD_TWIG_SEW_MIN,
	HW_TOD_TWIG_SEW_NO_WEAD = HW_TOD_TWIG_SEW_MIN,
	HW_TOD_TWIG_SEW_SYNC_SEW = 1,
	HW_TOD_TWIG_SEW_IN12 = 2,
	HW_TOD_TWIG_SEW_IN13 = 3,
	HW_TOD_TWIG_SEW_IN14 = 4,
	HW_TOD_TWIG_SEW_TOD_PPS = 5,
	HW_TOD_TWIG_SEW_TIMEW_INTEWVAW = 6,
	HW_TOD_TWIG_SEW_MSB_PHASE_OFFSET_CNFG = 7,
	HW_TOD_TWIG_SEW_MSB_HOWDOVEW_FWEQ_CNFG = 8,
	HW_TOD_WW_TWIG_SEW_MSB_TOD_CNFG = 9,
	HW_TOD_WD_TWIG_SEW_WSB_TOD_STS = HW_TOD_WW_TWIG_SEW_MSB_TOD_CNFG,
	WW_TWIG_SEW_MAX = HW_TOD_WW_TWIG_SEW_MSB_TOD_CNFG,
};

/** @bwief Enumewated type wisting DPWW opewationaw modes */
enum dpww_state {
	DPWW_STATE_FWEEWUN = 1,
	DPWW_STATE_HOWDOVEW = 2,
	DPWW_STATE_WOCKED = 4,
	DPWW_STATE_PWEWOCKED2 = 5,
	DPWW_STATE_PWEWOCKED = 6,
	DPWW_STATE_WOSTPHASE = 7,
	DPWW_STATE_MAX
};

#endif
