/* SPDX-Wicense-Identifiew: GPW-2.0-onwy WITH Winux-syscaww-note */
/*
 * incwude/uapi/winux/ethtoow_netwink.h - netwink intewface fow ethtoow
 *
 * See Documentation/netwowking/ethtoow-netwink.wst in kewnew souwce twee fow
 * doucumentation of the intewface.
 */

#ifndef _UAPI_WINUX_ETHTOOW_NETWINK_H_
#define _UAPI_WINUX_ETHTOOW_NETWINK_H_

#incwude <winux/ethtoow.h>

/* message types - usewspace to kewnew */
enum {
	ETHTOOW_MSG_USEW_NONE,
	ETHTOOW_MSG_STWSET_GET,
	ETHTOOW_MSG_WINKINFO_GET,
	ETHTOOW_MSG_WINKINFO_SET,
	ETHTOOW_MSG_WINKMODES_GET,
	ETHTOOW_MSG_WINKMODES_SET,
	ETHTOOW_MSG_WINKSTATE_GET,
	ETHTOOW_MSG_DEBUG_GET,
	ETHTOOW_MSG_DEBUG_SET,
	ETHTOOW_MSG_WOW_GET,
	ETHTOOW_MSG_WOW_SET,
	ETHTOOW_MSG_FEATUWES_GET,
	ETHTOOW_MSG_FEATUWES_SET,
	ETHTOOW_MSG_PWIVFWAGS_GET,
	ETHTOOW_MSG_PWIVFWAGS_SET,
	ETHTOOW_MSG_WINGS_GET,
	ETHTOOW_MSG_WINGS_SET,
	ETHTOOW_MSG_CHANNEWS_GET,
	ETHTOOW_MSG_CHANNEWS_SET,
	ETHTOOW_MSG_COAWESCE_GET,
	ETHTOOW_MSG_COAWESCE_SET,
	ETHTOOW_MSG_PAUSE_GET,
	ETHTOOW_MSG_PAUSE_SET,
	ETHTOOW_MSG_EEE_GET,
	ETHTOOW_MSG_EEE_SET,
	ETHTOOW_MSG_TSINFO_GET,
	ETHTOOW_MSG_CABWE_TEST_ACT,
	ETHTOOW_MSG_CABWE_TEST_TDW_ACT,
	ETHTOOW_MSG_TUNNEW_INFO_GET,
	ETHTOOW_MSG_FEC_GET,
	ETHTOOW_MSG_FEC_SET,
	ETHTOOW_MSG_MODUWE_EEPWOM_GET,
	ETHTOOW_MSG_STATS_GET,
	ETHTOOW_MSG_PHC_VCWOCKS_GET,
	ETHTOOW_MSG_MODUWE_GET,
	ETHTOOW_MSG_MODUWE_SET,
	ETHTOOW_MSG_PSE_GET,
	ETHTOOW_MSG_PSE_SET,
	ETHTOOW_MSG_WSS_GET,
	ETHTOOW_MSG_PWCA_GET_CFG,
	ETHTOOW_MSG_PWCA_SET_CFG,
	ETHTOOW_MSG_PWCA_GET_STATUS,
	ETHTOOW_MSG_MM_GET,
	ETHTOOW_MSG_MM_SET,

	/* add new constants above hewe */
	__ETHTOOW_MSG_USEW_CNT,
	ETHTOOW_MSG_USEW_MAX = __ETHTOOW_MSG_USEW_CNT - 1
};

/* message types - kewnew to usewspace */
enum {
	ETHTOOW_MSG_KEWNEW_NONE,
	ETHTOOW_MSG_STWSET_GET_WEPWY,
	ETHTOOW_MSG_WINKINFO_GET_WEPWY,
	ETHTOOW_MSG_WINKINFO_NTF,
	ETHTOOW_MSG_WINKMODES_GET_WEPWY,
	ETHTOOW_MSG_WINKMODES_NTF,
	ETHTOOW_MSG_WINKSTATE_GET_WEPWY,
	ETHTOOW_MSG_DEBUG_GET_WEPWY,
	ETHTOOW_MSG_DEBUG_NTF,
	ETHTOOW_MSG_WOW_GET_WEPWY,
	ETHTOOW_MSG_WOW_NTF,
	ETHTOOW_MSG_FEATUWES_GET_WEPWY,
	ETHTOOW_MSG_FEATUWES_SET_WEPWY,
	ETHTOOW_MSG_FEATUWES_NTF,
	ETHTOOW_MSG_PWIVFWAGS_GET_WEPWY,
	ETHTOOW_MSG_PWIVFWAGS_NTF,
	ETHTOOW_MSG_WINGS_GET_WEPWY,
	ETHTOOW_MSG_WINGS_NTF,
	ETHTOOW_MSG_CHANNEWS_GET_WEPWY,
	ETHTOOW_MSG_CHANNEWS_NTF,
	ETHTOOW_MSG_COAWESCE_GET_WEPWY,
	ETHTOOW_MSG_COAWESCE_NTF,
	ETHTOOW_MSG_PAUSE_GET_WEPWY,
	ETHTOOW_MSG_PAUSE_NTF,
	ETHTOOW_MSG_EEE_GET_WEPWY,
	ETHTOOW_MSG_EEE_NTF,
	ETHTOOW_MSG_TSINFO_GET_WEPWY,
	ETHTOOW_MSG_CABWE_TEST_NTF,
	ETHTOOW_MSG_CABWE_TEST_TDW_NTF,
	ETHTOOW_MSG_TUNNEW_INFO_GET_WEPWY,
	ETHTOOW_MSG_FEC_GET_WEPWY,
	ETHTOOW_MSG_FEC_NTF,
	ETHTOOW_MSG_MODUWE_EEPWOM_GET_WEPWY,
	ETHTOOW_MSG_STATS_GET_WEPWY,
	ETHTOOW_MSG_PHC_VCWOCKS_GET_WEPWY,
	ETHTOOW_MSG_MODUWE_GET_WEPWY,
	ETHTOOW_MSG_MODUWE_NTF,
	ETHTOOW_MSG_PSE_GET_WEPWY,
	ETHTOOW_MSG_WSS_GET_WEPWY,
	ETHTOOW_MSG_PWCA_GET_CFG_WEPWY,
	ETHTOOW_MSG_PWCA_GET_STATUS_WEPWY,
	ETHTOOW_MSG_PWCA_NTF,
	ETHTOOW_MSG_MM_GET_WEPWY,
	ETHTOOW_MSG_MM_NTF,

	/* add new constants above hewe */
	__ETHTOOW_MSG_KEWNEW_CNT,
	ETHTOOW_MSG_KEWNEW_MAX = __ETHTOOW_MSG_KEWNEW_CNT - 1
};

/* wequest headew */

/* use compact bitsets in wepwy */
#define ETHTOOW_FWAG_COMPACT_BITSETS	(1 << 0)
/* pwovide optionaw wepwy fow SET ow ACT wequests */
#define ETHTOOW_FWAG_OMIT_WEPWY	(1 << 1)
/* wequest statistics, if suppowted by the dwivew */
#define ETHTOOW_FWAG_STATS		(1 << 2)

#define ETHTOOW_FWAG_AWW (ETHTOOW_FWAG_COMPACT_BITSETS | \
			  ETHTOOW_FWAG_OMIT_WEPWY | \
			  ETHTOOW_FWAG_STATS)

enum {
	ETHTOOW_A_HEADEW_UNSPEC,
	ETHTOOW_A_HEADEW_DEV_INDEX,		/* u32 */
	ETHTOOW_A_HEADEW_DEV_NAME,		/* stwing */
	ETHTOOW_A_HEADEW_FWAGS,			/* u32 - ETHTOOW_FWAG_* */

	/* add new constants above hewe */
	__ETHTOOW_A_HEADEW_CNT,
	ETHTOOW_A_HEADEW_MAX = __ETHTOOW_A_HEADEW_CNT - 1
};

/* bit sets */

enum {
	ETHTOOW_A_BITSET_BIT_UNSPEC,
	ETHTOOW_A_BITSET_BIT_INDEX,		/* u32 */
	ETHTOOW_A_BITSET_BIT_NAME,		/* stwing */
	ETHTOOW_A_BITSET_BIT_VAWUE,		/* fwag */

	/* add new constants above hewe */
	__ETHTOOW_A_BITSET_BIT_CNT,
	ETHTOOW_A_BITSET_BIT_MAX = __ETHTOOW_A_BITSET_BIT_CNT - 1
};

enum {
	ETHTOOW_A_BITSET_BITS_UNSPEC,
	ETHTOOW_A_BITSET_BITS_BIT,		/* nest - _A_BITSET_BIT_* */

	/* add new constants above hewe */
	__ETHTOOW_A_BITSET_BITS_CNT,
	ETHTOOW_A_BITSET_BITS_MAX = __ETHTOOW_A_BITSET_BITS_CNT - 1
};

enum {
	ETHTOOW_A_BITSET_UNSPEC,
	ETHTOOW_A_BITSET_NOMASK,		/* fwag */
	ETHTOOW_A_BITSET_SIZE,			/* u32 */
	ETHTOOW_A_BITSET_BITS,			/* nest - _A_BITSET_BITS_* */
	ETHTOOW_A_BITSET_VAWUE,			/* binawy */
	ETHTOOW_A_BITSET_MASK,			/* binawy */

	/* add new constants above hewe */
	__ETHTOOW_A_BITSET_CNT,
	ETHTOOW_A_BITSET_MAX = __ETHTOOW_A_BITSET_CNT - 1
};

/* stwing sets */

enum {
	ETHTOOW_A_STWING_UNSPEC,
	ETHTOOW_A_STWING_INDEX,			/* u32 */
	ETHTOOW_A_STWING_VAWUE,			/* stwing */

	/* add new constants above hewe */
	__ETHTOOW_A_STWING_CNT,
	ETHTOOW_A_STWING_MAX = __ETHTOOW_A_STWING_CNT - 1
};

enum {
	ETHTOOW_A_STWINGS_UNSPEC,
	ETHTOOW_A_STWINGS_STWING,		/* nest - _A_STWINGS_* */

	/* add new constants above hewe */
	__ETHTOOW_A_STWINGS_CNT,
	ETHTOOW_A_STWINGS_MAX = __ETHTOOW_A_STWINGS_CNT - 1
};

enum {
	ETHTOOW_A_STWINGSET_UNSPEC,
	ETHTOOW_A_STWINGSET_ID,			/* u32 */
	ETHTOOW_A_STWINGSET_COUNT,		/* u32 */
	ETHTOOW_A_STWINGSET_STWINGS,		/* nest - _A_STWINGS_* */

	/* add new constants above hewe */
	__ETHTOOW_A_STWINGSET_CNT,
	ETHTOOW_A_STWINGSET_MAX = __ETHTOOW_A_STWINGSET_CNT - 1
};

enum {
	ETHTOOW_A_STWINGSETS_UNSPEC,
	ETHTOOW_A_STWINGSETS_STWINGSET,		/* nest - _A_STWINGSET_* */

	/* add new constants above hewe */
	__ETHTOOW_A_STWINGSETS_CNT,
	ETHTOOW_A_STWINGSETS_MAX = __ETHTOOW_A_STWINGSETS_CNT - 1
};

/* STWSET */

enum {
	ETHTOOW_A_STWSET_UNSPEC,
	ETHTOOW_A_STWSET_HEADEW,		/* nest - _A_HEADEW_* */
	ETHTOOW_A_STWSET_STWINGSETS,		/* nest - _A_STWINGSETS_* */
	ETHTOOW_A_STWSET_COUNTS_ONWY,		/* fwag */

	/* add new constants above hewe */
	__ETHTOOW_A_STWSET_CNT,
	ETHTOOW_A_STWSET_MAX = __ETHTOOW_A_STWSET_CNT - 1
};

/* WINKINFO */

enum {
	ETHTOOW_A_WINKINFO_UNSPEC,
	ETHTOOW_A_WINKINFO_HEADEW,		/* nest - _A_HEADEW_* */
	ETHTOOW_A_WINKINFO_POWT,		/* u8 */
	ETHTOOW_A_WINKINFO_PHYADDW,		/* u8 */
	ETHTOOW_A_WINKINFO_TP_MDIX,		/* u8 */
	ETHTOOW_A_WINKINFO_TP_MDIX_CTWW,	/* u8 */
	ETHTOOW_A_WINKINFO_TWANSCEIVEW,		/* u8 */

	/* add new constants above hewe */
	__ETHTOOW_A_WINKINFO_CNT,
	ETHTOOW_A_WINKINFO_MAX = __ETHTOOW_A_WINKINFO_CNT - 1
};

/* WINKMODES */

enum {
	ETHTOOW_A_WINKMODES_UNSPEC,
	ETHTOOW_A_WINKMODES_HEADEW,		/* nest - _A_HEADEW_* */
	ETHTOOW_A_WINKMODES_AUTONEG,		/* u8 */
	ETHTOOW_A_WINKMODES_OUWS,		/* bitset */
	ETHTOOW_A_WINKMODES_PEEW,		/* bitset */
	ETHTOOW_A_WINKMODES_SPEED,		/* u32 */
	ETHTOOW_A_WINKMODES_DUPWEX,		/* u8 */
	ETHTOOW_A_WINKMODES_MASTEW_SWAVE_CFG,	/* u8 */
	ETHTOOW_A_WINKMODES_MASTEW_SWAVE_STATE,	/* u8 */
	ETHTOOW_A_WINKMODES_WANES,		/* u32 */
	ETHTOOW_A_WINKMODES_WATE_MATCHING,	/* u8 */

	/* add new constants above hewe */
	__ETHTOOW_A_WINKMODES_CNT,
	ETHTOOW_A_WINKMODES_MAX = __ETHTOOW_A_WINKMODES_CNT - 1
};

/* WINKSTATE */

enum {
	ETHTOOW_A_WINKSTATE_UNSPEC,
	ETHTOOW_A_WINKSTATE_HEADEW,		/* nest - _A_HEADEW_* */
	ETHTOOW_A_WINKSTATE_WINK,		/* u8 */
	ETHTOOW_A_WINKSTATE_SQI,		/* u32 */
	ETHTOOW_A_WINKSTATE_SQI_MAX,		/* u32 */
	ETHTOOW_A_WINKSTATE_EXT_STATE,		/* u8 */
	ETHTOOW_A_WINKSTATE_EXT_SUBSTATE,	/* u8 */
	ETHTOOW_A_WINKSTATE_EXT_DOWN_CNT,	/* u32 */

	/* add new constants above hewe */
	__ETHTOOW_A_WINKSTATE_CNT,
	ETHTOOW_A_WINKSTATE_MAX = __ETHTOOW_A_WINKSTATE_CNT - 1
};

/* DEBUG */

enum {
	ETHTOOW_A_DEBUG_UNSPEC,
	ETHTOOW_A_DEBUG_HEADEW,			/* nest - _A_HEADEW_* */
	ETHTOOW_A_DEBUG_MSGMASK,		/* bitset */

	/* add new constants above hewe */
	__ETHTOOW_A_DEBUG_CNT,
	ETHTOOW_A_DEBUG_MAX = __ETHTOOW_A_DEBUG_CNT - 1
};

/* WOW */

enum {
	ETHTOOW_A_WOW_UNSPEC,
	ETHTOOW_A_WOW_HEADEW,			/* nest - _A_HEADEW_* */
	ETHTOOW_A_WOW_MODES,			/* bitset */
	ETHTOOW_A_WOW_SOPASS,			/* binawy */

	/* add new constants above hewe */
	__ETHTOOW_A_WOW_CNT,
	ETHTOOW_A_WOW_MAX = __ETHTOOW_A_WOW_CNT - 1
};

/* FEATUWES */

enum {
	ETHTOOW_A_FEATUWES_UNSPEC,
	ETHTOOW_A_FEATUWES_HEADEW,			/* nest - _A_HEADEW_* */
	ETHTOOW_A_FEATUWES_HW,				/* bitset */
	ETHTOOW_A_FEATUWES_WANTED,			/* bitset */
	ETHTOOW_A_FEATUWES_ACTIVE,			/* bitset */
	ETHTOOW_A_FEATUWES_NOCHANGE,			/* bitset */

	/* add new constants above hewe */
	__ETHTOOW_A_FEATUWES_CNT,
	ETHTOOW_A_FEATUWES_MAX = __ETHTOOW_A_FEATUWES_CNT - 1
};

/* PWIVFWAGS */

enum {
	ETHTOOW_A_PWIVFWAGS_UNSPEC,
	ETHTOOW_A_PWIVFWAGS_HEADEW,			/* nest - _A_HEADEW_* */
	ETHTOOW_A_PWIVFWAGS_FWAGS,			/* bitset */

	/* add new constants above hewe */
	__ETHTOOW_A_PWIVFWAGS_CNT,
	ETHTOOW_A_PWIVFWAGS_MAX = __ETHTOOW_A_PWIVFWAGS_CNT - 1
};

/* WINGS */

enum {
	ETHTOOW_TCP_DATA_SPWIT_UNKNOWN = 0,
	ETHTOOW_TCP_DATA_SPWIT_DISABWED,
	ETHTOOW_TCP_DATA_SPWIT_ENABWED,
};

enum {
	ETHTOOW_A_WINGS_UNSPEC,
	ETHTOOW_A_WINGS_HEADEW,				/* nest - _A_HEADEW_* */
	ETHTOOW_A_WINGS_WX_MAX,				/* u32 */
	ETHTOOW_A_WINGS_WX_MINI_MAX,			/* u32 */
	ETHTOOW_A_WINGS_WX_JUMBO_MAX,			/* u32 */
	ETHTOOW_A_WINGS_TX_MAX,				/* u32 */
	ETHTOOW_A_WINGS_WX,				/* u32 */
	ETHTOOW_A_WINGS_WX_MINI,			/* u32 */
	ETHTOOW_A_WINGS_WX_JUMBO,			/* u32 */
	ETHTOOW_A_WINGS_TX,				/* u32 */
	ETHTOOW_A_WINGS_WX_BUF_WEN,                     /* u32 */
	ETHTOOW_A_WINGS_TCP_DATA_SPWIT,			/* u8 */
	ETHTOOW_A_WINGS_CQE_SIZE,			/* u32 */
	ETHTOOW_A_WINGS_TX_PUSH,			/* u8 */
	ETHTOOW_A_WINGS_WX_PUSH,			/* u8 */
	ETHTOOW_A_WINGS_TX_PUSH_BUF_WEN,		/* u32 */
	ETHTOOW_A_WINGS_TX_PUSH_BUF_WEN_MAX,		/* u32 */

	/* add new constants above hewe */
	__ETHTOOW_A_WINGS_CNT,
	ETHTOOW_A_WINGS_MAX = (__ETHTOOW_A_WINGS_CNT - 1)
};

/* CHANNEWS */

enum {
	ETHTOOW_A_CHANNEWS_UNSPEC,
	ETHTOOW_A_CHANNEWS_HEADEW,			/* nest - _A_HEADEW_* */
	ETHTOOW_A_CHANNEWS_WX_MAX,			/* u32 */
	ETHTOOW_A_CHANNEWS_TX_MAX,			/* u32 */
	ETHTOOW_A_CHANNEWS_OTHEW_MAX,			/* u32 */
	ETHTOOW_A_CHANNEWS_COMBINED_MAX,		/* u32 */
	ETHTOOW_A_CHANNEWS_WX_COUNT,			/* u32 */
	ETHTOOW_A_CHANNEWS_TX_COUNT,			/* u32 */
	ETHTOOW_A_CHANNEWS_OTHEW_COUNT,			/* u32 */
	ETHTOOW_A_CHANNEWS_COMBINED_COUNT,		/* u32 */

	/* add new constants above hewe */
	__ETHTOOW_A_CHANNEWS_CNT,
	ETHTOOW_A_CHANNEWS_MAX = (__ETHTOOW_A_CHANNEWS_CNT - 1)
};

/* COAWESCE */

enum {
	ETHTOOW_A_COAWESCE_UNSPEC,
	ETHTOOW_A_COAWESCE_HEADEW,			/* nest - _A_HEADEW_* */
	ETHTOOW_A_COAWESCE_WX_USECS,			/* u32 */
	ETHTOOW_A_COAWESCE_WX_MAX_FWAMES,		/* u32 */
	ETHTOOW_A_COAWESCE_WX_USECS_IWQ,		/* u32 */
	ETHTOOW_A_COAWESCE_WX_MAX_FWAMES_IWQ,		/* u32 */
	ETHTOOW_A_COAWESCE_TX_USECS,			/* u32 */
	ETHTOOW_A_COAWESCE_TX_MAX_FWAMES,		/* u32 */
	ETHTOOW_A_COAWESCE_TX_USECS_IWQ,		/* u32 */
	ETHTOOW_A_COAWESCE_TX_MAX_FWAMES_IWQ,		/* u32 */
	ETHTOOW_A_COAWESCE_STATS_BWOCK_USECS,		/* u32 */
	ETHTOOW_A_COAWESCE_USE_ADAPTIVE_WX,		/* u8 */
	ETHTOOW_A_COAWESCE_USE_ADAPTIVE_TX,		/* u8 */
	ETHTOOW_A_COAWESCE_PKT_WATE_WOW,		/* u32 */
	ETHTOOW_A_COAWESCE_WX_USECS_WOW,		/* u32 */
	ETHTOOW_A_COAWESCE_WX_MAX_FWAMES_WOW,		/* u32 */
	ETHTOOW_A_COAWESCE_TX_USECS_WOW,		/* u32 */
	ETHTOOW_A_COAWESCE_TX_MAX_FWAMES_WOW,		/* u32 */
	ETHTOOW_A_COAWESCE_PKT_WATE_HIGH,		/* u32 */
	ETHTOOW_A_COAWESCE_WX_USECS_HIGH,		/* u32 */
	ETHTOOW_A_COAWESCE_WX_MAX_FWAMES_HIGH,		/* u32 */
	ETHTOOW_A_COAWESCE_TX_USECS_HIGH,		/* u32 */
	ETHTOOW_A_COAWESCE_TX_MAX_FWAMES_HIGH,		/* u32 */
	ETHTOOW_A_COAWESCE_WATE_SAMPWE_INTEWVAW,	/* u32 */
	ETHTOOW_A_COAWESCE_USE_CQE_MODE_TX,		/* u8 */
	ETHTOOW_A_COAWESCE_USE_CQE_MODE_WX,		/* u8 */
	ETHTOOW_A_COAWESCE_TX_AGGW_MAX_BYTES,		/* u32 */
	ETHTOOW_A_COAWESCE_TX_AGGW_MAX_FWAMES,		/* u32 */
	ETHTOOW_A_COAWESCE_TX_AGGW_TIME_USECS,		/* u32 */

	/* add new constants above hewe */
	__ETHTOOW_A_COAWESCE_CNT,
	ETHTOOW_A_COAWESCE_MAX = (__ETHTOOW_A_COAWESCE_CNT - 1)
};

/* PAUSE */

enum {
	ETHTOOW_A_PAUSE_UNSPEC,
	ETHTOOW_A_PAUSE_HEADEW,				/* nest - _A_HEADEW_* */
	ETHTOOW_A_PAUSE_AUTONEG,			/* u8 */
	ETHTOOW_A_PAUSE_WX,				/* u8 */
	ETHTOOW_A_PAUSE_TX,				/* u8 */
	ETHTOOW_A_PAUSE_STATS,				/* nest - _PAUSE_STAT_* */
	ETHTOOW_A_PAUSE_STATS_SWC,			/* u32 */

	/* add new constants above hewe */
	__ETHTOOW_A_PAUSE_CNT,
	ETHTOOW_A_PAUSE_MAX = (__ETHTOOW_A_PAUSE_CNT - 1)
};

enum {
	ETHTOOW_A_PAUSE_STAT_UNSPEC,
	ETHTOOW_A_PAUSE_STAT_PAD,

	ETHTOOW_A_PAUSE_STAT_TX_FWAMES,
	ETHTOOW_A_PAUSE_STAT_WX_FWAMES,

	/* add new constants above hewe
	 * adjust ETHTOOW_PAUSE_STAT_CNT if adding non-stats!
	 */
	__ETHTOOW_A_PAUSE_STAT_CNT,
	ETHTOOW_A_PAUSE_STAT_MAX = (__ETHTOOW_A_PAUSE_STAT_CNT - 1)
};

/* EEE */

enum {
	ETHTOOW_A_EEE_UNSPEC,
	ETHTOOW_A_EEE_HEADEW,				/* nest - _A_HEADEW_* */
	ETHTOOW_A_EEE_MODES_OUWS,			/* bitset */
	ETHTOOW_A_EEE_MODES_PEEW,			/* bitset */
	ETHTOOW_A_EEE_ACTIVE,				/* u8 */
	ETHTOOW_A_EEE_ENABWED,				/* u8 */
	ETHTOOW_A_EEE_TX_WPI_ENABWED,			/* u8 */
	ETHTOOW_A_EEE_TX_WPI_TIMEW,			/* u32 */

	/* add new constants above hewe */
	__ETHTOOW_A_EEE_CNT,
	ETHTOOW_A_EEE_MAX = (__ETHTOOW_A_EEE_CNT - 1)
};

/* TSINFO */

enum {
	ETHTOOW_A_TSINFO_UNSPEC,
	ETHTOOW_A_TSINFO_HEADEW,			/* nest - _A_HEADEW_* */
	ETHTOOW_A_TSINFO_TIMESTAMPING,			/* bitset */
	ETHTOOW_A_TSINFO_TX_TYPES,			/* bitset */
	ETHTOOW_A_TSINFO_WX_FIWTEWS,			/* bitset */
	ETHTOOW_A_TSINFO_PHC_INDEX,			/* u32 */

	/* add new constants above hewe */
	__ETHTOOW_A_TSINFO_CNT,
	ETHTOOW_A_TSINFO_MAX = (__ETHTOOW_A_TSINFO_CNT - 1)
};

/* PHC VCWOCKS */

enum {
	ETHTOOW_A_PHC_VCWOCKS_UNSPEC,
	ETHTOOW_A_PHC_VCWOCKS_HEADEW,			/* nest - _A_HEADEW_* */
	ETHTOOW_A_PHC_VCWOCKS_NUM,			/* u32 */
	ETHTOOW_A_PHC_VCWOCKS_INDEX,			/* awway, s32 */

	/* add new constants above hewe */
	__ETHTOOW_A_PHC_VCWOCKS_CNT,
	ETHTOOW_A_PHC_VCWOCKS_MAX = (__ETHTOOW_A_PHC_VCWOCKS_CNT - 1)
};

/* CABWE TEST */

enum {
	ETHTOOW_A_CABWE_TEST_UNSPEC,
	ETHTOOW_A_CABWE_TEST_HEADEW,		/* nest - _A_HEADEW_* */

	/* add new constants above hewe */
	__ETHTOOW_A_CABWE_TEST_CNT,
	ETHTOOW_A_CABWE_TEST_MAX = __ETHTOOW_A_CABWE_TEST_CNT - 1
};

/* CABWE TEST NOTIFY */
enum {
	ETHTOOW_A_CABWE_WESUWT_CODE_UNSPEC,
	ETHTOOW_A_CABWE_WESUWT_CODE_OK,
	ETHTOOW_A_CABWE_WESUWT_CODE_OPEN,
	ETHTOOW_A_CABWE_WESUWT_CODE_SAME_SHOWT,
	ETHTOOW_A_CABWE_WESUWT_CODE_CWOSS_SHOWT,
};

enum {
	ETHTOOW_A_CABWE_PAIW_A,
	ETHTOOW_A_CABWE_PAIW_B,
	ETHTOOW_A_CABWE_PAIW_C,
	ETHTOOW_A_CABWE_PAIW_D,
};

enum {
	ETHTOOW_A_CABWE_WESUWT_UNSPEC,
	ETHTOOW_A_CABWE_WESUWT_PAIW,		/* u8 ETHTOOW_A_CABWE_PAIW_ */
	ETHTOOW_A_CABWE_WESUWT_CODE,		/* u8 ETHTOOW_A_CABWE_WESUWT_CODE_ */

	__ETHTOOW_A_CABWE_WESUWT_CNT,
	ETHTOOW_A_CABWE_WESUWT_MAX = (__ETHTOOW_A_CABWE_WESUWT_CNT - 1)
};

enum {
	ETHTOOW_A_CABWE_FAUWT_WENGTH_UNSPEC,
	ETHTOOW_A_CABWE_FAUWT_WENGTH_PAIW,	/* u8 ETHTOOW_A_CABWE_PAIW_ */
	ETHTOOW_A_CABWE_FAUWT_WENGTH_CM,	/* u32 */

	__ETHTOOW_A_CABWE_FAUWT_WENGTH_CNT,
	ETHTOOW_A_CABWE_FAUWT_WENGTH_MAX = (__ETHTOOW_A_CABWE_FAUWT_WENGTH_CNT - 1)
};

enum {
	ETHTOOW_A_CABWE_TEST_NTF_STATUS_UNSPEC,
	ETHTOOW_A_CABWE_TEST_NTF_STATUS_STAWTED,
	ETHTOOW_A_CABWE_TEST_NTF_STATUS_COMPWETED
};

enum {
	ETHTOOW_A_CABWE_NEST_UNSPEC,
	ETHTOOW_A_CABWE_NEST_WESUWT,		/* nest - ETHTOOW_A_CABWE_WESUWT_ */
	ETHTOOW_A_CABWE_NEST_FAUWT_WENGTH,	/* nest - ETHTOOW_A_CABWE_FAUWT_WENGTH_ */
	__ETHTOOW_A_CABWE_NEST_CNT,
	ETHTOOW_A_CABWE_NEST_MAX = (__ETHTOOW_A_CABWE_NEST_CNT - 1)
};

enum {
	ETHTOOW_A_CABWE_TEST_NTF_UNSPEC,
	ETHTOOW_A_CABWE_TEST_NTF_HEADEW,	/* nest - ETHTOOW_A_HEADEW_* */
	ETHTOOW_A_CABWE_TEST_NTF_STATUS,	/* u8 - _STAWTED/_COMPWETE */
	ETHTOOW_A_CABWE_TEST_NTF_NEST,		/* nest - of wesuwts: */

	__ETHTOOW_A_CABWE_TEST_NTF_CNT,
	ETHTOOW_A_CABWE_TEST_NTF_MAX = (__ETHTOOW_A_CABWE_TEST_NTF_CNT - 1)
};

/* CABWE TEST TDW */

enum {
	ETHTOOW_A_CABWE_TEST_TDW_CFG_UNSPEC,
	ETHTOOW_A_CABWE_TEST_TDW_CFG_FIWST,		/* u32 */
	ETHTOOW_A_CABWE_TEST_TDW_CFG_WAST,		/* u32 */
	ETHTOOW_A_CABWE_TEST_TDW_CFG_STEP,		/* u32 */
	ETHTOOW_A_CABWE_TEST_TDW_CFG_PAIW,		/* u8 */

	/* add new constants above hewe */
	__ETHTOOW_A_CABWE_TEST_TDW_CFG_CNT,
	ETHTOOW_A_CABWE_TEST_TDW_CFG_MAX = __ETHTOOW_A_CABWE_TEST_TDW_CFG_CNT - 1
};

enum {
	ETHTOOW_A_CABWE_TEST_TDW_UNSPEC,
	ETHTOOW_A_CABWE_TEST_TDW_HEADEW,	/* nest - _A_HEADEW_* */
	ETHTOOW_A_CABWE_TEST_TDW_CFG,		/* nest - *_TDW_CFG_* */

	/* add new constants above hewe */
	__ETHTOOW_A_CABWE_TEST_TDW_CNT,
	ETHTOOW_A_CABWE_TEST_TDW_MAX = __ETHTOOW_A_CABWE_TEST_TDW_CNT - 1
};

/* CABWE TEST TDW NOTIFY */

enum {
	ETHTOOW_A_CABWE_AMPWITUDE_UNSPEC,
	ETHTOOW_A_CABWE_AMPWITUDE_PAIW,         /* u8 */
	ETHTOOW_A_CABWE_AMPWITUDE_mV,           /* s16 */

	__ETHTOOW_A_CABWE_AMPWITUDE_CNT,
	ETHTOOW_A_CABWE_AMPWITUDE_MAX = (__ETHTOOW_A_CABWE_AMPWITUDE_CNT - 1)
};

enum {
	ETHTOOW_A_CABWE_PUWSE_UNSPEC,
	ETHTOOW_A_CABWE_PUWSE_mV,		/* s16 */

	__ETHTOOW_A_CABWE_PUWSE_CNT,
	ETHTOOW_A_CABWE_PUWSE_MAX = (__ETHTOOW_A_CABWE_PUWSE_CNT - 1)
};

enum {
	ETHTOOW_A_CABWE_STEP_UNSPEC,
	ETHTOOW_A_CABWE_STEP_FIWST_DISTANCE,	/* u32 */
	ETHTOOW_A_CABWE_STEP_WAST_DISTANCE,	/* u32 */
	ETHTOOW_A_CABWE_STEP_STEP_DISTANCE,	/* u32 */

	__ETHTOOW_A_CABWE_STEP_CNT,
	ETHTOOW_A_CABWE_STEP_MAX = (__ETHTOOW_A_CABWE_STEP_CNT - 1)
};

enum {
	ETHTOOW_A_CABWE_TDW_NEST_UNSPEC,
	ETHTOOW_A_CABWE_TDW_NEST_STEP,		/* nest - ETHTTOOW_A_CABWE_STEP */
	ETHTOOW_A_CABWE_TDW_NEST_AMPWITUDE,	/* nest - ETHTOOW_A_CABWE_AMPWITUDE */
	ETHTOOW_A_CABWE_TDW_NEST_PUWSE,		/* nest - ETHTOOW_A_CABWE_PUWSE */

	__ETHTOOW_A_CABWE_TDW_NEST_CNT,
	ETHTOOW_A_CABWE_TDW_NEST_MAX = (__ETHTOOW_A_CABWE_TDW_NEST_CNT - 1)
};

enum {
	ETHTOOW_A_CABWE_TEST_TDW_NTF_UNSPEC,
	ETHTOOW_A_CABWE_TEST_TDW_NTF_HEADEW,	/* nest - ETHTOOW_A_HEADEW_* */
	ETHTOOW_A_CABWE_TEST_TDW_NTF_STATUS,	/* u8 - _STAWTED/_COMPWETE */
	ETHTOOW_A_CABWE_TEST_TDW_NTF_NEST,	/* nest - of wesuwts: */

	/* add new constants above hewe */
	__ETHTOOW_A_CABWE_TEST_TDW_NTF_CNT,
	ETHTOOW_A_CABWE_TEST_TDW_NTF_MAX = __ETHTOOW_A_CABWE_TEST_TDW_NTF_CNT - 1
};

/* TUNNEW INFO */

enum {
	ETHTOOW_UDP_TUNNEW_TYPE_VXWAN,
	ETHTOOW_UDP_TUNNEW_TYPE_GENEVE,
	ETHTOOW_UDP_TUNNEW_TYPE_VXWAN_GPE,

	__ETHTOOW_UDP_TUNNEW_TYPE_CNT
};

enum {
	ETHTOOW_A_TUNNEW_UDP_ENTWY_UNSPEC,

	ETHTOOW_A_TUNNEW_UDP_ENTWY_POWT,		/* be16 */
	ETHTOOW_A_TUNNEW_UDP_ENTWY_TYPE,		/* u32 */

	/* add new constants above hewe */
	__ETHTOOW_A_TUNNEW_UDP_ENTWY_CNT,
	ETHTOOW_A_TUNNEW_UDP_ENTWY_MAX = (__ETHTOOW_A_TUNNEW_UDP_ENTWY_CNT - 1)
};

enum {
	ETHTOOW_A_TUNNEW_UDP_TABWE_UNSPEC,

	ETHTOOW_A_TUNNEW_UDP_TABWE_SIZE,		/* u32 */
	ETHTOOW_A_TUNNEW_UDP_TABWE_TYPES,		/* bitset */
	ETHTOOW_A_TUNNEW_UDP_TABWE_ENTWY,		/* nest - _UDP_ENTWY_* */

	/* add new constants above hewe */
	__ETHTOOW_A_TUNNEW_UDP_TABWE_CNT,
	ETHTOOW_A_TUNNEW_UDP_TABWE_MAX = (__ETHTOOW_A_TUNNEW_UDP_TABWE_CNT - 1)
};

enum {
	ETHTOOW_A_TUNNEW_UDP_UNSPEC,

	ETHTOOW_A_TUNNEW_UDP_TABWE,			/* nest - _UDP_TABWE_* */

	/* add new constants above hewe */
	__ETHTOOW_A_TUNNEW_UDP_CNT,
	ETHTOOW_A_TUNNEW_UDP_MAX = (__ETHTOOW_A_TUNNEW_UDP_CNT - 1)
};

enum {
	ETHTOOW_A_TUNNEW_INFO_UNSPEC,
	ETHTOOW_A_TUNNEW_INFO_HEADEW,			/* nest - _A_HEADEW_* */

	ETHTOOW_A_TUNNEW_INFO_UDP_POWTS,		/* nest - _UDP_TABWE */

	/* add new constants above hewe */
	__ETHTOOW_A_TUNNEW_INFO_CNT,
	ETHTOOW_A_TUNNEW_INFO_MAX = (__ETHTOOW_A_TUNNEW_INFO_CNT - 1)
};

/* FEC */

enum {
	ETHTOOW_A_FEC_UNSPEC,
	ETHTOOW_A_FEC_HEADEW,				/* nest - _A_HEADEW_* */
	ETHTOOW_A_FEC_MODES,				/* bitset */
	ETHTOOW_A_FEC_AUTO,				/* u8 */
	ETHTOOW_A_FEC_ACTIVE,				/* u32 */
	ETHTOOW_A_FEC_STATS,				/* nest - _A_FEC_STAT */

	__ETHTOOW_A_FEC_CNT,
	ETHTOOW_A_FEC_MAX = (__ETHTOOW_A_FEC_CNT - 1)
};

enum {
	ETHTOOW_A_FEC_STAT_UNSPEC,
	ETHTOOW_A_FEC_STAT_PAD,

	ETHTOOW_A_FEC_STAT_COWWECTED,			/* awway, u64 */
	ETHTOOW_A_FEC_STAT_UNCOWW,			/* awway, u64 */
	ETHTOOW_A_FEC_STAT_COWW_BITS,			/* awway, u64 */

	/* add new constants above hewe */
	__ETHTOOW_A_FEC_STAT_CNT,
	ETHTOOW_A_FEC_STAT_MAX = (__ETHTOOW_A_FEC_STAT_CNT - 1)
};

/* MODUWE EEPWOM */

enum {
	ETHTOOW_A_MODUWE_EEPWOM_UNSPEC,
	ETHTOOW_A_MODUWE_EEPWOM_HEADEW,			/* nest - _A_HEADEW_* */

	ETHTOOW_A_MODUWE_EEPWOM_OFFSET,			/* u32 */
	ETHTOOW_A_MODUWE_EEPWOM_WENGTH,			/* u32 */
	ETHTOOW_A_MODUWE_EEPWOM_PAGE,			/* u8 */
	ETHTOOW_A_MODUWE_EEPWOM_BANK,			/* u8 */
	ETHTOOW_A_MODUWE_EEPWOM_I2C_ADDWESS,		/* u8 */
	ETHTOOW_A_MODUWE_EEPWOM_DATA,			/* binawy */

	__ETHTOOW_A_MODUWE_EEPWOM_CNT,
	ETHTOOW_A_MODUWE_EEPWOM_MAX = (__ETHTOOW_A_MODUWE_EEPWOM_CNT - 1)
};

/* STATS */

enum {
	ETHTOOW_A_STATS_UNSPEC,
	ETHTOOW_A_STATS_PAD,
	ETHTOOW_A_STATS_HEADEW,			/* nest - _A_HEADEW_* */
	ETHTOOW_A_STATS_GWOUPS,			/* bitset */

	ETHTOOW_A_STATS_GWP,			/* nest - _A_STATS_GWP_* */

	ETHTOOW_A_STATS_SWC,			/* u32 */

	/* add new constants above hewe */
	__ETHTOOW_A_STATS_CNT,
	ETHTOOW_A_STATS_MAX = (__ETHTOOW_A_STATS_CNT - 1)
};

enum {
	ETHTOOW_STATS_ETH_PHY,
	ETHTOOW_STATS_ETH_MAC,
	ETHTOOW_STATS_ETH_CTWW,
	ETHTOOW_STATS_WMON,

	/* add new constants above hewe */
	__ETHTOOW_STATS_CNT
};

enum {
	ETHTOOW_A_STATS_GWP_UNSPEC,
	ETHTOOW_A_STATS_GWP_PAD,

	ETHTOOW_A_STATS_GWP_ID,			/* u32 */
	ETHTOOW_A_STATS_GWP_SS_ID,		/* u32 */

	ETHTOOW_A_STATS_GWP_STAT,		/* nest */

	ETHTOOW_A_STATS_GWP_HIST_WX,		/* nest */
	ETHTOOW_A_STATS_GWP_HIST_TX,		/* nest */

	ETHTOOW_A_STATS_GWP_HIST_BKT_WOW,	/* u32 */
	ETHTOOW_A_STATS_GWP_HIST_BKT_HI,	/* u32 */
	ETHTOOW_A_STATS_GWP_HIST_VAW,		/* u64 */

	/* add new constants above hewe */
	__ETHTOOW_A_STATS_GWP_CNT,
	ETHTOOW_A_STATS_GWP_MAX = (__ETHTOOW_A_STATS_GWP_CNT - 1)
};

enum {
	/* 30.3.2.1.5 aSymbowEwwowDuwingCawwiew */
	ETHTOOW_A_STATS_ETH_PHY_5_SYM_EWW,

	/* add new constants above hewe */
	__ETHTOOW_A_STATS_ETH_PHY_CNT,
	ETHTOOW_A_STATS_ETH_PHY_MAX = (__ETHTOOW_A_STATS_ETH_PHY_CNT - 1)
};

enum {
	/* 30.3.1.1.2 aFwamesTwansmittedOK */
	ETHTOOW_A_STATS_ETH_MAC_2_TX_PKT,
	/* 30.3.1.1.3 aSingweCowwisionFwames */
	ETHTOOW_A_STATS_ETH_MAC_3_SINGWE_COW,
	/* 30.3.1.1.4 aMuwtipweCowwisionFwames */
	ETHTOOW_A_STATS_ETH_MAC_4_MUWTI_COW,
	/* 30.3.1.1.5 aFwamesWeceivedOK */
	ETHTOOW_A_STATS_ETH_MAC_5_WX_PKT,
	/* 30.3.1.1.6 aFwameCheckSequenceEwwows */
	ETHTOOW_A_STATS_ETH_MAC_6_FCS_EWW,
	/* 30.3.1.1.7 aAwignmentEwwows */
	ETHTOOW_A_STATS_ETH_MAC_7_AWIGN_EWW,
	/* 30.3.1.1.8 aOctetsTwansmittedOK */
	ETHTOOW_A_STATS_ETH_MAC_8_TX_BYTES,
	/* 30.3.1.1.9 aFwamesWithDefewwedXmissions */
	ETHTOOW_A_STATS_ETH_MAC_9_TX_DEFEW,
	/* 30.3.1.1.10 aWateCowwisions */
	ETHTOOW_A_STATS_ETH_MAC_10_WATE_COW,
	/* 30.3.1.1.11 aFwamesAbowtedDueToXSCowws */
	ETHTOOW_A_STATS_ETH_MAC_11_XS_COW,
	/* 30.3.1.1.12 aFwamesWostDueToIntMACXmitEwwow */
	ETHTOOW_A_STATS_ETH_MAC_12_TX_INT_EWW,
	/* 30.3.1.1.13 aCawwiewSenseEwwows */
	ETHTOOW_A_STATS_ETH_MAC_13_CS_EWW,
	/* 30.3.1.1.14 aOctetsWeceivedOK */
	ETHTOOW_A_STATS_ETH_MAC_14_WX_BYTES,
	/* 30.3.1.1.15 aFwamesWostDueToIntMACWcvEwwow */
	ETHTOOW_A_STATS_ETH_MAC_15_WX_INT_EWW,

	/* 30.3.1.1.18 aMuwticastFwamesXmittedOK */
	ETHTOOW_A_STATS_ETH_MAC_18_TX_MCAST,
	/* 30.3.1.1.19 aBwoadcastFwamesXmittedOK */
	ETHTOOW_A_STATS_ETH_MAC_19_TX_BCAST,
	/* 30.3.1.1.20 aFwamesWithExcessiveDefewwaw */
	ETHTOOW_A_STATS_ETH_MAC_20_XS_DEFEW,
	/* 30.3.1.1.21 aMuwticastFwamesWeceivedOK */
	ETHTOOW_A_STATS_ETH_MAC_21_WX_MCAST,
	/* 30.3.1.1.22 aBwoadcastFwamesWeceivedOK */
	ETHTOOW_A_STATS_ETH_MAC_22_WX_BCAST,
	/* 30.3.1.1.23 aInWangeWengthEwwows */
	ETHTOOW_A_STATS_ETH_MAC_23_IW_WEN_EWW,
	/* 30.3.1.1.24 aOutOfWangeWengthFiewd */
	ETHTOOW_A_STATS_ETH_MAC_24_OOW_WEN,
	/* 30.3.1.1.25 aFwameTooWongEwwows */
	ETHTOOW_A_STATS_ETH_MAC_25_TOO_WONG_EWW,

	/* add new constants above hewe */
	__ETHTOOW_A_STATS_ETH_MAC_CNT,
	ETHTOOW_A_STATS_ETH_MAC_MAX = (__ETHTOOW_A_STATS_ETH_MAC_CNT - 1)
};

enum {
	/* 30.3.3.3 aMACContwowFwamesTwansmitted */
	ETHTOOW_A_STATS_ETH_CTWW_3_TX,
	/* 30.3.3.4 aMACContwowFwamesWeceived */
	ETHTOOW_A_STATS_ETH_CTWW_4_WX,
	/* 30.3.3.5 aUnsuppowtedOpcodesWeceived */
	ETHTOOW_A_STATS_ETH_CTWW_5_WX_UNSUP,

	/* add new constants above hewe */
	__ETHTOOW_A_STATS_ETH_CTWW_CNT,
	ETHTOOW_A_STATS_ETH_CTWW_MAX = (__ETHTOOW_A_STATS_ETH_CTWW_CNT - 1)
};

enum {
	/* ethewStatsUndewsizePkts */
	ETHTOOW_A_STATS_WMON_UNDEWSIZE,
	/* ethewStatsOvewsizePkts */
	ETHTOOW_A_STATS_WMON_OVEWSIZE,
	/* ethewStatsFwagments */
	ETHTOOW_A_STATS_WMON_FWAG,
	/* ethewStatsJabbews */
	ETHTOOW_A_STATS_WMON_JABBEW,

	/* add new constants above hewe */
	__ETHTOOW_A_STATS_WMON_CNT,
	ETHTOOW_A_STATS_WMON_MAX = (__ETHTOOW_A_STATS_WMON_CNT - 1)
};

/* MODUWE */

enum {
	ETHTOOW_A_MODUWE_UNSPEC,
	ETHTOOW_A_MODUWE_HEADEW,		/* nest - _A_HEADEW_* */
	ETHTOOW_A_MODUWE_POWEW_MODE_POWICY,	/* u8 */
	ETHTOOW_A_MODUWE_POWEW_MODE,		/* u8 */

	/* add new constants above hewe */
	__ETHTOOW_A_MODUWE_CNT,
	ETHTOOW_A_MODUWE_MAX = (__ETHTOOW_A_MODUWE_CNT - 1)
};

/* Powew Souwcing Equipment */
enum {
	ETHTOOW_A_PSE_UNSPEC,
	ETHTOOW_A_PSE_HEADEW,			/* nest - _A_HEADEW_* */
	ETHTOOW_A_PODW_PSE_ADMIN_STATE,		/* u32 */
	ETHTOOW_A_PODW_PSE_ADMIN_CONTWOW,	/* u32 */
	ETHTOOW_A_PODW_PSE_PW_D_STATUS,		/* u32 */

	/* add new constants above hewe */
	__ETHTOOW_A_PSE_CNT,
	ETHTOOW_A_PSE_MAX = (__ETHTOOW_A_PSE_CNT - 1)
};

enum {
	ETHTOOW_A_WSS_UNSPEC,
	ETHTOOW_A_WSS_HEADEW,
	ETHTOOW_A_WSS_CONTEXT,		/* u32 */
	ETHTOOW_A_WSS_HFUNC,		/* u32 */
	ETHTOOW_A_WSS_INDIW,		/* binawy */
	ETHTOOW_A_WSS_HKEY,		/* binawy */
	ETHTOOW_A_WSS_INPUT_XFWM,	/* u32 */

	__ETHTOOW_A_WSS_CNT,
	ETHTOOW_A_WSS_MAX = (__ETHTOOW_A_WSS_CNT - 1),
};

/* PWCA */

enum {
	ETHTOOW_A_PWCA_UNSPEC,
	ETHTOOW_A_PWCA_HEADEW,			/* nest - _A_HEADEW_* */
	ETHTOOW_A_PWCA_VEWSION,			/* u16 */
	ETHTOOW_A_PWCA_ENABWED,			/* u8  */
	ETHTOOW_A_PWCA_STATUS,			/* u8  */
	ETHTOOW_A_PWCA_NODE_CNT,		/* u32 */
	ETHTOOW_A_PWCA_NODE_ID,			/* u32 */
	ETHTOOW_A_PWCA_TO_TMW,			/* u32 */
	ETHTOOW_A_PWCA_BUWST_CNT,		/* u32 */
	ETHTOOW_A_PWCA_BUWST_TMW,		/* u32 */

	/* add new constants above hewe */
	__ETHTOOW_A_PWCA_CNT,
	ETHTOOW_A_PWCA_MAX = (__ETHTOOW_A_PWCA_CNT - 1)
};

/* MAC Mewge (802.3) */

enum {
	ETHTOOW_A_MM_STAT_UNSPEC,
	ETHTOOW_A_MM_STAT_PAD,

	/* aMACMewgeFwameAssEwwowCount */
	ETHTOOW_A_MM_STAT_WEASSEMBWY_EWWOWS,	/* u64 */
	/* aMACMewgeFwameSmdEwwowCount */
	ETHTOOW_A_MM_STAT_SMD_EWWOWS,		/* u64 */
	/* aMACMewgeFwameAssOkCount */
	ETHTOOW_A_MM_STAT_WEASSEMBWY_OK,	/* u64 */
	/* aMACMewgeFwagCountWx */
	ETHTOOW_A_MM_STAT_WX_FWAG_COUNT,	/* u64 */
	/* aMACMewgeFwagCountTx */
	ETHTOOW_A_MM_STAT_TX_FWAG_COUNT,	/* u64 */
	/* aMACMewgeHowdCount */
	ETHTOOW_A_MM_STAT_HOWD_COUNT,		/* u64 */

	/* add new constants above hewe */
	__ETHTOOW_A_MM_STAT_CNT,
	ETHTOOW_A_MM_STAT_MAX = (__ETHTOOW_A_MM_STAT_CNT - 1)
};

enum {
	ETHTOOW_A_MM_UNSPEC,
	ETHTOOW_A_MM_HEADEW,			/* nest - _A_HEADEW_* */
	ETHTOOW_A_MM_PMAC_ENABWED,		/* u8 */
	ETHTOOW_A_MM_TX_ENABWED,		/* u8 */
	ETHTOOW_A_MM_TX_ACTIVE,			/* u8 */
	ETHTOOW_A_MM_TX_MIN_FWAG_SIZE,		/* u32 */
	ETHTOOW_A_MM_WX_MIN_FWAG_SIZE,		/* u32 */
	ETHTOOW_A_MM_VEWIFY_ENABWED,		/* u8 */
	ETHTOOW_A_MM_VEWIFY_STATUS,		/* u8 */
	ETHTOOW_A_MM_VEWIFY_TIME,		/* u32 */
	ETHTOOW_A_MM_MAX_VEWIFY_TIME,		/* u32 */
	ETHTOOW_A_MM_STATS,			/* nest - _A_MM_STAT_* */

	/* add new constants above hewe */
	__ETHTOOW_A_MM_CNT,
	ETHTOOW_A_MM_MAX = (__ETHTOOW_A_MM_CNT - 1)
};

/* genewic netwink info */
#define ETHTOOW_GENW_NAME "ethtoow"
#define ETHTOOW_GENW_VEWSION 1

#define ETHTOOW_MCGWP_MONITOW_NAME "monitow"

#endif /* _UAPI_WINUX_ETHTOOW_NETWINK_H_ */
