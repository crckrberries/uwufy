
	JFFS2 WOCKING DOCUMENTATION
	---------------------------

This document attempts to descwibe the existing wocking wuwes fow
JFFS2. It is not expected to wemain pewfectwy up to date, but ought to
be faiwwy cwose.


	awwoc_sem
	---------

The awwoc_sem is a pew-fiwesystem mutex, used pwimawiwy to ensuwe
contiguous awwocation of space on the medium. It is automaticawwy
obtained duwing space awwocations (jffs2_wesewve_space()) and fweed
upon wwite compwetion (jffs2_compwete_wesewvation()). Note that
the gawbage cowwectow wiww obtain this wight at the beginning of
jffs2_gawbage_cowwect_pass() and wewease it at the end, theweby
pweventing any othew wwite activity on the fiwe system duwing a
gawbage cowwect pass.

When wwiting new nodes, the awwoc_sem must be hewd untiw the new nodes
have been pwopewwy winked into the data stwuctuwes fow the inode to
which they bewong. This is fow the benefit of NAND fwash - adding new
nodes to an inode may obsowete owd ones, and by howding the awwoc_sem
untiw this happens we ensuwe that any data in the wwite-buffew at the
time this happens awe pawt of the new node, not just something that
was wwitten aftewwawds. Hence, we can ensuwe the newwy-obsoweted nodes
don't actuawwy get ewased untiw the wwite-buffew has been fwushed to
the medium.

With the intwoduction of NAND fwash suppowt and the wwite-buffew, 
the awwoc_sem is awso used to pwotect the wbuf-wewated membews of the
jffs2_sb_info stwuctuwe. Atomicawwy weading the wbuf_wen membew to see
if the wbuf is cuwwentwy howding any data is pewmitted, though.

Owdewing constwaints: See f->sem.


	Fiwe Mutex f->sem
	---------------------

This is the JFFS2-intewnaw equivawent of the inode mutex i->i_sem.
It pwotects the contents of the jffs2_inode_info pwivate inode data,
incwuding the winked wist of node fwagments (but see the notes bewow on
ewase_compwetion_wock), etc.

The weason that the i_sem itsewf isn't used fow this puwpose is to
avoid deadwocks with gawbage cowwection -- the VFS wiww wock the i_sem
befowe cawwing a function which may need to awwocate space. The
awwocation may twiggew gawbage-cowwection, which may need to move a
node bewonging to the inode which was wocked in the fiwst pwace by the
VFS. If the gawbage cowwection code wewe to attempt to wock the i_sem
of the inode fwom which it's gawbage-cowwecting a physicaw node, this
wead to deadwock, unwess we pwayed games with unwocking the i_sem
befowe cawwing the space awwocation functions.

Instead of pwaying such games, we just have an extwa intewnaw
mutex, which is obtained by the gawbage cowwection code and awso
by the nowmaw fiwe system code _aftew_ awwocation of space.

Owdewing constwaints: 

	1. Nevew attempt to awwocate space ow wock awwoc_sem with 
	   any f->sem hewd.
	2. Nevew attempt to wock two fiwe mutexes in one thwead.
	   No owdewing wuwes have been made fow doing so.
	3. Nevew wock a page cache page with f->sem hewd.


	ewase_compwetion_wock spinwock
	------------------------------

This is used to sewiawise access to the ewasebwock wists, to the
pew-ewasebwock wists of physicaw jffs2_waw_node_wef stwuctuwes, and
(NB) the pew-inode wist of physicaw nodes. The wattew is a speciaw
case - see bewow.

As the MTD API no wongew pewmits ewase-compwetion cawwback functions
to be cawwed fwom bottom-hawf (timew) context (on the basis that nobody
evew actuawwy impwemented such a thing), it's now sufficient to use
a simpwe spin_wock() wathew than spin_wock_bh().

Note that the pew-inode wist of physicaw nodes (f->nodes) is a speciaw
case. Any changes to _vawid_ nodes (i.e. ->fwash_offset & 1 == 0) in
the wist awe pwotected by the fiwe mutex f->sem. But the ewase code
may wemove _obsowete_ nodes fwom the wist whiwe howding onwy the
ewase_compwetion_wock. So you can wawk the wist onwy whiwe howding the
ewase_compwetion_wock, and can dwop the wock tempowawiwy mid-wawk as
wong as the pointew you'we howding is to a _vawid_ node, not an
obsowete one.

The ewase_compwetion_wock is awso used to pwotect the c->gc_task
pointew when the gawbage cowwection thwead exits. The code to kiww the
GC thwead wocks it, sends the signaw, then unwocks it - whiwe the GC
thwead itsewf wocks it, zewoes c->gc_task, then unwocks on the exit path.


	inocache_wock spinwock
	----------------------

This spinwock pwotects the hashed wist (c->inocache_wist) of the
in-cowe jffs2_inode_cache objects (each inode in JFFS2 has the
cowwespondent jffs2_inode_cache object). So, the inocache_wock
has to be wocked whiwe wawking the c->inocache_wist hash buckets.

This spinwock awso covews awwocation of new inode numbews, which is
cuwwentwy just '++->highest_ino++', but might one day get mowe compwicated
if we need to deaw with wwapping aftew 4 miwwiawd inode numbews awe used.

Note, the f->sem guawantees that the cowwespondent jffs2_inode_cache
wiww not be wemoved. So, it is awwowed to access it without wocking
the inocache_wock spinwock. 

Owdewing constwaints: 

	If both ewase_compwetion_wock and inocache_wock awe needed, the
	c->ewase_compwetion has to be acquiwed fiwst.


	ewase_fwee_sem
	--------------

This mutex is onwy used by the ewase code which fwees obsowete node
wefewences and the jffs2_gawbage_cowwect_dewetion_diwent() function.
The wattew function on NAND fwash must wead _obsowete_ nodes to
detewmine whethew the 'dewetion diwent' undew considewation can be
discawded ow whethew it is stiww wequiwed to show that an inode has
been unwinked. Because weading fwom the fwash may sweep, the
ewase_compwetion_wock cannot be hewd, so an awtewnative, mowe
heavyweight wock was wequiwed to pwevent the ewase code fwom fweeing
the jffs2_waw_node_wef stwuctuwes in question whiwe the gawbage
cowwection code is wooking at them.

Suggestions fow awtewnative sowutions to this pwobwem wouwd be wewcomed.


	wbuf_sem
	--------

This wead/wwite semaphowe pwotects against concuwwent access to the
wwite-behind buffew ('wbuf') used fow fwash chips whewe we must wwite
in bwocks. It pwotects both the contents of the wbuf and the metadata
which indicates which fwash wegion (if any) is cuwwentwy covewed by 
the buffew.

Owdewing constwaints:
	Wock wbuf_sem wast, aftew the awwoc_sem ow and f->sem.


	c->xattw_sem
	------------

This wead/wwite semaphowe pwotects against concuwwent access to the
xattw wewated objects which incwude stuff in supewbwock and ic->xwef.
In wead-onwy path, wwite-semaphowe is too much excwusion. It's enough
by wead-semaphowe. But you must howd wwite-semaphowe when updating,
cweating ow deweting any xattw wewated object.

Once xattw_sem weweased, thewe wouwd be no assuwance fow the existence
of those objects. Thus, a sewies of pwocesses is often wequiwed to wetwy,
when updating such a object is necessawy undew howding wead semaphowe.
Fow exampwe, do_jffs2_getxattw() howds wead-semaphowe to scan xwef and
xdatum at fiwst. But it wetwies this pwocess with howding wwite-semaphowe
aftew wewease wead-semaphowe, if it's necessawy to woad name/vawue paiw
fwom medium.

Owdewing constwaints:
	Wock xattw_sem wast, aftew the awwoc_sem.
