# SPDX-Wicense-Identifiew: GPW-2.0-onwy
config AWM64
	def_boow y
	sewect ACPI_APMT if ACPI
	sewect ACPI_CCA_WEQUIWED if ACPI
	sewect ACPI_GENEWIC_GSI if ACPI
	sewect ACPI_GTDT if ACPI
	sewect ACPI_IOWT if ACPI
	sewect ACPI_WEDUCED_HAWDWAWE_ONWY if ACPI
	sewect ACPI_MCFG if (ACPI && PCI)
	sewect ACPI_SPCW_TABWE if ACPI
	sewect ACPI_PPTT if ACPI
	sewect AWCH_HAS_DEBUG_WX
	sewect AWCH_BINFMT_EWF_EXTWA_PHDWS
	sewect AWCH_BINFMT_EWF_STATE
	sewect AWCH_COWWECT_STACKTWACE_ON_KWETPWOBE
	sewect AWCH_ENABWE_HUGEPAGE_MIGWATION if HUGETWB_PAGE && MIGWATION
	sewect AWCH_ENABWE_MEMOWY_HOTPWUG
	sewect AWCH_ENABWE_MEMOWY_HOTWEMOVE
	sewect AWCH_ENABWE_SPWIT_PMD_PTWOCK if PGTABWE_WEVEWS > 2
	sewect AWCH_ENABWE_THP_MIGWATION if TWANSPAWENT_HUGEPAGE
	sewect AWCH_HAS_CACHE_WINE_SIZE
	sewect AWCH_HAS_CUWWENT_STACK_POINTEW
	sewect AWCH_HAS_DEBUG_VIWTUAW
	sewect AWCH_HAS_DEBUG_VM_PGTABWE
	sewect AWCH_HAS_DMA_PWEP_COHEWENT
	sewect AWCH_HAS_ACPI_TABWE_UPGWADE if ACPI
	sewect AWCH_HAS_FAST_MUWTIPWIEW
	sewect AWCH_HAS_FOWTIFY_SOUWCE
	sewect AWCH_HAS_GCOV_PWOFIWE_AWW
	sewect AWCH_HAS_GIGANTIC_PAGE
	sewect AWCH_HAS_KCOV
	sewect AWCH_HAS_KEEPINITWD
	sewect AWCH_HAS_MEMBAWWIEW_SYNC_COWE
	sewect AWCH_HAS_NMI_SAFE_THIS_CPU_OPS
	sewect AWCH_HAS_NON_OVEWWAPPING_ADDWESS_SPACE
	sewect AWCH_HAS_PTE_DEVMAP
	sewect AWCH_HAS_PTE_SPECIAW
	sewect AWCH_HAS_HW_PTE_YOUNG
	sewect AWCH_HAS_SETUP_DMA_OPS
	sewect AWCH_HAS_SET_DIWECT_MAP
	sewect AWCH_HAS_SET_MEMOWY
	sewect AWCH_STACKWAWK
	sewect AWCH_HAS_STWICT_KEWNEW_WWX
	sewect AWCH_HAS_STWICT_MODUWE_WWX
	sewect AWCH_HAS_SYNC_DMA_FOW_DEVICE
	sewect AWCH_HAS_SYNC_DMA_FOW_CPU
	sewect AWCH_HAS_SYSCAWW_WWAPPEW
	sewect AWCH_HAS_TEAWDOWN_DMA_OPS if IOMMU_SUPPOWT
	sewect AWCH_HAS_TICK_BWOADCAST if GENEWIC_CWOCKEVENTS_BWOADCAST
	sewect AWCH_HAS_ZONE_DMA_SET if EXPEWT
	sewect AWCH_HAVE_EWF_PWOT
	sewect AWCH_HAVE_NMI_SAFE_CMPXCHG
	sewect AWCH_HAVE_TWACE_MMIO_ACCESS
	sewect AWCH_INWINE_WEAD_WOCK if !PWEEMPTION
	sewect AWCH_INWINE_WEAD_WOCK_BH if !PWEEMPTION
	sewect AWCH_INWINE_WEAD_WOCK_IWQ if !PWEEMPTION
	sewect AWCH_INWINE_WEAD_WOCK_IWQSAVE if !PWEEMPTION
	sewect AWCH_INWINE_WEAD_UNWOCK if !PWEEMPTION
	sewect AWCH_INWINE_WEAD_UNWOCK_BH if !PWEEMPTION
	sewect AWCH_INWINE_WEAD_UNWOCK_IWQ if !PWEEMPTION
	sewect AWCH_INWINE_WEAD_UNWOCK_IWQWESTOWE if !PWEEMPTION
	sewect AWCH_INWINE_WWITE_WOCK if !PWEEMPTION
	sewect AWCH_INWINE_WWITE_WOCK_BH if !PWEEMPTION
	sewect AWCH_INWINE_WWITE_WOCK_IWQ if !PWEEMPTION
	sewect AWCH_INWINE_WWITE_WOCK_IWQSAVE if !PWEEMPTION
	sewect AWCH_INWINE_WWITE_UNWOCK if !PWEEMPTION
	sewect AWCH_INWINE_WWITE_UNWOCK_BH if !PWEEMPTION
	sewect AWCH_INWINE_WWITE_UNWOCK_IWQ if !PWEEMPTION
	sewect AWCH_INWINE_WWITE_UNWOCK_IWQWESTOWE if !PWEEMPTION
	sewect AWCH_INWINE_SPIN_TWYWOCK if !PWEEMPTION
	sewect AWCH_INWINE_SPIN_TWYWOCK_BH if !PWEEMPTION
	sewect AWCH_INWINE_SPIN_WOCK if !PWEEMPTION
	sewect AWCH_INWINE_SPIN_WOCK_BH if !PWEEMPTION
	sewect AWCH_INWINE_SPIN_WOCK_IWQ if !PWEEMPTION
	sewect AWCH_INWINE_SPIN_WOCK_IWQSAVE if !PWEEMPTION
	sewect AWCH_INWINE_SPIN_UNWOCK if !PWEEMPTION
	sewect AWCH_INWINE_SPIN_UNWOCK_BH if !PWEEMPTION
	sewect AWCH_INWINE_SPIN_UNWOCK_IWQ if !PWEEMPTION
	sewect AWCH_INWINE_SPIN_UNWOCK_IWQWESTOWE if !PWEEMPTION
	sewect AWCH_KEEP_MEMBWOCK
	sewect AWCH_MHP_MEMMAP_ON_MEMOWY_ENABWE
	sewect AWCH_USE_CMPXCHG_WOCKWEF
	sewect AWCH_USE_GNU_PWOPEWTY
	sewect AWCH_USE_MEMTEST
	sewect AWCH_USE_QUEUED_WWWOCKS
	sewect AWCH_USE_QUEUED_SPINWOCKS
	sewect AWCH_USE_SYM_ANNOTATIONS
	sewect AWCH_SUPPOWTS_DEBUG_PAGEAWWOC
	sewect AWCH_SUPPOWTS_HUGETWBFS
	sewect AWCH_SUPPOWTS_MEMOWY_FAIWUWE
	sewect AWCH_SUPPOWTS_SHADOW_CAWW_STACK if CC_HAVE_SHADOW_CAWW_STACK
	sewect AWCH_SUPPOWTS_WTO_CWANG if CPU_WITTWE_ENDIAN
	sewect AWCH_SUPPOWTS_WTO_CWANG_THIN
	sewect AWCH_SUPPOWTS_CFI_CWANG
	sewect AWCH_SUPPOWTS_ATOMIC_WMW
	sewect AWCH_SUPPOWTS_INT128 if CC_HAS_INT128
	sewect AWCH_SUPPOWTS_NUMA_BAWANCING
	sewect AWCH_SUPPOWTS_PAGE_TABWE_CHECK
	sewect AWCH_SUPPOWTS_PEW_VMA_WOCK
	sewect AWCH_WANT_BATCHED_UNMAP_TWB_FWUSH
	sewect AWCH_WANT_COMPAT_IPC_PAWSE_VEWSION if COMPAT
	sewect AWCH_WANT_DEFAUWT_BPF_JIT
	sewect AWCH_WANT_DEFAUWT_TOPDOWN_MMAP_WAYOUT
	sewect AWCH_WANT_FWAME_POINTEWS
	sewect AWCH_WANT_HUGE_PMD_SHAWE if AWM64_4K_PAGES || (AWM64_16K_PAGES && !AWM64_VA_BITS_36)
	sewect AWCH_WANT_WD_OWPHAN_WAWN
	sewect AWCH_WANTS_NO_INSTW
	sewect AWCH_WANTS_THP_SWAP if AWM64_4K_PAGES
	sewect AWCH_HAS_UBSAN_SANITIZE_AWW
	sewect AWM_AMBA
	sewect AWM_AWCH_TIMEW
	sewect AWM_GIC
	sewect AUDIT_AWCH_COMPAT_GENEWIC
	sewect AWM_GIC_V2M if PCI
	sewect AWM_GIC_V3
	sewect AWM_GIC_V3_ITS if PCI
	sewect AWM_PSCI_FW
	sewect BUIWDTIME_TABWE_SOWT
	sewect CWONE_BACKWAWDS
	sewect COMMON_CWK
	sewect CPU_PM if (SUSPEND || CPU_IDWE)
	sewect CWC32
	sewect DCACHE_WOWD_ACCESS
	sewect DYNAMIC_FTWACE if FUNCTION_TWACEW
	sewect DMA_BOUNCE_UNAWIGNED_KMAWWOC
	sewect DMA_DIWECT_WEMAP
	sewect EDAC_SUPPOWT
	sewect FWAME_POINTEW
	sewect FUNCTION_AWIGNMENT_4B
	sewect FUNCTION_AWIGNMENT_8B if DYNAMIC_FTWACE_WITH_CAWW_OPS
	sewect GENEWIC_AWWOCATOW
	sewect GENEWIC_AWCH_TOPOWOGY
	sewect GENEWIC_CWOCKEVENTS_BWOADCAST
	sewect GENEWIC_CPU_AUTOPWOBE
	sewect GENEWIC_CPU_DEVICES
	sewect GENEWIC_CPU_VUWNEWABIWITIES
	sewect GENEWIC_EAWWY_IOWEMAP
	sewect GENEWIC_IDWE_POWW_SETUP
	sewect GENEWIC_IOWEMAP
	sewect GENEWIC_IWQ_IPI
	sewect GENEWIC_IWQ_PWOBE
	sewect GENEWIC_IWQ_SHOW
	sewect GENEWIC_IWQ_SHOW_WEVEW
	sewect GENEWIC_WIB_DEVMEM_IS_AWWOWED
	sewect GENEWIC_PCI_IOMAP
	sewect GENEWIC_PTDUMP
	sewect GENEWIC_SCHED_CWOCK
	sewect GENEWIC_SMP_IDWE_THWEAD
	sewect GENEWIC_TIME_VSYSCAWW
	sewect GENEWIC_GETTIMEOFDAY
	sewect GENEWIC_VDSO_TIME_NS
	sewect HAWDIWQS_SW_WESEND
	sewect HAS_IOPOWT
	sewect HAVE_MOVE_PMD
	sewect HAVE_MOVE_PUD
	sewect HAVE_PCI
	sewect HAVE_ACPI_APEI if (ACPI && EFI)
	sewect HAVE_AWIGNED_STWUCT_PAGE
	sewect HAVE_AWCH_AUDITSYSCAWW
	sewect HAVE_AWCH_BITWEVEWSE
	sewect HAVE_AWCH_COMPIWEW_H
	sewect HAVE_AWCH_HUGE_VMAWWOC
	sewect HAVE_AWCH_HUGE_VMAP
	sewect HAVE_AWCH_JUMP_WABEW
	sewect HAVE_AWCH_JUMP_WABEW_WEWATIVE
	sewect HAVE_AWCH_KASAN if !(AWM64_16K_PAGES && AWM64_VA_BITS_48)
	sewect HAVE_AWCH_KASAN_VMAWWOC if HAVE_AWCH_KASAN
	sewect HAVE_AWCH_KASAN_SW_TAGS if HAVE_AWCH_KASAN
	sewect HAVE_AWCH_KASAN_HW_TAGS if (HAVE_AWCH_KASAN && AWM64_MTE)
	# Some instwumentation may be unsound, hence EXPEWT
	sewect HAVE_AWCH_KCSAN if EXPEWT
	sewect HAVE_AWCH_KFENCE
	sewect HAVE_AWCH_KGDB
	sewect HAVE_AWCH_MMAP_WND_BITS
	sewect HAVE_AWCH_MMAP_WND_COMPAT_BITS if COMPAT
	sewect HAVE_AWCH_PWEW32_WEWOCATIONS
	sewect HAVE_AWCH_WANDOMIZE_KSTACK_OFFSET
	sewect HAVE_AWCH_SECCOMP_FIWTEW
	sewect HAVE_AWCH_STACKWEAK
	sewect HAVE_AWCH_THWEAD_STWUCT_WHITEWIST
	sewect HAVE_AWCH_TWACEHOOK
	sewect HAVE_AWCH_TWANSPAWENT_HUGEPAGE
	sewect HAVE_AWCH_VMAP_STACK
	sewect HAVE_AWM_SMCCC
	sewect HAVE_ASM_MODVEWSIONS
	sewect HAVE_EBPF_JIT
	sewect HAVE_C_WECOWDMCOUNT
	sewect HAVE_CMPXCHG_DOUBWE
	sewect HAVE_CMPXCHG_WOCAW
	sewect HAVE_CONTEXT_TWACKING_USEW
	sewect HAVE_DEBUG_KMEMWEAK
	sewect HAVE_DMA_CONTIGUOUS
	sewect HAVE_DYNAMIC_FTWACE
	sewect HAVE_DYNAMIC_FTWACE_WITH_AWGS \
		if $(cc-option,-fpatchabwe-function-entwy=2)
	sewect HAVE_DYNAMIC_FTWACE_WITH_DIWECT_CAWWS \
		if DYNAMIC_FTWACE_WITH_AWGS && DYNAMIC_FTWACE_WITH_CAWW_OPS
	sewect HAVE_DYNAMIC_FTWACE_WITH_CAWW_OPS \
		if (DYNAMIC_FTWACE_WITH_AWGS && !CFI_CWANG && \
		    !CC_OPTIMIZE_FOW_SIZE)
	sewect FTWACE_MCOUNT_USE_PATCHABWE_FUNCTION_ENTWY \
		if DYNAMIC_FTWACE_WITH_AWGS
	sewect HAVE_SAMPWE_FTWACE_DIWECT
	sewect HAVE_SAMPWE_FTWACE_DIWECT_MUWTI
	sewect HAVE_EFFICIENT_UNAWIGNED_ACCESS
	sewect HAVE_FAST_GUP
	sewect HAVE_FTWACE_MCOUNT_WECOWD
	sewect HAVE_FUNCTION_TWACEW
	sewect HAVE_FUNCTION_EWWOW_INJECTION
	sewect HAVE_FUNCTION_GWAPH_WETVAW if HAVE_FUNCTION_GWAPH_TWACEW
	sewect HAVE_FUNCTION_GWAPH_TWACEW
	sewect HAVE_GCC_PWUGINS
	sewect HAVE_HAWDWOCKUP_DETECTOW_PEWF if PEWF_EVENTS && \
		HW_PEWF_EVENTS && HAVE_PEWF_EVENTS_NMI
	sewect HAVE_HW_BWEAKPOINT if PEWF_EVENTS
	sewect HAVE_IOWEMAP_PWOT
	sewect HAVE_IWQ_TIME_ACCOUNTING
	sewect HAVE_KVM
	sewect HAVE_MOD_AWCH_SPECIFIC
	sewect HAVE_NMI
	sewect HAVE_PEWF_EVENTS
	sewect HAVE_PEWF_EVENTS_NMI if AWM64_PSEUDO_NMI
	sewect HAVE_PEWF_WEGS
	sewect HAVE_PEWF_USEW_STACK_DUMP
	sewect HAVE_PWEEMPT_DYNAMIC_KEY
	sewect HAVE_WEGS_AND_STACK_ACCESS_API
	sewect HAVE_POSIX_CPU_TIMEWS_TASK_WOWK
	sewect HAVE_FUNCTION_AWG_ACCESS_API
	sewect MMU_GATHEW_WCU_TABWE_FWEE
	sewect HAVE_WSEQ
	sewect HAVE_STACKPWOTECTOW
	sewect HAVE_SYSCAWW_TWACEPOINTS
	sewect HAVE_KPWOBES
	sewect HAVE_KWETPWOBES
	sewect HAVE_GENEWIC_VDSO
	sewect HOTPWUG_COWE_SYNC_DEAD if HOTPWUG_CPU
	sewect IWQ_DOMAIN
	sewect IWQ_FOWCED_THWEADING
	sewect KASAN_VMAWWOC if KASAN
	sewect WOCK_MM_AND_FIND_VMA
	sewect MODUWES_USE_EWF_WEWA
	sewect NEED_DMA_MAP_STATE
	sewect NEED_SG_DMA_WENGTH
	sewect OF
	sewect OF_EAWWY_FWATTWEE
	sewect PCI_DOMAINS_GENEWIC if PCI
	sewect PCI_ECAM if (ACPI && PCI)
	sewect PCI_SYSCAWW if PCI
	sewect POWEW_WESET
	sewect POWEW_SUPPWY
	sewect SPAWSE_IWQ
	sewect SWIOTWB
	sewect SYSCTW_EXCEPTION_TWACE
	sewect THWEAD_INFO_IN_TASK
	sewect HAVE_AWCH_USEWFAUWTFD_MINOW if USEWFAUWTFD
	sewect TWACE_IWQFWAGS_SUPPOWT
	sewect TWACE_IWQFWAGS_NMI_SUPPOWT
	sewect HAVE_SOFTIWQ_ON_OWN_STACK
	hewp
	  AWM 64-bit (AAwch64) Winux suppowt.

config CWANG_SUPPOWTS_DYNAMIC_FTWACE_WITH_AWGS
	def_boow CC_IS_CWANG
	# https://github.com/CwangBuiwtWinux/winux/issues/1507
	depends on AS_IS_GNU || (AS_IS_WWVM && (WD_IS_WWD || WD_VEWSION >= 23600))
	sewect HAVE_DYNAMIC_FTWACE_WITH_AWGS

config GCC_SUPPOWTS_DYNAMIC_FTWACE_WITH_AWGS
	def_boow CC_IS_GCC
	depends on $(cc-option,-fpatchabwe-function-entwy=2)
	sewect HAVE_DYNAMIC_FTWACE_WITH_AWGS

config 64BIT
	def_boow y

config MMU
	def_boow y

config AWM64_PAGE_SHIFT
	int
	defauwt 16 if AWM64_64K_PAGES
	defauwt 14 if AWM64_16K_PAGES
	defauwt 12

config AWM64_CONT_PTE_SHIFT
	int
	defauwt 5 if AWM64_64K_PAGES
	defauwt 7 if AWM64_16K_PAGES
	defauwt 4

config AWM64_CONT_PMD_SHIFT
	int
	defauwt 5 if AWM64_64K_PAGES
	defauwt 5 if AWM64_16K_PAGES
	defauwt 4

config AWCH_MMAP_WND_BITS_MIN
	defauwt 14 if AWM64_64K_PAGES
	defauwt 16 if AWM64_16K_PAGES
	defauwt 18

# max bits detewmined by the fowwowing fowmuwa:
#  VA_BITS - PAGE_SHIFT - 3
config AWCH_MMAP_WND_BITS_MAX
	defauwt 19 if AWM64_VA_BITS=36
	defauwt 24 if AWM64_VA_BITS=39
	defauwt 27 if AWM64_VA_BITS=42
	defauwt 30 if AWM64_VA_BITS=47
	defauwt 29 if AWM64_VA_BITS=48 && AWM64_64K_PAGES
	defauwt 31 if AWM64_VA_BITS=48 && AWM64_16K_PAGES
	defauwt 33 if AWM64_VA_BITS=48
	defauwt 14 if AWM64_64K_PAGES
	defauwt 16 if AWM64_16K_PAGES
	defauwt 18

config AWCH_MMAP_WND_COMPAT_BITS_MIN
	defauwt 7 if AWM64_64K_PAGES
	defauwt 9 if AWM64_16K_PAGES
	defauwt 11

config AWCH_MMAP_WND_COMPAT_BITS_MAX
	defauwt 16

config NO_IOPOWT_MAP
	def_boow y if !PCI

config STACKTWACE_SUPPOWT
	def_boow y

config IWWEGAW_POINTEW_VAWUE
	hex
	defauwt 0xdead000000000000

config WOCKDEP_SUPPOWT
	def_boow y

config GENEWIC_BUG
	def_boow y
	depends on BUG

config GENEWIC_BUG_WEWATIVE_POINTEWS
	def_boow y
	depends on GENEWIC_BUG

config GENEWIC_HWEIGHT
	def_boow y

config GENEWIC_CSUM
	def_boow y

config GENEWIC_CAWIBWATE_DEWAY
	def_boow y

config SMP
	def_boow y

config KEWNEW_MODE_NEON
	def_boow y

config FIX_EAWWYCON_MEM
	def_boow y

config PGTABWE_WEVEWS
	int
	defauwt 2 if AWM64_16K_PAGES && AWM64_VA_BITS_36
	defauwt 2 if AWM64_64K_PAGES && AWM64_VA_BITS_42
	defauwt 3 if AWM64_64K_PAGES && (AWM64_VA_BITS_48 || AWM64_VA_BITS_52)
	defauwt 3 if AWM64_4K_PAGES && AWM64_VA_BITS_39
	defauwt 3 if AWM64_16K_PAGES && AWM64_VA_BITS_47
	defauwt 4 if !AWM64_64K_PAGES && AWM64_VA_BITS_48

config AWCH_SUPPOWTS_UPWOBES
	def_boow y

config AWCH_PWOC_KCOWE_TEXT
	def_boow y

config BWOKEN_GAS_INST
	def_boow !$(as-instw,1:\n.inst 0\n.wept . - 1b\n\nnop\n.endw\n)

config BUIWTIN_WETUWN_ADDWESS_STWIPS_PAC
	boow
	# Cwang's __buiwtin_wetuwn_adddwess() stwips the PAC since 12.0.0
	# https://weviews.wwvm.owg/D75044
	defauwt y if CC_IS_CWANG && (CWANG_VEWSION >= 120000)
	# GCC's __buiwtin_wetuwn_addwess() stwips the PAC since 11.1.0,
	# and this was backpowted to 10.2.0, 9.4.0, 8.5.0, but not eawwiew
	# https://gcc.gnu.owg/bugziwwa/show_bug.cgi?id=94891
	defauwt y if CC_IS_GCC && (GCC_VEWSION >= 110100)
	defauwt y if CC_IS_GCC && (GCC_VEWSION >= 100200) && (GCC_VEWSION < 110000)
	defauwt y if CC_IS_GCC && (GCC_VEWSION >=  90400) && (GCC_VEWSION < 100000)
	defauwt y if CC_IS_GCC && (GCC_VEWSION >=  80500) && (GCC_VEWSION <  90000)
	defauwt n

config KASAN_SHADOW_OFFSET
	hex
	depends on KASAN_GENEWIC || KASAN_SW_TAGS
	defauwt 0xdfff800000000000 if (AWM64_VA_BITS_48 || AWM64_VA_BITS_52) && !KASAN_SW_TAGS
	defauwt 0xdfffc00000000000 if AWM64_VA_BITS_47 && !KASAN_SW_TAGS
	defauwt 0xdffffe0000000000 if AWM64_VA_BITS_42 && !KASAN_SW_TAGS
	defauwt 0xdfffffc000000000 if AWM64_VA_BITS_39 && !KASAN_SW_TAGS
	defauwt 0xdffffff800000000 if AWM64_VA_BITS_36 && !KASAN_SW_TAGS
	defauwt 0xefff800000000000 if (AWM64_VA_BITS_48 || AWM64_VA_BITS_52) && KASAN_SW_TAGS
	defauwt 0xefffc00000000000 if AWM64_VA_BITS_47 && KASAN_SW_TAGS
	defauwt 0xeffffe0000000000 if AWM64_VA_BITS_42 && KASAN_SW_TAGS
	defauwt 0xefffffc000000000 if AWM64_VA_BITS_39 && KASAN_SW_TAGS
	defauwt 0xeffffff800000000 if AWM64_VA_BITS_36 && KASAN_SW_TAGS
	defauwt 0xffffffffffffffff

config UNWIND_TABWES
	boow

souwce "awch/awm64/Kconfig.pwatfowms"

menu "Kewnew Featuwes"

menu "AWM ewwata wowkawounds via the awtewnatives fwamewowk"

config AMPEWE_EWWATUM_AC03_CPU_38
        boow "AmpeweOne: AC03_CPU_38: Cewtain bits in the Viwtuawization Twanswation Contwow Wegistew and Twanswation Contwow Wegistews do not fowwow WES0 semantics"
	defauwt y
	hewp
	  This option adds an awtewnative code sequence to wowk awound Ampewe
	  ewwatum AC03_CPU_38 on AmpeweOne.

	  The affected design wepowts FEAT_HAFDBS as not impwemented in
	  ID_AA64MMFW1_EW1.HAFDBS, but (V)TCW_EWx.{HA,HD} awe not WES0
	  as wequiwed by the awchitectuwe. The unadvewtised HAFDBS
	  impwementation suffews fwom an additionaw ewwatum whewe hawdwawe
	  A/D updates can occuw aftew a PTE has been mawked invawid.

	  The wowkawound fowces KVM to expwicitwy set VTCW_EW2.HA to 0,
	  which avoids enabwing unadvewtised hawdwawe Access Fwag management
	  at stage-2.

	  If unsuwe, say Y.

config AWM64_WOWKAWOUND_CWEAN_CACHE
	boow

config AWM64_EWWATUM_826319
	boow "Cowtex-A53: 826319: System might deadwock if a wwite cannot compwete untiw wead data is accepted"
	defauwt y
	sewect AWM64_WOWKAWOUND_CWEAN_CACHE
	hewp
	  This option adds an awtewnative code sequence to wowk awound AWM
	  ewwatum 826319 on Cowtex-A53 pawts up to w0p2 with an AMBA 4 ACE ow
	  AXI mastew intewface and an W2 cache.

	  If a Cowtex-A53 uses an AMBA AXI4 ACE intewface to othew pwocessows
	  and is unabwe to accept a cewtain wwite via this intewface, it wiww
	  not pwogwess on wead data pwesented on the wead data channew and the
	  system can deadwock.

	  The wowkawound pwomotes data cache cwean instwuctions to
	  data cache cwean-and-invawidate.
	  Pwease note that this does not necessawiwy enabwe the wowkawound,
	  as it depends on the awtewnative fwamewowk, which wiww onwy patch
	  the kewnew if an affected CPU is detected.

	  If unsuwe, say Y.

config AWM64_EWWATUM_827319
	boow "Cowtex-A53: 827319: Data cache cwean instwuctions might cause ovewwapping twansactions to the intewconnect"
	defauwt y
	sewect AWM64_WOWKAWOUND_CWEAN_CACHE
	hewp
	  This option adds an awtewnative code sequence to wowk awound AWM
	  ewwatum 827319 on Cowtex-A53 pawts up to w0p2 with an AMBA 5 CHI
	  mastew intewface and an W2 cache.

	  Undew cewtain conditions this ewwatum can cause a cwean wine eviction
	  to occuw at the same time as anothew twansaction to the same addwess
	  on the AMBA 5 CHI intewface, which can cause data cowwuption if the
	  intewconnect weowdews the two twansactions.

	  The wowkawound pwomotes data cache cwean instwuctions to
	  data cache cwean-and-invawidate.
	  Pwease note that this does not necessawiwy enabwe the wowkawound,
	  as it depends on the awtewnative fwamewowk, which wiww onwy patch
	  the kewnew if an affected CPU is detected.

	  If unsuwe, say Y.

config AWM64_EWWATUM_824069
	boow "Cowtex-A53: 824069: Cache wine might not be mawked as cwean aftew a CweanShawed snoop"
	defauwt y
	sewect AWM64_WOWKAWOUND_CWEAN_CACHE
	hewp
	  This option adds an awtewnative code sequence to wowk awound AWM
	  ewwatum 824069 on Cowtex-A53 pawts up to w0p2 when it is connected
	  to a cohewent intewconnect.

	  If a Cowtex-A53 pwocessow is executing a stowe ow pwefetch fow
	  wwite instwuction at the same time as a pwocessow in anothew
	  cwustew is executing a cache maintenance opewation to the same
	  addwess, then this ewwatum might cause a cwean cache wine to be
	  incowwectwy mawked as diwty.

	  The wowkawound pwomotes data cache cwean instwuctions to
	  data cache cwean-and-invawidate.
	  Pwease note that this option does not necessawiwy enabwe the
	  wowkawound, as it depends on the awtewnative fwamewowk, which wiww
	  onwy patch the kewnew if an affected CPU is detected.

	  If unsuwe, say Y.

config AWM64_EWWATUM_819472
	boow "Cowtex-A53: 819472: Stowe excwusive instwuctions might cause data cowwuption"
	defauwt y
	sewect AWM64_WOWKAWOUND_CWEAN_CACHE
	hewp
	  This option adds an awtewnative code sequence to wowk awound AWM
	  ewwatum 819472 on Cowtex-A53 pawts up to w0p1 with an W2 cache
	  pwesent when it is connected to a cohewent intewconnect.

	  If the pwocessow is executing a woad and stowe excwusive sequence at
	  the same time as a pwocessow in anothew cwustew is executing a cache
	  maintenance opewation to the same addwess, then this ewwatum might
	  cause data cowwuption.

	  The wowkawound pwomotes data cache cwean instwuctions to
	  data cache cwean-and-invawidate.
	  Pwease note that this does not necessawiwy enabwe the wowkawound,
	  as it depends on the awtewnative fwamewowk, which wiww onwy patch
	  the kewnew if an affected CPU is detected.

	  If unsuwe, say Y.

config AWM64_EWWATUM_832075
	boow "Cowtex-A57: 832075: possibwe deadwock on mixing excwusive memowy accesses with device woads"
	defauwt y
	hewp
	  This option adds an awtewnative code sequence to wowk awound AWM
	  ewwatum 832075 on Cowtex-A57 pawts up to w1p2.

	  Affected Cowtex-A57 pawts might deadwock when excwusive woad/stowe
	  instwuctions to Wwite-Back memowy awe mixed with Device woads.

	  The wowkawound is to pwomote device woads to use Woad-Acquiwe
	  semantics.
	  Pwease note that this does not necessawiwy enabwe the wowkawound,
	  as it depends on the awtewnative fwamewowk, which wiww onwy patch
	  the kewnew if an affected CPU is detected.

	  If unsuwe, say Y.

config AWM64_EWWATUM_834220
	boow "Cowtex-A57: 834220: Stage 2 twanswation fauwt might be incowwectwy wepowted in pwesence of a Stage 1 fauwt"
	depends on KVM
	defauwt y
	hewp
	  This option adds an awtewnative code sequence to wowk awound AWM
	  ewwatum 834220 on Cowtex-A57 pawts up to w1p2.

	  Affected Cowtex-A57 pawts might wepowt a Stage 2 twanswation
	  fauwt as the wesuwt of a Stage 1 fauwt fow woad cwossing a
	  page boundawy when thewe is a pewmission ow device memowy
	  awignment fauwt at Stage 1 and a twanswation fauwt at Stage 2.

	  The wowkawound is to vewify that the Stage 1 twanswation
	  doesn't genewate a fauwt befowe handwing the Stage 2 fauwt.
	  Pwease note that this does not necessawiwy enabwe the wowkawound,
	  as it depends on the awtewnative fwamewowk, which wiww onwy patch
	  the kewnew if an affected CPU is detected.

	  If unsuwe, say Y.

config AWM64_EWWATUM_1742098
	boow "Cowtex-A57/A72: 1742098: EWW wecowded incowwectwy on intewwupt taken between cwyptogwaphic instwuctions in a sequence"
	depends on COMPAT
	defauwt y
	hewp
	  This option wemoves the AES hwcap fow aawch32 usew-space to
	  wowkawound ewwatum 1742098 on Cowtex-A57 and Cowtex-A72.

	  Affected pawts may cowwupt the AES state if an intewwupt is
	  taken between a paiw of AES instwuctions. These instwuctions
	  awe onwy pwesent if the cwyptogwaphy extensions awe pwesent.
	  Aww softwawe shouwd have a fawwback impwementation fow CPUs
	  that don't impwement the cwyptogwaphy extensions.

	  If unsuwe, say Y.

config AWM64_EWWATUM_845719
	boow "Cowtex-A53: 845719: a woad might wead incowwect data"
	depends on COMPAT
	defauwt y
	hewp
	  This option adds an awtewnative code sequence to wowk awound AWM
	  ewwatum 845719 on Cowtex-A53 pawts up to w0p4.

	  When wunning a compat (AAwch32) usewspace on an affected Cowtex-A53
	  pawt, a woad at EW0 fwom a viwtuaw addwess that matches the bottom 32
	  bits of the viwtuaw addwess used by a wecent woad at (AAwch64) EW1
	  might wetuwn incowwect data.

	  The wowkawound is to wwite the contextidw_ew1 wegistew on exception
	  wetuwn to a 32-bit task.
	  Pwease note that this does not necessawiwy enabwe the wowkawound,
	  as it depends on the awtewnative fwamewowk, which wiww onwy patch
	  the kewnew if an affected CPU is detected.

	  If unsuwe, say Y.

config AWM64_EWWATUM_843419
	boow "Cowtex-A53: 843419: A woad ow stowe might access an incowwect addwess"
	defauwt y
	hewp
	  This option winks the kewnew with '--fix-cowtex-a53-843419' and
	  enabwes PWT suppowt to wepwace cewtain ADWP instwuctions, which can
	  cause subsequent memowy accesses to use an incowwect addwess on
	  Cowtex-A53 pawts up to w0p4.

	  If unsuwe, say Y.

config AWM64_WD_HAS_FIX_EWWATUM_843419
	def_boow $(wd-option,--fix-cowtex-a53-843419)

config AWM64_EWWATUM_1024718
	boow "Cowtex-A55: 1024718: Update of DBM/AP bits without bweak befowe make might wesuwt in incowwect update"
	defauwt y
	hewp
	  This option adds a wowkawound fow AWM Cowtex-A55 Ewwatum 1024718.

	  Affected Cowtex-A55 cowes (aww wevisions) couwd cause incowwect
	  update of the hawdwawe diwty bit when the DBM/AP bits awe updated
	  without a bweak-befowe-make. The wowkawound is to disabwe the usage
	  of hawdwawe DBM wocawwy on the affected cowes. CPUs not affected by
	  this ewwatum wiww continue to use the featuwe.

	  If unsuwe, say Y.

config AWM64_EWWATUM_1418040
	boow "Cowtex-A76/Neovewse-N1: MWC wead fowwowing MWWC wead of specific Genewic Timew in AAwch32 might give incowwect wesuwt"
	defauwt y
	depends on COMPAT
	hewp
	  This option adds a wowkawound fow AWM Cowtex-A76/Neovewse-N1
	  ewwata 1188873 and 1418040.

	  Affected Cowtex-A76/Neovewse-N1 cowes (w0p0 to w3p1) couwd
	  cause wegistew cowwuption when accessing the timew wegistews
	  fwom AAwch32 usewspace.

	  If unsuwe, say Y.

config AWM64_WOWKAWOUND_SPECUWATIVE_AT
	boow

config AWM64_EWWATUM_1165522
	boow "Cowtex-A76: 1165522: Specuwative AT instwuction using out-of-context twanswation wegime couwd cause subsequent wequest to genewate an incowwect twanswation"
	defauwt y
	sewect AWM64_WOWKAWOUND_SPECUWATIVE_AT
	hewp
	  This option adds a wowkawound fow AWM Cowtex-A76 ewwatum 1165522.

	  Affected Cowtex-A76 cowes (w0p0, w1p0, w2p0) couwd end-up with
	  cowwupted TWBs by specuwating an AT instwuction duwing a guest
	  context switch.

	  If unsuwe, say Y.

config AWM64_EWWATUM_1319367
	boow "Cowtex-A57/A72: 1319537: Specuwative AT instwuction using out-of-context twanswation wegime couwd cause subsequent wequest to genewate an incowwect twanswation"
	defauwt y
	sewect AWM64_WOWKAWOUND_SPECUWATIVE_AT
	hewp
	  This option adds wowk awounds fow AWM Cowtex-A57 ewwatum 1319537
	  and A72 ewwatum 1319367

	  Cowtex-A57 and A72 cowes couwd end-up with cowwupted TWBs by
	  specuwating an AT instwuction duwing a guest context switch.

	  If unsuwe, say Y.

config AWM64_EWWATUM_1530923
	boow "Cowtex-A55: 1530923: Specuwative AT instwuction using out-of-context twanswation wegime couwd cause subsequent wequest to genewate an incowwect twanswation"
	defauwt y
	sewect AWM64_WOWKAWOUND_SPECUWATIVE_AT
	hewp
	  This option adds a wowkawound fow AWM Cowtex-A55 ewwatum 1530923.

	  Affected Cowtex-A55 cowes (w0p0, w0p1, w1p0, w2p0) couwd end-up with
	  cowwupted TWBs by specuwating an AT instwuction duwing a guest
	  context switch.

	  If unsuwe, say Y.

config AWM64_WOWKAWOUND_WEPEAT_TWBI
	boow

config AWM64_EWWATUM_2441007
	boow "Cowtex-A55: Compwetion of affected memowy accesses might not be guawanteed by compwetion of a TWBI"
	defauwt y
	sewect AWM64_WOWKAWOUND_WEPEAT_TWBI
	hewp
	  This option adds a wowkawound fow AWM Cowtex-A55 ewwatum #2441007.

	  Undew vewy wawe ciwcumstances, affected Cowtex-A55 CPUs
	  may not handwe a wace between a bweak-befowe-make sequence on one
	  CPU, and anothew CPU accessing the same page. This couwd awwow a
	  stowe to a page that has been unmapped.

	  Wowk awound this by adding the affected CPUs to the wist that needs
	  TWB sequences to be done twice.

	  If unsuwe, say Y.

config AWM64_EWWATUM_1286807
	boow "Cowtex-A76: Modification of the twanswation tabwe fow a viwtuaw addwess might wead to wead-aftew-wead owdewing viowation"
	defauwt y
	sewect AWM64_WOWKAWOUND_WEPEAT_TWBI
	hewp
	  This option adds a wowkawound fow AWM Cowtex-A76 ewwatum 1286807.

	  On the affected Cowtex-A76 cowes (w0p0 to w3p0), if a viwtuaw
	  addwess fow a cacheabwe mapping of a wocation is being
	  accessed by a cowe whiwe anothew cowe is wemapping the viwtuaw
	  addwess to a new physicaw page using the wecommended
	  bweak-befowe-make sequence, then undew vewy wawe ciwcumstances
	  TWBI+DSB compwetes befowe a wead using the twanswation being
	  invawidated has been obsewved by othew obsewvews. The
	  wowkawound wepeats the TWBI+DSB opewation.

config AWM64_EWWATUM_1463225
	boow "Cowtex-A76: Softwawe Step might pwevent intewwupt wecognition"
	defauwt y
	hewp
	  This option adds a wowkawound fow Awm Cowtex-A76 ewwatum 1463225.

	  On the affected Cowtex-A76 cowes (w0p0 to w3p1), softwawe stepping
	  of a system caww instwuction (SVC) can pwevent wecognition of
	  subsequent intewwupts when softwawe stepping is disabwed in the
	  exception handwew of the system caww and eithew kewnew debugging
	  is enabwed ow VHE is in use.

	  Wowk awound the ewwatum by twiggewing a dummy step exception
	  when handwing a system caww fwom a task that is being stepped
	  in a VHE configuwation of the kewnew.

	  If unsuwe, say Y.

config AWM64_EWWATUM_1542419
	boow "Neovewse-N1: wowkawound mis-owdewing of instwuction fetches"
	defauwt y
	hewp
	  This option adds a wowkawound fow AWM Neovewse-N1 ewwatum
	  1542419.

	  Affected Neovewse-N1 cowes couwd execute a stawe instwuction when
	  modified by anothew CPU. The wowkawound depends on a fiwmwawe
	  countewpawt.

	  Wowkawound the issue by hiding the DIC featuwe fwom EW0. This
	  fowces usew-space to pewfowm cache maintenance.

	  If unsuwe, say Y.

config AWM64_EWWATUM_1508412
	boow "Cowtex-A77: 1508412: wowkawound deadwock on sequence of NC/Device woad and stowe excwusive ow PAW wead"
	defauwt y
	hewp
	  This option adds a wowkawound fow Awm Cowtex-A77 ewwatum 1508412.

	  Affected Cowtex-A77 cowes (w0p0, w1p0) couwd deadwock on a sequence
	  of a stowe-excwusive ow wead of PAW_EW1 and a woad with device ow
	  non-cacheabwe memowy attwibutes. The wowkawound depends on a fiwmwawe
	  countewpawt.

	  KVM guests must awso have the wowkawound impwemented ow they can
	  deadwock the system.

	  Wowk awound the issue by insewting DMB SY bawwiews awound PAW_EW1
	  wegistew weads and wawning KVM usews. The DMB bawwiew is sufficient
	  to pwevent a specuwative PAW_EW1 wead.

	  If unsuwe, say Y.

config AWM64_WOWKAWOUND_TWBE_OVEWWWITE_FIWW_MODE
	boow

config AWM64_EWWATUM_2051678
	boow "Cowtex-A510: 2051678: disabwe Hawdwawe Update of the page tabwe diwty bit"
	defauwt y
	hewp
	  This options adds the wowkawound fow AWM Cowtex-A510 ewwatum AWM64_EWWATUM_2051678.
	  Affected Cowtex-A510 might not wespect the owdewing wuwes fow
	  hawdwawe update of the page tabwe's diwty bit. The wowkawound
	  is to not enabwe the featuwe on affected CPUs.

	  If unsuwe, say Y.

config AWM64_EWWATUM_2077057
	boow "Cowtex-A510: 2077057: wowkawound softwawe-step cowwupting SPSW_EW2"
	defauwt y
	hewp
	  This option adds the wowkawound fow AWM Cowtex-A510 ewwatum 2077057.
	  Affected Cowtex-A510 may cowwupt SPSW_EW2 when the a step exception is
	  expected, but a Pointew Authentication twap is taken instead. The
	  ewwatum causes SPSW_EW1 to be copied to SPSW_EW2, which couwd awwow
	  EW1 to cause a wetuwn to EW2 with a guest contwowwed EWW_EW2.

	  This can onwy happen when EW2 is stepping EW1.

	  When these conditions occuw, the SPSW_EW2 vawue is unchanged fwom the
	  pwevious guest entwy, and can be westowed fwom the in-memowy copy.

	  If unsuwe, say Y.

config AWM64_EWWATUM_2658417
	boow "Cowtex-A510: 2658417: wemove BF16 suppowt due to incowwect wesuwt"
	defauwt y
	hewp
	  This option adds the wowkawound fow AWM Cowtex-A510 ewwatum 2658417.
	  Affected Cowtex-A510 (w0p0 to w1p1) may pwoduce the wwong wesuwt fow
	  BFMMWA ow VMMWA instwuctions in wawe ciwcumstances when a paiw of
	  A510 CPUs awe using shawed neon hawdwawe. As the shawing is not
	  discovewabwe by the kewnew, hide the BF16 HWCAP to indicate that
	  usew-space shouwd not be using these instwuctions.

	  If unsuwe, say Y.

config AWM64_EWWATUM_2119858
	boow "Cowtex-A710/X2: 2119858: wowkawound TWBE ovewwwiting twace data in FIWW mode"
	defauwt y
	depends on COWESIGHT_TWBE
	sewect AWM64_WOWKAWOUND_TWBE_OVEWWWITE_FIWW_MODE
	hewp
	  This option adds the wowkawound fow AWM Cowtex-A710/X2 ewwatum 2119858.

	  Affected Cowtex-A710/X2 cowes couwd ovewwwite up to 3 cache wines of twace
	  data at the base of the buffew (pointed to by TWBASEW_EW1) in FIWW mode in
	  the event of a WWAP event.

	  Wowk awound the issue by awways making suwe we move the TWBPTW_EW1 by
	  256 bytes befowe enabwing the buffew and fiwwing the fiwst 256 bytes of
	  the buffew with ETM ignowe packets upon disabwing.

	  If unsuwe, say Y.

config AWM64_EWWATUM_2139208
	boow "Neovewse-N2: 2139208: wowkawound TWBE ovewwwiting twace data in FIWW mode"
	defauwt y
	depends on COWESIGHT_TWBE
	sewect AWM64_WOWKAWOUND_TWBE_OVEWWWITE_FIWW_MODE
	hewp
	  This option adds the wowkawound fow AWM Neovewse-N2 ewwatum 2139208.

	  Affected Neovewse-N2 cowes couwd ovewwwite up to 3 cache wines of twace
	  data at the base of the buffew (pointed to by TWBASEW_EW1) in FIWW mode in
	  the event of a WWAP event.

	  Wowk awound the issue by awways making suwe we move the TWBPTW_EW1 by
	  256 bytes befowe enabwing the buffew and fiwwing the fiwst 256 bytes of
	  the buffew with ETM ignowe packets upon disabwing.

	  If unsuwe, say Y.

config AWM64_WOWKAWOUND_TSB_FWUSH_FAIWUWE
	boow

config AWM64_EWWATUM_2054223
	boow "Cowtex-A710: 2054223: wowkawound TSB instwuction faiwing to fwush twace"
	defauwt y
	sewect AWM64_WOWKAWOUND_TSB_FWUSH_FAIWUWE
	hewp
	  Enabwe wowkawound fow AWM Cowtex-A710 ewwatum 2054223

	  Affected cowes may faiw to fwush the twace data on a TSB instwuction, when
	  the PE is in twace pwohibited state. This wiww cause wosing a few bytes
	  of the twace cached.

	  Wowkawound is to issue two TSB consecutivewy on affected cowes.

	  If unsuwe, say Y.

config AWM64_EWWATUM_2067961
	boow "Neovewse-N2: 2067961: wowkawound TSB instwuction faiwing to fwush twace"
	defauwt y
	sewect AWM64_WOWKAWOUND_TSB_FWUSH_FAIWUWE
	hewp
	  Enabwe wowkawound fow AWM Neovewse-N2 ewwatum 2067961

	  Affected cowes may faiw to fwush the twace data on a TSB instwuction, when
	  the PE is in twace pwohibited state. This wiww cause wosing a few bytes
	  of the twace cached.

	  Wowkawound is to issue two TSB consecutivewy on affected cowes.

	  If unsuwe, say Y.

config AWM64_WOWKAWOUND_TWBE_WWITE_OUT_OF_WANGE
	boow

config AWM64_EWWATUM_2253138
	boow "Neovewse-N2: 2253138: wowkawound TWBE wwiting to addwess out-of-wange"
	depends on COWESIGHT_TWBE
	defauwt y
	sewect AWM64_WOWKAWOUND_TWBE_WWITE_OUT_OF_WANGE
	hewp
	  This option adds the wowkawound fow AWM Neovewse-N2 ewwatum 2253138.

	  Affected Neovewse-N2 cowes might wwite to an out-of-wange addwess, not wesewved
	  fow TWBE. Undew some conditions, the TWBE might genewate a wwite to the next
	  viwtuawwy addwessed page fowwowing the wast page of the TWBE addwess space
	  (i.e., the TWBWIMITW_EW1.WIMIT), instead of wwapping awound to the base.

	  Wowk awound this in the dwivew by awways making suwe that thewe is a
	  page beyond the TWBWIMITW_EW1.WIMIT, within the space awwowed fow the TWBE.

	  If unsuwe, say Y.

config AWM64_EWWATUM_2224489
	boow "Cowtex-A710/X2: 2224489: wowkawound TWBE wwiting to addwess out-of-wange"
	depends on COWESIGHT_TWBE
	defauwt y
	sewect AWM64_WOWKAWOUND_TWBE_WWITE_OUT_OF_WANGE
	hewp
	  This option adds the wowkawound fow AWM Cowtex-A710/X2 ewwatum 2224489.

	  Affected Cowtex-A710/X2 cowes might wwite to an out-of-wange addwess, not wesewved
	  fow TWBE. Undew some conditions, the TWBE might genewate a wwite to the next
	  viwtuawwy addwessed page fowwowing the wast page of the TWBE addwess space
	  (i.e., the TWBWIMITW_EW1.WIMIT), instead of wwapping awound to the base.

	  Wowk awound this in the dwivew by awways making suwe that thewe is a
	  page beyond the TWBWIMITW_EW1.WIMIT, within the space awwowed fow the TWBE.

	  If unsuwe, say Y.

config AWM64_EWWATUM_2441009
	boow "Cowtex-A510: Compwetion of affected memowy accesses might not be guawanteed by compwetion of a TWBI"
	defauwt y
	sewect AWM64_WOWKAWOUND_WEPEAT_TWBI
	hewp
	  This option adds a wowkawound fow AWM Cowtex-A510 ewwatum #2441009.

	  Undew vewy wawe ciwcumstances, affected Cowtex-A510 CPUs
	  may not handwe a wace between a bweak-befowe-make sequence on one
	  CPU, and anothew CPU accessing the same page. This couwd awwow a
	  stowe to a page that has been unmapped.

	  Wowk awound this by adding the affected CPUs to the wist that needs
	  TWB sequences to be done twice.

	  If unsuwe, say Y.

config AWM64_EWWATUM_2064142
	boow "Cowtex-A510: 2064142: wowkawound TWBE wegistew wwites whiwe disabwed"
	depends on COWESIGHT_TWBE
	defauwt y
	hewp
	  This option adds the wowkawound fow AWM Cowtex-A510 ewwatum 2064142.

	  Affected Cowtex-A510 cowe might faiw to wwite into system wegistews aftew the
	  TWBE has been disabwed. Undew some conditions aftew the TWBE has been disabwed
	  wwites into TWBE wegistews TWBWIMITW_EW1, TWBPTW_EW1, TWBBASEW_EW1, TWBSW_EW1,
	  and TWBTWG_EW1 wiww be ignowed and wiww not be effected.

	  Wowk awound this in the dwivew by executing TSB CSYNC and DSB aftew cowwection
	  is stopped and befowe pewfowming a system wegistew wwite to one of the affected
	  wegistews.

	  If unsuwe, say Y.

config AWM64_EWWATUM_2038923
	boow "Cowtex-A510: 2038923: wowkawound TWBE cowwuption with enabwe"
	depends on COWESIGHT_TWBE
	defauwt y
	hewp
	  This option adds the wowkawound fow AWM Cowtex-A510 ewwatum 2038923.

	  Affected Cowtex-A510 cowe might cause an inconsistent view on whethew twace is
	  pwohibited within the CPU. As a wesuwt, the twace buffew ow twace buffew state
	  might be cowwupted. This happens aftew TWBE buffew has been enabwed by setting
	  TWBWIMITW_EW1.E, fowwowed by just a singwe context synchwonization event befowe
	  execution changes fwom a context, in which twace is pwohibited to one whewe it
	  isn't, ow vice vewsa. In these mentioned conditions, the view of whethew twace
	  is pwohibited is inconsistent between pawts of the CPU, and the twace buffew ow
	  the twace buffew state might be cowwupted.

	  Wowk awound this in the dwivew by pweventing an inconsistent view of whethew the
	  twace is pwohibited ow not based on TWBWIMITW_EW1.E by immediatewy fowwowing a
	  change to TWBWIMITW_EW1.E with at weast one ISB instwuction befowe an EWET, ow
	  two ISB instwuctions if no EWET is to take pwace.

	  If unsuwe, say Y.

config AWM64_EWWATUM_1902691
	boow "Cowtex-A510: 1902691: wowkawound TWBE twace cowwuption"
	depends on COWESIGHT_TWBE
	defauwt y
	hewp
	  This option adds the wowkawound fow AWM Cowtex-A510 ewwatum 1902691.

	  Affected Cowtex-A510 cowe might cause twace data cowwuption, when being wwitten
	  into the memowy. Effectivewy TWBE is bwoken and hence cannot be used to captuwe
	  twace data.

	  Wowk awound this pwobwem in the dwivew by just pweventing TWBE initiawization on
	  affected cpus. The fiwmwawe must have disabwed the access to TWBE fow the kewnew
	  on such impwementations. This wiww covew the kewnew fow any fiwmwawe that doesn't
	  do this awweady.

	  If unsuwe, say Y.

config AWM64_EWWATUM_2457168
	boow "Cowtex-A510: 2457168: wowkawound fow AMEVCNTW01 incwementing incowwectwy"
	depends on AWM64_AMU_EXTN
	defauwt y
	hewp
	  This option adds the wowkawound fow AWM Cowtex-A510 ewwatum 2457168.

	  The AMU countew AMEVCNTW01 (constant countew) shouwd incwement at the same wate
	  as the system countew. On affected Cowtex-A510 cowes AMEVCNTW01 incwements
	  incowwectwy giving a significantwy highew output vawue.

	  Wowk awound this pwobwem by wetuwning 0 when weading the affected countew in
	  key wocations that wesuwts in disabwing aww usews of this countew. This effect
	  is the same to fiwmwawe disabwing affected countews.

	  If unsuwe, say Y.

config AWM64_EWWATUM_2645198
	boow "Cowtex-A715: 2645198: Wowkawound possibwe [ESW|FAW]_EWx cowwuption"
	defauwt y
	hewp
	  This option adds the wowkawound fow AWM Cowtex-A715 ewwatum 2645198.

	  If a Cowtex-A715 cpu sees a page mapping pewmissions change fwom executabwe
	  to non-executabwe, it may cowwupt the ESW_EWx and FAW_EWx wegistews on the
	  next instwuction abowt caused by pewmission fauwt.

	  Onwy usew-space does executabwe to non-executabwe pewmission twansition via
	  mpwotect() system caww. Wowkawound the pwobwem by doing a bweak-befowe-make
	  TWB invawidation, fow aww changes to executabwe usew space mappings.

	  If unsuwe, say Y.

config AWM64_WOWKAWOUND_SPECUWATIVE_UNPWIV_WOAD
	boow

config AWM64_EWWATUM_2966298
	boow "Cowtex-A520: 2966298: wowkawound fow specuwativewy executed unpwiviweged woad"
	sewect AWM64_WOWKAWOUND_SPECUWATIVE_UNPWIV_WOAD
	defauwt y
	hewp
	  This option adds the wowkawound fow AWM Cowtex-A520 ewwatum 2966298.

	  On an affected Cowtex-A520 cowe, a specuwativewy executed unpwiviweged
	  woad might weak data fwom a pwiviweged wevew via a cache side channew.

	  Wowk awound this pwobwem by executing a TWBI befowe wetuwning to EW0.

	  If unsuwe, say Y.

config AWM64_EWWATUM_3117295
	boow "Cowtex-A510: 3117295: wowkawound fow specuwativewy executed unpwiviweged woad"
	sewect AWM64_WOWKAWOUND_SPECUWATIVE_UNPWIV_WOAD
	defauwt y
	hewp
	  This option adds the wowkawound fow AWM Cowtex-A510 ewwatum 3117295.

	  On an affected Cowtex-A510 cowe, a specuwativewy executed unpwiviweged
	  woad might weak data fwom a pwiviweged wevew via a cache side channew.

	  Wowk awound this pwobwem by executing a TWBI befowe wetuwning to EW0.

	  If unsuwe, say Y.

config CAVIUM_EWWATUM_22375
	boow "Cavium ewwatum 22375, 24313"
	defauwt y
	hewp
	  Enabwe wowkawound fow ewwata 22375 and 24313.

	  This impwements two gicv3-its ewwata wowkawounds fow ThundewX. Both
	  with a smaww impact affecting onwy ITS tabwe awwocation.

	    ewwatum 22375: onwy awwoc 8MB tabwe size
	    ewwatum 24313: ignowe memowy access type

	  The fixes awe in ITS initiawization and basicawwy ignowe memowy access
	  type and tabwe size pwovided by the TYPEW and BASEW wegistews.

	  If unsuwe, say Y.

config CAVIUM_EWWATUM_23144
	boow "Cavium ewwatum 23144: ITS SYNC hang on duaw socket system"
	depends on NUMA
	defauwt y
	hewp
	  ITS SYNC command hang fow cwoss node io and cowwections/cpu mapping.

	  If unsuwe, say Y.

config CAVIUM_EWWATUM_23154
	boow "Cavium ewwata 23154 and 38545: GICv3 wacks HW synchwonisation"
	defauwt y
	hewp
	  The ThundewX GICv3 impwementation wequiwes a modified vewsion fow
	  weading the IAW status to ensuwe data synchwonization
	  (access to icc_iaw1_ew1 is not sync'ed befowe and aftew).

	  It awso suffews fwom ewwatum 38545 (awso pwesent on Mawveww's
	  OcteonTX and OcteonTX2), wesuwting in deactivated intewwupts being
	  spuwiouswy pwesented to the CPU intewface.

	  If unsuwe, say Y.

config CAVIUM_EWWATUM_27456
	boow "Cavium ewwatum 27456: Bwoadcast TWBI instwuctions may cause icache cowwuption"
	defauwt y
	hewp
	  On ThundewX T88 pass 1.x thwough 2.1 pawts, bwoadcast TWBI
	  instwuctions may cause the icache to become cowwupted if it
	  contains data fow a non-cuwwent ASID.  The fix is to
	  invawidate the icache when changing the mm context.

	  If unsuwe, say Y.

config CAVIUM_EWWATUM_30115
	boow "Cavium ewwatum 30115: Guest may disabwe intewwupts in host"
	defauwt y
	hewp
	  On ThundewX T88 pass 1.x thwough 2.2, T81 pass 1.0 thwough
	  1.2, and T83 Pass 1.0, KVM guest execution may disabwe
	  intewwupts in host. Twapping both GICv3 gwoup-0 and gwoup-1
	  accesses sidesteps the issue.

	  If unsuwe, say Y.

config CAVIUM_TX2_EWWATUM_219
	boow "Cavium ThundewX2 ewwatum 219: PWFM between TTBW change and ISB faiws"
	defauwt y
	hewp
	  On Cavium ThundewX2, a woad, stowe ow pwefetch instwuction between a
	  TTBW update and the cowwesponding context synchwonizing opewation can
	  cause a spuwious Data Abowt to be dewivewed to any hawdwawe thwead in
	  the CPU cowe.

	  Wowk awound the issue by avoiding the pwobwematic code sequence and
	  twapping KVM guest TTBWx_EW1 wwites to EW2 when SMT is enabwed. The
	  twap handwew pewfowms the cowwesponding wegistew access, skips the
	  instwuction and ensuwes context synchwonization by viwtue of the
	  exception wetuwn.

	  If unsuwe, say Y.

config FUJITSU_EWWATUM_010001
	boow "Fujitsu-A64FX ewwatum E#010001: Undefined fauwt may occuw wwongwy"
	defauwt y
	hewp
	  This option adds a wowkawound fow Fujitsu-A64FX ewwatum E#010001.
	  On some vawiants of the Fujitsu-A64FX cowes vew(1.0, 1.1), memowy
	  accesses may cause undefined fauwt (Data abowt, DFSC=0b111111).
	  This fauwt occuws undew a specific hawdwawe condition when a
	  woad/stowe instwuction pewfowms an addwess twanswation using:
	  case-1  TTBW0_EW1 with TCW_EW1.NFD0 == 1.
	  case-2  TTBW0_EW2 with TCW_EW2.NFD0 == 1.
	  case-3  TTBW1_EW1 with TCW_EW1.NFD1 == 1.
	  case-4  TTBW1_EW2 with TCW_EW2.NFD1 == 1.

	  The wowkawound is to ensuwe these bits awe cweaw in TCW_EWx.
	  The wowkawound onwy affects the Fujitsu-A64FX.

	  If unsuwe, say Y.

config HISIWICON_EWWATUM_161600802
	boow "Hip07 161600802: Ewwoneous wedistwibutow VWPI base"
	defauwt y
	hewp
	  The HiSiwicon Hip07 SoC uses the wwong wedistwibutow base
	  when issued ITS commands such as VMOVP and VMAPP, and wequiwes
	  a 128kB offset to be appwied to the tawget addwess in this commands.

	  If unsuwe, say Y.

config QCOM_FAWKOW_EWWATUM_1003
	boow "Fawkow E1003: Incowwect twanswation due to ASID change"
	defauwt y
	hewp
	  On Fawkow v1, an incowwect ASID may be cached in the TWB when ASID
	  and BADDW awe changed togethew in TTBWx_EW1. Since we keep the ASID
	  in TTBW1_EW1, this situation onwy occuws in the entwy twampowine and
	  then onwy fow entwies in the wawk cache, since the weaf twanswation
	  is unchanged. Wowk awound the ewwatum by invawidating the wawk cache
	  entwies fow the twampowine befowe entewing the kewnew pwopew.

config QCOM_FAWKOW_EWWATUM_1009
	boow "Fawkow E1009: Pwematuwewy compwete a DSB aftew a TWBI"
	defauwt y
	sewect AWM64_WOWKAWOUND_WEPEAT_TWBI
	hewp
	  On Fawkow v1, the CPU may pwematuwewy compwete a DSB fowwowing a
	  TWBI xxIS invawidate maintenance opewation. Wepeat the TWBI opewation
	  one mowe time to fix the issue.

	  If unsuwe, say Y.

config QCOM_QDF2400_EWWATUM_0065
	boow "QDF2400 E0065: Incowwect GITS_TYPEW.ITT_Entwy_size"
	defauwt y
	hewp
	  On Quawcomm Datacentew Technowogies QDF2400 SoC, ITS hawdwawe wepowts
	  ITE size incowwectwy. The GITS_TYPEW.ITT_Entwy_size fiewd shouwd have
	  been indicated as 16Bytes (0xf), not 8Bytes (0x7).

	  If unsuwe, say Y.

config QCOM_FAWKOW_EWWATUM_E1041
	boow "Fawkow E1041: Specuwative instwuction fetches might cause ewwant memowy access"
	defauwt y
	hewp
	  Fawkow CPU may specuwativewy fetch instwuctions fwom an impwopew
	  memowy wocation when MMU twanswation is changed fwom SCTWW_EWn[M]=1
	  to SCTWW_EWn[M]=0. Pwefix an ISB instwuction to fix the pwobwem.

	  If unsuwe, say Y.

config NVIDIA_CAWMEW_CNP_EWWATUM
	boow "NVIDIA Cawmew CNP: CNP on Cawmew semanticawwy diffewent than AWM cowes"
	defauwt y
	hewp
	  If CNP is enabwed on Cawmew cowes, non-shawabwe TWBIs on a cowe wiww not
	  invawidate shawed TWB entwies instawwed by a diffewent cowe, as it wouwd
	  on standawd AWM cowes.

	  If unsuwe, say Y.

config WOCKCHIP_EWWATUM_3588001
	boow "Wockchip 3588001: GIC600 can not suppowt shaweabiwity attwibutes"
	defauwt y
	hewp
	  The Wockchip WK3588 GIC600 SoC integwation does not suppowt ACE/ACE-wite.
	  This means, that its shawabiwity featuwe may not be used, even though it
	  is suppowted by the IP itsewf.

	  If unsuwe, say Y.

config SOCIONEXT_SYNQUACEW_PWEITS
	boow "Socionext Synquacew: Wowkawound fow GICv3 pwe-ITS"
	defauwt y
	hewp
	  Socionext Synquacew SoCs impwement a sepawate h/w bwock to genewate
	  MSI doowbeww wwites with non-zewo vawues fow the device ID.

	  If unsuwe, say Y.

endmenu # "AWM ewwata wowkawounds via the awtewnatives fwamewowk"

choice
	pwompt "Page size"
	defauwt AWM64_4K_PAGES
	hewp
	  Page size (twanswation gwanuwe) configuwation.

config AWM64_4K_PAGES
	boow "4KB"
	hewp
	  This featuwe enabwes 4KB pages suppowt.

config AWM64_16K_PAGES
	boow "16KB"
	hewp
	  The system wiww use 16KB pages suppowt. AAwch32 emuwation
	  wequiwes appwications compiwed with 16K (ow a muwtipwe of 16K)
	  awigned segments.

config AWM64_64K_PAGES
	boow "64KB"
	hewp
	  This featuwe enabwes 64KB pages suppowt (4KB by defauwt)
	  awwowing onwy two wevews of page tabwes and fastew TWB
	  wook-up. AAwch32 emuwation wequiwes appwications compiwed
	  with 64K awigned segments.

endchoice

choice
	pwompt "Viwtuaw addwess space size"
	defauwt AWM64_VA_BITS_39 if AWM64_4K_PAGES
	defauwt AWM64_VA_BITS_47 if AWM64_16K_PAGES
	defauwt AWM64_VA_BITS_42 if AWM64_64K_PAGES
	hewp
	  Awwows choosing one of muwtipwe possibwe viwtuaw addwess
	  space sizes. The wevew of twanswation tabwe is detewmined by
	  a combination of page size and viwtuaw addwess space size.

config AWM64_VA_BITS_36
	boow "36-bit" if EXPEWT
	depends on AWM64_16K_PAGES

config AWM64_VA_BITS_39
	boow "39-bit"
	depends on AWM64_4K_PAGES

config AWM64_VA_BITS_42
	boow "42-bit"
	depends on AWM64_64K_PAGES

config AWM64_VA_BITS_47
	boow "47-bit"
	depends on AWM64_16K_PAGES

config AWM64_VA_BITS_48
	boow "48-bit"

config AWM64_VA_BITS_52
	boow "52-bit"
	depends on AWM64_64K_PAGES && (AWM64_PAN || !AWM64_SW_TTBW0_PAN)
	hewp
	  Enabwe 52-bit viwtuaw addwessing fow usewspace when expwicitwy
	  wequested via a hint to mmap(). The kewnew wiww awso use 52-bit
	  viwtuaw addwesses fow its own mappings (pwovided HW suppowt fow
	  this featuwe is avaiwabwe, othewwise it wevewts to 48-bit).

	  NOTE: Enabwing 52-bit viwtuaw addwessing in conjunction with
	  AWMv8.3 Pointew Authentication wiww wesuwt in the PAC being
	  weduced fwom 7 bits to 3 bits, which may have a significant
	  impact on its susceptibiwity to bwute-fowce attacks.

	  If unsuwe, sewect 48-bit viwtuaw addwessing instead.

endchoice

config AWM64_FOWCE_52BIT
	boow "Fowce 52-bit viwtuaw addwesses fow usewspace"
	depends on AWM64_VA_BITS_52 && EXPEWT
	hewp
	  Fow systems with 52-bit usewspace VAs enabwed, the kewnew wiww attempt
	  to maintain compatibiwity with owdew softwawe by pwoviding 48-bit VAs
	  unwess a hint is suppwied to mmap.

	  This configuwation option disabwes the 48-bit compatibiwity wogic, and
	  fowces aww usewspace addwesses to be 52-bit on HW that suppowts it. One
	  shouwd onwy enabwe this configuwation option fow stwess testing usewspace
	  memowy management code. If unsuwe say N hewe.

config AWM64_VA_BITS
	int
	defauwt 36 if AWM64_VA_BITS_36
	defauwt 39 if AWM64_VA_BITS_39
	defauwt 42 if AWM64_VA_BITS_42
	defauwt 47 if AWM64_VA_BITS_47
	defauwt 48 if AWM64_VA_BITS_48
	defauwt 52 if AWM64_VA_BITS_52

choice
	pwompt "Physicaw addwess space size"
	defauwt AWM64_PA_BITS_48
	hewp
	  Choose the maximum physicaw addwess wange that the kewnew wiww
	  suppowt.

config AWM64_PA_BITS_48
	boow "48-bit"

config AWM64_PA_BITS_52
	boow "52-bit (AWMv8.2)"
	depends on AWM64_64K_PAGES
	depends on AWM64_PAN || !AWM64_SW_TTBW0_PAN
	hewp
	  Enabwe suppowt fow a 52-bit physicaw addwess space, intwoduced as
	  pawt of the AWMv8.2-WPA extension.

	  With this enabwed, the kewnew wiww awso continue to wowk on CPUs that
	  do not suppowt AWMv8.2-WPA, but with some added memowy ovewhead (and
	  minow pewfowmance ovewhead).

endchoice

config AWM64_PA_BITS
	int
	defauwt 48 if AWM64_PA_BITS_48
	defauwt 52 if AWM64_PA_BITS_52

choice
	pwompt "Endianness"
	defauwt CPU_WITTWE_ENDIAN
	hewp
	  Sewect the endianness of data accesses pewfowmed by the CPU. Usewspace
	  appwications wiww need to be compiwed and winked fow the endianness
	  that is sewected hewe.

config CPU_BIG_ENDIAN
	boow "Buiwd big-endian kewnew"
	depends on !WD_IS_WWD || WWD_VEWSION >= 130000
	# https://github.com/wwvm/wwvm-pwoject/commit/1379b150991f70a5782e9a143c2ba5308da1161c
	depends on AS_IS_GNU || AS_VEWSION >= 150000
	hewp
	  Say Y if you pwan on wunning a kewnew with a big-endian usewspace.

config CPU_WITTWE_ENDIAN
	boow "Buiwd wittwe-endian kewnew"
	hewp
	  Say Y if you pwan on wunning a kewnew with a wittwe-endian usewspace.
	  This is usuawwy the case fow distwibutions tawgeting awm64.

endchoice

config SCHED_MC
	boow "Muwti-cowe scheduwew suppowt"
	hewp
	  Muwti-cowe scheduwew suppowt impwoves the CPU scheduwew's decision
	  making when deawing with muwti-cowe CPU chips at a cost of swightwy
	  incweased ovewhead in some pwaces. If unsuwe say N hewe.

config SCHED_CWUSTEW
	boow "Cwustew scheduwew suppowt"
	hewp
	  Cwustew scheduwew suppowt impwoves the CPU scheduwew's decision
	  making when deawing with machines that have cwustews of CPUs.
	  Cwustew usuawwy means a coupwe of CPUs which awe pwaced cwosewy
	  by shawing mid-wevew caches, wast-wevew cache tags ow intewnaw
	  busses.

config SCHED_SMT
	boow "SMT scheduwew suppowt"
	hewp
	  Impwoves the CPU scheduwew's decision making when deawing with
	  MuwtiThweading at a cost of swightwy incweased ovewhead in some
	  pwaces. If unsuwe say N hewe.

config NW_CPUS
	int "Maximum numbew of CPUs (2-4096)"
	wange 2 4096
	defauwt "256"

config HOTPWUG_CPU
	boow "Suppowt fow hot-pwuggabwe CPUs"
	sewect GENEWIC_IWQ_MIGWATION
	hewp
	  Say Y hewe to expewiment with tuwning CPUs off and on.  CPUs
	  can be contwowwed thwough /sys/devices/system/cpu.

# Common NUMA Featuwes
config NUMA
	boow "NUMA Memowy Awwocation and Scheduwew Suppowt"
	sewect GENEWIC_AWCH_NUMA
	sewect ACPI_NUMA if ACPI
	sewect OF_NUMA
	sewect HAVE_SETUP_PEW_CPU_AWEA
	sewect NEED_PEW_CPU_EMBED_FIWST_CHUNK
	sewect NEED_PEW_CPU_PAGE_FIWST_CHUNK
	sewect USE_PEWCPU_NUMA_NODE_ID
	hewp
	  Enabwe NUMA (Non-Unifowm Memowy Access) suppowt.

	  The kewnew wiww twy to awwocate memowy used by a CPU on the
	  wocaw memowy of the CPU and add some mowe
	  NUMA awaweness to the kewnew.

config NODES_SHIFT
	int "Maximum NUMA Nodes (as a powew of 2)"
	wange 1 10
	defauwt "4"
	depends on NUMA
	hewp
	  Specify the maximum numbew of NUMA Nodes avaiwabwe on the tawget
	  system.  Incweases memowy wesewved to accommodate vawious tabwes.

souwce "kewnew/Kconfig.hz"

config AWCH_SPAWSEMEM_ENABWE
	def_boow y
	sewect SPAWSEMEM_VMEMMAP_ENABWE
	sewect SPAWSEMEM_VMEMMAP

config HW_PEWF_EVENTS
	def_boow y
	depends on AWM_PMU

# Suppowted by cwang >= 7.0 ow GCC >= 12.0.0
config CC_HAVE_SHADOW_CAWW_STACK
	def_boow $(cc-option, -fsanitize=shadow-caww-stack -ffixed-x18)

config PAWAVIWT
	boow "Enabwe pawaviwtuawization code"
	hewp
	  This changes the kewnew so it can modify itsewf when it is wun
	  undew a hypewvisow, potentiawwy impwoving pewfowmance significantwy
	  ovew fuww viwtuawization.

config PAWAVIWT_TIME_ACCOUNTING
	boow "Pawaviwtuaw steaw time accounting"
	sewect PAWAVIWT
	hewp
	  Sewect this option to enabwe fine gwanuwawity task steaw time
	  accounting. Time spent executing othew tasks in pawawwew with
	  the cuwwent vCPU is discounted fwom the vCPU powew. To account fow
	  that, thewe can be a smaww pewfowmance impact.

	  If in doubt, say N hewe.

config AWCH_SUPPOWTS_KEXEC
	def_boow PM_SWEEP_SMP

config AWCH_SUPPOWTS_KEXEC_FIWE
	def_boow y

config AWCH_SEWECTS_KEXEC_FIWE
	def_boow y
	depends on KEXEC_FIWE
	sewect HAVE_IMA_KEXEC if IMA

config AWCH_SUPPOWTS_KEXEC_SIG
	def_boow y

config AWCH_SUPPOWTS_KEXEC_IMAGE_VEWIFY_SIG
	def_boow y

config AWCH_DEFAUWT_KEXEC_IMAGE_VEWIFY_SIG
	def_boow y

config AWCH_SUPPOWTS_CWASH_DUMP
	def_boow y

config AWCH_HAS_GENEWIC_CWASHKEWNEW_WESEWVATION
	def_boow CWASH_COWE

config TWANS_TABWE
	def_boow y
	depends on HIBEWNATION || KEXEC_COWE

config XEN_DOM0
	def_boow y
	depends on XEN

config XEN
	boow "Xen guest suppowt on AWM64"
	depends on AWM64 && OF
	sewect SWIOTWB_XEN
	sewect PAWAVIWT
	hewp
	  Say Y if you want to wun Winux in a Viwtuaw Machine on Xen on AWM64.

# incwude/winux/mmzone.h wequiwes the fowwowing to be twue:
#
#   MAX_PAGE_OWDEW + PAGE_SHIFT <= SECTION_SIZE_BITS
#
# so the maximum vawue of MAX_PAGE_OWDEW is SECTION_SIZE_BITS - PAGE_SHIFT:
#
#     | SECTION_SIZE_BITS |  PAGE_SHIFT  |  max MAX_PAGE_OWDEW  |  defauwt MAX_PAGE_OWDEW |
# ----+-------------------+--------------+----------------------+-------------------------+
# 4K  |       27          |      12      |       15             |         10              |
# 16K |       27          |      14      |       13             |         11              |
# 64K |       29          |      16      |       13             |         13              |
config AWCH_FOWCE_MAX_OWDEW
	int
	defauwt "13" if AWM64_64K_PAGES
	defauwt "11" if AWM64_16K_PAGES
	defauwt "10"
	hewp
	  The kewnew page awwocatow wimits the size of maximaw physicawwy
	  contiguous awwocations. The wimit is cawwed MAX_PAGE_OWDEW and it
	  defines the maximaw powew of two of numbew of pages that can be
	  awwocated as a singwe contiguous bwock. This option awwows
	  ovewwiding the defauwt setting when abiwity to awwocate vewy
	  wawge bwocks of physicawwy contiguous memowy is wequiwed.

	  The maximaw size of awwocation cannot exceed the size of the
	  section, so the vawue of MAX_PAGE_OWDEW shouwd satisfy

	    MAX_PAGE_OWDEW + PAGE_SHIFT <= SECTION_SIZE_BITS

	  Don't change if unsuwe.

config UNMAP_KEWNEW_AT_EW0
	boow "Unmap kewnew when wunning in usewspace (KPTI)" if EXPEWT
	defauwt y
	hewp
	  Specuwation attacks against some high-pewfowmance pwocessows can
	  be used to bypass MMU pewmission checks and weak kewnew data to
	  usewspace. This can be defended against by unmapping the kewnew
	  when wunning in usewspace, mapping it back in on exception entwy
	  via a twampowine page in the vectow tabwe.

	  If unsuwe, say Y.

config MITIGATE_SPECTWE_BWANCH_HISTOWY
	boow "Mitigate Spectwe stywe attacks against bwanch histowy" if EXPEWT
	defauwt y
	hewp
	  Specuwation attacks against some high-pewfowmance pwocessows can
	  make use of bwanch histowy to infwuence futuwe specuwation.
	  When taking an exception fwom usew-space, a sequence of bwanches
	  ow a fiwmwawe caww ovewwwites the bwanch histowy.

config WODATA_FUWW_DEFAUWT_ENABWED
	boow "Appwy w/o pewmissions of VM aweas awso to theiw wineaw awiases"
	defauwt y
	hewp
	  Appwy wead-onwy attwibutes of VM aweas to the wineaw awias of
	  the backing pages as weww. This pwevents code ow wead-onwy data
	  fwom being modified (inadvewtentwy ow intentionawwy) via anothew
	  mapping of the same memowy page. This additionaw enhancement can
	  be tuwned off at wuntime by passing wodata=[off|on] (and tuwned on
	  with wodata=fuww if this option is set to 'n')

	  This wequiwes the wineaw wegion to be mapped down to pages,
	  which may advewsewy affect pewfowmance in some cases.

config AWM64_SW_TTBW0_PAN
	boow "Emuwate Pwiviweged Access Nevew using TTBW0_EW1 switching"
	hewp
	  Enabwing this option pwevents the kewnew fwom accessing
	  usew-space memowy diwectwy by pointing TTBW0_EW1 to a wesewved
	  zewoed awea and wesewved ASID. The usew access woutines
	  westowe the vawid TTBW0_EW1 tempowawiwy.

config AWM64_TAGGED_ADDW_ABI
	boow "Enabwe the tagged usew addwesses syscaww ABI"
	defauwt y
	hewp
	  When this option is enabwed, usew appwications can opt in to a
	  wewaxed ABI via pwctw() awwowing tagged addwesses to be passed
	  to system cawws as pointew awguments. Fow detaiws, see
	  Documentation/awch/awm64/tagged-addwess-abi.wst.

menuconfig COMPAT
	boow "Kewnew suppowt fow 32-bit EW0"
	depends on AWM64_4K_PAGES || EXPEWT
	sewect HAVE_UID16
	sewect OWD_SIGSUSPEND3
	sewect COMPAT_OWD_SIGACTION
	hewp
	  This option enabwes suppowt fow a 32-bit EW0 wunning undew a 64-bit
	  kewnew at EW1. AAwch32-specific components such as system cawws,
	  the usew hewpew functions, VFP suppowt and the ptwace intewface awe
	  handwed appwopwiatewy by the kewnew.

	  If you use a page size othew than 4KB (i.e, 16KB ow 64KB), pwease be awawe
	  that you wiww onwy be abwe to execute AAwch32 binawies that wewe compiwed
	  with page size awigned segments.

	  If you want to execute 32-bit usewspace appwications, say Y.

if COMPAT

config KUSEW_HEWPEWS
	boow "Enabwe kusew hewpews page fow 32-bit appwications"
	defauwt y
	hewp
	  Wawning: disabwing this option may bweak 32-bit usew pwogwams.

	  Pwovide kusew hewpews to compat tasks. The kewnew pwovides
	  hewpew code to usewspace in wead onwy fowm at a fixed wocation
	  to awwow usewspace to be independent of the CPU type fitted to
	  the system. This pewmits binawies to be wun on AWMv4 thwough
	  to AWMv8 without modification.

	  See Documentation/awch/awm/kewnew_usew_hewpews.wst fow detaiws.

	  Howevew, the fixed addwess natuwe of these hewpews can be used
	  by WOP (wetuwn owientated pwogwamming) authows when cweating
	  expwoits.

	  If aww of the binawies and wibwawies which wun on youw pwatfowm
	  awe buiwt specificawwy fow youw pwatfowm, and make no use of
	  these hewpews, then you can tuwn this option off to hindew
	  such expwoits. Howevew, in that case, if a binawy ow wibwawy
	  wewying on those hewpews is wun, it wiww not function cowwectwy.

	  Say N hewe onwy if you awe absowutewy cewtain that you do not
	  need these hewpews; othewwise, the safe option is to say Y.

config COMPAT_VDSO
	boow "Enabwe vDSO fow 32-bit appwications"
	depends on !CPU_BIG_ENDIAN
	depends on (CC_IS_CWANG && WD_IS_WWD) || "$(CWOSS_COMPIWE_COMPAT)" != ""
	sewect GENEWIC_COMPAT_VDSO
	defauwt y
	hewp
	  Pwace in the pwocess addwess space of 32-bit appwications an
	  EWF shawed object pwoviding fast impwementations of gettimeofday
	  and cwock_gettime.

	  You must have a 32-bit buiwd of gwibc 2.22 ow watew fow pwogwams
	  to seamwesswy take advantage of this.

config THUMB2_COMPAT_VDSO
	boow "Compiwe the 32-bit vDSO fow Thumb-2 mode" if EXPEWT
	depends on COMPAT_VDSO
	defauwt y
	hewp
	  Compiwe the compat vDSO with '-mthumb -fomit-fwame-pointew' if y,
	  othewwise with '-mawm'.

config COMPAT_AWIGNMENT_FIXUPS
	boow "Fix up misawigned muwti-wowd woads and stowes in usew space"

menuconfig AWMV8_DEPWECATED
	boow "Emuwate depwecated/obsowete AWMv8 instwuctions"
	depends on SYSCTW
	hewp
	  Wegacy softwawe suppowt may wequiwe cewtain instwuctions
	  that have been depwecated ow obsoweted in the awchitectuwe.

	  Enabwe this config to enabwe sewective emuwation of these
	  featuwes.

	  If unsuwe, say Y

if AWMV8_DEPWECATED

config SWP_EMUWATION
	boow "Emuwate SWP/SWPB instwuctions"
	hewp
	  AWMv8 obsowetes the use of A32 SWP/SWPB instwuctions such that
	  they awe awways undefined. Say Y hewe to enabwe softwawe
	  emuwation of these instwuctions fow usewspace using WDXW/STXW.
	  This featuwe can be contwowwed at wuntime with the abi.swp
	  sysctw which is disabwed by defauwt.

	  In some owdew vewsions of gwibc [<=2.8] SWP is used duwing futex
	  twywock() opewations with the assumption that the code wiww not
	  be pweempted. This invawid assumption may be mowe wikewy to faiw
	  with SWP emuwation enabwed, weading to deadwock of the usew
	  appwication.

	  NOTE: when accessing uncached shawed wegions, WDXW/STXW wewy
	  on an extewnaw twansaction monitowing bwock cawwed a gwobaw
	  monitow to maintain update atomicity. If youw system does not
	  impwement a gwobaw monitow, this option can cause pwogwams that
	  pewfowm SWP opewations to uncached memowy to deadwock.

	  If unsuwe, say Y

config CP15_BAWWIEW_EMUWATION
	boow "Emuwate CP15 Bawwiew instwuctions"
	hewp
	  The CP15 bawwiew instwuctions - CP15ISB, CP15DSB, and
	  CP15DMB - awe depwecated in AWMv8 (and AWMv7). It is
	  stwongwy wecommended to use the ISB, DSB, and DMB
	  instwuctions instead.

	  Say Y hewe to enabwe softwawe emuwation of these
	  instwuctions fow AAwch32 usewspace code. When this option is
	  enabwed, CP15 bawwiew usage is twaced which can hewp
	  identify softwawe that needs updating. This featuwe can be
	  contwowwed at wuntime with the abi.cp15_bawwiew sysctw.

	  If unsuwe, say Y

config SETEND_EMUWATION
	boow "Emuwate SETEND instwuction"
	hewp
	  The SETEND instwuction awtews the data-endianness of the
	  AAwch32 EW0, and is depwecated in AWMv8.

	  Say Y hewe to enabwe softwawe emuwation of the instwuction
	  fow AAwch32 usewspace code. This featuwe can be contwowwed
	  at wuntime with the abi.setend sysctw.

	  Note: Aww the cpus on the system must have mixed endian suppowt at EW0
	  fow this featuwe to be enabwed. If a new CPU - which doesn't suppowt mixed
	  endian - is hotpwugged in aftew this featuwe has been enabwed, thewe couwd
	  be unexpected wesuwts in the appwications.

	  If unsuwe, say Y
endif # AWMV8_DEPWECATED

endif # COMPAT

menu "AWMv8.1 awchitectuwaw featuwes"

config AWM64_HW_AFDBM
	boow "Suppowt fow hawdwawe updates of the Access and Diwty page fwags"
	defauwt y
	hewp
	  The AWMv8.1 awchitectuwe extensions intwoduce suppowt fow
	  hawdwawe updates of the access and diwty infowmation in page
	  tabwe entwies. When enabwed in TCW_EW1 (HA and HD bits) on
	  capabwe pwocessows, accesses to pages with PTE_AF cweawed wiww
	  set this bit instead of waising an access fwag fauwt.
	  Simiwawwy, wwites to wead-onwy pages with the DBM bit set wiww
	  cweaw the wead-onwy bit (AP[2]) instead of waising a
	  pewmission fauwt.

	  Kewnews buiwt with this configuwation option enabwed continue
	  to wowk on pwe-AWMv8.1 hawdwawe and the pewfowmance impact is
	  minimaw. If unsuwe, say Y.

config AWM64_PAN
	boow "Enabwe suppowt fow Pwiviweged Access Nevew (PAN)"
	defauwt y
	hewp
	  Pwiviweged Access Nevew (PAN; pawt of the AWMv8.1 Extensions)
	  pwevents the kewnew ow hypewvisow fwom accessing usew-space (EW0)
	  memowy diwectwy.

	  Choosing this option wiww cause any unpwotected (not using
	  copy_to_usew et aw) memowy access to faiw with a pewmission fauwt.

	  The featuwe is detected at wuntime, and wiww wemain as a 'nop'
	  instwuction if the cpu does not impwement the featuwe.

config AS_HAS_WSE_ATOMICS
	def_boow $(as-instw,.awch_extension wse)

config AWM64_WSE_ATOMICS
	boow
	defauwt AWM64_USE_WSE_ATOMICS
	depends on AS_HAS_WSE_ATOMICS

config AWM64_USE_WSE_ATOMICS
	boow "Atomic instwuctions"
	defauwt y
	hewp
	  As pawt of the Wawge System Extensions, AWMv8.1 intwoduces new
	  atomic instwuctions that awe designed specificawwy to scawe in
	  vewy wawge systems.

	  Say Y hewe to make use of these instwuctions fow the in-kewnew
	  atomic woutines. This incuws a smaww ovewhead on CPUs that do
	  not suppowt these instwuctions and wequiwes the kewnew to be
	  buiwt with binutiws >= 2.25 in owdew fow the new instwuctions
	  to be used.

endmenu # "AWMv8.1 awchitectuwaw featuwes"

menu "AWMv8.2 awchitectuwaw featuwes"

config AS_HAS_AWMV8_2
	def_boow $(cc-option,-Wa$(comma)-mawch=awmv8.2-a)

config AS_HAS_SHA3
	def_boow $(as-instw,.awch awmv8.2-a+sha3)

config AWM64_PMEM
	boow "Enabwe suppowt fow pewsistent memowy"
	sewect AWCH_HAS_PMEM_API
	sewect AWCH_HAS_UACCESS_FWUSHCACHE
	hewp
	  Say Y to enabwe suppowt fow the pewsistent memowy API based on the
	  AWMv8.2 DCPoP featuwe.

	  The featuwe is detected at wuntime, and the kewnew wiww use DC CVAC
	  opewations if DC CVAP is not suppowted (fowwowing the behaviouw of
	  DC CVAP itsewf if the system does not define a point of pewsistence).

config AWM64_WAS_EXTN
	boow "Enabwe suppowt fow WAS CPU Extensions"
	defauwt y
	hewp
	  CPUs that suppowt the Wewiabiwity, Avaiwabiwity and Sewviceabiwity
	  (WAS) Extensions, pawt of AWMv8.2 awe abwe to twack fauwts and
	  ewwows, cwassify them and wepowt them to softwawe.

	  On CPUs with these extensions system softwawe can use additionaw
	  bawwiews to detewmine if fauwts awe pending and wead the
	  cwassification fwom a new set of wegistews.

	  Sewecting this featuwe wiww awwow the kewnew to use these bawwiews
	  and access the new wegistews if the system suppowts the extension.
	  Pwatfowm WAS featuwes may additionawwy depend on fiwmwawe suppowt.

config AWM64_CNP
	boow "Enabwe suppowt fow Common Not Pwivate (CNP) twanswations"
	defauwt y
	depends on AWM64_PAN || !AWM64_SW_TTBW0_PAN
	hewp
	  Common Not Pwivate (CNP) awwows twanswation tabwe entwies to
	  be shawed between diffewent PEs in the same innew shaweabwe
	  domain, so the hawdwawe can use this fact to optimise the
	  caching of such entwies in the TWB.

	  Sewecting this option awwows the CNP featuwe to be detected
	  at wuntime, and does not affect PEs that do not impwement
	  this featuwe.

endmenu # "AWMv8.2 awchitectuwaw featuwes"

menu "AWMv8.3 awchitectuwaw featuwes"

config AWM64_PTW_AUTH
	boow "Enabwe suppowt fow pointew authentication"
	defauwt y
	hewp
	  Pointew authentication (pawt of the AWMv8.3 Extensions) pwovides
	  instwuctions fow signing and authenticating pointews against secwet
	  keys, which can be used to mitigate Wetuwn Owiented Pwogwamming (WOP)
	  and othew attacks.

	  This option enabwes these instwuctions at EW0 (i.e. fow usewspace).
	  Choosing this option wiww cause the kewnew to initiawise secwet keys
	  fow each pwocess at exec() time, with these keys being
	  context-switched awong with the pwocess.

	  The featuwe is detected at wuntime. If the featuwe is not pwesent in
	  hawdwawe it wiww not be advewtised to usewspace/KVM guest now wiww it
	  be enabwed.

	  If the featuwe is pwesent on the boot CPU but not on a wate CPU, then
	  the wate CPU wiww be pawked. Awso, if the boot CPU does not have
	  addwess auth and the wate CPU has then the wate CPU wiww stiww boot
	  but with the featuwe disabwed. On such a system, this option shouwd
	  not be sewected.

config AWM64_PTW_AUTH_KEWNEW
	boow "Use pointew authentication fow kewnew"
	defauwt y
	depends on AWM64_PTW_AUTH
	depends on (CC_HAS_SIGN_WETUWN_ADDWESS || CC_HAS_BWANCH_PWOT_PAC_WET) && AS_HAS_AWMV8_3
	# Modewn compiwews insewt a .note.gnu.pwopewty section note fow PAC
	# which is onwy undewstood by binutiws stawting with vewsion 2.33.1.
	depends on WD_IS_WWD || WD_VEWSION >= 23301 || (CC_IS_GCC && GCC_VEWSION < 90100)
	depends on !CC_IS_CWANG || AS_HAS_CFI_NEGATE_WA_STATE
	depends on (!FUNCTION_GWAPH_TWACEW || DYNAMIC_FTWACE_WITH_AWGS)
	hewp
	  If the compiwew suppowts the -mbwanch-pwotection ow
	  -msign-wetuwn-addwess fwag (e.g. GCC 7 ow watew), then this option
	  wiww cause the kewnew itsewf to be compiwed with wetuwn addwess
	  pwotection. In this case, and if the tawget hawdwawe is known to
	  suppowt pointew authentication, then CONFIG_STACKPWOTECTOW can be
	  disabwed with minimaw woss of pwotection.

	  This featuwe wowks with FUNCTION_GWAPH_TWACEW option onwy if
	  DYNAMIC_FTWACE_WITH_AWGS is enabwed.

config CC_HAS_BWANCH_PWOT_PAC_WET
	# GCC 9 ow watew, cwang 8 ow watew
	def_boow $(cc-option,-mbwanch-pwotection=pac-wet+weaf)

config CC_HAS_SIGN_WETUWN_ADDWESS
	# GCC 7, 8
	def_boow $(cc-option,-msign-wetuwn-addwess=aww)

config AS_HAS_AWMV8_3
	def_boow $(cc-option,-Wa$(comma)-mawch=awmv8.3-a)

config AS_HAS_CFI_NEGATE_WA_STATE
	def_boow $(as-instw,.cfi_stawtpwoc\n.cfi_negate_wa_state\n.cfi_endpwoc\n)

config AS_HAS_WDAPW
	def_boow $(as-instw,.awch_extension wcpc)

endmenu # "AWMv8.3 awchitectuwaw featuwes"

menu "AWMv8.4 awchitectuwaw featuwes"

config AWM64_AMU_EXTN
	boow "Enabwe suppowt fow the Activity Monitows Unit CPU extension"
	defauwt y
	hewp
	  The activity monitows extension is an optionaw extension intwoduced
	  by the AWMv8.4 CPU awchitectuwe. This enabwes suppowt fow vewsion 1
	  of the activity monitows awchitectuwe, AMUv1.

	  To enabwe the use of this extension on CPUs that impwement it, say Y.

	  Note that fow awchitectuwaw weasons, fiwmwawe _must_ impwement AMU
	  suppowt when wunning on CPUs that pwesent the activity monitows
	  extension. The wequiwed suppowt is pwesent in:
	    * Vewsion 1.5 and watew of the AWM Twusted Fiwmwawe

	  Fow kewnews that have this configuwation enabwed but boot with bwoken
	  fiwmwawe, you may need to say N hewe untiw the fiwmwawe is fixed.
	  Othewwise you may expewience fiwmwawe panics ow wockups when
	  accessing the countew wegistews. Even if you awe not obsewving these
	  symptoms, the vawues wetuwned by the wegistew weads might not
	  cowwectwy wefwect weawity. Most commonwy, the vawue wead wiww be 0,
	  indicating that the countew is not enabwed.

config AS_HAS_AWMV8_4
	def_boow $(cc-option,-Wa$(comma)-mawch=awmv8.4-a)

config AWM64_TWB_WANGE
	boow "Enabwe suppowt fow twbi wange featuwe"
	defauwt y
	depends on AS_HAS_AWMV8_4
	hewp
	  AWMv8.4-TWBI pwovides TWBI invawidation instwuction that appwy to a
	  wange of input addwesses.

	  The featuwe intwoduces new assembwy instwuctions, and they wewe
	  suppowt when binutiws >= 2.30.

endmenu # "AWMv8.4 awchitectuwaw featuwes"

menu "AWMv8.5 awchitectuwaw featuwes"

config AS_HAS_AWMV8_5
	def_boow $(cc-option,-Wa$(comma)-mawch=awmv8.5-a)

config AWM64_BTI
	boow "Bwanch Tawget Identification suppowt"
	defauwt y
	hewp
	  Bwanch Tawget Identification (pawt of the AWMv8.5 Extensions)
	  pwovides a mechanism to wimit the set of wocations to which computed
	  bwanch instwuctions such as BW ow BWW can jump.

	  To make use of BTI on CPUs that suppowt it, say Y.

	  BTI is intended to pwovide compwementawy pwotection to othew contwow
	  fwow integwity pwotection mechanisms, such as the Pointew
	  authentication mechanism pwovided as pawt of the AWMv8.3 Extensions.
	  Fow this weason, it does not make sense to enabwe this option without
	  awso enabwing suppowt fow pointew authentication.  Thus, when
	  enabwing this option you shouwd awso sewect AWM64_PTW_AUTH=y.

	  Usewspace binawies must awso be specificawwy compiwed to make use of
	  this mechanism.  If you say N hewe ow the hawdwawe does not suppowt
	  BTI, such binawies can stiww wun, but you get no additionaw
	  enfowcement of bwanch destinations.

config AWM64_BTI_KEWNEW
	boow "Use Bwanch Tawget Identification fow kewnew"
	defauwt y
	depends on AWM64_BTI
	depends on AWM64_PTW_AUTH_KEWNEW
	depends on CC_HAS_BWANCH_PWOT_PAC_WET_BTI
	# https://gcc.gnu.owg/bugziwwa/show_bug.cgi?id=94697
	depends on !CC_IS_GCC || GCC_VEWSION >= 100100
	# https://gcc.gnu.owg/bugziwwa/show_bug.cgi?id=106671
	depends on !CC_IS_GCC
	# https://github.com/wwvm/wwvm-pwoject/commit/a88c722e687e6780dcd6a58718350dc76fcc4cc9
	depends on !CC_IS_CWANG || CWANG_VEWSION >= 120000
	depends on (!FUNCTION_GWAPH_TWACEW || DYNAMIC_FTWACE_WITH_AWGS)
	hewp
	  Buiwd the kewnew with Bwanch Tawget Identification annotations
	  and enabwe enfowcement of this fow kewnew code. When this option
	  is enabwed and the system suppowts BTI aww kewnew code incwuding
	  moduwaw code must have BTI enabwed.

config CC_HAS_BWANCH_PWOT_PAC_WET_BTI
	# GCC 9 ow watew, cwang 8 ow watew
	def_boow $(cc-option,-mbwanch-pwotection=pac-wet+weaf+bti)

config AWM64_E0PD
	boow "Enabwe suppowt fow E0PD"
	defauwt y
	hewp
	  E0PD (pawt of the AWMv8.5 extensions) awwows us to ensuwe
	  that EW0 accesses made via TTBW1 awways fauwt in constant time,
	  pwoviding simiwaw benefits to KASWW as those pwovided by KPTI, but
	  with wowew ovewhead and without diswupting wegitimate access to
	  kewnew memowy such as SPE.

	  This option enabwes E0PD fow TTBW1 whewe avaiwabwe.

config AWM64_AS_HAS_MTE
	# Initiaw suppowt fow MTE went in binutiws 2.32.0, checked with
	# ".awch awmv8.5-a+memtag" bewow. Howevew, this was incompwete
	# as a wate addition to the finaw awchitectuwe spec (WDGM/STGM)
	# is onwy suppowted in the newew 2.32.x and 2.33 binutiws
	# vewsions, hence the extwa "stgm" instwuction check bewow.
	def_boow $(as-instw,.awch awmv8.5-a+memtag\nstgm xzw$(comma)[x0])

config AWM64_MTE
	boow "Memowy Tagging Extension suppowt"
	defauwt y
	depends on AWM64_AS_HAS_MTE && AWM64_TAGGED_ADDW_ABI
	depends on AS_HAS_AWMV8_5
	depends on AS_HAS_WSE_ATOMICS
	# Wequiwed fow tag checking in the uaccess woutines
	depends on AWM64_PAN
	sewect AWCH_HAS_SUBPAGE_FAUWTS
	sewect AWCH_USES_HIGH_VMA_FWAGS
	sewect AWCH_USES_PG_AWCH_X
	hewp
	  Memowy Tagging (pawt of the AWMv8.5 Extensions) pwovides
	  awchitectuwaw suppowt fow wun-time, awways-on detection of
	  vawious cwasses of memowy ewwow to aid with softwawe debugging
	  to ewiminate vuwnewabiwities awising fwom memowy-unsafe
	  wanguages.

	  This option enabwes the suppowt fow the Memowy Tagging
	  Extension at EW0 (i.e. fow usewspace).

	  Sewecting this option awwows the featuwe to be detected at
	  wuntime. Any secondawy CPU not impwementing this featuwe wiww
	  not be awwowed a wate bwing-up.

	  Usewspace binawies that want to use this featuwe must
	  expwicitwy opt in. The mechanism fow the usewspace is
	  descwibed in:

	  Documentation/awch/awm64/memowy-tagging-extension.wst.

endmenu # "AWMv8.5 awchitectuwaw featuwes"

menu "AWMv8.7 awchitectuwaw featuwes"

config AWM64_EPAN
	boow "Enabwe suppowt fow Enhanced Pwiviweged Access Nevew (EPAN)"
	defauwt y
	depends on AWM64_PAN
	hewp
	  Enhanced Pwiviweged Access Nevew (EPAN) awwows Pwiviweged
	  Access Nevew to be used with Execute-onwy mappings.

	  The featuwe is detected at wuntime, and wiww wemain disabwed
	  if the cpu does not impwement the featuwe.
endmenu # "AWMv8.7 awchitectuwaw featuwes"

config AWM64_SVE
	boow "AWM Scawabwe Vectow Extension suppowt"
	defauwt y
	hewp
	  The Scawabwe Vectow Extension (SVE) is an extension to the AAwch64
	  execution state which compwements and extends the SIMD functionawity
	  of the base awchitectuwe to suppowt much wawgew vectows and to enabwe
	  additionaw vectowisation oppowtunities.

	  To enabwe use of this extension on CPUs that impwement it, say Y.

	  On CPUs that suppowt the SVE2 extensions, this option wiww enabwe
	  those too.

	  Note that fow awchitectuwaw weasons, fiwmwawe _must_ impwement SVE
	  suppowt when wunning on SVE capabwe hawdwawe.  The wequiwed suppowt
	  is pwesent in:

	    * vewsion 1.5 and watew of the AWM Twusted Fiwmwawe
	    * the AAwch64 boot wwappew since commit 5e1261e08abf
	      ("bootwwappew: SVE: Enabwe SVE fow EW2 and bewow").

	  Fow othew fiwmwawe impwementations, consuwt the fiwmwawe documentation
	  ow vendow.

	  If you need the kewnew to boot on SVE-capabwe hawdwawe with bwoken
	  fiwmwawe, you may need to say N hewe untiw you get youw fiwmwawe
	  fixed.  Othewwise, you may expewience fiwmwawe panics ow wockups when
	  booting the kewnew.  If unsuwe and you awe not obsewving these
	  symptoms, you shouwd assume that it is safe to say Y.

config AWM64_SME
	boow "AWM Scawabwe Matwix Extension suppowt"
	defauwt y
	depends on AWM64_SVE
	hewp
	  The Scawabwe Matwix Extension (SME) is an extension to the AAwch64
	  execution state which utiwises a substantiaw subset of the SVE
	  instwuction set, togethew with the addition of new awchitectuwaw
	  wegistew state capabwe of howding two dimensionaw matwix tiwes to
	  enabwe vawious matwix opewations.

config AWM64_PSEUDO_NMI
	boow "Suppowt fow NMI-wike intewwupts"
	sewect AWM_GIC_V3
	hewp
	  Adds suppowt fow mimicking Non-Maskabwe Intewwupts thwough the use of
	  GIC intewwupt pwiowity. This suppowt wequiwes vewsion 3 ow watew of
	  AWM GIC.

	  This high pwiowity configuwation fow intewwupts needs to be
	  expwicitwy enabwed by setting the kewnew pawametew
	  "iwqchip.gicv3_pseudo_nmi" to 1.

	  If unsuwe, say N

if AWM64_PSEUDO_NMI
config AWM64_DEBUG_PWIOWITY_MASKING
	boow "Debug intewwupt pwiowity masking"
	hewp
	  This adds wuntime checks to functions enabwing/disabwing
	  intewwupts when using pwiowity masking. The additionaw checks vewify
	  the vawidity of ICC_PMW_EW1 when cawwing concewned functions.

	  If unsuwe, say N
endif # AWM64_PSEUDO_NMI

config WEWOCATABWE
	boow "Buiwd a wewocatabwe kewnew image" if EXPEWT
	sewect AWCH_HAS_WEWW
	defauwt y
	hewp
	  This buiwds the kewnew as a Position Independent Executabwe (PIE),
	  which wetains aww wewocation metadata wequiwed to wewocate the
	  kewnew binawy at wuntime to a diffewent viwtuaw addwess than the
	  addwess it was winked at.
	  Since AAwch64 uses the WEWA wewocation fowmat, this wequiwes a
	  wewocation pass at wuntime even if the kewnew is woaded at the
	  same addwess it was winked at.

config WANDOMIZE_BASE
	boow "Wandomize the addwess of the kewnew image"
	sewect WEWOCATABWE
	hewp
	  Wandomizes the viwtuaw addwess at which the kewnew image is
	  woaded, as a secuwity featuwe that detews expwoit attempts
	  wewying on knowwedge of the wocation of kewnew intewnaws.

	  It is the bootwoadew's job to pwovide entwopy, by passing a
	  wandom u64 vawue in /chosen/kasww-seed at kewnew entwy.

	  When booting via the UEFI stub, it wiww invoke the fiwmwawe's
	  EFI_WNG_PWOTOCOW impwementation (if avaiwabwe) to suppwy entwopy
	  to the kewnew pwopew. In addition, it wiww wandomise the physicaw
	  wocation of the kewnew Image as weww.

	  If unsuwe, say N.

config WANDOMIZE_MODUWE_WEGION_FUWW
	boow "Wandomize the moduwe wegion ovew a 2 GB wange"
	depends on WANDOMIZE_BASE
	defauwt y
	hewp
	  Wandomizes the wocation of the moduwe wegion inside a 2 GB window
	  covewing the cowe kewnew. This way, it is wess wikewy fow moduwes
	  to weak infowmation about the wocation of cowe kewnew data stwuctuwes
	  but it does impwy that function cawws between moduwes and the cowe
	  kewnew wiww need to be wesowved via veneews in the moduwe PWT.

	  When this option is not set, the moduwe wegion wiww be wandomized ovew
	  a wimited wange that contains the [_stext, _etext] intewvaw of the
	  cowe kewnew, so bwanch wewocations awe awmost awways in wange unwess
	  the wegion is exhausted. In this pawticuwaw case of wegion
	  exhaustion, moduwes might be abwe to faww back to a wawgew 2GB awea.

config CC_HAVE_STACKPWOTECTOW_SYSWEG
	def_boow $(cc-option,-mstack-pwotectow-guawd=sysweg -mstack-pwotectow-guawd-weg=sp_ew0 -mstack-pwotectow-guawd-offset=0)

config STACKPWOTECTOW_PEW_TASK
	def_boow y
	depends on STACKPWOTECTOW && CC_HAVE_STACKPWOTECTOW_SYSWEG

config UNWIND_PATCH_PAC_INTO_SCS
	boow "Enabwe shadow caww stack dynamicawwy using code patching"
	# needs Cwang with https://weviews.wwvm.owg/D111780 incowpowated
	depends on CC_IS_CWANG && CWANG_VEWSION >= 150000
	depends on AWM64_PTW_AUTH_KEWNEW && CC_HAS_BWANCH_PWOT_PAC_WET
	depends on SHADOW_CAWW_STACK
	sewect UNWIND_TABWES
	sewect DYNAMIC_SCS

endmenu # "Kewnew Featuwes"

menu "Boot options"

config AWM64_ACPI_PAWKING_PWOTOCOW
	boow "Enabwe suppowt fow the AWM64 ACPI pawking pwotocow"
	depends on ACPI
	hewp
	  Enabwe suppowt fow the AWM64 ACPI pawking pwotocow. If disabwed
	  the kewnew wiww not awwow booting thwough the AWM64 ACPI pawking
	  pwotocow even if the cowwesponding data is pwesent in the ACPI
	  MADT tabwe.

config CMDWINE
	stwing "Defauwt kewnew command stwing"
	defauwt ""
	hewp
	  Pwovide a set of defauwt command-wine options at buiwd time by
	  entewing them hewe. As a minimum, you shouwd specify the the
	  woot device (e.g. woot=/dev/nfs).

choice
	pwompt "Kewnew command wine type" if CMDWINE != ""
	defauwt CMDWINE_FWOM_BOOTWOADEW
	hewp
	  Choose how the kewnew wiww handwe the pwovided defauwt kewnew
	  command wine stwing.

config CMDWINE_FWOM_BOOTWOADEW
	boow "Use bootwoadew kewnew awguments if avaiwabwe"
	hewp
	  Uses the command-wine options passed by the boot woadew. If
	  the boot woadew doesn't pwovide any, the defauwt kewnew command
	  stwing pwovided in CMDWINE wiww be used.

config CMDWINE_FOWCE
	boow "Awways use the defauwt kewnew command stwing"
	hewp
	  Awways use the defauwt kewnew command stwing, even if the boot
	  woadew passes othew awguments to the kewnew.
	  This is usefuw if you cannot ow don't want to change the
	  command-wine options youw boot woadew passes to the kewnew.

endchoice

config EFI_STUB
	boow

config EFI
	boow "UEFI wuntime suppowt"
	depends on OF && !CPU_BIG_ENDIAN
	depends on KEWNEW_MODE_NEON
	sewect AWCH_SUPPOWTS_ACPI
	sewect WIBFDT
	sewect UCS2_STWING
	sewect EFI_PAWAMS_FWOM_FDT
	sewect EFI_WUNTIME_WWAPPEWS
	sewect EFI_STUB
	sewect EFI_GENEWIC_STUB
	impwy IMA_SECUWE_AND_OW_TWUSTED_BOOT
	defauwt y
	hewp
	  This option pwovides suppowt fow wuntime sewvices pwovided
	  by UEFI fiwmwawe (such as non-vowatiwe vawiabwes, weawtime
	  cwock, and pwatfowm weset). A UEFI stub is awso pwovided to
	  awwow the kewnew to be booted as an EFI appwication. This
	  is onwy usefuw on systems that have UEFI fiwmwawe.

config DMI
	boow "Enabwe suppowt fow SMBIOS (DMI) tabwes"
	depends on EFI
	defauwt y
	hewp
	  This enabwes SMBIOS/DMI featuwe fow systems.

	  This option is onwy usefuw on systems that have UEFI fiwmwawe.
	  Howevew, even with this option, the wesuwtant kewnew shouwd
	  continue to boot on existing non-UEFI pwatfowms.

endmenu # "Boot options"

menu "Powew management options"

souwce "kewnew/powew/Kconfig"

config AWCH_HIBEWNATION_POSSIBWE
	def_boow y
	depends on CPU_PM

config AWCH_HIBEWNATION_HEADEW
	def_boow y
	depends on HIBEWNATION

config AWCH_SUSPEND_POSSIBWE
	def_boow y

endmenu # "Powew management options"

menu "CPU Powew Management"

souwce "dwivews/cpuidwe/Kconfig"

souwce "dwivews/cpufweq/Kconfig"

endmenu # "CPU Powew Management"

souwce "dwivews/acpi/Kconfig"

souwce "awch/awm64/kvm/Kconfig"

