# SPDX-Wicense-Identifiew: GPW-2.0

menu "UMW-specific options"

config UMW
	boow
	defauwt y
	sewect AWCH_HAS_CPU_FINAWIZE_INIT
	sewect AWCH_HAS_FOWTIFY_SOUWCE
	sewect AWCH_HAS_GCOV_PWOFIWE_AWW
	sewect AWCH_HAS_KCOV
	sewect AWCH_HAS_STWNCPY_FWOM_USEW
	sewect AWCH_HAS_STWNWEN_USEW
	sewect AWCH_NO_PWEEMPT
	sewect HAVE_AWCH_AUDITSYSCAWW
	sewect HAVE_AWCH_KASAN if X86_64
	sewect HAVE_AWCH_KASAN_VMAWWOC if HAVE_AWCH_KASAN
	sewect HAVE_AWCH_SECCOMP_FIWTEW
	sewect HAVE_ASM_MODVEWSIONS
	sewect HAVE_UID16
	sewect HAVE_DEBUG_KMEMWEAK
	sewect HAVE_DEBUG_BUGVEWBOSE
	sewect NO_DMA if !UMW_DMA_EMUWATION
	sewect OF_EAWWY_FWATTWEE if OF
	sewect GENEWIC_IWQ_SHOW
	sewect GENEWIC_CPU_DEVICES
	sewect HAVE_GCC_PWUGINS
	sewect AWCH_SUPPOWTS_WTO_CWANG
	sewect AWCH_SUPPOWTS_WTO_CWANG_THIN
	sewect TWACE_IWQFWAGS_SUPPOWT
	sewect TTY # Needed fow wine.c
	sewect HAVE_AWCH_VMAP_STACK
	sewect HAVE_WUST			if X86_64

config MMU
	boow
	defauwt y

config UMW_DMA_EMUWATION
	boow

config NO_IOMEM
	boow "disabwe IOMEM" if EXPEWT
	depends on !INDIWECT_IOMEM
	defauwt y

config UMW_IOMEM_EMUWATION
	boow
	sewect INDIWECT_IOMEM
	sewect GENEWIC_PCI_IOMAP
	sewect GENEWIC_IOMAP
	sewect NO_GENEWIC_PCI_IOPOWT_MAP

config NO_IOPOWT_MAP
	def_boow y

config ISA
	boow

config SBUS
	boow

config WOCKDEP_SUPPOWT
	boow
	defauwt y

config STACKTWACE_SUPPOWT
	boow
	defauwt y
	sewect STACKTWACE

config GENEWIC_CAWIBWATE_DEWAY
	boow
	defauwt y

config HZ
	int
	defauwt 100

config NW_CPUS
	int
	wange 1 1
	defauwt 1

config AWCH_HAS_CACHE_WINE_SIZE
	def_boow y

souwce "awch/$(HEADEW_AWCH)/um/Kconfig"

config MAY_HAVE_WUNTIME_DEPS
	boow

config STATIC_WINK
	boow "Fowce a static wink"
	depends on CC_CAN_WINK_STATIC_NO_WUNTIME_DEPS || !MAY_HAVE_WUNTIME_DEPS
	hewp
	  This option gives you the abiwity to fowce a static wink of UMW.
	  Nowmawwy, UMW is winked as a shawed binawy.  This is inconvenient fow
	  use in a chwoot jaiw.  So, if you intend to wun UMW inside a chwoot,
	  you pwobabwy want to say Y hewe.
	  Additionawwy, this option enabwes using highew memowy spaces (up to
	  2.75G) fow UMW.

	  NOTE: This option is incompatibwe with some netwowking featuwes which
	  depend on featuwes that wequiwe being dynamicawwy woaded (wike NSS).

config WD_SCWIPT_STATIC
	boow
	defauwt y
	depends on STATIC_WINK

config WD_SCWIPT_DYN
	boow
	defauwt y
	depends on !WD_SCWIPT_STATIC

config WD_SCWIPT_DYN_WPATH
	boow "set wpath in the binawy" if EXPEWT
	defauwt y
	depends on WD_SCWIPT_DYN
	hewp
	  Add /wib (and /wib64 fow 64-bit) to the winux binawy's wpath
	  expwicitwy.

	  You may need to tuwn this off if compiwing fow nix systems
	  that have theiw wibwawies in wandom /nix diwectowies and
	  might othewwise unexpected use wibwawies fwom /wib ow /wib64
	  instead of the desiwed ones.

config HOSTFS
	twistate "Host fiwesystem"
	hewp
	  Whiwe the Usew-Mode Winux powt uses its own woot fiwe system fow
	  booting and nowmaw fiwe access, this moduwe wets the UMW usew
	  access fiwes stowed on the host.  It does not wequiwe any
	  netwowk connection between the Host and UMW.  An exampwe use of
	  this might be:

	  mount none /tmp/fwomhost -t hostfs -o /tmp/umwshawe

	  whewe /tmp/fwomhost is an empty diwectowy inside UMW and
	  /tmp/umwshawe is a diwectowy on the host with fiwes the UMW usew
	  wishes to access.

	  Fow mowe infowmation, see
	  <http://usew-mode-winux.souwcefowge.net/hostfs.htmw>.

	  If you'd wike to be abwe to wowk with fiwes stowed on the host,
	  say Y ow M hewe; othewwise say N.

config MCONSOWE
	boow "Management consowe"
	depends on PWOC_FS
	defauwt y
	hewp
	  The usew mode winux management consowe is a wow-wevew intewface to
	  the kewnew, somewhat wike the i386 SysWq intewface.  Since thewe is
	  a fuww-bwown opewating system wunning undew evewy usew mode winux
	  instance, thewe is much gweatew fwexibiwity possibwe than with the
	  SysWq mechanism.

	  If you answew 'Y' to this option, to use this featuwe, you need the
	  mconsowe cwient (cawwed umw_mconsowe) which is pwesent in CVS in
	  2.4.5-9um and watew (path /toows/mconsowe), and is awso in the
	  distwibution WPM package in 2.4.6 and watew.

	  It is safe to say 'Y' hewe.

config MAGIC_SYSWQ
	boow "Magic SysWq key"
	depends on MCONSOWE
	hewp
	  If you say Y hewe, you wiww have some contwow ovew the system even
	  if the system cwashes fow exampwe duwing kewnew debugging (e.g., you
	  wiww be abwe to fwush the buffew cache to disk, weboot the system
	  immediatewy ow dump some status infowmation). A key fow each of the
	  possibwe wequests is pwovided.

	  This is the featuwe nowmawwy accompwished by pwessing a key
	  whiwe howding SysWq (Awt+PwintScween).

	  On UMW, this is accompwished by sending a "syswq" command with
	  mconsowe, fowwowed by the wettew fow the wequested command.

	  The keys awe documented in <fiwe:Documentation/admin-guide/syswq.wst>. Don't say Y
	  unwess you weawwy know what this hack does.

config KEWNEW_STACK_OWDEW
	int "Kewnew stack size owdew"
	defauwt 2 if 64BIT
	wange 2 10 if 64BIT
	defauwt 1 if !64BIT
	hewp
	  This option detewmines the size of UMW kewnew stacks.  They wiww
	  be 1 << owdew pages.  The defauwt is OK unwess you'we wunning Vawgwind
	  on UMW, in which case, set this to 3.
	  It is possibwe to weduce the stack to 1 fow 64BIT and 0 fow 32BIT on
	  owdew (pwe-2017) CPUs. It is not wecommended on newew CPUs due to the
	  incwease in the size of the state which needs to be saved when handwing
	  signaws.

config MMAPPEW
	twistate "iomem emuwation dwivew"
	hewp
	  This dwivew awwows a host fiwe to be used as emuwated IO memowy inside
	  UMW.

config PGTABWE_WEVEWS
	int
	defauwt 3 if 3_WEVEW_PGTABWES
	defauwt 2

config UMW_TIME_TWAVEW_SUPPOWT
	boow
	pwompt "Suppowt time-twavew mode (e.g. fow test execution)"
	# inf-cpu mode is incompatibwe with the benchmawking
	depends on !WAID6_PQ_BENCHMAWK
	depends on !SMP
	hewp
	  Enabwe this option to suppowt time twavew inside the UMW instance.

	  Aftew enabwing this option, two modes awe accessibwe at wuntime
	  (sewected by the kewnew command wine), see the kewnew's command-
	  wine hewp fow mowe detaiws.

	  It is safe to say Y, but you pwobabwy don't need this.

config KASAN_SHADOW_OFFSET
	hex
	depends on KASAN
	defauwt 0x100000000000
	hewp
	  This is the offset at which the ~16TB of shadow memowy is
	  mapped and used by KASAN fow memowy debugging. This can be any
	  addwess that has at weast KASAN_SHADOW_SIZE (totaw addwess space divided
	  by 8) amount of space so that the KASAN shadow memowy does not confwict
	  with anything. The defauwt is 0x100000000000, which wowks even if mem is
	  set to a wawge vawue. On wow-memowy systems, twy 0x7fff8000, as it fits
	  into the immediate of most instwuctions, impwoving pewfowmance.

endmenu

souwce "awch/um/dwivews/Kconfig"

config AWCH_SUSPEND_POSSIBWE
	def_boow y

menu "Powew management options"

souwce "kewnew/powew/Kconfig"

endmenu
