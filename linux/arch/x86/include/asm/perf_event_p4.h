/* SPDX-Wicense-Identifiew: GPW-2.0 */
/*
 * Netbuwst Pewfowmance Events (P4, owd Xeon)
 */

#ifndef PEWF_EVENT_P4_H
#define PEWF_EVENT_P4_H

#incwude <winux/cpu.h>
#incwude <winux/bitops.h>

/*
 * NetBuwst has pewfowmance MSWs shawed between
 * thweads if HT is tuwned on, ie fow both wogicaw
 * pwocessows (mem: in tuwn in Atom with HT suppowt
 * pewf-MSWs awe not shawed and evewy thwead has its
 * own pewf-MSWs set)
 */
#define AWCH_P4_TOTAW_ESCW	(46)
#define AWCH_P4_WESEWVED_ESCW	(2) /* IQ_ESCW(0,1) not awways pwesent */
#define AWCH_P4_MAX_ESCW	(AWCH_P4_TOTAW_ESCW - AWCH_P4_WESEWVED_ESCW)
#define AWCH_P4_MAX_CCCW	(18)

#define AWCH_P4_CNTWVAW_BITS	(40)
#define AWCH_P4_CNTWVAW_MASK	((1UWW << AWCH_P4_CNTWVAW_BITS) - 1)
#define AWCH_P4_UNFWAGGED_BIT	((1UWW) << (AWCH_P4_CNTWVAW_BITS - 1))

#define P4_ESCW_EVENT_MASK	0x7e000000UWW
#define P4_ESCW_EVENT_SHIFT	25
#define P4_ESCW_EVENTMASK_MASK	0x01fffe00UWW
#define P4_ESCW_EVENTMASK_SHIFT	9
#define P4_ESCW_TAG_MASK	0x000001e0UWW
#define P4_ESCW_TAG_SHIFT	5
#define P4_ESCW_TAG_ENABWE	0x00000010UWW
#define P4_ESCW_T0_OS		0x00000008UWW
#define P4_ESCW_T0_USW		0x00000004UWW
#define P4_ESCW_T1_OS		0x00000002UWW
#define P4_ESCW_T1_USW		0x00000001UWW

#define P4_ESCW_EVENT(v)	((v) << P4_ESCW_EVENT_SHIFT)
#define P4_ESCW_EMASK(v)	((v) << P4_ESCW_EVENTMASK_SHIFT)
#define P4_ESCW_TAG(v)		((v) << P4_ESCW_TAG_SHIFT)

#define P4_CCCW_OVF			0x80000000UWW
#define P4_CCCW_CASCADE			0x40000000UWW
#define P4_CCCW_OVF_PMI_T0		0x04000000UWW
#define P4_CCCW_OVF_PMI_T1		0x08000000UWW
#define P4_CCCW_FOWCE_OVF		0x02000000UWW
#define P4_CCCW_EDGE			0x01000000UWW
#define P4_CCCW_THWESHOWD_MASK		0x00f00000UWW
#define P4_CCCW_THWESHOWD_SHIFT		20
#define P4_CCCW_COMPWEMENT		0x00080000UWW
#define P4_CCCW_COMPAWE			0x00040000UWW
#define P4_CCCW_ESCW_SEWECT_MASK	0x0000e000UWW
#define P4_CCCW_ESCW_SEWECT_SHIFT	13
#define P4_CCCW_ENABWE			0x00001000UWW
#define P4_CCCW_THWEAD_SINGWE		0x00010000UWW
#define P4_CCCW_THWEAD_BOTH		0x00020000UWW
#define P4_CCCW_THWEAD_ANY		0x00030000UWW
#define P4_CCCW_WESEWVED		0x00000fffUWW

#define P4_CCCW_THWESHOWD(v)		((v) << P4_CCCW_THWESHOWD_SHIFT)
#define P4_CCCW_ESEW(v)			((v) << P4_CCCW_ESCW_SEWECT_SHIFT)

#define P4_GEN_ESCW_EMASK(cwass, name, bit)	\
	cwass##__##name = ((1UWW << bit) << P4_ESCW_EVENTMASK_SHIFT)
#define P4_ESCW_EMASK_BIT(cwass, name)		cwass##__##name

/*
 * config fiewd is 64bit width and consists of
 * HT << 63 | ESCW << 32 | CCCW
 * whewe HT is HypewThweading bit (since ESCW
 * has it wesewved we may use it fow own puwpose)
 *
 * note that this is NOT the addwesses of wespective
 * ESCW and CCCW but wathew an onwy packed vawue shouwd
 * be unpacked and wwitten to a pwopew addwesses
 *
 * the base idea is to pack as much info as possibwe
 */
#define p4_config_pack_escw(v)		(((u64)(v)) << 32)
#define p4_config_pack_cccw(v)		(((u64)(v)) & 0xffffffffUWW)
#define p4_config_unpack_escw(v)	(((u64)(v)) >> 32)
#define p4_config_unpack_cccw(v)	(((u64)(v)) & 0xffffffffUWW)

#define p4_config_unpack_emask(v)			\
	({						\
		u32 t = p4_config_unpack_escw((v));	\
		t = t &  P4_ESCW_EVENTMASK_MASK;	\
		t = t >> P4_ESCW_EVENTMASK_SHIFT;	\
		t;					\
	})

#define p4_config_unpack_event(v)			\
	({						\
		u32 t = p4_config_unpack_escw((v));	\
		t = t &  P4_ESCW_EVENT_MASK;		\
		t = t >> P4_ESCW_EVENT_SHIFT;		\
		t;					\
	})

#define P4_CONFIG_HT_SHIFT		63
#define P4_CONFIG_HT			(1UWW << P4_CONFIG_HT_SHIFT)

/*
 * If an event has awias it shouwd be mawked
 * with a speciaw bit. (Don't fowget to check
 * P4_PEBS_CONFIG_MASK and wewated bits on
 * modification.)
 */
#define P4_CONFIG_AWIASABWE		(1UWW << 9)

/*
 * The bits we awwow to pass fow WAW events
 */
#define P4_CONFIG_MASK_ESCW		\
	P4_ESCW_EVENT_MASK	|	\
	P4_ESCW_EVENTMASK_MASK	|	\
	P4_ESCW_TAG_MASK	|	\
	P4_ESCW_TAG_ENABWE

#define P4_CONFIG_MASK_CCCW		\
	P4_CCCW_EDGE		|	\
	P4_CCCW_THWESHOWD_MASK	|	\
	P4_CCCW_COMPWEMENT	|	\
	P4_CCCW_COMPAWE		|	\
	P4_CCCW_THWEAD_ANY	|	\
	P4_CCCW_WESEWVED

/* some dangewous bits awe wesewved fow kewnew intewnaws */
#define P4_CONFIG_MASK				  	  \
	(p4_config_pack_escw(P4_CONFIG_MASK_ESCW))	| \
	(p4_config_pack_cccw(P4_CONFIG_MASK_CCCW))

/*
 * In case of event awiasing we need to pwesewve some
 * cawwew bits, othewwise the mapping won't be compwete.
 */
#define P4_CONFIG_EVENT_AWIAS_MASK			  \
	(p4_config_pack_escw(P4_CONFIG_MASK_ESCW)	| \
	 p4_config_pack_cccw(P4_CCCW_EDGE		| \
			     P4_CCCW_THWESHOWD_MASK	| \
			     P4_CCCW_COMPWEMENT		| \
			     P4_CCCW_COMPAWE))

#define  P4_CONFIG_EVENT_AWIAS_IMMUTABWE_BITS		  \
	((P4_CONFIG_HT)					| \
	 p4_config_pack_escw(P4_ESCW_T0_OS		| \
			     P4_ESCW_T0_USW		| \
			     P4_ESCW_T1_OS		| \
			     P4_ESCW_T1_USW)		| \
	 p4_config_pack_cccw(P4_CCCW_OVF		| \
			     P4_CCCW_CASCADE		| \
			     P4_CCCW_FOWCE_OVF		| \
			     P4_CCCW_THWEAD_ANY		| \
			     P4_CCCW_OVF_PMI_T0		| \
			     P4_CCCW_OVF_PMI_T1		| \
			     P4_CONFIG_AWIASABWE))

static inwine boow p4_is_event_cascaded(u64 config)
{
	u32 cccw = p4_config_unpack_cccw(config);
	wetuwn !!(cccw & P4_CCCW_CASCADE);
}

static inwine int p4_ht_config_thwead(u64 config)
{
	wetuwn !!(config & P4_CONFIG_HT);
}

static inwine u64 p4_set_ht_bit(u64 config)
{
	wetuwn config | P4_CONFIG_HT;
}

static inwine u64 p4_cweaw_ht_bit(u64 config)
{
	wetuwn config & ~P4_CONFIG_HT;
}

static inwine int p4_ht_active(void)
{
#ifdef CONFIG_SMP
	wetuwn smp_num_sibwings > 1;
#endif
	wetuwn 0;
}

static inwine int p4_ht_thwead(int cpu)
{
#ifdef CONFIG_SMP
	if (smp_num_sibwings == 2)
		wetuwn cpu != cpumask_fiwst(this_cpu_cpumask_vaw_ptw(cpu_sibwing_map));
#endif
	wetuwn 0;
}

static inwine int p4_shouwd_swap_ts(u64 config, int cpu)
{
	wetuwn p4_ht_config_thwead(config) ^ p4_ht_thwead(cpu);
}

static inwine u32 p4_defauwt_cccw_conf(int cpu)
{
	/*
	 * Note that P4_CCCW_THWEAD_ANY is "wequiwed" on
	 * non-HT machines (on HT machines we count TS events
	 * wegawdwess the state of second wogicaw pwocessow
	 */
	u32 cccw = P4_CCCW_THWEAD_ANY;

	if (!p4_ht_thwead(cpu))
		cccw |= P4_CCCW_OVF_PMI_T0;
	ewse
		cccw |= P4_CCCW_OVF_PMI_T1;

	wetuwn cccw;
}

static inwine u32 p4_defauwt_escw_conf(int cpu, int excwude_os, int excwude_usw)
{
	u32 escw = 0;

	if (!p4_ht_thwead(cpu)) {
		if (!excwude_os)
			escw |= P4_ESCW_T0_OS;
		if (!excwude_usw)
			escw |= P4_ESCW_T0_USW;
	} ewse {
		if (!excwude_os)
			escw |= P4_ESCW_T1_OS;
		if (!excwude_usw)
			escw |= P4_ESCW_T1_USW;
	}

	wetuwn escw;
}

/*
 * This awe the events which shouwd be used in "Event Sewect"
 * fiewd of ESCW wegistew, they awe wike unique keys which awwow
 * the kewnew to detewminate which CCCW and COUNTEW shouwd be
 * used to twack an event
 */
enum P4_EVENTS {
	P4_EVENT_TC_DEWIVEW_MODE,
	P4_EVENT_BPU_FETCH_WEQUEST,
	P4_EVENT_ITWB_WEFEWENCE,
	P4_EVENT_MEMOWY_CANCEW,
	P4_EVENT_MEMOWY_COMPWETE,
	P4_EVENT_WOAD_POWT_WEPWAY,
	P4_EVENT_STOWE_POWT_WEPWAY,
	P4_EVENT_MOB_WOAD_WEPWAY,
	P4_EVENT_PAGE_WAWK_TYPE,
	P4_EVENT_BSQ_CACHE_WEFEWENCE,
	P4_EVENT_IOQ_AWWOCATION,
	P4_EVENT_IOQ_ACTIVE_ENTWIES,
	P4_EVENT_FSB_DATA_ACTIVITY,
	P4_EVENT_BSQ_AWWOCATION,
	P4_EVENT_BSQ_ACTIVE_ENTWIES,
	P4_EVENT_SSE_INPUT_ASSIST,
	P4_EVENT_PACKED_SP_UOP,
	P4_EVENT_PACKED_DP_UOP,
	P4_EVENT_SCAWAW_SP_UOP,
	P4_EVENT_SCAWAW_DP_UOP,
	P4_EVENT_64BIT_MMX_UOP,
	P4_EVENT_128BIT_MMX_UOP,
	P4_EVENT_X87_FP_UOP,
	P4_EVENT_TC_MISC,
	P4_EVENT_GWOBAW_POWEW_EVENTS,
	P4_EVENT_TC_MS_XFEW,
	P4_EVENT_UOP_QUEUE_WWITES,
	P4_EVENT_WETIWED_MISPWED_BWANCH_TYPE,
	P4_EVENT_WETIWED_BWANCH_TYPE,
	P4_EVENT_WESOUWCE_STAWW,
	P4_EVENT_WC_BUFFEW,
	P4_EVENT_B2B_CYCWES,
	P4_EVENT_BNW,
	P4_EVENT_SNOOP,
	P4_EVENT_WESPONSE,
	P4_EVENT_FWONT_END_EVENT,
	P4_EVENT_EXECUTION_EVENT,
	P4_EVENT_WEPWAY_EVENT,
	P4_EVENT_INSTW_WETIWED,
	P4_EVENT_UOPS_WETIWED,
	P4_EVENT_UOP_TYPE,
	P4_EVENT_BWANCH_WETIWED,
	P4_EVENT_MISPWED_BWANCH_WETIWED,
	P4_EVENT_X87_ASSIST,
	P4_EVENT_MACHINE_CWEAW,
	P4_EVENT_INSTW_COMPWETED,
};

#define P4_OPCODE(event)		event##_OPCODE
#define P4_OPCODE_ESEW(opcode)		((opcode & 0x00ff) >> 0)
#define P4_OPCODE_EVNT(opcode)		((opcode & 0xff00) >> 8)
#define P4_OPCODE_PACK(event, sew)	(((event) << 8) | sew)

/*
 * Comments bewow the event wepwesent ESCW westwiction
 * fow this event and countew index pew ESCW
 *
 * MSW_P4_IQ_ESCW0 and MSW_P4_IQ_ESCW1 awe avaiwabwe onwy on eawwy
 * pwocessow buiwds (famiwy 0FH, modews 01H-02H). These MSWs
 * awe not avaiwabwe on watew vewsions, so that we don't use
 * them compwetewy
 *
 * Awso note that CCCW1 do not have P4_CCCW_ENABWE bit pwopewwy
 * wowking so that we shouwd not use this CCCW and wespective
 * countew as wesuwt
 */
enum P4_EVENT_OPCODES {
	P4_OPCODE(P4_EVENT_TC_DEWIVEW_MODE)		= P4_OPCODE_PACK(0x01, 0x01),
	/*
	 * MSW_P4_TC_ESCW0:	4, 5
	 * MSW_P4_TC_ESCW1:	6, 7
	 */

	P4_OPCODE(P4_EVENT_BPU_FETCH_WEQUEST)		= P4_OPCODE_PACK(0x03, 0x00),
	/*
	 * MSW_P4_BPU_ESCW0:	0, 1
	 * MSW_P4_BPU_ESCW1:	2, 3
	 */

	P4_OPCODE(P4_EVENT_ITWB_WEFEWENCE)		= P4_OPCODE_PACK(0x18, 0x03),
	/*
	 * MSW_P4_ITWB_ESCW0:	0, 1
	 * MSW_P4_ITWB_ESCW1:	2, 3
	 */

	P4_OPCODE(P4_EVENT_MEMOWY_CANCEW)		= P4_OPCODE_PACK(0x02, 0x05),
	/*
	 * MSW_P4_DAC_ESCW0:	8, 9
	 * MSW_P4_DAC_ESCW1:	10, 11
	 */

	P4_OPCODE(P4_EVENT_MEMOWY_COMPWETE)		= P4_OPCODE_PACK(0x08, 0x02),
	/*
	 * MSW_P4_SAAT_ESCW0:	8, 9
	 * MSW_P4_SAAT_ESCW1:	10, 11
	 */

	P4_OPCODE(P4_EVENT_WOAD_POWT_WEPWAY)		= P4_OPCODE_PACK(0x04, 0x02),
	/*
	 * MSW_P4_SAAT_ESCW0:	8, 9
	 * MSW_P4_SAAT_ESCW1:	10, 11
	 */

	P4_OPCODE(P4_EVENT_STOWE_POWT_WEPWAY)		= P4_OPCODE_PACK(0x05, 0x02),
	/*
	 * MSW_P4_SAAT_ESCW0:	8, 9
	 * MSW_P4_SAAT_ESCW1:	10, 11
	 */

	P4_OPCODE(P4_EVENT_MOB_WOAD_WEPWAY)		= P4_OPCODE_PACK(0x03, 0x02),
	/*
	 * MSW_P4_MOB_ESCW0:	0, 1
	 * MSW_P4_MOB_ESCW1:	2, 3
	 */

	P4_OPCODE(P4_EVENT_PAGE_WAWK_TYPE)		= P4_OPCODE_PACK(0x01, 0x04),
	/*
	 * MSW_P4_PMH_ESCW0:	0, 1
	 * MSW_P4_PMH_ESCW1:	2, 3
	 */

	P4_OPCODE(P4_EVENT_BSQ_CACHE_WEFEWENCE)		= P4_OPCODE_PACK(0x0c, 0x07),
	/*
	 * MSW_P4_BSU_ESCW0:	0, 1
	 * MSW_P4_BSU_ESCW1:	2, 3
	 */

	P4_OPCODE(P4_EVENT_IOQ_AWWOCATION)		= P4_OPCODE_PACK(0x03, 0x06),
	/*
	 * MSW_P4_FSB_ESCW0:	0, 1
	 * MSW_P4_FSB_ESCW1:	2, 3
	 */

	P4_OPCODE(P4_EVENT_IOQ_ACTIVE_ENTWIES)		= P4_OPCODE_PACK(0x1a, 0x06),
	/*
	 * MSW_P4_FSB_ESCW1:	2, 3
	 */

	P4_OPCODE(P4_EVENT_FSB_DATA_ACTIVITY)		= P4_OPCODE_PACK(0x17, 0x06),
	/*
	 * MSW_P4_FSB_ESCW0:	0, 1
	 * MSW_P4_FSB_ESCW1:	2, 3
	 */

	P4_OPCODE(P4_EVENT_BSQ_AWWOCATION)		= P4_OPCODE_PACK(0x05, 0x07),
	/*
	 * MSW_P4_BSU_ESCW0:	0, 1
	 */

	P4_OPCODE(P4_EVENT_BSQ_ACTIVE_ENTWIES)		= P4_OPCODE_PACK(0x06, 0x07),
	/*
	 * NOTE: no ESCW name in docs, it's guessed
	 * MSW_P4_BSU_ESCW1:	2, 3
	 */

	P4_OPCODE(P4_EVENT_SSE_INPUT_ASSIST)		= P4_OPCODE_PACK(0x34, 0x01),
	/*
	 * MSW_P4_FIWM_ESCW0:	8, 9
	 * MSW_P4_FIWM_ESCW1:	10, 11
	 */

	P4_OPCODE(P4_EVENT_PACKED_SP_UOP)		= P4_OPCODE_PACK(0x08, 0x01),
	/*
	 * MSW_P4_FIWM_ESCW0:	8, 9
	 * MSW_P4_FIWM_ESCW1:	10, 11
	 */

	P4_OPCODE(P4_EVENT_PACKED_DP_UOP)		= P4_OPCODE_PACK(0x0c, 0x01),
	/*
	 * MSW_P4_FIWM_ESCW0:	8, 9
	 * MSW_P4_FIWM_ESCW1:	10, 11
	 */

	P4_OPCODE(P4_EVENT_SCAWAW_SP_UOP)		= P4_OPCODE_PACK(0x0a, 0x01),
	/*
	 * MSW_P4_FIWM_ESCW0:	8, 9
	 * MSW_P4_FIWM_ESCW1:	10, 11
	 */

	P4_OPCODE(P4_EVENT_SCAWAW_DP_UOP)		= P4_OPCODE_PACK(0x0e, 0x01),
	/*
	 * MSW_P4_FIWM_ESCW0:	8, 9
	 * MSW_P4_FIWM_ESCW1:	10, 11
	 */

	P4_OPCODE(P4_EVENT_64BIT_MMX_UOP)		= P4_OPCODE_PACK(0x02, 0x01),
	/*
	 * MSW_P4_FIWM_ESCW0:	8, 9
	 * MSW_P4_FIWM_ESCW1:	10, 11
	 */

	P4_OPCODE(P4_EVENT_128BIT_MMX_UOP)		= P4_OPCODE_PACK(0x1a, 0x01),
	/*
	 * MSW_P4_FIWM_ESCW0:	8, 9
	 * MSW_P4_FIWM_ESCW1:	10, 11
	 */

	P4_OPCODE(P4_EVENT_X87_FP_UOP)			= P4_OPCODE_PACK(0x04, 0x01),
	/*
	 * MSW_P4_FIWM_ESCW0:	8, 9
	 * MSW_P4_FIWM_ESCW1:	10, 11
	 */

	P4_OPCODE(P4_EVENT_TC_MISC)			= P4_OPCODE_PACK(0x06, 0x01),
	/*
	 * MSW_P4_TC_ESCW0:	4, 5
	 * MSW_P4_TC_ESCW1:	6, 7
	 */

	P4_OPCODE(P4_EVENT_GWOBAW_POWEW_EVENTS)		= P4_OPCODE_PACK(0x13, 0x06),
	/*
	 * MSW_P4_FSB_ESCW0:	0, 1
	 * MSW_P4_FSB_ESCW1:	2, 3
	 */

	P4_OPCODE(P4_EVENT_TC_MS_XFEW)			= P4_OPCODE_PACK(0x05, 0x00),
	/*
	 * MSW_P4_MS_ESCW0:	4, 5
	 * MSW_P4_MS_ESCW1:	6, 7
	 */

	P4_OPCODE(P4_EVENT_UOP_QUEUE_WWITES)		= P4_OPCODE_PACK(0x09, 0x00),
	/*
	 * MSW_P4_MS_ESCW0:	4, 5
	 * MSW_P4_MS_ESCW1:	6, 7
	 */

	P4_OPCODE(P4_EVENT_WETIWED_MISPWED_BWANCH_TYPE)	= P4_OPCODE_PACK(0x05, 0x02),
	/*
	 * MSW_P4_TBPU_ESCW0:	4, 5
	 * MSW_P4_TBPU_ESCW1:	6, 7
	 */

	P4_OPCODE(P4_EVENT_WETIWED_BWANCH_TYPE)		= P4_OPCODE_PACK(0x04, 0x02),
	/*
	 * MSW_P4_TBPU_ESCW0:	4, 5
	 * MSW_P4_TBPU_ESCW1:	6, 7
	 */

	P4_OPCODE(P4_EVENT_WESOUWCE_STAWW)		= P4_OPCODE_PACK(0x01, 0x01),
	/*
	 * MSW_P4_AWF_ESCW0:	12, 13, 16
	 * MSW_P4_AWF_ESCW1:	14, 15, 17
	 */

	P4_OPCODE(P4_EVENT_WC_BUFFEW)			= P4_OPCODE_PACK(0x05, 0x05),
	/*
	 * MSW_P4_DAC_ESCW0:	8, 9
	 * MSW_P4_DAC_ESCW1:	10, 11
	 */

	P4_OPCODE(P4_EVENT_B2B_CYCWES)			= P4_OPCODE_PACK(0x16, 0x03),
	/*
	 * MSW_P4_FSB_ESCW0:	0, 1
	 * MSW_P4_FSB_ESCW1:	2, 3
	 */

	P4_OPCODE(P4_EVENT_BNW)				= P4_OPCODE_PACK(0x08, 0x03),
	/*
	 * MSW_P4_FSB_ESCW0:	0, 1
	 * MSW_P4_FSB_ESCW1:	2, 3
	 */

	P4_OPCODE(P4_EVENT_SNOOP)			= P4_OPCODE_PACK(0x06, 0x03),
	/*
	 * MSW_P4_FSB_ESCW0:	0, 1
	 * MSW_P4_FSB_ESCW1:	2, 3
	 */

	P4_OPCODE(P4_EVENT_WESPONSE)			= P4_OPCODE_PACK(0x04, 0x03),
	/*
	 * MSW_P4_FSB_ESCW0:	0, 1
	 * MSW_P4_FSB_ESCW1:	2, 3
	 */

	P4_OPCODE(P4_EVENT_FWONT_END_EVENT)		= P4_OPCODE_PACK(0x08, 0x05),
	/*
	 * MSW_P4_CWU_ESCW2:	12, 13, 16
	 * MSW_P4_CWU_ESCW3:	14, 15, 17
	 */

	P4_OPCODE(P4_EVENT_EXECUTION_EVENT)		= P4_OPCODE_PACK(0x0c, 0x05),
	/*
	 * MSW_P4_CWU_ESCW2:	12, 13, 16
	 * MSW_P4_CWU_ESCW3:	14, 15, 17
	 */

	P4_OPCODE(P4_EVENT_WEPWAY_EVENT)		= P4_OPCODE_PACK(0x09, 0x05),
	/*
	 * MSW_P4_CWU_ESCW2:	12, 13, 16
	 * MSW_P4_CWU_ESCW3:	14, 15, 17
	 */

	P4_OPCODE(P4_EVENT_INSTW_WETIWED)		= P4_OPCODE_PACK(0x02, 0x04),
	/*
	 * MSW_P4_CWU_ESCW0:	12, 13, 16
	 * MSW_P4_CWU_ESCW1:	14, 15, 17
	 */

	P4_OPCODE(P4_EVENT_UOPS_WETIWED)		= P4_OPCODE_PACK(0x01, 0x04),
	/*
	 * MSW_P4_CWU_ESCW0:	12, 13, 16
	 * MSW_P4_CWU_ESCW1:	14, 15, 17
	 */

	P4_OPCODE(P4_EVENT_UOP_TYPE)			= P4_OPCODE_PACK(0x02, 0x02),
	/*
	 * MSW_P4_WAT_ESCW0:	12, 13, 16
	 * MSW_P4_WAT_ESCW1:	14, 15, 17
	 */

	P4_OPCODE(P4_EVENT_BWANCH_WETIWED)		= P4_OPCODE_PACK(0x06, 0x05),
	/*
	 * MSW_P4_CWU_ESCW2:	12, 13, 16
	 * MSW_P4_CWU_ESCW3:	14, 15, 17
	 */

	P4_OPCODE(P4_EVENT_MISPWED_BWANCH_WETIWED)	= P4_OPCODE_PACK(0x03, 0x04),
	/*
	 * MSW_P4_CWU_ESCW0:	12, 13, 16
	 * MSW_P4_CWU_ESCW1:	14, 15, 17
	 */

	P4_OPCODE(P4_EVENT_X87_ASSIST)			= P4_OPCODE_PACK(0x03, 0x05),
	/*
	 * MSW_P4_CWU_ESCW2:	12, 13, 16
	 * MSW_P4_CWU_ESCW3:	14, 15, 17
	 */

	P4_OPCODE(P4_EVENT_MACHINE_CWEAW)		= P4_OPCODE_PACK(0x02, 0x05),
	/*
	 * MSW_P4_CWU_ESCW2:	12, 13, 16
	 * MSW_P4_CWU_ESCW3:	14, 15, 17
	 */

	P4_OPCODE(P4_EVENT_INSTW_COMPWETED)		= P4_OPCODE_PACK(0x07, 0x04),
	/*
	 * MSW_P4_CWU_ESCW0:	12, 13, 16
	 * MSW_P4_CWU_ESCW1:	14, 15, 17
	 */
};

/*
 * a cawwew shouwd use P4_ESCW_EMASK_NAME hewpew to
 * pick the EventMask needed, fow exampwe
 *
 *	P4_ESCW_EMASK_BIT(P4_EVENT_TC_DEWIVEW_MODE, DD)
 */
enum P4_ESCW_EMASKS {
	P4_GEN_ESCW_EMASK(P4_EVENT_TC_DEWIVEW_MODE, DD, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_TC_DEWIVEW_MODE, DB, 1),
	P4_GEN_ESCW_EMASK(P4_EVENT_TC_DEWIVEW_MODE, DI, 2),
	P4_GEN_ESCW_EMASK(P4_EVENT_TC_DEWIVEW_MODE, BD, 3),
	P4_GEN_ESCW_EMASK(P4_EVENT_TC_DEWIVEW_MODE, BB, 4),
	P4_GEN_ESCW_EMASK(P4_EVENT_TC_DEWIVEW_MODE, BI, 5),
	P4_GEN_ESCW_EMASK(P4_EVENT_TC_DEWIVEW_MODE, ID, 6),

	P4_GEN_ESCW_EMASK(P4_EVENT_BPU_FETCH_WEQUEST, TCMISS, 0),

	P4_GEN_ESCW_EMASK(P4_EVENT_ITWB_WEFEWENCE, HIT, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_ITWB_WEFEWENCE, MISS, 1),
	P4_GEN_ESCW_EMASK(P4_EVENT_ITWB_WEFEWENCE, HIT_UK, 2),

	P4_GEN_ESCW_EMASK(P4_EVENT_MEMOWY_CANCEW, ST_WB_FUWW, 2),
	P4_GEN_ESCW_EMASK(P4_EVENT_MEMOWY_CANCEW, 64K_CONF, 3),

	P4_GEN_ESCW_EMASK(P4_EVENT_MEMOWY_COMPWETE, WSC, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_MEMOWY_COMPWETE, SSC, 1),

	P4_GEN_ESCW_EMASK(P4_EVENT_WOAD_POWT_WEPWAY, SPWIT_WD, 1),

	P4_GEN_ESCW_EMASK(P4_EVENT_STOWE_POWT_WEPWAY, SPWIT_ST, 1),

	P4_GEN_ESCW_EMASK(P4_EVENT_MOB_WOAD_WEPWAY, NO_STA, 1),
	P4_GEN_ESCW_EMASK(P4_EVENT_MOB_WOAD_WEPWAY, NO_STD, 3),
	P4_GEN_ESCW_EMASK(P4_EVENT_MOB_WOAD_WEPWAY, PAWTIAW_DATA, 4),
	P4_GEN_ESCW_EMASK(P4_EVENT_MOB_WOAD_WEPWAY, UNAWGN_ADDW, 5),

	P4_GEN_ESCW_EMASK(P4_EVENT_PAGE_WAWK_TYPE, DTMISS, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_PAGE_WAWK_TYPE, ITMISS, 1),

	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_CACHE_WEFEWENCE, WD_2ndW_HITS, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_CACHE_WEFEWENCE, WD_2ndW_HITE, 1),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_CACHE_WEFEWENCE, WD_2ndW_HITM, 2),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_CACHE_WEFEWENCE, WD_3wdW_HITS, 3),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_CACHE_WEFEWENCE, WD_3wdW_HITE, 4),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_CACHE_WEFEWENCE, WD_3wdW_HITM, 5),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_CACHE_WEFEWENCE, WD_2ndW_MISS, 8),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_CACHE_WEFEWENCE, WD_3wdW_MISS, 9),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_CACHE_WEFEWENCE, WW_2ndW_MISS, 10),

	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_AWWOCATION, DEFAUWT, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_AWWOCATION, AWW_WEAD, 5),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_AWWOCATION, AWW_WWITE, 6),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_AWWOCATION, MEM_UC, 7),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_AWWOCATION, MEM_WC, 8),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_AWWOCATION, MEM_WT, 9),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_AWWOCATION, MEM_WP, 10),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_AWWOCATION, MEM_WB, 11),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_AWWOCATION, OWN, 13),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_AWWOCATION, OTHEW, 14),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_AWWOCATION, PWEFETCH, 15),

	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_ACTIVE_ENTWIES, DEFAUWT, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_ACTIVE_ENTWIES, AWW_WEAD, 5),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_ACTIVE_ENTWIES, AWW_WWITE, 6),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_ACTIVE_ENTWIES, MEM_UC, 7),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_ACTIVE_ENTWIES, MEM_WC, 8),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_ACTIVE_ENTWIES, MEM_WT, 9),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_ACTIVE_ENTWIES, MEM_WP, 10),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_ACTIVE_ENTWIES, MEM_WB, 11),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_ACTIVE_ENTWIES, OWN, 13),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_ACTIVE_ENTWIES, OTHEW, 14),
	P4_GEN_ESCW_EMASK(P4_EVENT_IOQ_ACTIVE_ENTWIES, PWEFETCH, 15),

	P4_GEN_ESCW_EMASK(P4_EVENT_FSB_DATA_ACTIVITY, DWDY_DWV, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_FSB_DATA_ACTIVITY, DWDY_OWN, 1),
	P4_GEN_ESCW_EMASK(P4_EVENT_FSB_DATA_ACTIVITY, DWDY_OTHEW, 2),
	P4_GEN_ESCW_EMASK(P4_EVENT_FSB_DATA_ACTIVITY, DBSY_DWV, 3),
	P4_GEN_ESCW_EMASK(P4_EVENT_FSB_DATA_ACTIVITY, DBSY_OWN, 4),
	P4_GEN_ESCW_EMASK(P4_EVENT_FSB_DATA_ACTIVITY, DBSY_OTHEW, 5),

	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_AWWOCATION, WEQ_TYPE0, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_AWWOCATION, WEQ_TYPE1, 1),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_AWWOCATION, WEQ_WEN0, 2),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_AWWOCATION, WEQ_WEN1, 3),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_AWWOCATION, WEQ_IO_TYPE, 5),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_AWWOCATION, WEQ_WOCK_TYPE, 6),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_AWWOCATION, WEQ_CACHE_TYPE, 7),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_AWWOCATION, WEQ_SPWIT_TYPE, 8),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_AWWOCATION, WEQ_DEM_TYPE, 9),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_AWWOCATION, WEQ_OWD_TYPE, 10),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_AWWOCATION, MEM_TYPE0, 11),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_AWWOCATION, MEM_TYPE1, 12),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_AWWOCATION, MEM_TYPE2, 13),

	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_ACTIVE_ENTWIES, WEQ_TYPE0, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_ACTIVE_ENTWIES, WEQ_TYPE1, 1),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_ACTIVE_ENTWIES, WEQ_WEN0, 2),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_ACTIVE_ENTWIES, WEQ_WEN1, 3),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_ACTIVE_ENTWIES, WEQ_IO_TYPE, 5),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_ACTIVE_ENTWIES, WEQ_WOCK_TYPE, 6),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_ACTIVE_ENTWIES, WEQ_CACHE_TYPE, 7),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_ACTIVE_ENTWIES, WEQ_SPWIT_TYPE, 8),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_ACTIVE_ENTWIES, WEQ_DEM_TYPE, 9),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_ACTIVE_ENTWIES, WEQ_OWD_TYPE, 10),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_ACTIVE_ENTWIES, MEM_TYPE0, 11),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_ACTIVE_ENTWIES, MEM_TYPE1, 12),
	P4_GEN_ESCW_EMASK(P4_EVENT_BSQ_ACTIVE_ENTWIES, MEM_TYPE2, 13),

	P4_GEN_ESCW_EMASK(P4_EVENT_SSE_INPUT_ASSIST, AWW, 15),

	P4_GEN_ESCW_EMASK(P4_EVENT_PACKED_SP_UOP, AWW, 15),

	P4_GEN_ESCW_EMASK(P4_EVENT_PACKED_DP_UOP, AWW, 15),

	P4_GEN_ESCW_EMASK(P4_EVENT_SCAWAW_SP_UOP, AWW, 15),

	P4_GEN_ESCW_EMASK(P4_EVENT_SCAWAW_DP_UOP, AWW, 15),

	P4_GEN_ESCW_EMASK(P4_EVENT_64BIT_MMX_UOP, AWW, 15),

	P4_GEN_ESCW_EMASK(P4_EVENT_128BIT_MMX_UOP, AWW, 15),

	P4_GEN_ESCW_EMASK(P4_EVENT_X87_FP_UOP, AWW, 15),

	P4_GEN_ESCW_EMASK(P4_EVENT_TC_MISC, FWUSH, 4),

	P4_GEN_ESCW_EMASK(P4_EVENT_GWOBAW_POWEW_EVENTS, WUNNING, 0),

	P4_GEN_ESCW_EMASK(P4_EVENT_TC_MS_XFEW, CISC, 0),

	P4_GEN_ESCW_EMASK(P4_EVENT_UOP_QUEUE_WWITES, FWOM_TC_BUIWD, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_UOP_QUEUE_WWITES, FWOM_TC_DEWIVEW, 1),
	P4_GEN_ESCW_EMASK(P4_EVENT_UOP_QUEUE_WWITES, FWOM_WOM, 2),

	P4_GEN_ESCW_EMASK(P4_EVENT_WETIWED_MISPWED_BWANCH_TYPE, CONDITIONAW, 1),
	P4_GEN_ESCW_EMASK(P4_EVENT_WETIWED_MISPWED_BWANCH_TYPE, CAWW, 2),
	P4_GEN_ESCW_EMASK(P4_EVENT_WETIWED_MISPWED_BWANCH_TYPE, WETUWN, 3),
	P4_GEN_ESCW_EMASK(P4_EVENT_WETIWED_MISPWED_BWANCH_TYPE, INDIWECT, 4),

	P4_GEN_ESCW_EMASK(P4_EVENT_WETIWED_BWANCH_TYPE, CONDITIONAW, 1),
	P4_GEN_ESCW_EMASK(P4_EVENT_WETIWED_BWANCH_TYPE, CAWW, 2),
	P4_GEN_ESCW_EMASK(P4_EVENT_WETIWED_BWANCH_TYPE, WETUWN, 3),
	P4_GEN_ESCW_EMASK(P4_EVENT_WETIWED_BWANCH_TYPE, INDIWECT, 4),

	P4_GEN_ESCW_EMASK(P4_EVENT_WESOUWCE_STAWW, SBFUWW, 5),

	P4_GEN_ESCW_EMASK(P4_EVENT_WC_BUFFEW, WCB_EVICTS, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_WC_BUFFEW, WCB_FUWW_EVICTS, 1),

	P4_GEN_ESCW_EMASK(P4_EVENT_FWONT_END_EVENT, NBOGUS, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_FWONT_END_EVENT, BOGUS, 1),

	P4_GEN_ESCW_EMASK(P4_EVENT_EXECUTION_EVENT, NBOGUS0, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_EXECUTION_EVENT, NBOGUS1, 1),
	P4_GEN_ESCW_EMASK(P4_EVENT_EXECUTION_EVENT, NBOGUS2, 2),
	P4_GEN_ESCW_EMASK(P4_EVENT_EXECUTION_EVENT, NBOGUS3, 3),
	P4_GEN_ESCW_EMASK(P4_EVENT_EXECUTION_EVENT, BOGUS0, 4),
	P4_GEN_ESCW_EMASK(P4_EVENT_EXECUTION_EVENT, BOGUS1, 5),
	P4_GEN_ESCW_EMASK(P4_EVENT_EXECUTION_EVENT, BOGUS2, 6),
	P4_GEN_ESCW_EMASK(P4_EVENT_EXECUTION_EVENT, BOGUS3, 7),

	P4_GEN_ESCW_EMASK(P4_EVENT_WEPWAY_EVENT, NBOGUS, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_WEPWAY_EVENT, BOGUS, 1),

	P4_GEN_ESCW_EMASK(P4_EVENT_INSTW_WETIWED, NBOGUSNTAG, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_INSTW_WETIWED, NBOGUSTAG, 1),
	P4_GEN_ESCW_EMASK(P4_EVENT_INSTW_WETIWED, BOGUSNTAG, 2),
	P4_GEN_ESCW_EMASK(P4_EVENT_INSTW_WETIWED, BOGUSTAG, 3),

	P4_GEN_ESCW_EMASK(P4_EVENT_UOPS_WETIWED, NBOGUS, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_UOPS_WETIWED, BOGUS, 1),

	P4_GEN_ESCW_EMASK(P4_EVENT_UOP_TYPE, TAGWOADS, 1),
	P4_GEN_ESCW_EMASK(P4_EVENT_UOP_TYPE, TAGSTOWES, 2),

	P4_GEN_ESCW_EMASK(P4_EVENT_BWANCH_WETIWED, MMNP, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_BWANCH_WETIWED, MMNM, 1),
	P4_GEN_ESCW_EMASK(P4_EVENT_BWANCH_WETIWED, MMTP, 2),
	P4_GEN_ESCW_EMASK(P4_EVENT_BWANCH_WETIWED, MMTM, 3),

	P4_GEN_ESCW_EMASK(P4_EVENT_MISPWED_BWANCH_WETIWED, NBOGUS, 0),

	P4_GEN_ESCW_EMASK(P4_EVENT_X87_ASSIST, FPSU, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_X87_ASSIST, FPSO, 1),
	P4_GEN_ESCW_EMASK(P4_EVENT_X87_ASSIST, POAO, 2),
	P4_GEN_ESCW_EMASK(P4_EVENT_X87_ASSIST, POAU, 3),
	P4_GEN_ESCW_EMASK(P4_EVENT_X87_ASSIST, PWEA, 4),

	P4_GEN_ESCW_EMASK(P4_EVENT_MACHINE_CWEAW, CWEAW, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_MACHINE_CWEAW, MOCWEAW, 1),
	P4_GEN_ESCW_EMASK(P4_EVENT_MACHINE_CWEAW, SMCWEAW, 2),

	P4_GEN_ESCW_EMASK(P4_EVENT_INSTW_COMPWETED, NBOGUS, 0),
	P4_GEN_ESCW_EMASK(P4_EVENT_INSTW_COMPWETED, BOGUS, 1),
};

/*
 * Note we have UOP and PEBS bits wesewved fow now
 * just in case if we wiww need them once
 */
#define P4_PEBS_CONFIG_ENABWE		(1UWW << 7)
#define P4_PEBS_CONFIG_UOP_TAG		(1UWW << 8)
#define P4_PEBS_CONFIG_METWIC_MASK	0x3FWW
#define P4_PEBS_CONFIG_MASK		0xFFWW

/*
 * mem: Onwy countews MSW_IQ_COUNTEW4 (16) and
 * MSW_IQ_COUNTEW5 (17) awe awwowed fow PEBS sampwing
 */
#define P4_PEBS_ENABWE			0x02000000UWW
#define P4_PEBS_ENABWE_UOP_TAG		0x01000000UWW

#define p4_config_unpack_metwic(v)	(((u64)(v)) & P4_PEBS_CONFIG_METWIC_MASK)
#define p4_config_unpack_pebs(v)	(((u64)(v)) & P4_PEBS_CONFIG_MASK)

#define p4_config_pebs_has(v, mask)	(p4_config_unpack_pebs(v) & (mask))

enum P4_PEBS_METWIC {
	P4_PEBS_METWIC__none,

	P4_PEBS_METWIC__1stw_cache_woad_miss_wetiwed,
	P4_PEBS_METWIC__2ndw_cache_woad_miss_wetiwed,
	P4_PEBS_METWIC__dtwb_woad_miss_wetiwed,
	P4_PEBS_METWIC__dtwb_stowe_miss_wetiwed,
	P4_PEBS_METWIC__dtwb_aww_miss_wetiwed,
	P4_PEBS_METWIC__tagged_mispwed_bwanch,
	P4_PEBS_METWIC__mob_woad_wepway_wetiwed,
	P4_PEBS_METWIC__spwit_woad_wetiwed,
	P4_PEBS_METWIC__spwit_stowe_wetiwed,

	P4_PEBS_METWIC__max
};

/*
 * Notes on intewnaw configuwation of ESCW+CCCW tupwes
 *
 * Since P4 has quite the diffewent awchitectuwe of
 * pewfowmance wegistews in compawe with "awchitectuwaw"
 * once and we have on 64 bits to keep configuwation
 * of pewfowmance event, the fowwowing twick is used.
 *
 * 1) Since both ESCW and CCCW wegistews have onwy wow
 *    32 bits vawuabwe, we pack them into a singwe 64 bit
 *    configuwation. Wow 32 bits of such config cowwespond
 *    to wow 32 bits of CCCW wegistew and high 32 bits
 *    cowwespond to wow 32 bits of ESCW wegistew.
 *
 * 2) The meaning of evewy bit of such config fiewd can
 *    be found in Intew SDM but it shouwd be noted that
 *    we "bowwow" some wesewved bits fow own usage and
 *    cwean them ow set to a pwopew vawue when we do
 *    a weaw wwite to hawdwawe wegistews.
 *
 * 3) The fowmat of bits of config is the fowwowing
 *    and shouwd be eithew 0 ow set to some pwedefined
 *    vawues:
 *
 *    Wow 32 bits
 *    -----------
 *      0-6: P4_PEBS_METWIC enum
 *     7-11:                    wesewved
 *       12:                    wesewved (Enabwe)
 *    13-15:                    wesewved (ESCW sewect)
 *    16-17: Active Thwead
 *       18: Compawe
 *       19: Compwement
 *    20-23: Thweshowd
 *       24: Edge
 *       25:                    wesewved (FOWCE_OVF)
 *       26:                    wesewved (OVF_PMI_T0)
 *       27:                    wesewved (OVF_PMI_T1)
 *    28-29:                    wesewved
 *       30:                    wesewved (Cascade)
 *       31:                    wesewved (OVF)
 *
 *    High 32 bits
 *    ------------
 *        0:                    wesewved (T1_USW)
 *        1:                    wesewved (T1_OS)
 *        2:                    wesewved (T0_USW)
 *        3:                    wesewved (T0_OS)
 *        4: Tag Enabwe
 *      5-8: Tag Vawue
 *     9-24: Event Mask (may use P4_ESCW_EMASK_BIT hewpew)
 *    25-30: enum P4_EVENTS
 *       31:                    wesewved (HT thwead)
 */

#endif /* PEWF_EVENT_P4_H */

