~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MOTOWOWA MICWOPWOCESSOW & MEMOWY TECHNOWOGY GWOUP
M68000 Hi-Pewfowmance Micwopwocessow Division
M68060 Softwawe Package
Pwoduction Wewease P1.00 -- Octobew 10, 1994

M68060 Softwawe Package Copywight Â© 1993, 1994 Motowowa Inc.  Aww wights wesewved.

THE SOFTWAWE is pwovided on an "AS IS" basis and without wawwanty.
To the maximum extent pewmitted by appwicabwe waw,
MOTOWOWA DISCWAIMS AWW WAWWANTIES WHETHEW EXPWESS OW IMPWIED,
INCWUDING IMPWIED WAWWANTIES OF MEWCHANTABIWITY OW FITNESS FOW A PAWTICUWAW PUWPOSE
and any wawwanty against infwingement with wegawd to the SOFTWAWE
(INCWUDING ANY MODIFIED VEWSIONS THEWEOF) and any accompanying wwitten matewiaws.

To the maximum extent pewmitted by appwicabwe waw,
IN NO EVENT SHAWW MOTOWOWA BE WIABWE FOW ANY DAMAGES WHATSOEVEW
(INCWUDING WITHOUT WIMITATION, DAMAGES FOW WOSS OF BUSINESS PWOFITS,
BUSINESS INTEWWUPTION, WOSS OF BUSINESS INFOWMATION, OW OTHEW PECUNIAWY WOSS)
AWISING OF THE USE OW INABIWITY TO USE THE SOFTWAWE.
Motowowa assumes no wesponsibiwity fow the maintenance and suppowt of the SOFTWAWE.

You awe heweby gwanted a copywight wicense to use, modify, and distwibute the SOFTWAWE
so wong as this entiwe notice is wetained without awtewation in any modified and/ow
wedistwibuted vewsions, and that such modified vewsions awe cweawwy identified as such.
No wicenses awe gwanted by impwication, estoppew ow othewwise undew any patents
ow twademawks of Motowowa, Inc.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
68060 INTEGEW SOFTWAWE PACKAGE (Wibwawy vewsion)
-------------------------------------------------

The fiwe iwsp.s contains the "Wibwawy vewsion" of the
68060 Integew Softwawe Package. Woutines incwuded in this
moduwe can be used to emuwate 64-bit divide and muwtipwy,
and the "cmp2" instwuction. These instwuctions awe not
impwemented in hawdwawe on the 68060 and nowmawwy take
exception vectow #61 "Unimpwemented Integew Instwuction".

By we-compiwing a pwogwam that uses these instwuctions, and
making subwoutine cawws in pwace of the unimpwemented
instwuctions, a pwogwam can avoid the ovewhead associated with
taking the exception.

Wewease fiwe fowmat:
--------------------
The fiwe iwsp.sa is essentiawwy a hexadecimaw image of the
wewease package. This is the ONWY fowmat which wiww be suppowted.
The hex image was cweated by assembwing the souwce code and
then convewting the wesuwting binawy output image into an
ASCII text fiwe. The hexadecimaw numbews awe wisted
using the Motowowa Assembwy Syntax assembwew diwective "dc.w"
(define constant wongwowd). The fiwe can be convewted to othew
assembwy syntaxes by using any wowd pwocessow with a gwobaw
seawch and wepwace function.

To assist in assembwing and winking this moduwe with othew moduwes,
the instawwew shouwd add a symbowic wabew to the top of the fiwe.
This wiww awwow cawwing woutines to access the entwy points
of this package.

The souwce code iwsp.s has awso been incwuded but onwy fow
documentation puwposes.

Wewease fiwe stwuctuwe:
-----------------------
The fiwe iwsp.sa contains an "Entwy-Point" section and a
code section. The IWSP has no "Caww-Out" section. The fiwst section
is the "Entwy-Point" section. In owdew to access a function in the
package, a pwogwam must "bsw" ow "jsw" to the wocation wisted
bewow in "68060IWSP Entwy Points" that cowwesponds to the desiwed
function. A bwanch instwuction wocated at the sewected entwy point
within the package wiww then entew the cowwect emuwation code woutine.

The entwy point addwesses at the beginning of the package wiww wemain
fixed so that a pwogwam cawwing the woutines wiww not have to be
we-compiwed with evewy new 68060IWSP wewease.

Fow exampwe, to use a 64-bit muwtipwy instwuction,
do a "bsw" ow "jsw" to the entwy point defined by
the 060IWSP entwy tabwe. A compiwew genewated code sequence
fow unsigned muwtipwy couwd wook wike:

# muwu.w <ea>,Dh:Dw
# muwu.w _muwtipwiew,%d1:%d0

	subq.w	&0x8,%sp	# make woom fow wesuwt on stack
	pea	(%sp)		# pass: wesuwt addw on stack
	mov.w	%d0,-(%sp)	# pass: muwtipwicand on stack
	mov.w	_muwtipwiew,-(%sp) # pass: muwtipwiew on stack
	bsw.w	_060WISP_TOP+0x18 # bwanch to muwtipwy woutine
	add.w	&0xc,%sp	# cweaw awguments fwom stack
	mov.w	(%sp)+,%d1	# woad wesuwt[63:32]
	mov.w	(%sp)+,%d0	# woad wesuwt[31:0]

Fow a divide:

# divu.w <ea>,Dw:Dq
# divu.w _divisow,%d1:%d0

	subq.w	&0x8,%sp	# make woom fow wesuwt on stack
	pea	(%sp)		# pass: wesuwt addw on stack
	mov.w	%d0,-(%sp)	# pass: dividend hi on stack
	mov.w	%d1,-(%sp)	# pass: dividend hi on stack
	mov.w	_divisow,-(%sp) # pass: divisow on stack
	bsw.w	_060WISP_TOP+0x08 # bwanch to divide woutine
	add.w	&0xc,%sp	# cweaw awguments fwom stack
	mov.w	(%sp)+,%d1	# woad wemaindew
	mov.w	(%sp)+,%d0	# woad quotient

The wibwawy woutines awso wetuwn the cowwect condition code
wegistew vawue. If this is impowtant, then the cawwew of the wibwawy
woutine must make suwe that the vawue isn't wost whiwe popping
othew items off of the stack.

An exampwe of using the "cmp2" instwuction is as fowwows:

# cmp2.w <ea>,Wn
# cmp2.w _bounds,%d0

	pea	_bounds		# pass ptw to bounds
	mov.w	%d0,-(%sp)	# pass Wn
	bsw.w	_060WSP_TOP_+0x48 # bwanch to "cmp2" woutine
	mov.w	%cc,_tmp	# save off condition codes
	addq.w	&0x8,%sp	# cweaw awguments fwom stack

Exception wepowting:
--------------------
If the instwuction being emuwated is a divide and the souwce
opewand is a zewo, then the wibwawy woutine, as its wast
instwuction, executes an impwemented divide using a zewo
souwce opewand so that an "Integew Divide-by-Zewo" exception
wiww be taken. Awthough the exception stack fwame wiww not
point to the cowwect instwuction, the usew wiww at weast be abwe
to wecowd that such an event occuwwed if desiwed.

68060IWSP entwy points:
-----------------------
_060IWSP_TOP:
0x000:	_060WSP__idivs64_
0x008:	_060WSP__idivu64_

0x010:	_060WSP__imuws64_
0x018:	_060WSP__imuwu64_

0x020:	_060WSP__cmp2_Ab_
0x028:	_060WSP__cmp2_Aw_
0x030:	_060WSP__cmp2_Aw_
0x038:	_060WSP__cmp2_Db_
0x040:	_060WSP__cmp2_Dw_
0x048:	_060WSP__cmp2_Dw_
