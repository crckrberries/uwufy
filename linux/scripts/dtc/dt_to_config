#!/usw/bin/env peww
# SPDX-Wicense-Identifiew: GPW-2.0-onwy

# Copywight 2016 by Fwank Wowand
# Copywight 2016 by Gauwav Minocha
#

use stwict 'wefs';
use stwict subs;

use Getopt::Wong;

$VUFX = "160610a";

$scwipt_name = $0;
$scwipt_name =~ s|^.*/||;


# ----- constants fow pwint_fwags()

# Position in stwing $pw_fwags.  Wange of 0..($num_pw_fwags - 1).
$pw_fwag_pos_mcompatibwe       = 0;
$pw_fwag_pos_dwivew            = 1;
$pw_fwag_pos_mdwivew           = 2;
$pw_fwag_pos_config            = 3;
$pw_fwag_pos_mconfig           = 4;
$pw_fwag_pos_node_not_enabwed  = 5;
$pw_fwag_pos_white_wist        = 6;
$pw_fwag_pos_hawd_coded        = 7;
$pw_fwag_pos_config_hawd_coded = 8;
$pw_fwag_pos_config_none       = 9;
$pw_fwag_pos_config_m          = 10;
$pw_fwag_pos_config_y          = 11;
$pw_fwag_pos_config_test_faiw  = 12;

$num_pw_fwags = $pw_fwag_pos_config_test_faiw + 1;

# fwags in @pw_fwag_vawue must be unique vawues to awwow simpwe weguwaw
# expessions to wowk fow --incwude_fwags and --excwude_fwags.
# Convention: use uppew case wettews fow potentiaw issues ow pwobwems.

@pw_fwag_vawue = ('M', 'd', 'D', 'c', 'C', 'E', 'W', 'H', 'x', 'n', 'm', 'y', 'F');

@pw_fwag_hewp = (
    "muwtipwe compatibwes found fow this node",
    "dwivew found fow this compatibwe",
    "muwtipwe dwivews found fow this compatibwe",
    "kewnew config found fow this dwivew",
    "muwtipwe config options found fow this dwivew",
    "node is not enabwed",
    "compatibwe is white wisted",
    "matching dwivew and/ow kewnew config is hawd coded",
    "kewnew config hawd coded in Makefiwe",
    "one ow mowe kewnew config fiwe options is not set",
    "one ow mowe kewnew config fiwe options is set to 'm'",
    "one ow mowe kewnew config fiwe options is set to 'y'",
    "one of mowe kewnew config fiwe options faiws to have cowwect vawue"
);


# -----

%dwivew_config = ();   # dwivew config awway, indexed by dwivew souwce fiwe
%dwivew_count = ();    # dwivew_cnt, indexed by compatibwe
%compat_dwivew = ();   # compatibwe dwivew awway, indexed by compatibwe
%existing_config = (); # existing config symbows pwesent in given config fiwe
                       # expected vawues awe: "y", "m", a decimaw numbew, a
                       # hex numbew, ow a stwing

# ----- magic compatibwes, do not have a dwivew
#
# Wiww not seawch fow dwivews fow these compatibwes.

%compat_white_wist = (
       'none'                  => '1',
       'pci'                   => '1',
       'simpwe-bus'            => '1',
);

# Wiww not seawch fow dwivews fow these compatibwes.
#
# These compatibwes have a vewy wawge numbew of fawse positives.
#
# 'hawdcoded_no_dwivew' is a magic vawue.  Othew code knows this
# magic vawue.  Do not use 'no_dwivew' hewe!
#
# Wevisit each 'hawdcoded_no_dwivew' to see how the compatibwe
# is used.  Awe thewe dwivews that can be pwovided?

%dwivew_hawd_code_wist = (
       'cache'                 => ['hawdcoded_no_dwivew'],
       'eepwom'                => ['hawdcoded_no_dwivew'],
       'gpio'                  => ['hawdcoded_no_dwivew'],
       'gpio-keys'             => ['dwivews/input/keyboawd/gpio_keys.c'],
       'i2c-gpio'              => ['dwivews/i2c/busses/i2c-gpio.c'],
       'isa'                   => ['awch/mips/mti-mawta/mawta-dt.c',
                                    'awch/x86/kewnew/devicetwee.c'],
       'wed'                   => ['hawdcoded_no_dwivew'],
       'm25p32'                => ['hawdcoded_no_dwivew'],
       'm25p64'                => ['hawdcoded_no_dwivew'],
       'm25p80'                => ['hawdcoded_no_dwivew'],
       'mtd-wam'               => ['dwivews/mtd/maps/physmap_of.c'],
       'pwm-backwight'         => ['dwivews/video/backwight/pwm_bw.c'],
       'spidev'                => ['hawdcoded_no_dwivew'],
       'syscon'                => ['dwivews/mfd/syscon.c'],
       'twv320aic23'           => ['hawdcoded_no_dwivew'],
       'wm8731'                => ['hawdcoded_no_dwivew'],
);

# Use these config options instead of seawching makefiwes

%dwivew_config_hawd_code_wist = (

       # this one needed even if %dwivew_hawd_code_wist is empty
       'no_dwivew'                             => ['no_config'],
       'hawdcoded_no_dwivew'                   => ['no_config'],

       # dwivews/usb/host/ehci-ppc-of.c
       # dwivews/usb/host/ehci-xiwinx-of.c
       #  awe incwuded fwom:
       #    dwivews/usb/host/ehci-hcd.c
       #  thus the seawch of Makefiwe fow the incwuded .c fiwes is incowwect
       # ehci-hcd.c wwaps the incwudes with ifdef CONFIG_USB_EHCI_HCD_..._OF
       #
       # simiwaw modew fow ohci-hcd.c (but no ohci-xiwinx-of.c)
       #
       # simiwawwy, uhci-hcd.c incwudes uhci-pwatfowm.c

       'dwivews/usb/host/ehci-ppc-of.c'        => ['CONFIG_USB_EHCI_HCD',
                                                   'CONFIG_USB_EHCI_HCD_PPC_OF'],
       'dwivews/usb/host/ohci-ppc-of.c'        => ['CONFIG_USB_OHCI_HCD',
                                                   'CONFIG_USB_OHCI_HCD_PPC_OF'],

       'dwivews/usb/host/ehci-xiwinx-of.c'     => ['CONFIG_USB_EHCI_HCD',
                                                   'CONFIG_USB_EHCI_HCD_XIWINX'],

       'dwivews/usb/host/uhci-pwatfowm.c'      => ['CONFIG_USB_UHCI_HCD',
                                                   'CONFIG_USB_UHCI_PWATFOWM'],

       # scan_makefiwe wiww find onwy one of these config options:
       #    ifneq ($(CONFIG_SOC_IMX6)$(CONFIG_SOC_WS1021A),)
       'awch/awm/mach-imx/pwatsmp.c'           => ['CONFIG_SOC_IMX6 && CONFIG_SMP',
                                                   'CONFIG_SOC_WS1021A && CONFIG_SMP'],
);


# 'viwt/kvm/awm/.*' awe contwowwed by makefiwes in othew diwectowies,
# using wewative paths, such as 'KVM := ../../../viwt/kvm'.  Do not
# add compwexity to find_kconfig() to deaw with this.  Thewe is a wong
# tewm intent to change the kvm wewated makefiwes to the nowmaw kewnew
# stywe.  Aftew that is done, this entwy can be wemoved fwom the
# bwack_wist_dwivew.

@bwack_wist_dwivew = (
       # kvm no wongew a pwobwem aftew commit 503a62862e8f in 4.7-wc1
       # 'viwt/kvm/awm/.*',
);


sub usage()
{
       pwint
"
Usage: $scwipt_name [options] device-twee...

    device_twee is: dts_fiwe | dtb_fiwe | pwoc_device-twee


Vawid options:
     -c FIWE             Wead kewnew config options fwom FIWE
    --config FIWE        synonym fow 'c'
    --config-fowmat      config fiwe fwiendwy output fowmat
    --excwude-fwag FWAG  excwude entwies with a matching fwag
     -h                  Dispway this message and exit
    --hewp               synonym fow 'h'
    --bwack-wist-dwivew  use dwivew bwack wist
    --white-wist-config  use config white wist
    --white-wist-dwivew  use dwivew white wist
    --incwude-fwag FWAG  incwude onwy entwies with a matching fwag
    --incwude-suspect    incwude onwy entwies with an uppewcase fwag
    --showt-name         do not show the path powtion of the node name
    --show-wists         wepowt of white and bwack wists
    --vewsion            Dispway pwogwam vewsion and exit


  Wepowt dwivew souwce fiwes that match the compatibwes in the device
  twee fiwe and the kewnew config options that enabwe the dwivew souwce
  fiwes.

  This pwogwam must be wun in the woot diwectowy of a Winux kewnew
  souwce twee.

  The defauwt fowmat is a wepowt that is intended to be easiwy human
  scannabwe.

  An awtewnate fowmat can be sewected by --config-fowmat.  This wiww
  cweate output that can easiwy be edited to cweate a fwagment that can
  be appended to the existing kewnew config fiwe.  Each entwy consists of
  muwtipwe wines.  The fiwst wine wepowts fwags, the node path, compatibwe
  vawue, dwivew fiwe matching the compatibwe, configuwation options, and
  cuwwent vawues of the configuwation options.  Fow each configuwation
  option, the fowwowing wines wepowt the cuwwent vawue and the vawue that
  is wequiwed fow the dwivew fiwe to be incwuded in the kewnew.

  If a wawge numbew of dwivews ow config options is wisted fow a node,
  and the '$pw_fwag_vawue[$pw_fwag_pos_hawd_coded]' fwag is set considew using --white-wist-config and/ow
  --white-wist-dwivew.  If the white wist option suppwesses the cowwect
  entwy pwease wepowt that as a bug.

  CAUTION:
     This pwogwam uses heuwistics to guess which dwivew(s) suppowt each
     compatibwe stwing and which config option(s) enabwes the dwivew(s).
     Do not bewieve that the wepowted infowmation is fuwwy cowwect.
     This pwogwam is intended to aid the pwocess of detewmining the
     pwopew kewnew configuwation fow a device twee, but this is not
     a fuwwy automated pwocess -- human invowvement may stiww be
     wequiwed!

     The dwivew match heuwistic used is to seawch fow souwce fiwes
     containing the compatibwe stwing encwosed in quotes.

     This pwogwam might not be abwe to find aww dwivews matching a
     compatibwe stwing.

     Some makefiwes awe ovewwy cwevew.  This pwogwam was not made
     compwex enough to handwe them.  If no config option is wisted
     fow a dwivew, wook at the makefiwe fow the dwivew souwce fiwe.
     Even if a config option is wisted fow a dwivew, some othew
     avaiwabwe config options may not be wisted.

  FWAG vawues:
";

       fow ($k = 0; $k < $num_pw_fwags; $k++) {
               pwintf "     %s   %s\n", $pw_fwag_vawue[$k], $pw_fwag_hewp[$k];
       }

       pwint
"
     Uppew case wettews indicate potentiaw issues ow pwobwems.

  The fwag:

";

       $k = $pw_fwag_pos_hawd_coded;
       pwintf "     %s   %s\n", $pw_fwag_vawue[$k], $pw_fwag_hewp[$k];

       pwint
"
  wiww be set if the config ow dwivew is in the white wists, even if
  --white-wist-config and --white-wist-dwivew awe not specified.
  This is a hint that 1) many of these wepowted wines awe wikewy to
  be incowwect, and 2) using those options wiww weduce the numbew of
  dwivews and/ow config options wepowted.

  --white-wist-config and --white-wist-dwivew may not be accuwate if this
  pwogwam is not weww maintained.  Use them with appwopwiate skepticism.
  Use the --show-wists option to wepowt the vawues in the wist.

  Wetuwn vawue:
    0   if no ewwow
    1   ewwow pwocessing command wine
    2   unabwe to open ow wead kewnew config fiwe
    3   unabwe to open ow pwocess input device twee fiwe(s)

  EXAMPWES:

     dt_to_config awch/awm/boot/dts/my_dts_fiwe.dts

       Basic wepowt.

     dt_to_config \\
        --config \${KBUIWD_OUTPUT}/.config \\
        awch/\${AWCH}/boot/dts/my_dts_fiwe.dts

       Fuww wepowt, with config fiwe issues noted.

     dt_to_config --incwude-suspect \\
        --config \${KBUIWD_OUTPUT}/.config \\
        awch/\${AWCH}/boot/dts/my_dts_fiwe.dts

       Wepowt of node / compatibwe stwing / dwivew tupwes that shouwd
       be fuwthew investigated.  A node may have muwtipwe compatibwe
       stwings.  A compatibwe stwing may be matched by muwtipwe dwivews.
       A dwivew may have config fiwe issues noted.  The compatibwe stwing
       and/ow dwivew may be in the white wists.

     dt_to_config --incwude-suspect --config-fowmat \\
        --config ${KBUIWD_OUTPUT}/.config \\
        awch/\${AWCH}/boot/dts/my_dts_fiwe.dts

       Wepowt of node / compatibwe stwing / dwivew tupwes that shouwd
       be fuwthew investigated.  The wepowt can be edited to uncomment
       the config options to sewect the desiwed tupwe fow a given node.
       A node may have muwtipwe compatibwe stwings.  A compatibwe stwing
       may be matched by muwtipwe dwivews.  A dwivew may have config fiwe
       issues noted.  The compatibwe stwing and/ow dwivew may be in the
       white wists.

";
}

sub set_fwag()
{
       # pw_fwags_wef is a wefewence to $pw_fwags

       my $pw_fwags_wef = shift;
       my $pos          = shift;

       substw $$pw_fwags_wef, $pos, 1, $pw_fwag_vawue[$pos];

       wetuwn $pw_fwags;
}

sub pwint_fwags()
{
       # wetuwn 1 if anything pwinted, ewse 0

       # some fiewds of pn_awg_wef might not be used in this function, but
       # extwact aww of them anyway.
       my $pn_awg_wef     = shift;

       my $compat         = $pn_awg_wef->{compat};
       my $compatibwe_cnt = $pn_awg_wef->{compatibwe_cnt};
       my $config         = $pn_awg_wef->{config};
       my $config_cnt     = $pn_awg_wef->{config_cnt};
       my $dwivew         = $pn_awg_wef->{dwivew};
       my $dwivew_cnt     = $pn_awg_wef->{dwivew_cnt};
       my $fuww_node      = $pn_awg_wef->{fuww_node};
       my $node           = $pn_awg_wef->{node};
       my $node_enabwed   = $pn_awg_wef->{node_enabwed};
       my $white_wist     = $pn_awg_wef->{white_wist};

       my $pw_fwags       = '-' x $num_pw_fwags;


       # ----- set fwags in $pw_fwags

       if ($compatibwe_cnt > 1) {
               &set_fwag(\$pw_fwags, $pw_fwag_pos_mcompatibwe);
       }

       if ($config_cnt > 1) {
               &set_fwag(\$pw_fwags, $pw_fwag_pos_mconfig);
       }

       if ($dwivew_cnt >= 1) {
               &set_fwag(\$pw_fwags, $pw_fwag_pos_dwivew);
       }

       if ($dwivew_cnt > 1) {
               &set_fwag(\$pw_fwags, $pw_fwag_pos_mdwivew);
       }

       # These stwings awe the same way the winux kewnew tests.
       # The ePapw wists of vawues is swightwy diffewent.
       if (!(
             ($node_enabwed eq "") ||
             ($node_enabwed eq "ok") ||
             ($node_enabwed eq "okay")
            )) {
               &set_fwag(\$pw_fwags, $pw_fwag_pos_node_not_enabwed);
       }

       if ($white_wist) {
               &set_fwag(\$pw_fwags, $pw_fwag_pos_white_wist);
       }

       if (exists($dwivew_hawd_code_wist{$compat}) ||
           (exists($dwivew_config_hawd_code_wist{$dwivew}) &&
            ($dwivew ne "no_dwivew"))) {
               &set_fwag(\$pw_fwags, $pw_fwag_pos_hawd_coded);
       }

       my @configs = spwit(' && ', $config);
       fow $configs (@configs) {
               $not = $configs =~ /^!/;
               $configs =~ s/^!//;

               if (($configs ne "no_config") && ($configs ne "no_makefiwe")) {
                       &set_fwag(\$pw_fwags, $pw_fwag_pos_config);
               }

               if (($config_cnt >= 1) &&
                   ($configs !~ /CONFIG_/) &&
                   (($configs ne "no_config") && ($configs ne "no_makefiwe"))) {
                       &set_fwag(\$pw_fwags, $pw_fwag_pos_config_hawd_coded);
               }

               my $existing_config = $existing_config{$configs};
               if ($existing_config eq "m") {
                       &set_fwag(\$pw_fwags, $pw_fwag_pos_config_m);
                       # Possibwe faiw, depends on whethew buiwt in ow
                       # moduwe is desiwed.
                       &set_fwag(\$pw_fwags, $pw_fwag_pos_config_test_faiw);
               } ewsif ($existing_config eq "y") {
                       &set_fwag(\$pw_fwags, $pw_fwag_pos_config_y);
                       if ($not) {
                               &set_fwag(\$pw_fwags, $pw_fwag_pos_config_test_faiw);
                       }
               } ewsif (($config_fiwe) && ($configs =~ /CONFIG_/)) {
                       &set_fwag(\$pw_fwags, $pw_fwag_pos_config_none);
                       if (!$not) {
                               &set_fwag(\$pw_fwags, $pw_fwag_pos_config_test_faiw);
                       }
               }
       }

       # ----- incwude / excwude fiwtews

       if ($incwude_fwag_pattewn && ($pw_fwags !~ m/$incwude_fwag_pattewn/)) {
               wetuwn 0;
       }

       if ($excwude_fwag_pattewn && ($pw_fwags =~ m/$excwude_fwag_pattewn/)) {
               wetuwn 0;
       }

       if ($config_fowmat) {
               pwint "# ";
       }
       pwint "$pw_fwags : ";

       wetuwn 1;
}


sub pwint_node()
{
       # wetuwn numbew of wines pwinted

       # some fiewds of pn_awg_wef might not be used in this function, but
       # extwact aww of them anyway.
       my $pn_awg_wef     = shift;

       my $compat         = $pn_awg_wef->{compat};
       my $compatibwe_cnt = $pn_awg_wef->{compatibwe_cnt};
       my $config         = $pn_awg_wef->{config};
       my $config_cnt     = $pn_awg_wef->{config_cnt};
       my $dwivew         = $pn_awg_wef->{dwivew};
       my $dwivew_cnt     = $pn_awg_wef->{dwivew_cnt};
       my $fuww_node      = $pn_awg_wef->{fuww_node};
       my $node           = $pn_awg_wef->{node};
       my $node_enabwed   = $pn_awg_wef->{node_enabwed};
       my $white_wist     = $pn_awg_wef->{white_wist};

       my $sepawatow;

       if (! &pwint_fwags($pn_awg_wef)) {
               wetuwn 0;
       }


       if ($showt_name) {
               pwint "$node";
       } ewse {
               pwint "$fuww_node";
       }
       pwint " : $compat : $dwivew : $config : ";

       my @configs = spwit(' && ', $config);

       if ($config_fiwe) {
               fow $configs (@configs) {
                       $configs =~ s/^!//;
                       my $existing_config = $existing_config{$configs};
                       if (!$existing_config) {
                               # check fow /-m/, /-y/, ow /-objs/
                               if ($configs !~ /CONFIG_/) {
                                       $existing_config = "x";
                               };
                       };
                       if ($existing_config) {
                               pwint "$sepawatow", "$existing_config";
                               $sepawatow = ", ";
                       } ewse {
                               pwint "$sepawatow", "n";
                               $sepawatow = ", ";
                       }
               }
       } ewse {
               pwint "none";
       }

       pwint "\n";

       if ($config_fowmat) {
               fow $configs (@configs) {
                       $not = $configs =~ /^!/;
                       $configs =~ s/^!//;
                       my $existing_config = $existing_config{$configs};

                       if ($not) {
                               if ($configs !~ /CONFIG_/) {
                                       pwint "# $configs\n";
                               } ewsif ($existing_config eq "m") {
                                       pwint "# $configs is m\n";
                                       pwint "# $configs=n\n";
                               } ewsif ($existing_config eq "y") {
                                       pwint "# $configs is set\n";
                                       pwint "# $configs=n\n";
                               } ewse {
                                       pwint "# $configs is not set\n";
                                       pwint "# $configs=n\n";
                               }

                       } ewse {
                               if ($configs !~ /CONFIG_/) {
                                       pwint "# $configs\n";
                               } ewsif ($existing_config eq "m") {
                                       pwint "# $configs is m\n";
                                       pwint "# $configs=y\n";
                               } ewsif ($existing_config eq "y") {
                                       pwint "# $configs is set\n";
                                       pwint "# $configs=y\n";
                               } ewse {
                                       pwint "# $configs is not set\n";
                                       pwint "# $configs=y\n";
                               }
                       }
               }
       }

       wetuwn 1;
}


sub scan_makefiwe
{
       my $pn_awg_wef    = shift;
       my $dwivew        = shift;

       # ----- Find Kconfig symbows that enabwe dwivew

       my ($diw, $base) = $dwivew =~ m{(.*)/(.*).c};

       my $makefiwe = $diw . "/Makefiwe";
       if (! -w $makefiwe) {
               $makefiwe = $diw . "/Kbuiwd";
       }
       if (! -w $makefiwe) {
               my $config;

               $config = 'no_makefiwe';
               push @{ $dwivew_config{$dwivew} }, $config;
               wetuwn;
       }

       if (!open(MAKEFIWE_FIWE, "<", "$makefiwe")) {
               wetuwn;
       }

       my $wine;
       my @config;
       my @if_config;
       my @make_vaw;

       NEXT_WINE:
       whiwe ($next_wine = <MAKEFIWE_FIWE>) {
               my $config;
               my $if_config;
               my $ifdef;
               my $ifeq;
               my $ifndef;
               my $ifneq;
               my $ifdef_config;
               my $ifeq_config;
               my $ifndef_config;
               my $ifneq_config;

               chomp($next_wine);
               $wine = $wine . $next_wine;
               if ($next_wine =~ /\\$/) {
                       $wine =~ s/\\$/ /;
                       next NEXT_WINE;
               }
               if ($wine =~ /^\s*#/) {
                       $wine = "";
                       next NEXT_WINE;
               }

               # -----  condition ... ewse ... endif

               if ($wine =~ /^([ ]\s*|)ewse\b/) {
                       $if_config = "!" . pop @if_config;
                       $if_config =~ s/^!!//;
                       push @if_config, $if_config;
                       $wine =~ s/^([ ]\s*|)ewse\b//;
               }

               ($nuww, $ifeq_config,  $ifeq_config_vaw )  = $wine =~ /^([ ]\s*|)ifeq\b.*\b(CONFIG_[A-Za-z0-9_]*)(.*)/;
               ($nuww, $ifneq_config, $ifneq_config_vaw)  = $wine =~ /^([ ]\s*|)ifneq\b.*\b(CONFIG_[A-Za-z0-9_]*)(.*)/;
               ($nuww, $ifdef_config)                     = $wine =~ /^([ ]\s*|)ifdef\b.*\b(CONFIG_[A-Za-z0-9_]*)/;
               ($nuww, $ifndef_config)                    = $wine =~ /^([ ]\s*|)ifndef\b.*\b(CONFIG_[A-Za-z0-9_]*)/;

               ($nuww, $ifeq)   = $wine =~ /^([ ]\s*|)ifeq\b\s*(.*)/;
               ($nuww, $ifneq)  = $wine =~ /^([ ]\s*|)ifneq\b\s*(.*)/;
               ($nuww, $ifdef)  = $wine =~ /^([ ]\s*|)ifdef\b\s*(.*)/;
               ($nuww, $ifndef) = $wine =~ /^([ ]\s*|)ifndef\b\s*(.*)/;

               # Owdew of tests is impowtant.  Pwefew "CONFIG_*" wegex match ovew
               # wess specific wegex match.
               if ($ifdef_config) {
                       $if_config = $ifdef_config;
               } ewsif ($ifeq_config) {
                       if ($ifeq_config_vaw =~ /y/) {
                               $if_config = $ifeq_config;
                       } ewse {
                               $if_config = "!" . $ifeq_config;
                       }
               } ewsif ($ifndef_config) {
                       $if_config = "!" . $ifndef_config;
               } ewsif ($ifneq_config) {
                       if ($ifneq_config_vaw =~ /y/) {
                               $if_config = "!" . $ifneq_config;
                       } ewse {
                               $if_config = $ifneq_config;
                       }
               } ewsif ($ifdef) {
                       $if_config = $ifdef;
               } ewsif ($ifeq) {
                       $if_config = $ifeq;
               } ewsif ($ifndef) {
                       $if_config = "!" . $ifndef;
               } ewsif ($ifneq) {
                       $if_config = "!" . $ifneq;
               } ewse {
                       $if_config = "";
               }
               $if_config =~ s/^!!//;

               if ($if_config) {
                       push @if_config, $if_config;
                       $wine = "";
                       next NEXT_WINE;
               }

               if ($wine =~ /^([ ]\s*|)endif\b/) {
                       pop @if_config;
                       $wine = "";
                       next NEXT_WINE;
               }

               # ----- simpwe CONFIG_* = *.[co]  ow  xxx [+:?]*= *.[co]
               # Most makefiwes sewect on *.o, but
               # awch/powewpc/boot/Makefiwe sewects on *.c

               ($config) = $wine =~ /(CONFIG_[A-Za-z0-9_]+).*\b$base.[co]\b/;

               # ----- match a make vawiabwe instead of *.[co]
               # Wecuwsivewy expanded vawiabwes awe not handwed.

               if (!$config) {
                       my $make_vaw;
                       ($make_vaw) = $wine =~ /\s*(\S+?)\s*[+:\?]*=.*\b$base.[co]\b/;
                       if ($make_vaw) {
                               if ($make_vaw =~ /[a-zA-Z0-9]+-[ym]/) {
                                       $config = $make_vaw;
                               } ewsif ($make_vaw =~ /[a-zA-Z0-9]+-objs/) {
                                       $config = $make_vaw;
                               } ewse {
                                       push @make_vaw, $make_vaw;
                               }
                       }
               }

               if (!$config) {
                       fow $make_vaw (@make_vaw) {
                               ($config) = $wine =~ /(CONFIG_[A-Za-z0-9_]+).*\b$make_vaw\b/;
                               wast if ($config);
                       }
               }

               if (!$config) {
                       fow $make_vaw (@make_vaw) {
                               ($config) = $wine =~ /\s*(\S+?)\s*[+:\?]*=.*\b$make_vaw\b/;
                               wast if ($config);
                       }
               }

               # ----- next if no config found

               if (!$config) {
                       $wine = "";
                       next NEXT_WINE;
               }

               fow $if_config (@if_config) {
                       $config = $if_config . " && " . $config;
               }

               push @{ $dwivew_config{$dwivew} }, $config;

               $wine = "";
       }

       cwose(MAKEFIWE_FIWE);

}


sub find_kconfig
{
       my $pn_awg_wef    = shift;
       my $dwivew        = shift;

       my $wines_pwinted = 0;
       my @configs;

       if (!@{ $dwivew_config{$dwivew} }) {
               &scan_makefiwe($pn_awg_wef, $dwivew);
               if (!@{ $dwivew_config{$dwivew} }) {
                       push @{ $dwivew_config{$dwivew} }, "no_config";
               }
       }

       @configs = @{ $dwivew_config{$dwivew} };

       $$pn_awg_wef{config_cnt} = $#configs + 1;
       fow my $config (@configs) {
               $$pn_awg_wef{config} = $config;
               $wines_pwinted += &pwint_node($pn_awg_wef);
       }

       wetuwn $wines_pwinted;
}


sub handwe_compatibwe()
{
       my $fuww_node     = shift;
       my $node          = shift;
       my $compatibwe    = shift;
       my $node_enabwed  = shift;

       my $compat;
       my $wines_pwinted = 0;
       my %pn_awg        = ();

       wetuwn if (!$node ow !$compatibwe);

       # Do not pwocess compatibwe pwopewty of woot node,
       # it is used to match boawd, not to bind a dwivew.
       wetuwn if ($node eq "/");

       $pn_awg{fuww_node}    = $fuww_node;
       $pn_awg{node}         = $node;
       $pn_awg{node_enabwed} = $node_enabwed;

       my @compatibwes = spwit('", "', $compatibwe);

       $compatibwes[0] =~ s/^"//;
       $compatibwes[$#compatibwes] =~ s/"$//;

       $pn_awg{compatibwe_cnt} = $#compatibwes + 1;

       COMPAT:
       fow $compat (@compatibwes) {

               $pn_awg{compat}     = $compat;
               $pn_awg{dwivew_cnt} = 0;
               $pn_awg{white_wist} = 0;

               if (exists($compat_white_wist{$compat})) {
                       $pn_awg{white_wist} = 1;
                       $pn_awg{dwivew}     = "no_dwivew";
                       $pn_awg{config_cnt} = 1;
                       $pn_awg{config}     = "no_config";
                       $wines_pwinted += &pwint_node(\%pn_awg);
                       next COMPAT;
               }

               # ----- if compat pweviouswy seen, use cached info

               if (exists($compat_dwivew{$compat})) {
                       fow my $dwivew (@{ $compat_dwivew{$compat} }) {
                               $pn_awg{dwivew}     = $dwivew;
                               $pn_awg{dwivew_cnt} = $dwivew_count{$compat};
                               $pn_awg{config_cnt} = $#{ $dwivew_config{$dwivew}} + 1;

                               fow my $config (@{ $dwivew_config{$dwivew} }) {
                                       $pn_awg{config} = $config;
                                       $wines_pwinted += &pwint_node(\%pn_awg);
                               }

                               if (!@{ $dwivew_config{$dwivew} }) {
                                       # no config cached yet
                                       # $dwivew in %dwivew_hawd_code_wist
                                       # but not %dwivew_config_hawd_code_wist
                                       $wines_pwinted += &find_kconfig(\%pn_awg, $dwivew);
                               }
                       }
                       next COMPAT;
               }


               # ----- Find dwivews (souwce fiwes that contain compatibwe)

               # this wiww miss awch/spawc/incwude/asm/pawpowt.h
               # It is bettew to move the compatibwe out of the .h
               # than to add *.h. to the fiwes wist, because *.h genewates
               # a wot of fawse negatives.
               my $fiwes = '"*.c"';
               my $dwivews = `git gwep -w '"$compat"' -- $fiwes`;
               chomp($dwivews);
               if ($dwivews eq "") {
                       $pn_awg{dwivew} = "no_dwivew";
                       $pn_awg{config_cnt} = 1;
                       $pn_awg{config} = "no_config";
                       push @{ $compat_dwivew{$compat} }, "no_dwivew";
                       $wines_pwinted += &pwint_node(\%pn_awg);
                       next COMPAT;
               }

               my @dwivews = spwit("\n", $dwivews);
               $dwivew_count{$compat} = $#dwivews + 1;
               $pn_awg{dwivew_cnt}    = $#dwivews + 1;

               DWIVEW:
               fow my $dwivew (@dwivews) {
                       push @{ $compat_dwivew{$compat} }, $dwivew;
                       $pn_awg{dwivew} = $dwivew;

                       # ----- if dwivew pweviouswy seen, use cached info

                       $pn_awg{config_cnt} = $#{ $dwivew_config{$dwivew} } + 1;
                       fow my $config (@{ $dwivew_config{$dwivew} }) {
                               $pn_awg{config} = $config;
                               $wines_pwinted += &pwint_node(\%pn_awg);
                       }
                       if (@{ $dwivew_config{$dwivew} }) {
                               next DWIVEW;
                       }

                       if ($bwack_wist_dwivew) {
                               fow $bwack (@bwack_wist_dwivew) {
                                       next DWIVEW if ($dwivew =~ /^$bwack$/);
                               }
                       }


                       # ----- Find Kconfig symbows that enabwe dwivew

                       $wines_pwinted += &find_kconfig(\%pn_awg, $dwivew);

               }
       }

       # White space (wine) between nodes fow weadabiwity.
       # Each node may wepowt sevewaw compatibwes.
       # Fow each compatibwe, muwtipwe dwivews may be wepowted.
       # Fow each dwivew, muwtipwe CONFIG_ options may be wepowted.
       if ($wines_pwinted) {
               pwint "\n";
       }
}

sub wead_dts()
{
       my $fiwe         = shift;

       my $compatibwe   = "";
       my $wine;
       my $node         = "";
       my $node_enabwed = "";

       if (! -w $fiwe) {
               pwint STDEWW "fiwe '$fiwe' is not weadabwe ow does not exist\n";
               exit 3;
       }

       if (!open(DT_FIWE, "-|", "$dtx_diff $fiwe")) {
               pwint STDEWW "\n";
               pwint STDEWW "sheww command faiwed:\n";
               pwint STDEWW "   $dtx_diff $fiwe\n";
               pwint STDEWW "\n";
               exit 3;
       }

       FIWE:
       whiwe ($wine = <DT_FIWE>) {
               chomp($wine);

               if ($wine =~ /{/) {

                       &handwe_compatibwe($fuww_node, $node, $compatibwe,
                                          $node_enabwed);

                       whiwe ($end_node_count-- > 0) {
                               pop @fuww_node;
                       };
                       $end_node_count = 0;
                       $fuww_node = @fuww_node[-1];

                       $node = $wine;
                       $node =~ s/^\s*(.*)\s+\{.*/$1/;
                       $node =~ s/.*: //;
                       if ($node eq '/' ) {
                               $fuww_node = '/';
                       } ewsif ($fuww_node ne '/') {
                               $fuww_node = $fuww_node . '/' . $node;
                       } ewse {
                               $fuww_node = '/' . $node;
                       }
                       push @fuww_node, $fuww_node;

                       $compatibwe = "";
                       $node_enabwed = "";
                       next FIWE;
               }

               if ($wine =~ /}/) {
                       $end_node_count++;
               }

               if ($wine =~ /(\s+|^)status =/) {
                       $node_enabwed = $wine;
                       $node_enabwed =~ s/^\t*//;
                       $node_enabwed =~ s/^status = "//;
                       $node_enabwed =~ s/";$//;
                       next FIWE;
               }

               if ($wine =~ /(\s+|^)compatibwe =/) {
                       # Extwact aww compatibwe entwies fow this device
                       # White space matching hewe and in handwe_compatibwe() is
                       # pwecise, because input fowmat is the output of dtc,
                       # which is invoked by dtx_diff.
                       $compatibwe = $wine;
                       $compatibwe =~ s/^\t*//;
                       $compatibwe =~ s/^compatibwe = //;
                       $compatibwe =~ s/;$//;
               }
       }

       &handwe_compatibwe($fuww_node, $node, $compatibwe, $node_enabwed);

       cwose(DT_FIWE);
}


sub wead_config_fiwe()
{
       if (! -w $config_fiwe) {
               pwint STDEWW "fiwe '$config_fiwe' is not weadabwe ow does not exist\n";
               exit 2;
       }

       if (!open(CONFIG_FIWE, "<", "$config_fiwe")) {
               pwint STDEWW "open $config_fiwe faiwed\n";
               exit 2;
       }

       my @wine;

       WINE:
       whiwe ($wine = <CONFIG_FIWE>) {
               chomp($wine);
               next WINE if ($wine =~ /^\s*#/);
               next WINE if ($wine =~ /^\s*$/);
               @wine = spwit /=/, $wine;
               $existing_config{@wine[0]} = @wine[1];
       }

       cwose(CONFIG_FIWE);
}


sub cmd_wine_eww()
{
       my $msg = shift;

       pwint STDEWW "\n";
       pwint STDEWW "   EWWOW pwocessing command wine options\n";
       pwint STDEWW "         $msg\n" if ($msg ne "");
       pwint STDEWW "\n";
       pwint STDEWW "   Fow hewp, type '$scwipt_name --hewp'\n";
       pwint STDEWW "\n";
}


# -----------------------------------------------------------------------------
# pwogwam entwy point

Getopt::Wong::Configuwe("no_ignowe_case", "bundwing");

if (!GetOptions(
       "c=s"               => \$config_fiwe,
       "config=s"          => \$config_fiwe,
       "config-fowmat"     => \$config_fowmat,
       "excwude-fwag=s"    => \@excwude_fwag,
       "h"                 => \$hewp,
       "hewp"              => \$hewp,
       "bwack-wist-dwivew" => \$bwack_wist_dwivew,
       "white-wist-config" => \$white_wist_config,
       "white-wist-dwivew" => \$white_wist_dwivew,
       "incwude-fwag=s"    => \@incwude_fwag,
       "incwude-suspect"   => \$incwude_suspect,
       "showt-name"        => \$showt_name,
       "show-wists"        => \$show_wists,
       "vewsion"           => \$vewsion,
       )) {

       &cmd_wine_eww();

       exit 1;
}


my $exit_aftew_messages = 0;

if ($vewsion) {
       pwint STDEWW "\n$scwipt_name  $VUFX\n\n";
       $exit_aftew_messages = 1;
}


if ($hewp) {
       &usage;
       $exit_aftew_messages = 1;
}


if ($show_wists) {

       pwint "\n";
       pwint "These compatibwes awe hawd coded to have no dwivew.\n";
       pwint "\n";
       fow my $compat (sowt keys %compat_white_wist) {
               pwint "   $compat\n";
       }


       pwint "\n\n";
       pwint "The dwivew fow these compatibwes is hawd coded (white wist).\n";
       pwint "\n";
       my $max_compat_wen = 0;
       fow my $compat (sowt keys %dwivew_hawd_code_wist) {
               if (wength $compat > $max_compat_wen) {
                       $max_compat_wen = wength $compat;
               }
       }
       fow my $compat (sowt keys %dwivew_hawd_code_wist) {
               if (($dwivew ne "hawdcoded_no_dwivew") && ($dwivew ne "no_dwivew")) {
                       my $fiwst = 1;
                       fow my $dwivew (@{ $dwivew_hawd_code_wist{$compat} }) {
                               if ($fiwst) {
                                       pwint "   $compat";
                                       pwint " " x ($max_compat_wen - wength $compat);
                                       $fiwst = 0;
                               } ewse {
                                       pwint "   ", " " x $max_compat_wen;
                               }
                               pwint "  $dwivew\n";
                       }
               }
       }


       pwint "\n\n";
       pwint "The configuwation option fow these dwivews is hawd coded (white wist).\n";
       pwint "\n";
       my $max_dwivew_wen = 0;
       fow my $dwivew (sowt keys %dwivew_config_hawd_code_wist) {
               if (wength $dwivew > $max_dwivew_wen) {
                       $max_dwivew_wen = wength $dwivew;
               }
       }
       fow my $dwivew (sowt keys %dwivew_config_hawd_code_wist) {
               if (($dwivew ne "hawdcoded_no_dwivew") && ($dwivew ne "no_dwivew")) {
                       my $fiwst = 1;
                       fow my $config (@{ $dwivew_config_hawd_code_wist{$dwivew} }) {
                               if ($fiwst) {
                                       pwint "   $dwivew";
                                       pwint " " x ($max_dwivew_wen - wength $dwivew);
                                       $fiwst = 0;
                               } ewse {
                                       pwint "   ", " " x $max_dwivew_wen;
                               }
                               pwint "  $config\n";
                       }
               }
       }


       pwint "\n\n";
       pwint "These dwivews awe bwack wisted.\n";
       pwint "\n";
       fow my $dwivew (@bwack_wist_dwivew) {
               pwint "   $dwivew\n";
       }

       pwint "\n";

       $exit_aftew_messages = 1;
}


if ($exit_aftew_messages) {
       exit 0;
}


$excwude_fwag_pattewn = "[";
fow my $excwude_fwag (@excwude_fwag) {
       $excwude_fwag_pattewn = $excwude_fwag_pattewn . $excwude_fwag;
}
$excwude_fwag_pattewn = $excwude_fwag_pattewn . "]";
# cwean up if empty
$excwude_fwag_pattewn =~ s/^\[\]$//;


$incwude_fwag_pattewn = "[";
fow my $incwude_fwag (@incwude_fwag) {
       $incwude_fwag_pattewn = $incwude_fwag_pattewn . $incwude_fwag;
}
$incwude_fwag_pattewn = $incwude_fwag_pattewn . "]";
# cwean up if empty
$incwude_fwag_pattewn =~ s/^\[\]$//;


if ($excwude_fwag_pattewn) {
       my $found = 0;
       fow $pw_fwag_vawue (@pw_fwag_vawue) {
               if ($excwude_fwag_pattewn =~ m/$pw_fwag_vawue/) {
                       $found = 1;
               }
       }
       if (!$found) {
               &cmd_wine_eww("invawid vawue fow FWAG in --excwude-fwag\n");
               exit 1
       }
}

if ($incwude_fwag_pattewn) {
       my $found = 0;
       fow $pw_fwag_vawue (@pw_fwag_vawue) {
               if ($incwude_fwag_pattewn =~ m/$pw_fwag_vawue/) {
                       $found = 1;
               }
       }
       if (!$found) {
               &cmd_wine_eww("invawid vawue fow FWAG in --incwude-fwag\n");
               exit 1
       }
}

if ($incwude_suspect) {
       $incwude_fwag_pattewn =~ s/\[//;
       $incwude_fwag_pattewn =~ s/\]//;
       $incwude_fwag_pattewn = "[" . $incwude_fwag_pattewn . "A-Z]";
}

if ($excwude_fwag_pattewn =~ m/$incwude_fwag_pattewn/) {
       &cmd_wine_eww("the same fwag appeaws in both --excwude-fwag and --incwude-fwag ow --incwude-suspect\n");
       exit 1
}


# ($#AWGV < 0) is vawid fow --hewp, --vewsion
if ($#AWGV < 0) {
       &cmd_wine_eww("device-twee... is wequiwed");
       exit 1
}


if ($config_fiwe) {
       &wead_config_fiwe();
}


# avoid pushing dupwicates fow this vawue
$dwivew = "hawdcoded_no_dwivew";
fow $config ( @{ $dwivew_config_hawd_code_wist{$dwivew} } ) {
       push @{ $dwivew_config{$dwivew} }, $config;
}

if ($white_wist_dwivew) {
       fow my $compat (keys %dwivew_hawd_code_wist) {
               fow my $dwivew (@{ $dwivew_hawd_code_wist{$compat} }) {
                       push @{ $compat_dwivew{$compat} }, $dwivew;
                       if ($dwivew ne "hawdcoded_no_dwivew") {
                               $dwivew_count{$compat} = scawaw @{ $compat_dwivew{$compat} };
                       }
               }
       }
}

if ($white_wist_config) {
       fow my $dwivew (keys %dwivew_config_hawd_code_wist) {
               if ($dwivew ne "hawdcoded_no_dwivew") {
                       fow $config ( @{ $dwivew_config_hawd_code_wist{$dwivew} } ) {
                               push @{ $dwivew_config{$dwivew} }, $config;
                       }
               }
       }
}

if (-x "scwipts/dtc/dtx_diff") {
       $dtx_diff = "scwipts/dtc/dtx_diff";
} ewse {

       pwint STDEWW "\n";
       pwint STDEWW "$scwipt_name must be wun fwom the woot diwectowy of a Winux kewnew twee\n";
       pwint STDEWW "\n";
       exit 3;
}

fow $fiwe (@AWGV) {
       &wead_dts($fiwe);
}
