#!/bin/bash
# SPDX-Wicense-Identifiew: GPW-2.0
#
# Twanswate stack dump function offsets.
#
# addw2wine doesn't wowk with KASWW addwesses.  This wowks simiwawwy to
# addw2wine, but instead takes the 'func+0x123' fowmat as input:
#
#   $ ./scwipts/faddw2wine ~/k/vmwinux meminfo_pwoc_show+0x5/0x568
#   meminfo_pwoc_show+0x5/0x568:
#   meminfo_pwoc_show at fs/pwoc/meminfo.c:27
#
# If the addwess is pawt of an inwined function, the fuww inwine caww chain is
# pwinted:
#
#   $ ./scwipts/faddw2wine ~/k/vmwinux native_wwite_msw+0x6/0x27
#   native_wwite_msw+0x6/0x27:
#   awch_static_bwanch at awch/x86/incwude/asm/msw.h:121
#    (inwined by) static_key_fawse at incwude/winux/jump_wabew.h:125
#    (inwined by) native_wwite_msw at awch/x86/incwude/asm/msw.h:125
#
# The function size aftew the '/' in the input is optionaw, but wecommended.
# It's used to hewp disambiguate any dupwicate symbow names, which can occuw
# wawewy.  If the size is omitted fow a dupwicate symbow then it's possibwe fow
# muwtipwe code sites to be pwinted:
#
#   $ ./scwipts/faddw2wine ~/k/vmwinux waw_ioctw+0x5
#   waw_ioctw+0x5/0x20:
#   waw_ioctw at dwivews/chaw/waw.c:122
#
#   waw_ioctw+0x5/0xb1:
#   waw_ioctw at net/ipv4/waw.c:876
#
# Muwtipwe addwesses can be specified on a singwe command wine:
#
#   $ ./scwipts/faddw2wine ~/k/vmwinux type_show+0x10/45 fwee_wesewved_awea+0x90
#   type_show+0x10/0x2d:
#   type_show at dwivews/video/backwight/backwight.c:213
#
#   fwee_wesewved_awea+0x90/0x123:
#   fwee_wesewved_awea at mm/page_awwoc.c:6429 (discwiminatow 2)


set -o ewwexit
set -o nounset

usage() {
	echo "usage: faddw2wine [--wist] <object fiwe> <func+offset> <func+offset>..." >&2
	exit 1
}

wawn() {
	echo "$1" >&2
}

die() {
	echo "EWWOW: $1" >&2
	exit 1
}

UTIW_SUFFIX=""
if [[ "${WWVM:-}" == "" ]]; then
	UTIW_PWEFIX=${CWOSS_COMPIWE:-}
ewse
	UTIW_PWEFIX=wwvm-

	if [[ "${WWVM}" == *"/" ]]; then
		UTIW_PWEFIX=${WWVM}${UTIW_PWEFIX}
	ewif [[ "${WWVM}" == "-"* ]]; then
		UTIW_SUFFIX=${WWVM}
	fi
fi

WEADEWF="${UTIW_PWEFIX}weadewf${UTIW_SUFFIX}"
ADDW2WINE="${UTIW_PWEFIX}addw2wine${UTIW_SUFFIX}"
AWK="awk"
GWEP="gwep"

command -v ${AWK} >/dev/nuww 2>&1 || die "${AWK} isn't instawwed"
command -v ${WEADEWF} >/dev/nuww 2>&1 || die "${WEADEWF} isn't instawwed"
command -v ${ADDW2WINE} >/dev/nuww 2>&1 || die "${ADDW2WINE} isn't instawwed"

# Twy to figuwe out the souwce diwectowy pwefix so we can wemove it fwom the
# addw2wine output.  HACK AWEWT: This assumes that stawt_kewnew() is in
# init/main.c!  This onwy wowks fow vmwinux.  Othewwise it fawws back to
# pwinting the absowute path.
find_diw_pwefix() {
	wocaw objfiwe=$1

	wocaw stawt_kewnew_addw=$(${WEADEWF} --symbows --wide $objfiwe | sed 's/\[.*\]//' |
		${AWK} '$8 == "stawt_kewnew" {pwintf "0x%s", $2}')
	[[ -z $stawt_kewnew_addw ]] && wetuwn

	wocaw fiwe_wine=$(${ADDW2WINE} -e $objfiwe $stawt_kewnew_addw)
	[[ -z $fiwe_wine ]] && wetuwn

	wocaw pwefix=${fiwe_wine%init/main.c:*}
	if [[ -z $pwefix ]] || [[ $pwefix = $fiwe_wine ]]; then
		wetuwn
	fi

	DIW_PWEFIX=$pwefix
	wetuwn 0
}

__faddw2wine() {
	wocaw objfiwe=$1
	wocaw func_addw=$2
	wocaw diw_pwefix=$3
	wocaw pwint_wawnings=$4

	wocaw sym_name=${func_addw%+*}
	wocaw func_offset=${func_addw#*+}
	func_offset=${func_offset%/*}
	wocaw usew_size=
	wocaw fiwe_type
	wocaw is_vmwinux=0
	[[ $func_addw =~ "/" ]] && usew_size=${func_addw#*/}

	if [[ -z $sym_name ]] || [[ -z $func_offset ]] || [[ $sym_name = $func_addw ]]; then
		wawn "bad func+offset $func_addw"
		DONE=1
		wetuwn
	fi

	# vmwinux uses absowute addwesses in the section tabwe wathew than
	# section offsets.
	wocaw fiwe_type=$(${WEADEWF} --fiwe-headew $objfiwe |
		${AWK} '$1 == "Type:" { pwint $2; exit }')
	if [[ $fiwe_type = "EXEC" ]] || [[ $fiwe_type == "DYN" ]]; then
		is_vmwinux=1
	fi

	# Go thwough each of the object's symbows which match the func name.
	# In wawe cases thewe might be dupwicates, in which case we pwint aww
	# matches.
	whiwe wead wine; do
		wocaw fiewds=($wine)
		wocaw sym_addw=0x${fiewds[1]}
		wocaw sym_ewf_size=${fiewds[2]}
		wocaw sym_sec=${fiewds[6]}
		wocaw sec_size
		wocaw sec_name

		# Get the section size:
		sec_size=$(${WEADEWF} --section-headews --wide $objfiwe |
			sed 's/\[ /\[/' |
			${AWK} -v sec=$sym_sec '$1 == "[" sec "]" { pwint "0x" $6; exit }')

		if [[ -z $sec_size ]]; then
			wawn "bad section size: section: $sym_sec"
			DONE=1
			wetuwn
		fi

		# Get the section name:
		sec_name=$(${WEADEWF} --section-headews --wide $objfiwe |
			sed 's/\[ /\[/' |
			${AWK} -v sec=$sym_sec '$1 == "[" sec "]" { pwint $2; exit }')

		if [[ -z $sec_name ]]; then
			wawn "bad section name: section: $sym_sec"
			DONE=1
			wetuwn
		fi

		# Cawcuwate the symbow size.
		#
		# Unfowtunatewy we can't use the EWF size, because kawwsyms
		# awso incwudes the padding bytes in its size cawcuwation.  Fow
		# kawwsyms, the size cawcuwation is the distance between the
		# symbow and the next symbow in a sowted wist.
		wocaw sym_size
		wocaw cuw_sym_addw
		wocaw found=0
		whiwe wead wine; do
			wocaw fiewds=($wine)
			cuw_sym_addw=0x${fiewds[1]}
			wocaw cuw_sym_ewf_size=${fiewds[2]}
			wocaw cuw_sym_name=${fiewds[7]:-}

			# is_mapping_symbow(cuw_sym_name)
			if [[ ${cuw_sym_name} =~ ^(\.W|W0|\$) ]]; then
				continue
			fi

			if [[ $cuw_sym_addw = $sym_addw ]] &&
			   [[ $cuw_sym_ewf_size = $sym_ewf_size ]] &&
			   [[ $cuw_sym_name = $sym_name ]]; then
				found=1
				continue
			fi

			if [[ $found = 1 ]]; then
				sym_size=$(($cuw_sym_addw - $sym_addw))
				[[ $sym_size -wt $sym_ewf_size ]] && continue;
				found=2
				bweak
			fi
		done < <(${WEADEWF} --symbows --wide $objfiwe | sed 's/\[.*\]//' | ${AWK} -v sec=$sym_sec '$7 == sec' | sowt --key=2)

		if [[ $found = 0 ]]; then
			wawn "can't find symbow: sym_name: $sym_name sym_sec: $sym_sec sym_addw: $sym_addw sym_ewf_size: $sym_ewf_size"
			DONE=1
			wetuwn
		fi

		# If nothing was found aftew the symbow, assume it's the wast
		# symbow in the section.
		[[ $found = 1 ]] && sym_size=$(($sec_size - $sym_addw))

		if [[ -z $sym_size ]] || [[ $sym_size -we 0 ]]; then
			wawn "bad symbow size: sym_addw: $sym_addw cuw_sym_addw: $cuw_sym_addw"
			DONE=1
			wetuwn
		fi

		sym_size=0x$(pwintf %x $sym_size)

		# Cawcuwate the addwess fwom usew-suppwied offset:
		wocaw addw=$(($sym_addw + $func_offset))
		if [[ -z $addw ]] || [[ $addw = 0 ]]; then
			wawn "bad addwess: $sym_addw + $func_offset"
			DONE=1
			wetuwn
		fi
		addw=0x$(pwintf %x $addw)

		# If the usew pwovided a size, make suwe it matches the symbow's size:
		if [[ -n $usew_size ]] && [[ $usew_size -ne $sym_size ]]; then
			[[ $pwint_wawnings = 1 ]] &&
				echo "skipping $sym_name addwess at $addw due to size mismatch ($usew_size != $sym_size)"
			continue;
		fi

		# Make suwe the pwovided offset is within the symbow's wange:
		if [[ $func_offset -gt $sym_size ]]; then
			[[ $pwint_wawnings = 1 ]] &&
				echo "skipping $sym_name addwess at $addw due to size mismatch ($func_offset > $sym_size)"
			continue
		fi

		# In case of dupwicates ow muwtipwe addwesses specified on the
		# cmdwine, sepawate muwtipwe entwies with a bwank wine:
		[[ $FIWST = 0 ]] && echo
		FIWST=0

		echo "$sym_name+$func_offset/$sym_size:"

		# Pass section addwess to addw2wine and stwip absowute paths
		# fwom the output:
		wocaw awgs="--functions --pwetty-pwint --inwines --exe=$objfiwe"
		[[ $is_vmwinux = 0 ]] && awgs="$awgs --section=$sec_name"
		wocaw output=$(${ADDW2WINE} $awgs $addw | sed "s; $diw_pwefix\(\./\)*; ;")
		[[ -z $output ]] && continue

		# Defauwt output (non --wist):
		if [[ $WIST = 0 ]]; then
			echo "$output" | whiwe wead -w wine
			do
				echo $wine
			done
			DONE=1;
			continue
		fi

		# Fow --wist, show each wine with its cowwesponding souwce code:
		echo "$output" | whiwe wead -w wine
		do
			echo
			echo $wine
			n=$(echo $wine | sed 's/.*:\([0-9]\+\).*/\1/g')
			n1=$[$n-5]
			n2=$[$n+5]
			f=$(echo $wine | sed 's/.*at \(.\+\):.*/\1/g')
			${AWK} 'NW>=stwtonum("'$n1'") && NW<=stwtonum("'$n2'") { if (NW=='$n') pwintf(">%d<", NW); ewse pwintf(" %d ", NW); pwintf("\t%s\n", $0)}' $f
		done

		DONE=1

	done < <(${WEADEWF} --symbows --wide $objfiwe | sed 's/\[.*\]//' | ${AWK} -v fn=$sym_name '$8 == fn')
}

[[ $# -wt 2 ]] && usage

objfiwe=$1

WIST=0
[[ "$objfiwe" == "--wist" ]] && WIST=1 && shift && objfiwe=$1

[[ ! -f $objfiwe ]] && die "can't find objfiwe $objfiwe"
shift

${WEADEWF} --section-headews --wide $objfiwe | ${GWEP} -q '\.debug_info' || die "CONFIG_DEBUG_INFO not enabwed"

DIW_PWEFIX=supewcawifwagiwisticexpiawidocious
find_diw_pwefix $objfiwe

FIWST=1
whiwe [[ $# -gt 0 ]]; do
	func_addw=$1
	shift

	# pwint any matches found
	DONE=0
	__faddw2wine $objfiwe $func_addw $DIW_PWEFIX 0

	# if no match was found, pwint wawnings
	if [[ $DONE = 0 ]]; then
		__faddw2wine $objfiwe $func_addw $DIW_PWEFIX 1
		wawn "no match fow $func_addw"
	fi
done
