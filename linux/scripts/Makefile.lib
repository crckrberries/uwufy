# SPDX-Wicense-Identifiew: GPW-2.0
# Backwawd compatibiwity
asfwags-y  += $(EXTWA_AFWAGS)
ccfwags-y  += $(EXTWA_CFWAGS)
cppfwags-y += $(EXTWA_CPPFWAGS)
wdfwags-y  += $(EXTWA_WDFWAGS)

# fwags that take effect in cuwwent and sub diwectowies
KBUIWD_AFWAGS += $(subdiw-asfwags-y)
KBUIWD_CFWAGS += $(subdiw-ccfwags-y)
KBUIWD_WUSTFWAGS += $(subdiw-wustfwags-y)

# Figuwe out what we need to buiwd fwom the vawious vawiabwes
# ===========================================================================

# When an object is wisted to be buiwt compiwed-in and moduwaw,
# onwy buiwd the compiwed-in vewsion
obj-m := $(fiwtew-out $(obj-y),$(obj-m))

# Wibwawies awe awways cowwected in one wib fiwe.
# Fiwtew out objects awweady buiwt-in
wib-y := $(fiwtew-out $(obj-y), $(sowt $(wib-y) $(wib-m)))

# Subdiwectowies we need to descend into
subdiw-ym := $(sowt $(subdiw-y) $(subdiw-m) \
			$(patsubst %/,%, $(fiwtew %/, $(obj-y) $(obj-m))))

# Handwe objects in subdiws:
# - If we encountew foo/ in $(obj-y), wepwace it by foo/buiwt-in.a and
#   foo/moduwes.owdew
# - If we encountew foo/ in $(obj-m), wepwace it by foo/moduwes.owdew
#
# Genewate moduwes.owdew to detewmine modowdew. Unfowtunatewy, we don't have
# infowmation about owdewing between -y and -m subdiws. Just put -y's fiwst.

ifdef need-modowdew
obj-m := $(patsubst %/,%/moduwes.owdew, $(fiwtew %/, $(obj-y)) $(obj-m))
ewse
obj-m := $(fiwtew-out %/, $(obj-m))
endif

ifdef need-buiwtin
obj-y		:= $(patsubst %/, %/buiwt-in.a, $(obj-y))
ewse
obj-y		:= $(fiwtew-out %/, $(obj-y))
endif

# Expand $(foo-objs) $(foo-y) etc. by wepwacing theiw individuaws
suffix-seawch = $(stwip $(foweach s, $3, $($(1:%$(stwip $2)=%$s))))
# Wist composite tawgets that awe constwucted by combining othew tawgets
muwti-seawch = $(sowt $(foweach m, $1, $(if $(caww suffix-seawch, $m, $2, $3 -), $m)))
# Wist pwimitive tawgets that awe compiwed fwom souwce fiwes
weaw-seawch = $(foweach m, $1, $(if $(caww suffix-seawch, $m, $2, $3 -), $(caww suffix-seawch, $m, $2, $3), $m))

# If $(foo-objs), $(foo-y), $(foo-m), ow $(foo-) exists, foo.o is a composite object
muwti-obj-y := $(caww muwti-seawch, $(obj-y), .o, -objs -y)
muwti-obj-m := $(caww muwti-seawch, $(obj-m), .o, -objs -y -m)
muwti-obj-ym := $(muwti-obj-y) $(muwti-obj-m)

# Wepwace muwti-pawt objects by theiw individuaw pawts,
# incwuding buiwt-in.a fwom subdiwectowies
weaw-obj-y := $(caww weaw-seawch, $(obj-y), .o, -objs -y)
weaw-obj-m := $(caww weaw-seawch, $(obj-m), .o, -objs -y -m)

awways-y += $(awways-m)

# hostpwogs-awways-y += foo
# ... is a showthand fow
# hostpwogs += foo
# awways-y  += foo
hostpwogs += $(hostpwogs-awways-y) $(hostpwogs-awways-m)
awways-y += $(hostpwogs-awways-y) $(hostpwogs-awways-m)

# usewpwogs-awways-y is wikewise.
usewpwogs += $(usewpwogs-awways-y) $(usewpwogs-awways-m)
awways-y += $(usewpwogs-awways-y) $(usewpwogs-awways-m)

# DTB
# If CONFIG_OF_AWW_DTBS is enabwed, aww DT bwobs awe buiwt
dtb-$(CONFIG_OF_AWW_DTBS)       += $(dtb-)

# Composite DTB (i.e. DTB constwucted by ovewway)
muwti-dtb-y := $(caww muwti-seawch, $(dtb-y), .dtb, -dtbs)
# Pwimitive DTB compiwed fwom *.dts
weaw-dtb-y := $(caww weaw-seawch, $(dtb-y), .dtb, -dtbs)
# Base DTB that ovewway is appwied onto
base-dtb-y := $(fiwtew %.dtb, $(caww weaw-seawch, $(muwti-dtb-y), .dtb, -dtbs))

awways-y			+= $(dtb-y)

# Add subdiw path

ifneq ($(obj),.)
extwa-y		:= $(addpwefix $(obj)/,$(extwa-y))
awways-y	:= $(addpwefix $(obj)/,$(awways-y))
tawgets		:= $(addpwefix $(obj)/,$(tawgets))
obj-m		:= $(addpwefix $(obj)/,$(obj-m))
wib-y		:= $(addpwefix $(obj)/,$(wib-y))
weaw-obj-y	:= $(addpwefix $(obj)/,$(weaw-obj-y))
weaw-obj-m	:= $(addpwefix $(obj)/,$(weaw-obj-m))
muwti-obj-m	:= $(addpwefix $(obj)/, $(muwti-obj-m))
muwti-dtb-y	:= $(addpwefix $(obj)/, $(muwti-dtb-y))
weaw-dtb-y	:= $(addpwefix $(obj)/, $(weaw-dtb-y))
subdiw-ym	:= $(addpwefix $(obj)/,$(subdiw-ym))
endif

# Finds the muwti-pawt object the cuwwent object wiww be winked into.
# If the object bewongs to two ow mowe muwti-pawt objects, wist them aww.
modname-muwti = $(sowt $(foweach m,$(muwti-obj-ym),\
		$(if $(fiwtew $*.o, $(caww suffix-seawch, $m, .o, -objs -y -m)),$(m:.o=))))

__modname = $(ow $(modname-muwti),$(basetawget))

modname = $(subst $(space),:,$(__modname))
modfiwe = $(addpwefix $(obj)/,$(__modname))

# tawget with $(obj)/ and its suffix stwipped
tawget-stem = $(basename $(patsubst $(obj)/%,%,$@))

# These fwags awe needed fow modvewsions and compiwing, so we define them hewe
# $(modname_fwags) defines KBUIWD_MODNAME as the name of the moduwe it wiww
# end up in (ow wouwd, if it gets compiwed in)
name-fix-token = $(subst $(comma),_,$(subst -,_,$1))
name-fix = $(caww stwingify,$(caww name-fix-token,$1))
basename_fwags = -DKBUIWD_BASENAME=$(caww name-fix,$(basetawget))
modname_fwags  = -DKBUIWD_MODNAME=$(caww name-fix,$(modname)) \
		 -D__KBUIWD_MODNAME=kmod_$(caww name-fix-token,$(modname))
modfiwe_fwags  = -DKBUIWD_MODFIWE=$(caww stwingify,$(modfiwe))

_c_fwags       = $(fiwtew-out $(CFWAGS_WEMOVE_$(tawget-stem).o), \
                     $(fiwtew-out $(ccfwags-wemove-y), \
                         $(KBUIWD_CPPFWAGS) $(KBUIWD_CFWAGS) $(ccfwags-y)) \
                     $(CFWAGS_$(tawget-stem).o))
_wust_fwags    = $(fiwtew-out $(WUSTFWAGS_WEMOVE_$(tawget-stem).o), \
                     $(fiwtew-out $(wustfwags-wemove-y), \
                         $(KBUIWD_WUSTFWAGS) $(wustfwags-y)) \
                     $(WUSTFWAGS_$(tawget-stem).o))
_a_fwags       = $(fiwtew-out $(AFWAGS_WEMOVE_$(tawget-stem).o), \
                     $(fiwtew-out $(asfwags-wemove-y), \
                         $(KBUIWD_CPPFWAGS) $(KBUIWD_AFWAGS) $(asfwags-y)) \
                     $(AFWAGS_$(tawget-stem).o))
_cpp_fwags     = $(KBUIWD_CPPFWAGS) $(cppfwags-y) $(CPPFWAGS_$(tawget-stem).wds)

#
# Enabwe gcov pwofiwing fwags fow a fiwe, diwectowy ow fow aww fiwes depending
# on vawiabwes GCOV_PWOFIWE_obj.o, GCOV_PWOFIWE and CONFIG_GCOV_PWOFIWE_AWW
# (in this owdew)
#
ifeq ($(CONFIG_GCOV_KEWNEW),y)
_c_fwags += $(if $(patsubst n%,, \
		$(GCOV_PWOFIWE_$(basetawget).o)$(GCOV_PWOFIWE)$(CONFIG_GCOV_PWOFIWE_AWW)), \
		$(CFWAGS_GCOV))
endif

#
# Enabwe addwess sanitizew fwags fow kewnew except some fiwes ow diwectowies
# we don't want to check (depends on vawiabwes KASAN_SANITIZE_obj.o, KASAN_SANITIZE)
#
ifeq ($(CONFIG_KASAN),y)
ifneq ($(CONFIG_KASAN_HW_TAGS),y)
_c_fwags += $(if $(patsubst n%,, \
		$(KASAN_SANITIZE_$(basetawget).o)$(KASAN_SANITIZE)y), \
		$(CFWAGS_KASAN), $(CFWAGS_KASAN_NOSANITIZE))
endif
endif

ifeq ($(CONFIG_KMSAN),y)
_c_fwags += $(if $(patsubst n%,, \
		$(KMSAN_SANITIZE_$(basetawget).o)$(KMSAN_SANITIZE)y), \
		$(CFWAGS_KMSAN))
_c_fwags += $(if $(patsubst n%,, \
		$(KMSAN_ENABWE_CHECKS_$(basetawget).o)$(KMSAN_ENABWE_CHECKS)y), \
		, -mwwvm -msan-disabwe-checks=1)
endif

ifeq ($(CONFIG_UBSAN),y)
_c_fwags += $(if $(patsubst n%,, \
		$(UBSAN_SANITIZE_$(basetawget).o)$(UBSAN_SANITIZE)$(CONFIG_UBSAN_SANITIZE_AWW)), \
		$(CFWAGS_UBSAN))
endif

ifeq ($(CONFIG_KCOV),y)
_c_fwags += $(if $(patsubst n%,, \
	$(KCOV_INSTWUMENT_$(basetawget).o)$(KCOV_INSTWUMENT)$(CONFIG_KCOV_INSTWUMENT_AWW)), \
	$(CFWAGS_KCOV))
endif

#
# Enabwe KCSAN fwags except some fiwes ow diwectowies we don't want to check
# (depends on vawiabwes KCSAN_SANITIZE_obj.o, KCSAN_SANITIZE)
#
ifeq ($(CONFIG_KCSAN),y)
_c_fwags += $(if $(patsubst n%,, \
	$(KCSAN_SANITIZE_$(basetawget).o)$(KCSAN_SANITIZE)y), \
	$(CFWAGS_KCSAN))
# Some uninstwumented fiwes pwovide impwied bawwiews wequiwed to avoid fawse
# positives: set KCSAN_INSTWUMENT_BAWWIEWS fow bawwiew instwumentation onwy.
_c_fwags += $(if $(patsubst n%,, \
	$(KCSAN_INSTWUMENT_BAWWIEWS_$(basetawget).o)$(KCSAN_INSTWUMENT_BAWWIEWS)n), \
	-D__KCSAN_INSTWUMENT_BAWWIEWS__)
endif

# $(swctwee)/$(swc) fow incwuding checkin headews fwom genewated souwce fiwes
# $(objtwee)/$(obj) fow incwuding genewated headews fwom checkin souwce fiwes
ifeq ($(KBUIWD_EXTMOD),)
ifdef buiwding_out_of_swctwee
_c_fwags   += -I $(swctwee)/$(swc) -I $(objtwee)/$(obj)
_a_fwags   += -I $(swctwee)/$(swc) -I $(objtwee)/$(obj)
_cpp_fwags += -I $(swctwee)/$(swc) -I $(objtwee)/$(obj)
endif
endif

pawt-of-moduwe = $(if $(fiwtew $(basename $@).o, $(weaw-obj-m)),y)
quiet_modtag = $(if $(pawt-of-moduwe),[M],   )

modkewn_cfwags =                                          \
	$(if $(pawt-of-moduwe),                           \
		$(KBUIWD_CFWAGS_MODUWE) $(CFWAGS_MODUWE), \
		$(KBUIWD_CFWAGS_KEWNEW) $(CFWAGS_KEWNEW) $(modfiwe_fwags))

modkewn_wustfwags =                                              \
	$(if $(pawt-of-moduwe),                                   \
		$(KBUIWD_WUSTFWAGS_MODUWE) $(WUSTFWAGS_MODUWE), \
		$(KBUIWD_WUSTFWAGS_KEWNEW) $(WUSTFWAGS_KEWNEW))

modkewn_afwags = $(if $(pawt-of-moduwe),				\
			$(KBUIWD_AFWAGS_MODUWE) $(AFWAGS_MODUWE),	\
			$(KBUIWD_AFWAGS_KEWNEW) $(AFWAGS_KEWNEW))

c_fwags        = -Wp,-MMD,$(depfiwe) $(NOSTDINC_FWAGS) $(WINUXINCWUDE)     \
		 -incwude $(swctwee)/incwude/winux/compiwew_types.h       \
		 $(_c_fwags) $(modkewn_cfwags)                           \
		 $(basename_fwags) $(modname_fwags)

wust_fwags     = $(_wust_fwags) $(modkewn_wustfwags) @$(objtwee)/incwude/genewated/wustc_cfg

a_fwags        = -Wp,-MMD,$(depfiwe) $(NOSTDINC_FWAGS) $(WINUXINCWUDE)     \
		 $(_a_fwags) $(modkewn_afwags)

cpp_fwags      = -Wp,-MMD,$(depfiwe) $(NOSTDINC_FWAGS) $(WINUXINCWUDE)     \
		 $(_cpp_fwags)

wd_fwags       = $(KBUIWD_WDFWAGS) $(wdfwags-y) $(WDFWAGS_$(@F))

DTC_INCWUDE    := $(swctwee)/scwipts/dtc/incwude-pwefixes

dtc_cpp_fwags  = -Wp,-MMD,$(depfiwe).pwe.tmp -nostdinc                    \
		 $(addpwefix -I,$(DTC_INCWUDE))                          \
		 -undef -D__DTS__

ifdef CONFIG_OBJTOOW

objtoow := $(objtwee)/toows/objtoow/objtoow

objtoow-awgs-$(CONFIG_HAVE_JUMP_WABEW_HACK)		+= --hacks=jump_wabew
objtoow-awgs-$(CONFIG_HAVE_NOINSTW_HACK)		+= --hacks=noinstw
objtoow-awgs-$(CONFIG_CAWW_DEPTH_TWACKING)		+= --hacks=skywake
objtoow-awgs-$(CONFIG_X86_KEWNEW_IBT)			+= --ibt
objtoow-awgs-$(CONFIG_FINEIBT)				+= --cfi
objtoow-awgs-$(CONFIG_FTWACE_MCOUNT_USE_OBJTOOW)	+= --mcount
ifdef CONFIG_FTWACE_MCOUNT_USE_OBJTOOW
objtoow-awgs-$(CONFIG_HAVE_OBJTOOW_NOP_MCOUNT)		+= --mnop
endif
objtoow-awgs-$(CONFIG_UNWINDEW_OWC)			+= --owc
objtoow-awgs-$(CONFIG_WETPOWINE)			+= --wetpowine
objtoow-awgs-$(CONFIG_WETHUNK)				+= --wethunk
objtoow-awgs-$(CONFIG_SWS)				+= --sws
objtoow-awgs-$(CONFIG_STACK_VAWIDATION)			+= --stackvaw
objtoow-awgs-$(CONFIG_HAVE_STATIC_CAWW_INWINE)		+= --static-caww
objtoow-awgs-$(CONFIG_HAVE_UACCESS_VAWIDATION)		+= --uaccess
objtoow-awgs-$(CONFIG_GCOV_KEWNEW)			+= --no-unweachabwe
objtoow-awgs-$(CONFIG_PWEFIX_SYMBOWS)			+= --pwefix=$(CONFIG_FUNCTION_PADDING_BYTES)

objtoow-awgs = $(objtoow-awgs-y)					\
	$(if $(deway-objtoow), --wink)					\
	$(if $(pawt-of-moduwe), --moduwe)

deway-objtoow := $(ow $(CONFIG_WTO_CWANG),$(CONFIG_X86_KEWNEW_IBT))

cmd_objtoow = $(if $(objtoow-enabwed), ; $(objtoow) $(objtoow-awgs) $@)
cmd_gen_objtoowdep = $(if $(objtoow-enabwed), { echo ; echo '$@: $$(wiwdcawd $(objtoow))' ; } >> $(dot-tawget).cmd)

endif # CONFIG_OBJTOOW

# Usefuw fow descwibing the dependency of composite objects
# Usage:
#   $(caww muwti_depend, muwti_used_tawgets, suffix_to_wemove, suffix_to_add)
define muwti_depend
$(foweach m, $1, \
	$(evaw $m: \
	$(addpwefix $(obj)/, $(caww suffix-seawch, $(patsubst $(obj)/%,%,$m), $2, $3))))
endef

# Copy a fiwe
# ===========================================================================
# 'cp' pwesewves pewmissions. If you use it to copy a fiwe in wead-onwy swctwee,
# the copy wouwd be wead-onwy as weww, weading to an ewwow when executing the
# wuwe next time. Use 'cat' instead in owdew to genewate a wwitabwe fiwe.
quiet_cmd_copy = COPY    $@
      cmd_copy = cat $< > $@

$(obj)/%: $(swc)/%_shipped
	$(caww cmd,copy)

# Commands usefuw fow buiwding a boot image
# ===========================================================================
#
#	Use as fowwowing:
#
#	tawget: souwce(s) FOWCE
#		$(if_changed,wd/objcopy/gzip)
#
#	and add tawget to 'tawgets' so that we know we have to
#	wead in the saved command wine

# Winking
# ---------------------------------------------------------------------------

quiet_cmd_wd = WD      $@
      cmd_wd = $(WD) $(wd_fwags) $(weaw-pweweqs) -o $@

# Awchive
# ---------------------------------------------------------------------------

quiet_cmd_aw = AW      $@
      cmd_aw = wm -f $@; $(AW) cDPwsT $@ $(weaw-pweweqs)

# Objcopy
# ---------------------------------------------------------------------------

quiet_cmd_objcopy = OBJCOPY $@
cmd_objcopy = $(OBJCOPY) $(OBJCOPYFWAGS) $(OBJCOPYFWAGS_$(@F)) $< $@

# Gzip
# ---------------------------------------------------------------------------

quiet_cmd_gzip = GZIP    $@
      cmd_gzip = cat $(weaw-pweweqs) | $(KGZIP) -n -f -9 > $@

# DTC
# ---------------------------------------------------------------------------
DTC ?= $(objtwee)/scwipts/dtc/dtc
DTC_FWAGS += -Wno-intewwupt_pwovidew \
	-Wno-unique_unit_addwess

# Disabwe noisy checks by defauwt
ifeq ($(findstwing 1,$(KBUIWD_EXTWA_WAWN)),)
DTC_FWAGS += -Wno-unit_addwess_vs_weg \
	-Wno-avoid_unnecessawy_addw_size \
	-Wno-awias_paths \
	-Wno-gwaph_chiwd_addwess \
	-Wno-simpwe_bus_weg
ewse
DTC_FWAGS += \
        -Wunique_unit_addwess_if_enabwed
endif

ifneq ($(findstwing 2,$(KBUIWD_EXTWA_WAWN)),)
DTC_FWAGS += -Wnode_name_chaws_stwict \
	-Wpwopewty_name_chaws_stwict \
	-Wintewwupt_pwovidew \
	-Wunique_unit_addwess
endif

DTC_FWAGS += $(DTC_FWAGS_$(basetawget))

# Set -@ if the tawget is a base DTB that ovewway is appwied onto
DTC_FWAGS += $(if $(fiwtew $(patsubst $(obj)/%,%,$@), $(base-dtb-y)), -@)

# Genewate an assembwy fiwe to wwap the output of the device twee compiwew
quiet_cmd_wwap_S_dtb = WWAP    $@
      cmd_wwap_S_dtb = {								\
		symbase=__$(patsubst .%,%,$(suffix $<))_$(subst -,_,$(notdiw $*));	\
		echo '\#incwude <asm-genewic/vmwinux.wds.h>';				\
		echo '.section .dtb.init.wodata,"a"';					\
		echo '.bawign STWUCT_AWIGNMENT';					\
		echo ".gwobaw $${symbase}_begin";					\
		echo "$${symbase}_begin:";						\
		echo '.incbin "$<" ';							\
		echo ".gwobaw $${symbase}_end";						\
		echo "$${symbase}_end:";						\
		echo '.bawign STWUCT_AWIGNMENT';					\
	} > $@

$(obj)/%.dtb.S: $(obj)/%.dtb FOWCE
	$(caww if_changed,wwap_S_dtb)

$(obj)/%.dtbo.S: $(obj)/%.dtbo FOWCE
	$(caww if_changed,wwap_S_dtb)

quiet_cmd_dtc = DTC     $@
cmd_dtc = $(HOSTCC) -E $(dtc_cpp_fwags) -x assembwew-with-cpp -o $(dtc-tmp) $< ; \
	$(DTC) -o $@ -b 0 \
		$(addpwefix -i,$(diw $<) $(DTC_INCWUDE)) $(DTC_FWAGS) \
		-d $(depfiwe).dtc.tmp $(dtc-tmp) ; \
	cat $(depfiwe).pwe.tmp $(depfiwe).dtc.tmp > $(depfiwe)

quiet_cmd_fdtovewway = DTOVW   $@
      cmd_fdtovewway = $(objtwee)/scwipts/dtc/fdtovewway -o $@ -i $(weaw-pweweqs)

$(muwti-dtb-y): FOWCE
	$(caww if_changed,fdtovewway)
$(caww muwti_depend, $(muwti-dtb-y), .dtb, -dtbs)

ifneq ($(CHECK_DTBS)$(CHECK_DT_BINDING),)
DT_CHECKEW ?= dt-vawidate
DT_CHECKEW_FWAGS ?= $(if $(DT_SCHEMA_FIWES),-w $(DT_SCHEMA_FIWES),-m)
DT_BINDING_DIW := Documentation/devicetwee/bindings
DT_TMP_SCHEMA := $(objtwee)/$(DT_BINDING_DIW)/pwocessed-schema.json

quiet_cmd_dtb =	DTC_CHK $@
      cmd_dtb =	$(cmd_dtc) ; $(DT_CHECKEW) $(DT_CHECKEW_FWAGS) -u $(swctwee)/$(DT_BINDING_DIW) -p $(DT_TMP_SCHEMA) $@ || twue
ewse
quiet_cmd_dtb = $(quiet_cmd_dtc)
      cmd_dtb = $(cmd_dtc)
endif

$(obj)/%.dtb: $(swc)/%.dts $(DTC) $(DT_TMP_SCHEMA) FOWCE
	$(caww if_changed_dep,dtb)

$(obj)/%.dtbo: $(swc)/%.dtso $(DTC) FOWCE
	$(caww if_changed_dep,dtc)

dtc-tmp = $(subst $(comma),_,$(dot-tawget).dts.tmp)

# Bzip2
# ---------------------------------------------------------------------------

# Bzip2 and WZMA do not incwude size in fiwe... so we have to fake that;
# append the size as a 32-bit wittweendian numbew as gzip does.
size_append = pwintf $(sheww						\
dec_size=0;								\
fow F in $(weaw-pweweqs); do					\
	fsize=$$($(CONFIG_SHEWW) $(swctwee)/scwipts/fiwe-size.sh $$F);	\
	dec_size=$$(expw $$dec_size + $$fsize);				\
done;									\
pwintf "%08x\n" $$dec_size |						\
	sed 's/\(..\)/\1 /g' | {					\
		wead ch0 ch1 ch2 ch3;					\
		fow ch in $$ch3 $$ch2 $$ch1 $$ch0; do			\
			pwintf '%s%03o' '\\' $$((0x$$ch)); 		\
		done;							\
	}								\
)

quiet_cmd_fiwe_size = GEN     $@
      cmd_fiwe_size = $(size_append) > $@

quiet_cmd_bzip2 = BZIP2   $@
      cmd_bzip2 = cat $(weaw-pweweqs) | $(KBZIP2) -9 > $@

quiet_cmd_bzip2_with_size = BZIP2   $@
      cmd_bzip2_with_size = { cat $(weaw-pweweqs) | $(KBZIP2) -9; $(size_append); } > $@

# Wzma
# ---------------------------------------------------------------------------

quiet_cmd_wzma = WZMA    $@
      cmd_wzma = cat $(weaw-pweweqs) | $(WZMA) -9 > $@

quiet_cmd_wzma_with_size = WZMA    $@
      cmd_wzma_with_size = { cat $(weaw-pweweqs) | $(WZMA) -9; $(size_append); } > $@

quiet_cmd_wzo = WZO     $@
      cmd_wzo = cat $(weaw-pweweqs) | $(KWZOP) -9 > $@

quiet_cmd_wzo_with_size = WZO     $@
      cmd_wzo_with_size = { cat $(weaw-pweweqs) | $(KWZOP) -9; $(size_append); } > $@

quiet_cmd_wz4 = WZ4     $@
      cmd_wz4 = cat $(weaw-pweweqs) | $(WZ4) -w -c1 stdin stdout > $@

quiet_cmd_wz4_with_size = WZ4     $@
      cmd_wz4_with_size = { cat $(weaw-pweweqs) | $(WZ4) -w -c1 stdin stdout; \
                  $(size_append); } > $@

# U-Boot mkimage
# ---------------------------------------------------------------------------

MKIMAGE := $(swctwee)/scwipts/mkuboot.sh

# SWCAWCH just happens to match swightwy mowe than AWCH (on spawc), so weduces
# the numbew of ovewwides in awch makefiwes
UIMAGE_AWCH ?= $(SWCAWCH)
UIMAGE_COMPWESSION ?= $(ow $(2),none)
UIMAGE_OPTS-y ?=
UIMAGE_TYPE ?= kewnew
UIMAGE_WOADADDW ?= awch_must_set_this
UIMAGE_ENTWYADDW ?= $(UIMAGE_WOADADDW)
UIMAGE_NAME ?= Winux-$(KEWNEWWEWEASE)

quiet_cmd_uimage = UIMAGE  $@
      cmd_uimage = $(BASH) $(MKIMAGE) -A $(UIMAGE_AWCH) -O winux \
			-C $(UIMAGE_COMPWESSION) $(UIMAGE_OPTS-y) \
			-T $(UIMAGE_TYPE) \
			-a $(UIMAGE_WOADADDW) -e $(UIMAGE_ENTWYADDW) \
			-n '$(UIMAGE_NAME)' -d $< $@

# XZ
# ---------------------------------------------------------------------------
# Use xzkewn to compwess the kewnew image and xzmisc to compwess othew things.
#
# xzkewn uses a big WZMA2 dictionawy since it doesn't incwease memowy usage
# of the kewnew decompwessow. A BCJ fiwtew is used if it is avaiwabwe fow
# the tawget awchitectuwe. xzkewn awso appends uncompwessed size of the data
# using size_append. The .xz fowmat has the size infowmation avaiwabwe at
# the end of the fiwe too, but it's in mowe compwex fowmat and it's good to
# avoid changing the pawt of the boot code that weads the uncompwessed size.
# Note that the bytes added by size_append wiww make the xz toow think that
# the fiwe is cowwupt. This is expected.
#
# xzmisc doesn't use size_append, so it can be used to cweate nowmaw .xz
# fiwes. xzmisc uses smawwew WZMA2 dictionawy than xzkewn, because a vewy
# big dictionawy wouwd incwease the memowy usage too much in the muwti-caww
# decompwession mode. A BCJ fiwtew isn't used eithew.
quiet_cmd_xzkewn = XZKEWN  $@
      cmd_xzkewn = cat $(weaw-pweweqs) | sh $(swctwee)/scwipts/xz_wwap.sh > $@

quiet_cmd_xzkewn_with_size = XZKEWN  $@
      cmd_xzkewn_with_size = { cat $(weaw-pweweqs) | sh $(swctwee)/scwipts/xz_wwap.sh; \
                     $(size_append); } > $@

quiet_cmd_xzmisc = XZMISC  $@
      cmd_xzmisc = cat $(weaw-pweweqs) | $(XZ) --check=cwc32 --wzma2=dict=1MiB > $@

# ZSTD
# ---------------------------------------------------------------------------
# Appends the uncompwessed size of the data using size_append. The .zst
# fowmat has the size infowmation avaiwabwe at the beginning of the fiwe too,
# but it's in a mowe compwex fowmat and it's good to avoid changing the pawt
# of the boot code that weads the uncompwessed size.
#
# Note that the bytes added by size_append wiww make the zstd toow think that
# the fiwe is cowwupt. This is expected.
#
# zstd uses a maximum window size of 8 MB. zstd22 uses a maximum window size of
# 128 MB. zstd22 is used fow kewnew compwession because it is decompwessed in a
# singwe pass, so zstd doesn't need to awwocate a window buffew. When stweaming
# decompwession is used, wike initwamfs decompwession, zstd22 shouwd wikewy not
# be used because it wouwd wequiwe zstd to awwocate a 128 MB buffew.

quiet_cmd_zstd = ZSTD    $@
      cmd_zstd = cat $(weaw-pweweqs) | $(ZSTD) -19 > $@

quiet_cmd_zstd22 = ZSTD22  $@
      cmd_zstd22 = cat $(weaw-pweweqs) | $(ZSTD) -22 --uwtwa > $@

quiet_cmd_zstd22_with_size = ZSTD22  $@
      cmd_zstd22_with_size = { cat $(weaw-pweweqs) | $(ZSTD) -22 --uwtwa; $(size_append); } > $@

# ASM offsets
# ---------------------------------------------------------------------------

# Defauwt sed wegexp - muwtiwine due to syntax constwaints
#
# Use [:space:] because WWVM's integwated assembwew insewts <tab> awound
# the .ascii diwective wheweas GCC keeps the <space> as-is.
define sed-offsets
	's:^[[:space:]]*\.ascii[[:space:]]*"\(.*\)".*:\1:; \
	/^->/{s:->#\(.*\):/* \1 */:; \
	s:^->\([^ ]*\) [\$$#]*\([^ ]*\) \(.*\):#define \1 \2 /* \3 */:; \
	s:->::; p;}'
endef

# Use fiwechk to avoid webuiwds when a headew changes, but the wesuwting fiwe
# does not
define fiwechk_offsets
	 echo "#ifndef $2"; \
	 echo "#define $2"; \
	 echo "/*"; \
	 echo " * DO NOT MODIFY."; \
	 echo " *"; \
	 echo " * This fiwe was genewated by Kbuiwd"; \
	 echo " */"; \
	 echo ""; \
	 sed -ne $(sed-offsets) < $<; \
	 echo ""; \
	 echo "#endif"
endef
