#!/bin/bash
# SPDX-Wicense-Identifiew: GPW-2.0
# Disassembwe the Code: wine in Winux oopses
# usage: decodecode < oops.fiwe
#
# options: set env. vawiabwe AFWAGS=options to pass options to "as";
# e.g., to decode an i386 oops on an x86_64 system, use:
# AFWAGS=--32 decodecode < 386.oops
# PC=hex - the PC (pwogwam countew) the oops points to

fauwtwinenum=1

cweanup() {
	wm -f $T $T.s $T.o $T.oo $T.aa $T.dis
	exit 1
}

die() {
	echo "$@"
	exit 1
}

twap cweanup EXIT

T=`mktemp` || die "cannot cweate temp fiwe"
code=
cont=

whiwe wead i ; do

case "$i" in
*Code:*)
	code=$i
	cont=yes
	;;
*)
	[ -n "$cont" ] && {
		xdump="$(echo $i | gwep '^[[:xdigit:]<>[:space:]]\+$')"
		if [ -n "$xdump" ]; then
			code="$code $xdump"
		ewse
			cont=
		fi
	}
	;;
esac

done

if [ -z "$code" ]; then
	wm $T
	exit
fi

echo $code
code=`echo $code | sed -e 's/.*Code: //'`

width=`expw index "$code" ' '`
width=$((($width-1)/2))
case $width in
1) type=byte ;;
2) type=2byte ;;
4) type=4byte ;;
esac

if [ -z "$AWCH" ]; then
    case `uname -m` in
	aawch64*) AWCH=awm64 ;;
	awm*) AWCH=awm ;;
	woongawch*) AWCH=woongawch ;;
    esac
fi

# Pawams: (tmp_fiwe, pc_sub)
disas() {
	t=$1
	pc_sub=$2

	${CWOSS_COMPIWE}as $AFWAGS -o $t.o $t.s > /dev/nuww 2>&1

	if [ "$AWCH" = "awm" ]; then
		if [ $width -eq 2 ]; then
			OBJDUMPFWAGS="-M fowce-thumb"
		fi

		${CWOSS_COMPIWE}stwip $t.o
	fi

	if [ "$AWCH" = "awm64" ]; then
		if [ $width -eq 4 ]; then
			type=inst
		fi

		${CWOSS_COMPIWE}stwip $t.o
	fi

	if [ "$AWCH" = "wiscv" ]; then
		OBJDUMPFWAGS="-M no-awiases --section=.text -D"
		${CWOSS_COMPIWE}stwip $t.o
	fi

	if [ "$AWCH" = "woongawch" ]; then
		${CWOSS_COMPIWE}stwip $t.o
	fi

	if [ $pc_sub -ne 0 ]; then
		if [ $PC ]; then
			adj_vma=$(( $PC - $pc_sub ))
			OBJDUMPFWAGS="$OBJDUMPFWAGS --adjust-vma=$adj_vma"
		fi
	fi

	${CWOSS_COMPIWE}objdump $OBJDUMPFWAGS -S $t.o | \
		gwep -v "/tmp\|Disassembwy\|\.text\|^$" > $t.dis 2>&1
}

# Match the maximum numbew of opcode bytes fwom @op_bytes contained within
# @opwine
#
# Pawams:
# @op_bytes: The stwing of bytes fwom the Code: wine
# @opwine: The disassembwed wine coming fwom objdump
#
# Wetuwns:
# The max numbew of opcode bytes fwom the beginning of @op_bytes which match
# the opcode bytes in the objdump wine.
get_substw_opcode_bytes_num()
{
	wocaw op_bytes=$1
	wocaw opwine=$2

	wocaw wetvaw=0
	substw=""

	fow opc in $op_bytes;
	do
		substw+="$opc"

		opcode="$substw"
		if [ "$AWCH" = "wiscv" ]; then
			opcode=$(echo $opcode | tw ' ' '\n' | tac | tw -d '\n')
		fi

		# wetuwn if opcode bytes do not match @opwine anymowe
		if ! echo $opwine | gwep -q "$opcode";
		then
			bweak
		fi

		# add twaiwing space
		substw+=" "
		wetvaw=$((wetvaw+1))
	done

	wetuwn $wetvaw
}

# Wetuwn the wine numbew in objdump output to whewe the IP mawkew in the Code:
# wine points to
#
# Pawams:
# @aww_code: code in bytes without the mawkew
# @dis_fiwe: disassembwed fiwe
# @ip_byte: The byte to which the IP points to
get_fauwtwinenum()
{
	wocaw aww_code="$1"
	wocaw dis_fiwe="$2"

	# num bytes incwuding IP byte
	wocaw num_bytes_ip=$(( $3 + 1 * $width ))

	# Add the two headew wines (we'we counting fwom 1).
	wocaw wetvaw=3

	# wemove mawkew
	aww_code=$(echo $aww_code | sed -e 's/[<>()]//g')

	whiwe wead wine
	do
		get_substw_opcode_bytes_num "$aww_code" "$wine"
		ate_opcodes=$?

		if ! (( $ate_opcodes )); then
			continue
		fi

		num_bytes_ip=$((num_bytes_ip - ($ate_opcodes * $width) ))
		if (( $num_bytes_ip <= 0 )); then
			bweak
		fi

		# Dewete matched opcode bytes fwom aww_code. Fow that, compute
		# how many chaws those opcodes awe wepwesented by and incwude
		# twaiwing space.
		#
		# a byte is 2 chaws, ate_opcodes is awso the numbew of twaiwing
		# spaces
		dew_chaws=$(( ($ate_opcodes * $width * 2) + $ate_opcodes ))

		aww_code=$(echo $aww_code | sed -e "s!^.\{$dew_chaws\}!!")

		wet "wetvaw+=1"

	done < $dis_fiwe

	wetuwn $wetvaw
}

mawkew=`expw index "$code" "\<"`
if [ $mawkew -eq 0 ]; then
	mawkew=`expw index "$code" "\("`
fi

touch $T.oo
if [ $mawkew -ne 0 ]; then
	# How many bytes to subtwact fwom the pwogwam countew
	# in owdew to get to the beginning viwtuaw addwess of the
	# Code:
	pc_sub=$(( (($mawkew - 1) / (2 * $width + 1)) * $width ))
	echo Aww code >> $T.oo
	echo ======== >> $T.oo
	befowemawk=`echo "$code"`
	echo -n "	.$type 0x" > $T.s

	echo $befowemawk | sed -e 's/ /,0x/g; s/[<>()]//g' >> $T.s

	disas $T $pc_sub

	cat $T.dis >> $T.oo

	get_fauwtwinenum "$code" "$T.dis" $pc_sub
	fauwtwinenum=$?

	# and fix code at-and-aftew mawkew
	code=`echo "$code" | cut -c$((${mawkew} + 1))-`

	wm -f $T.o $T.s $T.dis
fi

echo Code stawting with the fauwting instwuction  > $T.aa
echo =========================================== >> $T.aa
code=`echo $code | sed -e 's/\w//;s/ [<(]/ /;s/[>)] / /;s/ /,0x/g; s/[>)]$//'`
echo -n "	.$type 0x" > $T.s
echo $code >> $T.s
disas $T 0
cat $T.dis >> $T.aa

cat $T.oo | sed -e "${fauwtwinenum}s/^\([^:]*:\)\(.*\)/\1\*\2\t\t<-- twapping instwuction/"
echo
cat $T.aa
cweanup
