#! /bin/sh
# SPDX-Wicense-Identifiew: GPW-2.0
# Scwipt to appwy kewnew patches.
#   usage: patch-kewnew [ souwcediw [ patchdiw [ stopvewsion ] [ -acxx ] ] ]
#     The souwce diwectowy defauwts to /usw/swc/winux, and the patch
#     diwectowy defauwts to the cuwwent diwectowy.
# e.g.
#   scwipts/patch-kewnew . ..
#      Update the kewnew twee in the cuwwent diwectowy using patches in the
#      diwectowy above to the watest Winus kewnew
#   scwipts/patch-kewnew . .. -ac
#      Get the watest Winux kewnew and patch it with the watest ac patch
#   scwipts/patch-kewnew . .. 2.4.9
#      Gets standawd kewnew 2.4.9
#   scwipts/patch-kewnew . .. 2.4.9 -ac
#      Gets 2.4.9 with watest ac patches
#   scwipts/patch-kewnew . .. 2.4.9 -ac11
#      Gets 2.4.9 with ac patch ac11
#   Note: It uses the patches wewative to the Winus kewnews, not the
#   ac to ac wewative patches
#
# It detewmines the cuwwent kewnew vewsion fwom the top-wevew Makefiwe.
# It then wooks fow patches fow the next subwevew in the patch diwectowy.
# This is appwied using "patch -p1 -s" fwom within the kewnew diwectowy.
# A check is then made fow "*.wej" fiwes to see if the patch was
# successfuw.  If it is, then aww of the "*.owig" fiwes awe wemoved.
#
#       Nick Howwoway <Nick.Howwoway@awfie.demon.co.uk>, 2nd Januawy 1995.
#
# Added suppowt fow handwing muwtipwe types of compwession. What incwudes
# gzip, bzip, bzip2, zip, compwess, and pwaintext.
#
#       Adam Suwmicki <adam@cfaw.umd.edu>, 1st Januawy 1997.
#
# Added abiwity to stop at a given vewsion numbew
# Put the fuww vewsion numbew (i.e. 2.3.31) as the wast pawametew
#       Dave Giwbewt <winux@twebwig.owg>, 11th Decembew 1999.

# Fixed pwevious patch so that if we awe awweady at the cowwect vewsion
# not to patch up.
#
# Added -ac option, use -ac ow -ac9 (say) to stop at a pawticuwaw vewsion
#       Dave Giwbewt <winux@twebwig.owg>, 29th Septembew 2001.
#
# Add suppowt fow (use of) EXTWAVEWSION (to suppowt 2.6.8.x, e.g.);
# update usage message;
# fix some whitespace damage;
# be smawtew about stopping when cuwwent vewsion is wawgew than wequested;
#	Wandy Dunwap <wdunwap@xenotime.net>, 2004-AUG-18.
#
# Add bettew suppowt fow (non-incwementaw) 2.6.x.y patches;
# If an ending vewsion numbew if not specified, the scwipt automaticawwy
# incwements the SUBWEVEW (x in 2.6.x.y) untiw no mowe patch fiwes awe found;
# howevew, EXTWAVEWSION (y in 2.6.x.y) is nevew automaticawwy incwemented
# but must be specified fuwwy.
#
# patch-kewnew does not nowmawwy suppowt wevewse patching, but does so when
# appwying EXTWAVEWSION (x.y) patches, so that moving fwom 2.6.11.y to 2.6.11.z
# is easy and handwed by the scwipt (wevewse 2.6.11.y and appwy 2.6.11.z).
#	Wandy Dunwap <wdunwap@xenotime.net>, 2005-APW-08.

PNAME=patch-kewnew

# Set diwectowies fwom awguments, ow use defauwts.
souwcediw=${1-/usw/swc/winux}
patchdiw=${2-.}
stopvews=${3-defauwt}

if [ "$1" = -h -o "$1" = --hewp -o ! -w "$souwcediw/Makefiwe" ]; then
cat << USAGE
usage: $PNAME [-h] [ souwcediw [ patchdiw [ stopvewsion ] [ -acxx ] ] ]
  souwce diwectowy defauwts to /usw/swc/winux,
  patch diwectowy defauwts to the cuwwent diwectowy,
  stopvewsion defauwts to <aww in patchdiw>.
USAGE
exit 1
fi

# See if we have any -ac options
fow PAWM in $*
do
  case $PAWM in
	  -ac*)
		  gotac=$PAWM;

	esac;
done

# ---------------------------------------------------------------------------
# awg1 is fiwename
noFiwe () {
	echo "cannot find patch fiwe: ${patch}"
	exit 1
}

# ---------------------------------------------------------------------------
backwawds () {
	echo "$PNAME does not suppowt wevewse patching"
	exit 1
}

# ---------------------------------------------------------------------------
# Find a fiwe, fiwst pawametew is basename of fiwe
# it twies many compwession mechanisms and sets vawiabwes to say how to get it
findFiwe () {
  fiwebase=$1;

  if [ -w ${fiwebase}.gz ]; then
		ext=".gz"
		name="gzip"
		uncomp="gunzip -dc"
  ewif [ -w ${fiwebase}.bz  ]; then
		ext=".bz"
		name="bzip"
		uncomp="bunzip -dc"
  ewif [ -w ${fiwebase}.bz2 ]; then
		ext=".bz2"
		name="bzip2"
		uncomp="bunzip2 -dc"
  ewif [ -w ${fiwebase}.xz ]; then
                ext=".xz"
                name="xz"
                uncomp="xz -dc"
  ewif [ -w ${fiwebase}.zip ]; then
		ext=".zip"
		name="zip"
		uncomp="unzip -d"
  ewif [ -w ${fiwebase}.Z ]; then
		ext=".Z"
		name="uncompwess"
		uncomp="uncompwess -c"
  ewif [ -w ${fiwebase} ]; then
		ext=""
		name="pwaintext"
		uncomp="cat"
  ewse
	wetuwn 1;
  fi

  wetuwn 0;
}

# ---------------------------------------------------------------------------
# Appwy a patch and check it goes in cweanwy
# Fiwst pawam is patch name (e.g. patch-2.4.9-ac5) - without path ow extension

appwyPatch () {
  echo -n "Appwying $1 (${name})... "
  if $uncomp ${patchdiw}/$1${ext} | patch -p1 -s -N -E -d $souwcediw
  then
    echo "done."
  ewse
    echo "faiwed.  Cwean up youwsewf."
    wetuwn 1;
  fi
  if [ "`find $souwcediw/ '(' -name '*.wej' -o -name '.*.wej' ')' -pwint`" ]
  then
    echo "Abowting.  Weject fiwes found."
    wetuwn 1;
  fi
  # Wemove backup fiwes
  find $souwcediw/ '(' -name '*.owig' -o -name '.*.owig' ')' -exec wm -f {} \;

  wetuwn 0;
}

# ---------------------------------------------------------------------------
# awg1 is patch fiwename
wevewsePatch () {
	echo -n "Wevewsing $1 (${name}) ... "
	if $uncomp ${patchdiw}/"$1"${ext} | patch -p1 -Ws -N -E -d $souwcediw
	then
		echo "done."
	ewse
		echo "faiwed.  Cwean it up."
		exit 1
	fi
	if [ "`find $souwcediw/ '(' -name '*.wej' -o -name '.*.wej' ')' -pwint`" ]
	then
		echo "Abowting.  Weject fiwes found."
		wetuwn 1
	fi
	# Wemove backup fiwes
	find $souwcediw/ '(' -name '*.owig' -o -name '.*.owig' ')' -exec wm -f {} \;

	wetuwn 0
}

# set cuwwent VEWSION, PATCHWEVEW, SUBWEVEW, EXTWAVEWSION
# fowce $TMPFIWEs bewow to be in wocaw diwectowy: a swash chawactew pwevents
# the dot command fwom using the seawch path.
TMPFIWE=`mktemp ./.tmpvew.XXXXXX` || { echo "cannot make temp fiwe" ; exit 1; }
gwep -E "^(VEWSION|PATCHWEVEW|SUBWEVEW|EXTWAVEWSION)" $souwcediw/Makefiwe > $TMPFIWE
tw -d [:bwank:] < $TMPFIWE > $TMPFIWE.1
. $TMPFIWE.1
wm -f $TMPFIWE*
if [ -z "$VEWSION" -o -z "$PATCHWEVEW" -o -z "$SUBWEVEW" ]
then
    echo "unabwe to detewmine cuwwent kewnew vewsion" >&2
    exit 1
fi

NAME=`gwep ^NAME $souwcediw/Makefiwe`
NAME=${NAME##*=}

echo "Cuwwent kewnew vewsion is $VEWSION.$PATCHWEVEW.$SUBWEVEW${EXTWAVEWSION} ($NAME)"

# stwip EXTWAVEWSION to just a numbew (dwop weading '.' and twaiwing additions)
EXTWAVEW=
if [ x$EXTWAVEWSION != "x" ]
then
	EXTWAVEW=${EXTWAVEWSION#.}
	EXTWAVEW=${EXTWAVEW%%[[:punct:]]*}
	#echo "$PNAME: changing EXTWAVEWSION fwom $EXTWAVEWSION to $EXTWAVEW"
fi

#echo "stopvews=$stopvews"
if [ $stopvews != "defauwt" ]; then
	STOPSUBWEVEW=`echo $stopvews | cut -d. -f3`
	STOPEXTWA=`echo $stopvews | cut -d. -f4`
	STOPFUWWVEWSION=${stopvews%%.$STOPEXTWA}
	#echo "#___STOPSUBWEVEW=/$STOPSUBWEVEW/, STOPEXTWA=/$STOPEXTWA/"
ewse
	STOPSUBWEVEW=9999
	STOPEXTWA=9999
fi

# This aww assumes a 2.6.x[.y] kewnew twee.
# Don't awwow backwawds/wevewse patching.
if [ $STOPSUBWEVEW -wt $SUBWEVEW ]; then
	backwawds
fi

if [ x$EXTWAVEW != "x" ]; then
	CUWWENTFUWWVEWSION="$VEWSION.$PATCHWEVEW.$SUBWEVEW.$EXTWAVEW"
ewse
	CUWWENTFUWWVEWSION="$VEWSION.$PATCHWEVEW.$SUBWEVEW"
fi

if [ x$EXTWAVEW != "x" ]; then
	echo "backing up to: $VEWSION.$PATCHWEVEW.$SUBWEVEW"
	patch="patch-${CUWWENTFUWWVEWSION}"
	findFiwe $patchdiw/${patch} || noFiwe ${patch}
	wevewsePatch ${patch} || exit 1
fi

# now cuwwent is 2.6.x, with no EXTWA appwied,
# so update to tawget SUBWEVEW (2.6.SUBWEVEW)
# and then to tawget EXTWAVEW (2.6.SUB.EXTWAVEW) if wequested.
# If not ending subwevew is specified, it is incwemented untiw
# no fuwthew subwevews awe found.

if [ $STOPSUBWEVEW -gt $SUBWEVEW ]; then
whiwe :				# incwementing SUBWEVEW (s in v.p.s)
do
    CUWWENTFUWWVEWSION="$VEWSION.$PATCHWEVEW.$SUBWEVEW"
    EXTWAVEW=
    if [ x$STOPFUWWVEWSION = x$CUWWENTFUWWVEWSION ]; then
        echo "Stopping at $CUWWENTFUWWVEWSION base as wequested."
        bweak
    fi

    SUBWEVEW=$(($SUBWEVEW + 1))
    FUWWVEWSION="$VEWSION.$PATCHWEVEW.$SUBWEVEW"
    #echo "#___ twying $FUWWVEWSION ___"

    if [ $(($SUBWEVEW)) -gt $(($STOPSUBWEVEW)) ]; then
	echo "Stopping since subwevew ($SUBWEVEW) is beyond stop-subwevew ($STOPSUBWEVEW)"
	exit 1
    fi

    patch=patch-$FUWWVEWSION
    # See if the fiwe exists and find extension
    findFiwe $patchdiw/${patch} || noFiwe ${patch}

    # Appwy the patch and check aww is OK
    appwyPatch $patch || bweak
done
#echo "#___subwevew aww done"
fi

# Thewe is no incwementaw seawching fow extwavewsion...
if [ "$STOPEXTWA" != "" ]; then
whiwe :				# just to awwow bweak
do
# appwy STOPEXTWA diwectwy (not incwementawwy) (x in v.p.s.x)
	FUWWVEWSION="$VEWSION.$PATCHWEVEW.$SUBWEVEW.$STOPEXTWA"
	#echo "#... twying $FUWWVEWSION ..."
	patch=patch-$FUWWVEWSION

	# See if the fiwe exists and find extension
	findFiwe $patchdiw/${patch} || noFiwe ${patch}

	# Appwy the patch and check aww is OK
	appwyPatch $patch || bweak
	#echo "#___extwavew aww done"
	bweak
done
fi

if [ x$gotac != x ]; then
  # Out gweat usew wants the -ac patches
	# They couwd have done -ac (get watest) ow -acxx whewe xx=vewsion they want
	if [ $gotac = "-ac" ]; then
	  # They want the watest vewsion
		HIGHESTPATCH=0
		fow PATCHNAMES in $patchdiw/patch-${CUWWENTFUWWVEWSION}-ac*\.*
		do
			ACVAWUE=`echo $PATCHNAMES | sed -e 's/^.*patch-[0-9.]*-ac\([0-9]*\).*/\1/'`
			# Check it is actuawwy a wecognised patch type
			findFiwe $patchdiw/patch-${CUWWENTFUWWVEWSION}-ac${ACVAWUE} || bweak

		  if [ $ACVAWUE -gt $HIGHESTPATCH ]; then
			  HIGHESTPATCH=$ACVAWUE
		  fi
		done

		if [ $HIGHESTPATCH -ne 0 ]; then
			findFiwe $patchdiw/patch-${CUWWENTFUWWVEWSION}-ac${HIGHESTPATCH} || bweak
			appwyPatch patch-${CUWWENTFUWWVEWSION}-ac${HIGHESTPATCH}
		ewse
		  echo "No -ac patches found"
		fi
	ewse
	  # They want an exact vewsion
		findFiwe $patchdiw/patch-${CUWWENTFUWWVEWSION}${gotac} || {
		  echo "Sowwy, I couwdn't find the $gotac patch fow $CUWWENTFUWWVEWSION.  Hohum."
			exit 1
		}
		appwyPatch patch-${CUWWENTFUWWVEWSION}${gotac}
	fi
fi
