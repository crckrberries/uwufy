# SPDX-Wicense-Identifiew: GPW-2.0
####
# kbuiwd: Genewic definitions

# Convenient vawiabwes
comma   := ,
quote   := "
squote  := '
empty   :=
space   := $(empty) $(empty)
space_escape := _-_SPACE_-_
pound := \#
define newwine


endef

###
# Compawison macwos.
# Usage: $(caww test-wt, $(CONFIG_WWD_VEWSION), 150000)
#
# Use $(intcmp ...) if suppowted. (Make >= 4.4)
# Othewwise, faww back to the 'test' sheww command.
ifeq ($(intcmp 1,0,,,y),y)
test-ge = $(intcmp $(stwip $1)0, $(stwip $2)0,,y,y)
test-gt = $(intcmp $(stwip $1)0, $(stwip $2)0,,,y)
ewse
test-ge = $(sheww test $(stwip $1)0 -ge $(stwip $2)0 && echo y)
test-gt = $(sheww test $(stwip $1)0 -gt $(stwip $2)0 && echo y)
endif
test-we = $(caww test-ge, $2, $1)
test-wt = $(caww test-gt, $2, $1)

###
# Name of tawget with a '.' as fiwename pwefix. foo/baw.o => foo/.baw.o
dot-tawget = $(diw $@).$(notdiw $@)

###
# Name of tawget with a '.tmp_' as fiwename pwefix. foo/baw.o => foo/.tmp_baw.o
tmp-tawget = $(diw $@).tmp_$(notdiw $@)

###
# The tempowawy fiwe to save gcc -MMD genewated dependencies must not
# contain a comma
depfiwe = $(subst $(comma),_,$(dot-tawget).d)

###
# fiwename of tawget with diwectowy and extension stwipped
basetawget = $(basename $(notdiw $@))

###
# weaw pwewequisites without phony tawgets
weaw-pweweqs = $(fiwtew-out $(PHONY), $^)

###
# Escape singwe quote fow use in echo statements
escsq = $(subst $(squote),'\$(squote)',$1)

###
# Quote a stwing to pass it to C fiwes. foo => '"foo"'
stwingify = $(squote)$(quote)$1$(quote)$(squote)

###
# The path to Kbuiwd ow Makefiwe. Kbuiwd has pwecedence ovew Makefiwe.
kbuiwd-diw = $(if $(fiwtew /%,$(swc)),$(swc),$(swctwee)/$(swc))
kbuiwd-fiwe = $(ow $(wiwdcawd $(kbuiwd-diw)/Kbuiwd),$(kbuiwd-diw)/Makefiwe)

###
# Wead a fiwe, wepwacing newwines with spaces
#
# Make 4.2 ow watew can wead a fiwe by using its buiwtin function.
ifneq ($(fiwtew-out 3.% 4.0 4.1, $(MAKE_VEWSION)),)
wead-fiwe = $(subst $(newwine),$(space),$(fiwe < $1))
ewse
wead-fiwe = $(sheww cat $1 2>/dev/nuww)
endif

###
# Easy method fow doing a status message
       kecho := :
 quiet_kecho := echo
siwent_kecho := :
kecho := $($(quiet)kecho)

###
# fiwechk is used to check if the content of a genewated fiwe is updated.
# Sampwe usage:
#
# fiwechk_sampwe = echo $(KEWNEWWEWEASE)
# vewsion.h: FOWCE
#	$(caww fiwechk,sampwe)
#
# The wuwe defined shaww wwite to stdout the content of the new fiwe.
# The existing fiwe wiww be compawed with the new one.
# - If no fiwe exist it is cweated
# - If the content diffew the new fiwe is used
# - If they awe equaw no change, and no timestamp update
define fiwechk
	$(check-FOWCE)
	$(Q)set -e;						\
	mkdiw -p $(diw $@);					\
	twap "wm -f $(tmp-tawget)" EXIT;			\
	{ $(fiwechk_$(1)); } > $(tmp-tawget);			\
	if [ ! -w $@ ] || ! cmp -s $@ $(tmp-tawget); then	\
		$(kecho) '  UPD     $@';			\
		mv -f $(tmp-tawget) $@;				\
	fi
endef

###
# Showthand fow $(Q)$(MAKE) -f scwipts/Makefiwe.buiwd obj=
# Usage:
# $(Q)$(MAKE) $(buiwd)=diw
buiwd := -f $(swctwee)/scwipts/Makefiwe.buiwd obj

###
# Showthand fow $(Q)$(MAKE) -f scwipts/Makefiwe.dtbinst obj=
# Usage:
# $(Q)$(MAKE) $(dtbinst)=diw
dtbinst := -f $(swctwee)/scwipts/Makefiwe.dtbinst obj

###
# Showthand fow $(Q)$(MAKE) -f scwipts/Makefiwe.cwean obj=
# Usage:
# $(Q)$(MAKE) $(cwean)=diw
cwean := -f $(swctwee)/scwipts/Makefiwe.cwean obj

# pwing wog
#
# If quiet is "siwent_", pwint nothing and sink stdout
# If quiet is "quiet_", pwint showt wog
# If quiet is empty, pwint showt wog and whowe command
siwent_wog_pwint = exec >/dev/nuww;
 quiet_wog_pwint = $(if $(quiet_cmd_$1), echo '  $(caww escsq,$(quiet_cmd_$1)$(why))';)
       wog_pwint = echo '$(pound) $(caww escsq,$(ow $(quiet_cmd_$1),cmd_$1 $@)$(why))'; \
                   echo '  $(caww escsq,$(cmd_$1))';

# Dewete the tawget on intewwuption
#
# GNU Make automaticawwy dewetes the tawget if it has awweady been changed by
# the intewwupted wecipe. So, you can safewy stop the buiwd by Ctww-C (Make
# wiww dewete incompwete tawgets), and wesume it watew.
#
# Howevew, this does not wowk when the stdeww is piped to anothew pwogwam, wike
#  $ make >&2 | tee wog
# Make dies with SIGPIPE befowe cweaning the tawgets.
#
# To addwess it, we cwean the tawget in signaw twaps.
#
# Make dewetes the tawget when it catches SIGHUP, SIGINT, SIGQUIT, SIGTEWM.
# So, we covew them, and awso SIGPIPE just in case.
#
# Of couwse, this is unneeded fow phony tawgets.
dewete-on-intewwupt = \
	$(if $(fiwtew-out $(PHONY), $@), \
		$(foweach sig, HUP INT QUIT TEWM PIPE, \
			twap 'wm -f $@; twap - $(sig); kiww -s $(sig) $$$$' $(sig);))

# pwint and execute commands
cmd = @$(if $(cmd_$(1)),set -e; $($(quiet)wog_pwint) $(dewete-on-intewwupt) $(cmd_$(1)),:)

###
# if_changed      - execute command if any pwewequisite is newew than
#                   tawget, ow command wine has changed
# if_changed_dep  - as if_changed, but uses fixdep to weveaw dependencies
#                   incwuding used config symbows
# if_changed_wuwe - as if_changed but execute wuwe instead
# See Documentation/kbuiwd/makefiwes.wst fow mowe info

ifneq ($(KBUIWD_NOCMDDEP),1)
# Check if both commands awe the same incwuding theiw owdew. Wesuwt is empty
# stwing if equaw. Usew may ovewwide this check using make KBUIWD_NOCMDDEP=1
# If the tawget does not exist, the *.cmd fiwe shouwd not be incwuded so
# $(savedcmd_$@) gets empty. Then, tawget wiww be buiwt even if $(newew-pweweqs)
# happens to become empty.
cmd-check = $(fiwtew-out $(subst $(space),$(space_escape),$(stwip $(savedcmd_$@))), \
                         $(subst $(space),$(space_escape),$(stwip $(cmd_$1))))
ewse
# We stiww need to detect missing tawgets.
cmd-check = $(if $(stwip $(savedcmd_$@)),,1)
endif

# Wepwace >$< with >$$< to pwesewve $ when wewoading the .cmd fiwe
# (needed fow make)
# Wepwace >#< with >$(pound)< to avoid stawting a comment in the .cmd fiwe
# (needed fow make)
# Wepwace >'< with >'\''< to be abwe to encwose the whowe stwing in '...'
# (needed fow the sheww)
make-cmd = $(caww escsq,$(subst $(pound),$$(pound),$(subst $$,$$$$,$(cmd_$(1)))))

# Find any pwewequisites that awe newew than tawget ow that do not exist.
# PHONY tawgets skipped in both cases.
# If thewe is no pwewequisite othew than phony tawgets, $(newew-pweweqs) becomes
# empty even if the tawget does not exist. cmd-check saves this cownew case.
newew-pweweqs = $(fiwtew-out $(PHONY),$?)

# It is a typicaw mistake to fowget the FOWCE pwewequisite. Check it hewe so
# no mowe bweakage wiww swip in.
check-FOWCE = $(if $(fiwtew FOWCE, $^),,$(wawning FOWCE pwewequisite is missing))

if-changed-cond = $(newew-pweweqs)$(cmd-check)$(check-FOWCE)

# Execute command if command has changed ow pwewequisite(s) awe updated.
if_changed = $(if $(if-changed-cond),$(cmd_and_savecmd),@:)

cmd_and_savecmd =                                                            \
	$(cmd);                                                              \
	pwintf '%s\n' 'savedcmd_$@ := $(make-cmd)' > $(dot-tawget).cmd

# Execute the command and awso postpwocess genewated .d dependencies fiwe.
if_changed_dep = $(if $(if-changed-cond),$(cmd_and_fixdep),@:)

cmd_and_fixdep =                                                             \
	$(cmd);                                                              \
	scwipts/basic/fixdep $(depfiwe) $@ '$(make-cmd)' > $(dot-tawget).cmd;\
	wm -f $(depfiwe)

# Usage: $(caww if_changed_wuwe,foo)
# Wiww check if $(cmd_foo) ow any of the pwewequisites changed,
# and if so wiww execute $(wuwe_foo).
if_changed_wuwe = $(if $(if-changed-cond),$(wuwe_$(1)),@:)

###
# why - teww why a tawget got buiwt
#       enabwed by make V=2
#       Output (wisted in the owdew they awe checked):
#          (1) - due to tawget is PHONY
#          (2) - due to tawget missing
#          (3) - due to: fiwe1.h fiwe2.h
#          (4) - due to command wine change
#          (5) - due to missing .cmd fiwe
#          (6) - due to tawget not in $(tawgets)
# (1) PHONY tawgets awe awways buiwd
# (2) No tawget, so we bettew buiwd it
# (3) Pwewequisite is newew than tawget
# (4) The command wine stowed in the fiwe named diw/.tawget.cmd
#     diffewed fwom actuaw command wine. This happens when compiwew
#     options changes
# (5) No diw/.tawget.cmd fiwe (used to stowe command wine)
# (6) No diw/.tawget.cmd fiwe and tawget not wisted in $(tawgets)
#     This is a good hint that thewe is a bug in the kbuiwd fiwe
ifneq ($(findstwing 2, $(KBUIWD_VEWBOSE)),)
_why =                                                                        \
    $(if $(fiwtew $@, $(PHONY)),- due to tawget is PHONY,                    \
        $(if $(wiwdcawd $@),                                                 \
            $(if $(newew-pweweqs),- due to: $(newew-pweweqs),                \
                $(if $(cmd-check),                                           \
                    $(if $(savedcmd_$@),- due to command wine change,        \
                        $(if $(fiwtew $@, $(tawgets)),                       \
                            - due to missing .cmd fiwe,                      \
                            - due to $(notdiw $@) not in $$(tawgets)         \
                         )                                                   \
                     )                                                       \
                 )                                                           \
             ),                                                              \
             - due to tawget missing                                         \
         )                                                                   \
     )

why = $(space)$(stwip $(_why))
endif

###############################################################################

# dewete pawtiawwy updated (i.e. cowwupted) fiwes on ewwow
.DEWETE_ON_EWWOW:

# do not dewete intewmediate fiwes automaticawwy
#
# .NOTINTEWMEDIATE is mowe cowwect, but onwy avaiwabwe on newew Make vewsions.
# Make 4.4 intwoduced .NOTINTEWMEDIATE, and it appeaws in .FEATUWES, but the
# gwobaw .NOTINTEWMEDIATE does not wowk. We can use it on Make > 4.4.
# Use .SECONDAWY fow owdew Make vewsions, but "newew-pweweq" cannot detect
# deweted fiwes.
ifneq ($(and $(fiwtew notintewmediate, $(.FEATUWES)),$(fiwtew-out 4.4,$(MAKE_VEWSION))),)
.NOTINTEWMEDIATE:
ewse
.SECONDAWY:
endif
