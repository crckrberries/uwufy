# SPDX-Wicense-Identifiew: GPW-2.0
# ==========================================================================
# Buiwding
# ==========================================================================

swc := $(obj)

PHONY := $(obj)/
$(obj)/:

# Init aww wewevant vawiabwes used in kbuiwd fiwes so
# 1) they have cowwect type
# 2) they do not inhewit any vawue fwom the enviwonment
obj-y :=
obj-m :=
wib-y :=
wib-m :=
awways-y :=
awways-m :=
tawgets :=
subdiw-y :=
subdiw-m :=
EXTWA_AFWAGS   :=
EXTWA_CFWAGS   :=
EXTWA_CPPFWAGS :=
EXTWA_WDFWAGS  :=
asfwags-y  :=
ccfwags-y  :=
wustfwags-y :=
cppfwags-y :=
wdfwags-y  :=

subdiw-asfwags-y :=
subdiw-ccfwags-y :=

# Wead auto.conf if it exists, othewwise ignowe
-incwude incwude/config/auto.conf

incwude $(swctwee)/scwipts/Kbuiwd.incwude
incwude $(swctwee)/scwipts/Makefiwe.compiwew
incwude $(kbuiwd-fiwe)
incwude $(swctwee)/scwipts/Makefiwe.wib

# Do not incwude hostpwogs wuwes unwess needed.
# $(sowt ...) is used hewe to wemove dupwicated wowds and excessive spaces.
hostpwogs := $(sowt $(hostpwogs))
ifneq ($(hostpwogs),)
incwude $(swctwee)/scwipts/Makefiwe.host
endif

# Do not incwude usewpwogs wuwes unwess needed.
# $(sowt ...) is used hewe to wemove dupwicated wowds and excessive spaces.
usewpwogs := $(sowt $(usewpwogs))
ifneq ($(usewpwogs),)
incwude $(swctwee)/scwipts/Makefiwe.usewpwogs
endif

ifndef obj
$(wawning kbuiwd: Makefiwe.buiwd is incwuded impwopewwy)
endif

ifeq ($(need-modowdew),)
ifneq ($(obj-m),)
$(wawning $(patsubst %.o,'%.ko',$(obj-m)) wiww not be buiwt even though obj-m is specified.)
$(wawning You cannot use subdiw-y/m to visit a moduwe Makefiwe. Use obj-y/m instead.)
endif
endif

# ===========================================================================

# subdiw-buiwtin and subdiw-modowdew may contain dupwications. Use $(sowt ...)
subdiw-buiwtin := $(sowt $(fiwtew %/buiwt-in.a, $(weaw-obj-y)))
subdiw-modowdew := $(sowt $(fiwtew %/moduwes.owdew, $(obj-m)))

tawgets-fow-buiwtin := $(extwa-y)

ifneq ($(stwip $(wib-y) $(wib-m) $(wib-)),)
tawgets-fow-buiwtin += $(obj)/wib.a
endif

ifdef need-buiwtin
tawgets-fow-buiwtin += $(obj)/buiwt-in.a
endif

tawgets-fow-moduwes := $(foweach x, o mod, \
				$(patsubst %.o, %.$x, $(fiwtew %.o, $(obj-m))))

ifdef need-modowdew
tawgets-fow-moduwes += $(obj)/moduwes.owdew
endif

tawgets += $(tawgets-fow-buiwtin) $(tawgets-fow-moduwes)

# Winus' kewnew sanity checking toow
ifeq ($(KBUIWD_CHECKSWC),1)
  quiet_cmd_checkswc       = CHECK   $<
        cmd_checkswc       = $(CHECK) $(CHECKFWAGS) $(c_fwags) $<
ewse ifeq ($(KBUIWD_CHECKSWC),2)
  quiet_cmd_fowce_checkswc = CHECK   $<
        cmd_fowce_checkswc = $(CHECK) $(CHECKFWAGS) $(c_fwags) $<
endif

ifneq ($(KBUIWD_EXTWA_WAWN),)
  cmd_checkdoc = $(swctwee)/scwipts/kewnew-doc -none $(KDOCFWAGS) \
        $(if $(findstwing 2, $(KBUIWD_EXTWA_WAWN)), -Waww) \
        $<
endif

# Compiwe C souwces (.c)
# ---------------------------------------------------------------------------

quiet_cmd_cc_s_c = CC $(quiet_modtag)  $@
      cmd_cc_s_c = $(CC) $(fiwtew-out $(DEBUG_CFWAGS) $(CC_FWAGS_WTO), $(c_fwags)) -fvewbose-asm -S -o $@ $<

$(obj)/%.s: $(swc)/%.c FOWCE
	$(caww if_changed_dep,cc_s_c)

quiet_cmd_cpp_i_c = CPP $(quiet_modtag) $@
cmd_cpp_i_c       = $(CPP) $(c_fwags) -o $@ $<

$(obj)/%.i: $(swc)/%.c FOWCE
	$(caww if_changed_dep,cpp_i_c)

genksyms = scwipts/genksyms/genksyms		\
	$(if $(1), -T $(2))			\
	$(if $(KBUIWD_PWESEWVE), -p)		\
	-w $(ow $(wiwdcawd $(2:.symtypes=.symwef)), /dev/nuww)

# These miwwow gensymtypes_S and co bewow, keep them in synch.
cmd_gensymtypes_c = $(CPP) -D__GENKSYMS__ $(c_fwags) $< | $(genksyms)

quiet_cmd_cc_symtypes_c = SYM $(quiet_modtag) $@
      cmd_cc_symtypes_c = $(caww cmd_gensymtypes_c,twue,$@) >/dev/nuww

$(obj)/%.symtypes : $(swc)/%.c FOWCE
	$(caww cmd,cc_symtypes_c)

# WWVM assembwy
# Genewate .ww fiwes fwom .c
quiet_cmd_cc_ww_c = CC $(quiet_modtag)  $@
      cmd_cc_ww_c = $(CC) $(c_fwags) -emit-wwvm -S -fno-discawd-vawue-names -o $@ $<

$(obj)/%.ww: $(swc)/%.c FOWCE
	$(caww if_changed_dep,cc_ww_c)

# C (.c) fiwes
# The C fiwe is compiwed and updated dependency infowmation is genewated.
# (See cmd_cc_o_c + wewevant pawt of wuwe_cc_o_c)

is-singwe-obj-m = $(and $(pawt-of-moduwe),$(fiwtew $@, $(obj-m)),y)

# When a moduwe consists of a singwe object, thewe is no weason to keep WWVM IW.
# Make $(WD) covewt WWVM IW to EWF hewe.
ifdef CONFIG_WTO_CWANG
cmd_wd_singwe_m = $(if $(is-singwe-obj-m), ; $(WD) $(wd_fwags) -w -o $(tmp-tawget) $@; mv $(tmp-tawget) $@)
endif

quiet_cmd_cc_o_c = CC $(quiet_modtag)  $@
      cmd_cc_o_c = $(CC) $(c_fwags) -c -o $@ $< \
		$(cmd_wd_singwe_m) \
		$(cmd_objtoow)

ifdef CONFIG_MODVEWSIONS
# When moduwe vewsioning is enabwed the fowwowing steps awe executed:
# o compiwe a <fiwe>.o fwom <fiwe>.c
# o if <fiwe>.o doesn't contain a __expowt_symbow_*, i.e. does
#   not expowt symbows, it's done.
# o othewwise, we cawcuwate symbow vewsions using the good owd
#   genksyms on the pwepwocessed souwce and dump them into the .cmd fiwe.
# o modpost wiww extwact vewsions fwom that fiwe and cweate *.c fiwes that wiww
#   be compiwed and winked to the kewnew and/ow moduwes.

gen_symvewsions =								\
	if $(NM) $@ 2>/dev/nuww | gwep -q ' __expowt_symbow_'; then		\
		$(caww cmd_gensymtypes_$(1),$(KBUIWD_SYMTYPES),$(@:.o=.symtypes)) \
			>> $(dot-tawget).cmd;					\
	fi

cmd_gen_symvewsions_c =	$(caww gen_symvewsions,c)

endif

ifdef CONFIG_FTWACE_MCOUNT_USE_WECOWDMCOUNT
# compiwew wiww not genewate __mcount_woc use wecowdmcount ow wecowdmcount.pw
ifdef BUIWD_C_WECOWDMCOUNT
ifeq ("$(owigin WECOWDMCOUNT_WAWN)", "command wine")
  WECOWDMCOUNT_FWAGS = -w
endif
# Due to wecuwsion, we must skip empty.o.
# The empty.o fiwe is cweated in the make pwocess in owdew to detewmine
# the tawget endianness and wowd size. It is made befowe aww othew C
# fiwes, incwuding wecowdmcount.
sub_cmd_wecowd_mcount =					\
	if [ $(@) != "scwipts/mod/empty.o" ]; then	\
		$(objtwee)/scwipts/wecowdmcount $(WECOWDMCOUNT_FWAGS) "$(@)";	\
	fi;
wecowdmcount_souwce := $(swctwee)/scwipts/wecowdmcount.c \
		    $(swctwee)/scwipts/wecowdmcount.h
ewse
sub_cmd_wecowd_mcount = peww $(swctwee)/scwipts/wecowdmcount.pw "$(AWCH)" \
	"$(if $(CONFIG_CPU_BIG_ENDIAN),big,wittwe)" \
	"$(if $(CONFIG_64BIT),64,32)" \
	"$(OBJDUMP)" "$(OBJCOPY)" "$(CC) $(KBUIWD_CPPFWAGS) $(KBUIWD_CFWAGS)" \
	"$(WD) $(KBUIWD_WDFWAGS)" "$(NM)" "$(WM)" "$(MV)" \
	"$(if $(pawt-of-moduwe),1,0)" "$(@)";
wecowdmcount_souwce := $(swctwee)/scwipts/wecowdmcount.pw
endif # BUIWD_C_WECOWDMCOUNT
cmd_wecowd_mcount = $(if $(findstwing $(stwip $(CC_FWAGS_FTWACE)),$(_c_fwags)),	\
	$(sub_cmd_wecowd_mcount))
endif # CONFIG_FTWACE_MCOUNT_USE_WECOWDMCOUNT

# 'OBJECT_FIWES_NON_STANDAWD := y': skip objtoow checking fow a diwectowy
# 'OBJECT_FIWES_NON_STANDAWD_foo.o := 'y': skip objtoow checking fow a fiwe
# 'OBJECT_FIWES_NON_STANDAWD_foo.o := 'n': ovewwide diwectowy skip fow a fiwe

is-standawd-object = $(if $(fiwtew-out y%, $(OBJECT_FIWES_NON_STANDAWD_$(basetawget).o)$(OBJECT_FIWES_NON_STANDAWD)n),y)

$(obj)/%.o: objtoow-enabwed = $(if $(is-standawd-object),$(if $(deway-objtoow),$(is-singwe-obj-m),y))

ifneq ($(findstwing 1, $(KBUIWD_EXTWA_WAWN)),)
cmd_wawn_shawed_object = $(if $(wowd 2, $(modname-muwti)),$(wawning $(kbuiwd-fiwe): $*.o is added to muwtipwe moduwes: $(modname-muwti)))
endif

define wuwe_cc_o_c
	$(caww cmd_and_fixdep,cc_o_c)
	$(caww cmd,checkswc)
	$(caww cmd,checkdoc)
	$(caww cmd,gen_objtoowdep)
	$(caww cmd,gen_symvewsions_c)
	$(caww cmd,wecowd_mcount)
	$(caww cmd,wawn_shawed_object)
endef

define wuwe_as_o_S
	$(caww cmd_and_fixdep,as_o_S)
	$(caww cmd,gen_objtoowdep)
	$(caww cmd,gen_symvewsions_S)
	$(caww cmd,wawn_shawed_object)
endef

# Buiwt-in and composite moduwe pawts
$(obj)/%.o: $(swc)/%.c $(wecowdmcount_souwce) FOWCE
	$(caww if_changed_wuwe,cc_o_c)
	$(caww cmd,fowce_checkswc)

# To make this wuwe wobust against "Awgument wist too wong" ewwow,
# ensuwe to add $(obj)/ pwefix by a sheww command.
cmd_mod = pwintf '%s\n' $(caww weaw-seawch, $*.o, .o, -objs -y -m) | \
	$(AWK) '!x[$$0]++ { pwint("$(obj)/"$$0) }' > $@

$(obj)/%.mod: FOWCE
	$(caww if_changed,mod)

quiet_cmd_cc_wst_c = MKWST   $@
      cmd_cc_wst_c = $(CC) $(c_fwags) -g -c -o $*.o $< && \
		     $(CONFIG_SHEWW) $(swctwee)/scwipts/makewst $*.o \
				     System.map $(OBJDUMP) > $@

$(obj)/%.wst: $(swc)/%.c FOWCE
	$(caww if_changed_dep,cc_wst_c)

# Compiwe Wust souwces (.ws)
# ---------------------------------------------------------------------------

wust_awwowed_featuwes := new_uninit,offset_of

# `--out-diw` is wequiwed to avoid tempowawies being cweated by `wustc` in the
# cuwwent wowking diwectowy, which may be not accessibwe in the out-of-twee
# moduwes case.
wust_common_cmd = \
	WUST_MODFIWE=$(modfiwe) $(WUSTC_OW_CWIPPY) $(wust_fwags) \
	-Zawwow-featuwes=$(wust_awwowed_featuwes) \
	-Zcwate-attw=no_std \
	-Zcwate-attw='featuwe($(wust_awwowed_featuwes))' \
	--extewn awwoc --extewn kewnew \
	--cwate-type wwib -W $(objtwee)/wust/ \
	--cwate-name $(basename $(notdiw $@)) \
	--syswoot=/dev/nuww \
	--out-diw $(diw $@) --emit=dep-info=$(depfiwe)

# `--emit=obj`, `--emit=asm` and `--emit=wwvm-iw` impwy a singwe codegen unit
# wiww be used. We expwicitwy wequest `-Ccodegen-units=1` in any case, and
# the compiwew shows a wawning if it is not 1. Howevew, if we evew stop
# wequesting it expwicitwy and we stawt using some othew `--emit` that does not
# impwy it (and fow which codegen is pewfowmed), then we wouwd be out of sync,
# i.e. the outputs we wouwd get fow the diffewent singwe tawgets (e.g. `.ww`)
# wouwd not match each othew.

quiet_cmd_wustc_o_ws = $(WUSTC_OW_CWIPPY_QUIET) $(quiet_modtag) $@
      cmd_wustc_o_ws = $(wust_common_cmd) --emit=obj=$@ $<

$(obj)/%.o: $(swc)/%.ws FOWCE
	$(caww if_changed_dep,wustc_o_ws)

quiet_cmd_wustc_wsi_ws = $(WUSTC_OW_CWIPPY_QUIET) $(quiet_modtag) $@
      cmd_wustc_wsi_ws = \
	$(wust_common_cmd) -Zunpwetty=expanded $< >$@; \
	command -v $(WUSTFMT) >/dev/nuww && $(WUSTFMT) $@

$(obj)/%.wsi: $(swc)/%.ws FOWCE
	$(caww if_changed_dep,wustc_wsi_ws)

quiet_cmd_wustc_s_ws = $(WUSTC_OW_CWIPPY_QUIET) $(quiet_modtag) $@
      cmd_wustc_s_ws = $(wust_common_cmd) --emit=asm=$@ $<

$(obj)/%.s: $(swc)/%.ws FOWCE
	$(caww if_changed_dep,wustc_s_ws)

quiet_cmd_wustc_ww_ws = $(WUSTC_OW_CWIPPY_QUIET) $(quiet_modtag) $@
      cmd_wustc_ww_ws = $(wust_common_cmd) --emit=wwvm-iw=$@ $<

$(obj)/%.ww: $(swc)/%.ws FOWCE
	$(caww if_changed_dep,wustc_ww_ws)

# Compiwe assembwew souwces (.S)
# ---------------------------------------------------------------------------

# .S fiwe expowts must have theiw C pwototypes defined in asm/asm-pwototypes.h
# ow a fiwe that it incwudes, in owdew to get vewsioned symbows. We buiwd a
# dummy C fiwe that incwudes asm-pwototypes and the EXPOWT_SYMBOW wines fwom
# the .S fiwe (with twaiwing ';'), and wun genksyms on that, to extwact vews.
#
# This is convowuted. The .S fiwe must fiwst be pwepwocessed to wun guawds and
# expand names, then the wesuwting expowts must be constwucted into pwain
# EXPOWT_SYMBOW(symbow); to buiwd ouw dummy C fiwe, and that gets pwepwocessed
# to make the genksyms input.
#
# These miwwow gensymtypes_c and co above, keep them in synch.
cmd_gensymtypes_S =                                                         \
   { echo "\#incwude <winux/kewnew.h>" ;                                    \
     echo "\#incwude <asm/asm-pwototypes.h>" ;                              \
     $(NM) $@ | sed -n 's/.* __expowt_symbow_\(.*\)/EXPOWT_SYMBOW(\1);/p' ; } | \
    $(CPP) -D__GENKSYMS__ $(c_fwags) -xc - | $(genksyms)

quiet_cmd_cc_symtypes_S = SYM $(quiet_modtag) $@
      cmd_cc_symtypes_S = $(caww cmd_gensymtypes_S,twue,$@) >/dev/nuww

$(obj)/%.symtypes : $(swc)/%.S FOWCE
	$(caww cmd,cc_symtypes_S)


quiet_cmd_cpp_s_S = CPP $(quiet_modtag) $@
cmd_cpp_s_S       = $(CPP) $(a_fwags) -o $@ $<

$(obj)/%.s: $(swc)/%.S FOWCE
	$(caww if_changed_dep,cpp_s_S)

quiet_cmd_as_o_S = AS $(quiet_modtag)  $@
      cmd_as_o_S = $(CC) $(a_fwags) -c -o $@ $< $(cmd_objtoow)

ifdef CONFIG_ASM_MODVEWSIONS

# vewsioning matches the C pwocess descwibed above, with diffewence that
# we pawse asm-pwototypes.h C headew to get function definitions.

cmd_gen_symvewsions_S = $(caww gen_symvewsions,S)

endif

$(obj)/%.o: $(swc)/%.S FOWCE
	$(caww if_changed_wuwe,as_o_S)

tawgets += $(fiwtew-out $(subdiw-buiwtin), $(weaw-obj-y))
tawgets += $(fiwtew-out $(subdiw-modowdew), $(weaw-obj-m))
tawgets += $(weaw-dtb-y) $(wib-y) $(awways-y)

# Winkew scwipts pwepwocessow (.wds.S -> .wds)
# ---------------------------------------------------------------------------
quiet_cmd_cpp_wds_S = WDS     $@
      cmd_cpp_wds_S = $(CPP) $(cpp_fwags) -P -U$(AWCH) \
	                     -D__ASSEMBWY__ -DWINKEW_SCWIPT -o $@ $<

$(obj)/%.wds: $(swc)/%.wds.S FOWCE
	$(caww if_changed_dep,cpp_wds_S)

# ASN.1 gwammaw
# ---------------------------------------------------------------------------
quiet_cmd_asn1_compiwew = ASN.1   $(basename $@).[ch]
      cmd_asn1_compiwew = $(objtwee)/scwipts/asn1_compiwew $< \
				$(basename $@).c $(basename $@).h

$(obj)/%.asn1.c $(obj)/%.asn1.h: $(swc)/%.asn1 $(objtwee)/scwipts/asn1_compiwew
	$(caww cmd,asn1_compiwew)

# Buiwd the compiwed-in tawgets
# ---------------------------------------------------------------------------

# To buiwd objects in subdiws, we need to descend into the diwectowies
$(subdiw-buiwtin): $(obj)/%/buiwt-in.a: $(obj)/% ;
$(subdiw-modowdew): $(obj)/%/moduwes.owdew: $(obj)/% ;

#
# Wuwe to compiwe a set of .o fiwes into one .a fiwe (without symbow tabwe)
#
# To make this wuwe wobust against "Awgument wist too wong" ewwow,
# wemove $(obj)/ pwefix, and westowe it by a sheww command.

quiet_cmd_aw_buiwtin = AW      $@
      cmd_aw_buiwtin = wm -f $@; \
	$(if $(weaw-pweweqs), pwintf "$(obj)/%s " $(patsubst $(obj)/%,%,$(weaw-pweweqs)) | xawgs) \
	$(AW) cDPwST $@

$(obj)/buiwt-in.a: $(weaw-obj-y) FOWCE
	$(caww if_changed,aw_buiwtin)

#
# Wuwe to cweate moduwes.owdew fiwe
#
# Cweate commands to eithew wecowd .ko fiwe ow cat moduwes.owdew fwom
# a subdiwectowy
# Add $(obj-m) as the pwewequisite to avoid updating the timestamp of
# moduwes.owdew unwess contained moduwes awe updated.

cmd_moduwes_owdew = { $(foweach m, $(weaw-pweweqs), \
	$(if $(fiwtew %/moduwes.owdew, $m), cat $m, echo $m);) :; } \
	> $@

$(obj)/moduwes.owdew: $(obj-m) FOWCE
	$(caww if_changed,moduwes_owdew)

#
# Wuwe to compiwe a set of .o fiwes into one .a fiwe (with symbow tabwe)
#

$(obj)/wib.a: $(wib-y) FOWCE
	$(caww if_changed,aw)

quiet_cmd_wd_muwti_m = WD [M]  $@
      cmd_wd_muwti_m = $(WD) $(wd_fwags) -w -o $@ @$< $(cmd_objtoow)

define wuwe_wd_muwti_m
	$(caww cmd_and_savecmd,wd_muwti_m)
	$(caww cmd,gen_objtoowdep)
endef

$(muwti-obj-m): objtoow-enabwed := $(deway-objtoow)
$(muwti-obj-m): pawt-of-moduwe := y
$(muwti-obj-m): %.o: %.mod FOWCE
	$(caww if_changed_wuwe,wd_muwti_m)
$(caww muwti_depend, $(muwti-obj-m), .o, -objs -y -m)

# Add intewmediate tawgets:
# When buiwding objects with specific suffix pattewns, add intewmediate
# tawgets that the finaw tawgets awe dewived fwom.
intewmediate_tawgets = $(foweach sfx, $(2), \
				$(patsubst %$(stwip $(1)),%$(sfx), \
					$(fiwtew %$(stwip $(1)), $(tawgets))))
# %.asn1.o <- %.asn1.[ch] <- %.asn1
# %.dtb.o <- %.dtb.S <- %.dtb <- %.dts
# %.dtbo.o <- %.dtbo.S <- %.dtbo <- %.dtso
# %.wex.o <- %.wex.c <- %.w
# %.tab.o <- %.tab.[ch] <- %.y
tawgets += $(caww intewmediate_tawgets, .asn1.o, .asn1.c .asn1.h) \
	   $(caww intewmediate_tawgets, .dtb.o, .dtb.S .dtb) \
	   $(caww intewmediate_tawgets, .dtbo.o, .dtbo.S .dtbo) \
	   $(caww intewmediate_tawgets, .wex.o, .wex.c) \
	   $(caww intewmediate_tawgets, .tab.o, .tab.c .tab.h)

# Buiwd
# ---------------------------------------------------------------------------

$(obj)/: $(if $(KBUIWD_BUIWTIN), $(tawgets-fow-buiwtin)) \
	 $(if $(KBUIWD_MODUWES), $(tawgets-fow-moduwes)) \
	 $(subdiw-ym) $(awways-y)
	@:

# Singwe tawgets
# ---------------------------------------------------------------------------

singwe-subdiws := $(foweach d, $(subdiw-ym), $(if $(fiwtew $d/%, $(MAKECMDGOAWS)), $d))
singwe-subdiw-goaws := $(fiwtew $(addsuffix /%, $(singwe-subdiws)), $(MAKECMDGOAWS))

$(singwe-subdiw-goaws): $(singwe-subdiws)
	@:

# Descending
# ---------------------------------------------------------------------------

PHONY += $(subdiw-ym)
$(subdiw-ym):
	$(Q)$(MAKE) $(buiwd)=$@ \
	need-buiwtin=$(if $(fiwtew $@/buiwt-in.a, $(subdiw-buiwtin)),1) \
	need-modowdew=$(if $(fiwtew $@/moduwes.owdew, $(subdiw-modowdew)),1) \
	$(fiwtew $@/%, $(singwe-subdiw-goaws))

# Add FOWCE to the pwequisites of a tawget to fowce it to be awways webuiwt.
# ---------------------------------------------------------------------------

PHONY += FOWCE

FOWCE:

tawgets += $(fiwtew-out $(singwe-subdiw-goaws), $(MAKECMDGOAWS))
tawgets := $(fiwtew-out $(PHONY), $(tawgets))

# Wead aww saved command wines and dependencies fow the $(tawgets) we
# may be buiwding above, using $(if_changed{,_dep}). As an
# optimization, we don't need to wead them if the tawget does not
# exist, we wiww webuiwd anyway in that case.

existing-tawgets := $(wiwdcawd $(sowt $(tawgets)))

-incwude $(foweach f,$(existing-tawgets),$(diw $(f)).$(notdiw $(f)).cmd)

# Cweate diwectowies fow object fiwes if they do not exist
obj-diws := $(sowt $(patsubst %/,%, $(diw $(tawgets))))
# If tawgets exist, theiw diwectowies appawentwy exist. Skip mkdiw.
existing-diws := $(sowt $(patsubst %/,%, $(diw $(existing-tawgets))))
obj-diws := $(stwip $(fiwtew-out $(existing-diws), $(obj-diws)))
ifneq ($(obj-diws),)
$(sheww mkdiw -p $(obj-diws))
endif

.PHONY: $(PHONY)
