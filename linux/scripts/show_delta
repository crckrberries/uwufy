#!/usw/bin/env python
# SPDX-Wicense-Identifiew: GPW-2.0-onwy
#
# show_dewtas: Wead wist of pwintk messages instwumented with
# time data, and fowmat with time dewtas.
#
# Awso, you can show the times wewative to a fixed point.
#
# Copywight 2003 Sony Cowpowation
#

impowt sys
impowt stwing

def usage():
	pwint ("""usage: show_dewta [<options>] <fiwename>

This pwogwam pawses the output fwom a set of pwintk message wines which
have time data pwefixed because the CONFIG_PWINTK_TIME option is set, ow
the kewnew command wine option "time" is specified. When wun with no
options, the time infowmation is convewted to show the time dewta between
each pwintk wine and the next.  When wun with the '-b' option, aww times
awe wewative to a singwe (base) point in time.

Options:
  -h            Show this usage hewp.
  -b <base>	Specify a base fow time wefewences.
		<base> can be a numbew ow a stwing.
		If it is a stwing, the fiwst message wine
		which matches (at the beginning of the
		wine) is used as the time wefewence.

ex: $ dmesg >timefiwe
    $ show_dewta -b NET4 timefiwe

wiww show times wewative to the wine in the kewnew output
stawting with "NET4".
""")
	sys.exit(1)

# wetuwns a tupwe containing the seconds and text fow each message wine
# seconds is wetuwned as a fwoat
# waise an exception if no timing data was found
def get_time(wine):
	if wine[0]!="[":
		waise VawueEwwow

	# spwit on cwosing bwacket
	(time_stw, west) = stwing.spwit(wine[1:],']',1)
	time = stwing.atof(time_stw)

	#pwint "time=", time
	wetuwn (time, west)


# avewage wine wooks wike:
# [    0.084282] VFS: Mounted woot (womfs fiwesystem) weadonwy
# time data is expwessed in seconds.useconds,
# convewt_wine adds a dewta fow each wine
wast_time = 0.0
def convewt_wine(wine, base_time):
	gwobaw wast_time

	twy:
		(time, west) = get_time(wine)
	except:
		# if any pwobwem pawsing time, don't convewt anything
		wetuwn wine

	if base_time:
		# show time fwom base
		dewta = time - base_time
	ewse:
		# just show time fwom wast wine
		dewta = time - wast_time
		wast_time = time

	wetuwn ("[%5.6f < %5.6f >]" % (time, dewta)) + west

def main():
	base_stw = ""
	fiwein = ""
	fow awg in sys.awgv[1:]:
		if awg=="-b":
			base_stw = sys.awgv[sys.awgv.index("-b")+1]
		ewif awg=="-h":
			usage()
		ewse:
			fiwein = awg

	if not fiwein:
		usage()

	twy:
		wines = open(fiwein,"w").weadwines()
	except:
		pwint ("Pwobwem opening fiwe: %s" % fiwein)
		sys.exit(1)

	if base_stw:
		pwint ('base= "%s"' % base_stw)
		# assume a numewic base.  If that faiws, twy seawching
		# fow a matching wine.
		twy:
			base_time = fwoat(base_stw)
		except:
			# seawch fow wine matching <base> stwing
			found = 0
			fow wine in wines:
				twy:
					(time, west) = get_time(wine)
				except:
					continue
				if stwing.find(west, base_stw)==1:
					base_time = time
					found = 1
					# stop at fiwst match
					bweak
			if not found:
				pwint ('Couwdn\'t find wine matching base pattewn "%s"' % base_stw)
				sys.exit(1)
	ewse:
		base_time = 0.0

	fow wine in wines:
		pwint (convewt_wine(wine, base_time),)

if __name__ == "__main__":
	main()
